
25002783-e314-proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c68c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800c830  0800c830  0001c830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cca0  0800cca0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800cca0  0800cca0  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cca0  0800cca0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cca0  0800cca0  0001cca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cca4  0800cca4  0001cca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800cca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000260  200001e8  200001e8  000201e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000448  20000448  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015741  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b09  00000000  00000000  00035955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d0  00000000  00000000  00038460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010b8  00000000  00000000  00039630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002329e  00000000  00000000  0003a6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000166f8  00000000  00000000  0005d986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6ea2  00000000  00000000  0007407e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014af20  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060d0  00000000  00000000  0014af70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c814 	.word	0x0800c814

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800c814 	.word	0x0800c814

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <HAL_UARTEx_RxEventCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



	void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000c98:	b5b0      	push	{r4, r5, r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]

		if (huart->Instance == USART2){
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a28      	ldr	r2, [pc, #160]	; (8000d4c <HAL_UARTEx_RxEventCallback+0xb4>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d14a      	bne.n	8000d44 <HAL_UARTEx_RxEventCallback+0xac>


			if (Size==7){
 8000cae:	887b      	ldrh	r3, [r7, #2]
 8000cb0:	2b07      	cmp	r3, #7
 8000cb2:	d109      	bne.n	8000cc8 <HAL_UARTEx_RxEventCallback+0x30>
				memcpy(rxReqBuf,rxdata,Size);
 8000cb4:	887b      	ldrh	r3, [r7, #2]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4925      	ldr	r1, [pc, #148]	; (8000d50 <HAL_UARTEx_RxEventCallback+0xb8>)
 8000cba:	4826      	ldr	r0, [pc, #152]	; (8000d54 <HAL_UARTEx_RxEventCallback+0xbc>)
 8000cbc:	f007 fee2 	bl	8008a84 <memcpy>
				uartmode=2;
 8000cc0:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <HAL_UARTEx_RxEventCallback+0xc0>)
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	701a      	strb	r2, [r3, #0]
 8000cc6:	e030      	b.n	8000d2a <HAL_UARTEx_RxEventCallback+0x92>

			} else if (Size==19) {
 8000cc8:	887b      	ldrh	r3, [r7, #2]
 8000cca:	2b13      	cmp	r3, #19
 8000ccc:	d114      	bne.n	8000cf8 <HAL_UARTEx_RxEventCallback+0x60>

				memcpy(rxSetBuf,rxdata,Size);
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	491f      	ldr	r1, [pc, #124]	; (8000d50 <HAL_UARTEx_RxEventCallback+0xb8>)
 8000cd4:	4821      	ldr	r0, [pc, #132]	; (8000d5c <HAL_UARTEx_RxEventCallback+0xc4>)
 8000cd6:	f007 fed5 	bl	8008a84 <memcpy>


				uartmode=1;
 8000cda:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <HAL_UARTEx_RxEventCallback+0xc0>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
				sliderold = vinadj;
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <HAL_UARTEx_RxEventCallback+0xc8>)
 8000ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce6:	4610      	mov	r0, r2
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f7ff ff65 	bl	8000bb8 <__aeabi_d2uiz>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <HAL_UARTEx_RxEventCallback+0xcc>)
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e018      	b.n	8000d2a <HAL_UARTEx_RxEventCallback+0x92>
			} else {
				globalsize = Size;
 8000cf8:	887b      	ldrh	r3, [r7, #2]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <HAL_UARTEx_RxEventCallback+0xd0>)
 8000cfe:	701a      	strb	r2, [r3, #0]
				uint8_t tBuf[21] = "Unrecognized Command\n";
 8000d00:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <HAL_UARTEx_RxEventCallback+0xd4>)
 8000d02:	f107 0408 	add.w	r4, r7, #8
 8000d06:	461d      	mov	r5, r3
 8000d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d0c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d10:	6020      	str	r0, [r4, #0]
 8000d12:	3404      	adds	r4, #4
 8000d14:	7021      	strb	r1, [r4, #0]
				HAL_UART_Transmit(&huart2, tBuf, 21, 5);
 8000d16:	f107 0108 	add.w	r1, r7, #8
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	2215      	movs	r2, #21
 8000d1e:	4814      	ldr	r0, [pc, #80]	; (8000d70 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000d20:	f006 fca8 	bl	8007674 <HAL_UART_Transmit>
				uartmode=0;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_UARTEx_RxEventCallback+0xc0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
			}


		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_UARTEx_RxEventCallback+0xdc>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <HAL_UARTEx_RxEventCallback+0xdc>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f022 0204 	bic.w	r2, r2, #4
 8000d38:	601a      	str	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxdata, 50);
 8000d3a:	2232      	movs	r2, #50	; 0x32
 8000d3c:	4904      	ldr	r1, [pc, #16]	; (8000d50 <HAL_UARTEx_RxEventCallback+0xb8>)
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000d40:	f007 fe16 	bl	8008970 <HAL_UARTEx_ReceiveToIdle_DMA>

		}
	}
 8000d44:	bf00      	nop
 8000d46:	3720      	adds	r7, #32
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d4c:	40004400 	.word	0x40004400
 8000d50:	2000037c 	.word	0x2000037c
 8000d54:	20000410 	.word	0x20000410
 8000d58:	200003fa 	.word	0x200003fa
 8000d5c:	20000418 	.word	0x20000418
 8000d60:	200003c8 	.word	0x200003c8
 8000d64:	2000042c 	.word	0x2000042c
 8000d68:	2000042b 	.word	0x2000042b
 8000d6c:	0800c830 	.word	0x0800c830
 8000d70:	200002b4 	.word	0x200002b4
 8000d74:	20000338 	.word	0x20000338

08000d78 <buttonpressed>:




/////BUTTTONSSSSSS
void buttonpressed(){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0

              if ((HAL_GetTick() - tickspr) >= 20){
 8000d7c:	f001 fbf4 	bl	8002568 <HAL_GetTick>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4a15      	ldr	r2, [pc, #84]	; (8000dd8 <buttonpressed+0x60>)
 8000d84:	6812      	ldr	r2, [r2, #0]
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	2b13      	cmp	r3, #19
 8000d8a:	f240 81ae 	bls.w	80010ea <buttonpressed+0x372>




          //button A9 middle
            	  	  if(prevA9==1 || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1 ){
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <buttonpressed+0x64>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d008      	beq.n	8000da8 <buttonpressed+0x30>
 8000d96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9e:	f003 fd1d 	bl	80047dc <HAL_GPIO_ReadPin>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d143      	bne.n	8000e30 <buttonpressed+0xb8>
                           if ((prevA9 == 1) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0)){
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <buttonpressed+0x64>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d122      	bne.n	8000df6 <buttonpressed+0x7e>
 8000db0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f003 fd10 	bl	80047dc <HAL_GPIO_ReadPin>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d119      	bne.n	8000df6 <buttonpressed+0x7e>

                        	  if (power==1){
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <buttonpressed+0x68>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d10c      	bne.n	8000de4 <buttonpressed+0x6c>
                        		  power=0;
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <buttonpressed+0x68>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
                        		  resetall();
 8000dd0:	f000 f992 	bl	80010f8 <resetall>
 8000dd4:	e009      	b.n	8000dea <buttonpressed+0x72>
 8000dd6:	bf00      	nop
 8000dd8:	200003b0 	.word	0x200003b0
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000005 	.word	0x20000005
                        	  }
                        	  else {



                        		  power =1;
 8000de4:	4ba5      	ldr	r3, [pc, #660]	; (800107c <buttonpressed+0x304>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
                        	  }

                               tickspr = HAL_GetTick();
 8000dea:	f001 fbbd 	bl	8002568 <HAL_GetTick>
 8000dee:	4603      	mov	r3, r0
 8000df0:	461a      	mov	r2, r3
 8000df2:	4ba3      	ldr	r3, [pc, #652]	; (8001080 <buttonpressed+0x308>)
 8000df4:	601a      	str	r2, [r3, #0]
                           }

                           if ((prevA9 == 0) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1)){
 8000df6:	4ba3      	ldr	r3, [pc, #652]	; (8001084 <buttonpressed+0x30c>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10e      	bne.n	8000e1c <buttonpressed+0xa4>
 8000dfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e06:	f003 fce9 	bl	80047dc <HAL_GPIO_ReadPin>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d105      	bne.n	8000e1c <buttonpressed+0xa4>
                        	   tickspr = HAL_GetTick();
 8000e10:	f001 fbaa 	bl	8002568 <HAL_GetTick>
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b99      	ldr	r3, [pc, #612]	; (8001080 <buttonpressed+0x308>)
 8000e1a:	601a      	str	r2, [r3, #0]
                           }

              prevA9 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000e1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e24:	f003 fcda 	bl	80047dc <HAL_GPIO_ReadPin>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b95      	ldr	r3, [pc, #596]	; (8001084 <buttonpressed+0x30c>)
 8000e2e:	701a      	strb	r2, [r3, #0]




            	  	//button A6 top
if((prevA6==1 || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) && power !=0){
 8000e30:	4b95      	ldr	r3, [pc, #596]	; (8001088 <buttonpressed+0x310>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d007      	beq.n	8000e48 <buttonpressed+0xd0>
 8000e38:	2140      	movs	r1, #64	; 0x40
 8000e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3e:	f003 fccd 	bl	80047dc <HAL_GPIO_ReadPin>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d13e      	bne.n	8000ec6 <buttonpressed+0x14e>
 8000e48:	4b8c      	ldr	r3, [pc, #560]	; (800107c <buttonpressed+0x304>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d03a      	beq.n	8000ec6 <buttonpressed+0x14e>
     if ((prevA6 == 1) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0)){
 8000e50:	4b8d      	ldr	r3, [pc, #564]	; (8001088 <buttonpressed+0x310>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d11b      	bne.n	8000e90 <buttonpressed+0x118>
 8000e58:	2140      	movs	r1, #64	; 0x40
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5e:	f003 fcbd 	bl	80047dc <HAL_GPIO_ReadPin>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d113      	bne.n	8000e90 <buttonpressed+0x118>
      cntA6++;
 8000e68:	4b88      	ldr	r3, [pc, #544]	; (800108c <buttonpressed+0x314>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	4b86      	ldr	r3, [pc, #536]	; (800108c <buttonpressed+0x314>)
 8000e72:	801a      	strh	r2, [r3, #0]


        if (cntA6==1000){
 8000e74:	4b85      	ldr	r3, [pc, #532]	; (800108c <buttonpressed+0x314>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e7c:	d102      	bne.n	8000e84 <buttonpressed+0x10c>
        cntA6=0;
 8000e7e:	4b83      	ldr	r3, [pc, #524]	; (800108c <buttonpressed+0x314>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	801a      	strh	r2, [r3, #0]

        				}


        tickspr = HAL_GetTick();
 8000e84:	f001 fb70 	bl	8002568 <HAL_GetTick>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b7c      	ldr	r3, [pc, #496]	; (8001080 <buttonpressed+0x308>)
 8000e8e:	601a      	str	r2, [r3, #0]
            			}

        if ((prevA6 == 0) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) ){
 8000e90:	4b7d      	ldr	r3, [pc, #500]	; (8001088 <buttonpressed+0x310>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d10d      	bne.n	8000eb4 <buttonpressed+0x13c>
 8000e98:	2140      	movs	r1, #64	; 0x40
 8000e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9e:	f003 fc9d 	bl	80047dc <HAL_GPIO_ReadPin>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d105      	bne.n	8000eb4 <buttonpressed+0x13c>
        	tickspr = HAL_GetTick();
 8000ea8:	f001 fb5e 	bl	8002568 <HAL_GetTick>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b73      	ldr	r3, [pc, #460]	; (8001080 <buttonpressed+0x308>)
 8000eb2:	601a      	str	r2, [r3, #0]
        																}

prevA6 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8000eb4:	2140      	movs	r1, #64	; 0x40
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eba:	f003 fc8f 	bl	80047dc <HAL_GPIO_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b71      	ldr	r3, [pc, #452]	; (8001088 <buttonpressed+0x310>)
 8000ec4:	701a      	strb	r2, [r3, #0]




	//button B9 bottom
if((prevB9==1 || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 1) && power !=0){
 8000ec6:	4b72      	ldr	r3, [pc, #456]	; (8001090 <buttonpressed+0x318>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d007      	beq.n	8000ede <buttonpressed+0x166>
 8000ece:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed2:	4870      	ldr	r0, [pc, #448]	; (8001094 <buttonpressed+0x31c>)
 8000ed4:	f003 fc82 	bl	80047dc <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d13e      	bne.n	8000f5c <buttonpressed+0x1e4>
 8000ede:	4b67      	ldr	r3, [pc, #412]	; (800107c <buttonpressed+0x304>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d03a      	beq.n	8000f5c <buttonpressed+0x1e4>
 if ((prevB9 == 1) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0)){
 8000ee6:	4b6a      	ldr	r3, [pc, #424]	; (8001090 <buttonpressed+0x318>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d11b      	bne.n	8000f26 <buttonpressed+0x1ae>
 8000eee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef2:	4868      	ldr	r0, [pc, #416]	; (8001094 <buttonpressed+0x31c>)
 8000ef4:	f003 fc72 	bl	80047dc <HAL_GPIO_ReadPin>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d113      	bne.n	8000f26 <buttonpressed+0x1ae>
  cntB9++;
 8000efe:	4b66      	ldr	r3, [pc, #408]	; (8001098 <buttonpressed+0x320>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	4b64      	ldr	r3, [pc, #400]	; (8001098 <buttonpressed+0x320>)
 8000f08:	801a      	strh	r2, [r3, #0]


    if (cntB9==1000){
 8000f0a:	4b63      	ldr	r3, [pc, #396]	; (8001098 <buttonpressed+0x320>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f12:	d102      	bne.n	8000f1a <buttonpressed+0x1a2>
    cntB9=0;
 8000f14:	4b60      	ldr	r3, [pc, #384]	; (8001098 <buttonpressed+0x320>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	801a      	strh	r2, [r3, #0]

    				}


    tickspr = HAL_GetTick();
 8000f1a:	f001 fb25 	bl	8002568 <HAL_GetTick>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b57      	ldr	r3, [pc, #348]	; (8001080 <buttonpressed+0x308>)
 8000f24:	601a      	str	r2, [r3, #0]
        			}

    if ((prevB9 == 0) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 1)){
 8000f26:	4b5a      	ldr	r3, [pc, #360]	; (8001090 <buttonpressed+0x318>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10d      	bne.n	8000f4a <buttonpressed+0x1d2>
 8000f2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f32:	4858      	ldr	r0, [pc, #352]	; (8001094 <buttonpressed+0x31c>)
 8000f34:	f003 fc52 	bl	80047dc <HAL_GPIO_ReadPin>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d105      	bne.n	8000f4a <buttonpressed+0x1d2>
    	tickspr = HAL_GetTick();
 8000f3e:	f001 fb13 	bl	8002568 <HAL_GetTick>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b4e      	ldr	r3, [pc, #312]	; (8001080 <buttonpressed+0x308>)
 8000f48:	601a      	str	r2, [r3, #0]
    																}

prevB9 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 8000f4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4e:	4851      	ldr	r0, [pc, #324]	; (8001094 <buttonpressed+0x31c>)
 8000f50:	f003 fc44 	bl	80047dc <HAL_GPIO_ReadPin>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b4d      	ldr	r3, [pc, #308]	; (8001090 <buttonpressed+0x318>)
 8000f5a:	701a      	strb	r2, [r3, #0]



//button B8 left

   if((prevB8==1 || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 1 ) && power !=0){
 8000f5c:	4b4f      	ldr	r3, [pc, #316]	; (800109c <buttonpressed+0x324>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d007      	beq.n	8000f74 <buttonpressed+0x1fc>
 8000f64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f68:	484a      	ldr	r0, [pc, #296]	; (8001094 <buttonpressed+0x31c>)
 8000f6a:	f003 fc37 	bl	80047dc <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d149      	bne.n	8001008 <buttonpressed+0x290>
 8000f74:	4b41      	ldr	r3, [pc, #260]	; (800107c <buttonpressed+0x304>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d045      	beq.n	8001008 <buttonpressed+0x290>
       if ((prevB8 == 1) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0)){
 8000f7c:	4b47      	ldr	r3, [pc, #284]	; (800109c <buttonpressed+0x324>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d124      	bne.n	8000fce <buttonpressed+0x256>
 8000f84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f88:	4842      	ldr	r0, [pc, #264]	; (8001094 <buttonpressed+0x31c>)
 8000f8a:	f003 fc27 	bl	80047dc <HAL_GPIO_ReadPin>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d11c      	bne.n	8000fce <buttonpressed+0x256>
    	   	   	 cntB8++;
 8000f94:	4b42      	ldr	r3, [pc, #264]	; (80010a0 <buttonpressed+0x328>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	4b40      	ldr	r3, [pc, #256]	; (80010a0 <buttonpressed+0x328>)
 8000f9e:	801a      	strh	r2, [r3, #0]
    	   	   	 emmode=0;
 8000fa0:	4b40      	ldr	r3, [pc, #256]	; (80010a4 <buttonpressed+0x32c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
            	 MODE = cntB8%3;
 8000fa6:	4b3e      	ldr	r3, [pc, #248]	; (80010a0 <buttonpressed+0x328>)
 8000fa8:	881a      	ldrh	r2, [r3, #0]
 8000faa:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <buttonpressed+0x330>)
 8000fac:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb0:	0859      	lsrs	r1, r3, #1
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	440b      	add	r3, r1
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b3b      	ldr	r3, [pc, #236]	; (80010ac <buttonpressed+0x334>)
 8000fc0:	701a      	strb	r2, [r3, #0]



            	 //some stuff
            	 tickspr = HAL_GetTick();
 8000fc2:	f001 fad1 	bl	8002568 <HAL_GetTick>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <buttonpressed+0x308>)
 8000fcc:	601a      	str	r2, [r3, #0]
            	  }

 if ((prevB8 == 0) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 1)){
 8000fce:	4b33      	ldr	r3, [pc, #204]	; (800109c <buttonpressed+0x324>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10d      	bne.n	8000ff2 <buttonpressed+0x27a>
 8000fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fda:	482e      	ldr	r0, [pc, #184]	; (8001094 <buttonpressed+0x31c>)
 8000fdc:	f003 fbfe 	bl	80047dc <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d105      	bne.n	8000ff2 <buttonpressed+0x27a>
            tickspr = HAL_GetTick();
 8000fe6:	f001 fabf 	bl	8002568 <HAL_GetTick>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b24      	ldr	r3, [pc, #144]	; (8001080 <buttonpressed+0x308>)
 8000ff0:	601a      	str	r2, [r3, #0]
           }

prevB8 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 8000ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff6:	4827      	ldr	r0, [pc, #156]	; (8001094 <buttonpressed+0x31c>)
 8000ff8:	f003 fbf0 	bl	80047dc <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b26      	ldr	r3, [pc, #152]	; (800109c <buttonpressed+0x324>)
 8001002:	701a      	strb	r2, [r3, #0]
modeset();
 8001004:	f000 fa1e 	bl	8001444 <modeset>




   //button A7 right
if((prevA7==1 || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1 )&& power !=0){
 8001008:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <buttonpressed+0x338>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d007      	beq.n	8001020 <buttonpressed+0x2a8>
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f003 fbe1 	bl	80047dc <HAL_GPIO_ReadPin>
 800101a:	4603      	mov	r3, r0
 800101c:	2b01      	cmp	r3, #1
 800101e:	d164      	bne.n	80010ea <buttonpressed+0x372>
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <buttonpressed+0x304>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d060      	beq.n	80010ea <buttonpressed+0x372>
if ((prevA7 == 1) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0)){
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <buttonpressed+0x338>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d120      	bne.n	8001072 <buttonpressed+0x2fa>
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001036:	f003 fbd1 	bl	80047dc <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d118      	bne.n	8001072 <buttonpressed+0x2fa>

    	 cntA7++;
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <buttonpressed+0x33c>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	b29a      	uxth	r2, r3
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <buttonpressed+0x33c>)
 800104a:	801a      	strh	r2, [r3, #0]
    	 emmode++;
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <buttonpressed+0x32c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	3301      	adds	r3, #1
 8001052:	b2da      	uxtb	r2, r3
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <buttonpressed+0x32c>)
 8001056:	701a      	strb	r2, [r3, #0]
    	 	    		if(emmode==3){
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <buttonpressed+0x32c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b03      	cmp	r3, #3
 800105e:	d102      	bne.n	8001066 <buttonpressed+0x2ee>
    	 	    			emmode=0;
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <buttonpressed+0x32c>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
    	 	    		}
    	 tickspr = HAL_GetTick();
 8001066:	f001 fa7f 	bl	8002568 <HAL_GetTick>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <buttonpressed+0x308>)
 8001070:	601a      	str	r2, [r3, #0]

    	  }

if ((prevA7 == 0) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1)){
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <buttonpressed+0x338>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d12c      	bne.n	80010d4 <buttonpressed+0x35c>
 800107a:	e01d      	b.n	80010b8 <buttonpressed+0x340>
 800107c:	20000005 	.word	0x20000005
 8001080:	200003b0 	.word	0x200003b0
 8001084:	20000000 	.word	0x20000000
 8001088:	20000003 	.word	0x20000003
 800108c:	200003b8 	.word	0x200003b8
 8001090:	20000001 	.word	0x20000001
 8001094:	48000400 	.word	0x48000400
 8001098:	200003bc 	.word	0x200003bc
 800109c:	20000002 	.word	0x20000002
 80010a0:	200003b6 	.word	0x200003b6
 80010a4:	200003dd 	.word	0x200003dd
 80010a8:	aaaaaaab 	.word	0xaaaaaaab
 80010ac:	200003dc 	.word	0x200003dc
 80010b0:	20000004 	.word	0x20000004
 80010b4:	200003ba 	.word	0x200003ba
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010be:	f003 fb8d 	bl	80047dc <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d105      	bne.n	80010d4 <buttonpressed+0x35c>
    tickspr = HAL_GetTick();
 80010c8:	f001 fa4e 	bl	8002568 <HAL_GetTick>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <buttonpressed+0x378>)
 80010d2:	601a      	str	r2, [r3, #0]
   }

prevA7 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010da:	f003 fb7f 	bl	80047dc <HAL_GPIO_ReadPin>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <buttonpressed+0x37c>)
 80010e4:	701a      	strb	r2, [r3, #0]
modeset();
 80010e6:	f000 f9ad 	bl	8001444 <modeset>
}

//end A7


}}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200003b0 	.word	0x200003b0
 80010f4:	20000004 	.word	0x20000004

080010f8 <resetall>:

//end button code



void resetall(){
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
//reset vars


	 tickspr = 0;
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <resetall+0x94>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]

	 cntA9=0;  //A9 is middle
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <resetall+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	801a      	strh	r2, [r3, #0]
	 cntB8=0; //left B8
 800110a:	4b22      	ldr	r3, [pc, #136]	; (8001194 <resetall+0x9c>)
 800110c:	2200      	movs	r2, #0
 800110e:	801a      	strh	r2, [r3, #0]
	 cntA6=0;  //A6 is top
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <resetall+0xa0>)
 8001112:	2200      	movs	r2, #0
 8001114:	801a      	strh	r2, [r3, #0]
	 cntA7=0;   //A7 right
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <resetall+0xa4>)
 8001118:	2200      	movs	r2, #0
 800111a:	801a      	strh	r2, [r3, #0]
	 cntB9=0;  //B9 is bottom
 800111c:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <resetall+0xa8>)
 800111e:	2200      	movs	r2, #0
 8001120:	801a      	strh	r2, [r3, #0]

	 prevA9=1;
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <resetall+0xac>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
	 prevB9=1;
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <resetall+0xb0>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
	 prevB8=1;
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <resetall+0xb4>)
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
	 prevA6=1;
 8001134:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <resetall+0xb8>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
	 prevA7=1;
 800113a:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <resetall+0xbc>)
 800113c:	2201      	movs	r2, #1
 800113e:	701a      	strb	r2, [r3, #0]


	//adc slider
	 val=0; // value of R (digital val 0 to around 4k)
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <resetall+0xc0>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
	 vin=0;
 8001146:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <resetall+0xc4>)
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
	 vinadj=0;
 800114e:	491c      	ldr	r1, [pc, #112]	; (80011c0 <resetall+0xc8>)
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	e9c1 2300 	strd	r2, r3, [r1]


	//dac
	 dacout=0;
 800115c:	4919      	ldr	r1, [pc, #100]	; (80011c4 <resetall+0xcc>)
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	e9c1 2300 	strd	r2, r3, [r1]
	 output_voltage = 0;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <resetall+0xd0>)
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]


	//mode
	 MODE=0;
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <resetall+0xd4>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
	 emmode=0;
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <resetall+0xd8>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]


	//pwm
	 uint16_t pwmval= 0;
 800117c:	2300      	movs	r3, #0
 800117e:	80fb      	strh	r3, [r7, #6]
//redo initializations




}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	200003b0 	.word	0x200003b0
 8001190:	200003b4 	.word	0x200003b4
 8001194:	200003b6 	.word	0x200003b6
 8001198:	200003b8 	.word	0x200003b8
 800119c:	200003ba 	.word	0x200003ba
 80011a0:	200003bc 	.word	0x200003bc
 80011a4:	20000000 	.word	0x20000000
 80011a8:	20000001 	.word	0x20000001
 80011ac:	20000002 	.word	0x20000002
 80011b0:	20000003 	.word	0x20000003
 80011b4:	20000004 	.word	0x20000004
 80011b8:	200003c0 	.word	0x200003c0
 80011bc:	200003c4 	.word	0x200003c4
 80011c0:	200003c8 	.word	0x200003c8
 80011c4:	200003d0 	.word	0x200003d0
 80011c8:	200003d8 	.word	0x200003d8
 80011cc:	200003dc 	.word	0x200003dc
 80011d0:	200003dd 	.word	0x200003dd
 80011d4:	00000000 	.word	0x00000000

080011d8 <dacset>:





void dacset(){
 80011d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011dc:	af00      	add	r7, sp, #0


	//start
	  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80011de:	2100      	movs	r1, #0
 80011e0:	488f      	ldr	r0, [pc, #572]	; (8001420 <dacset+0x248>)
 80011e2:	f002 fe4b 	bl	8003e7c <HAL_DAC_Start>
	  HAL_ADC_Start(&hadc1);
 80011e6:	488f      	ldr	r0, [pc, #572]	; (8001424 <dacset+0x24c>)
 80011e8:	f001 fbe2 	bl	80029b0 <HAL_ADC_Start>
	//adc

	//HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);   //check if NEEDED
	//adc read
	 val = HAL_ADC_GetValue(&hadc1);
 80011ec:	488d      	ldr	r0, [pc, #564]	; (8001424 <dacset+0x24c>)
 80011ee:	f001 fcf5 	bl	8002bdc <HAL_ADC_GetValue>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a8c      	ldr	r2, [pc, #560]	; (8001428 <dacset+0x250>)
 80011f6:	6013      	str	r3, [r2, #0]
	  vin = val * (3.3) / (pow(2,12)-1);
 80011f8:	4b8b      	ldr	r3, [pc, #556]	; (8001428 <dacset+0x250>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f989 	bl	8000514 <__aeabi_ui2d>
 8001202:	a371      	add	r3, pc, #452	; (adr r3, 80013c8 <dacset+0x1f0>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff f9fe 	bl	8000608 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	a36e      	add	r3, pc, #440	; (adr r3, 80013d0 <dacset+0x1f8>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	f7ff fb1f 	bl	800085c <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fce7 	bl	8000bf8 <__aeabi_d2f>
 800122a:	4603      	mov	r3, r0
 800122c:	4a7f      	ldr	r2, [pc, #508]	; (800142c <dacset+0x254>)
 800122e:	6013      	str	r3, [r2, #0]
	  //scale ADC
	 vinadj = vin*(1.18 + -0.0436*vin + 1.72*(pow(vin,2))/1000);
 8001230:	4b7e      	ldr	r3, [pc, #504]	; (800142c <dacset+0x254>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f98f 	bl	8000558 <__aeabi_f2d>
 800123a:	4604      	mov	r4, r0
 800123c:	460d      	mov	r5, r1
 800123e:	4b7b      	ldr	r3, [pc, #492]	; (800142c <dacset+0x254>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f988 	bl	8000558 <__aeabi_f2d>
 8001248:	a363      	add	r3, pc, #396	; (adr r3, 80013d8 <dacset+0x200>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff f9db 	bl	8000608 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	a361      	add	r3, pc, #388	; (adr r3, 80013e0 <dacset+0x208>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff f81c 	bl	800029c <__adddf3>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4690      	mov	r8, r2
 800126a:	4699      	mov	r9, r3
 800126c:	4b6f      	ldr	r3, [pc, #444]	; (800142c <dacset+0x254>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f971 	bl	8000558 <__aeabi_f2d>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 80013e8 <dacset+0x210>
 800127e:	ec43 2b10 	vmov	d0, r2, r3
 8001282:	f00a fbab 	bl	800b9dc <pow>
 8001286:	ec51 0b10 	vmov	r0, r1, d0
 800128a:	a359      	add	r3, pc, #356	; (adr r3, 80013f0 <dacset+0x218>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	f7ff f9ba 	bl	8000608 <__aeabi_dmul>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4610      	mov	r0, r2
 800129a:	4619      	mov	r1, r3
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	4b63      	ldr	r3, [pc, #396]	; (8001430 <dacset+0x258>)
 80012a2:	f7ff fadb 	bl	800085c <__aeabi_ddiv>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4640      	mov	r0, r8
 80012ac:	4649      	mov	r1, r9
 80012ae:	f7fe fff5 	bl	800029c <__adddf3>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4620      	mov	r0, r4
 80012b8:	4629      	mov	r1, r5
 80012ba:	f7ff f9a5 	bl	8000608 <__aeabi_dmul>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	495c      	ldr	r1, [pc, #368]	; (8001434 <dacset+0x25c>)
 80012c4:	e9c1 2300 	strd	r2, r3, [r1]
	 //truncate adc
	 if (vinadj>3.28){
 80012c8:	4b5a      	ldr	r3, [pc, #360]	; (8001434 <dacset+0x25c>)
 80012ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ce:	a34a      	add	r3, pc, #296	; (adr r3, 80013f8 <dacset+0x220>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff fc28 	bl	8000b28 <__aeabi_dcmpgt>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d005      	beq.n	80012ea <dacset+0x112>
		 vinadj=3.30;
 80012de:	4955      	ldr	r1, [pc, #340]	; (8001434 <dacset+0x25c>)
 80012e0:	a339      	add	r3, pc, #228	; (adr r3, 80013c8 <dacset+0x1f0>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	e9c1 2300 	strd	r2, r3, [r1]


	  //DAC out:

	  //scale dac val
	  dacout = vinadj *( 1.01 + 0.0184*vinadj - 5.15*pow(vinadj,2)/1000);
 80012ea:	4b52      	ldr	r3, [pc, #328]	; (8001434 <dacset+0x25c>)
 80012ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012f0:	a343      	add	r3, pc, #268	; (adr r3, 8001400 <dacset+0x228>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	f7ff f987 	bl	8000608 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	a341      	add	r3, pc, #260	; (adr r3, 8001408 <dacset+0x230>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	f7fe ffc8 	bl	800029c <__adddf3>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4614      	mov	r4, r2
 8001312:	461d      	mov	r5, r3
 8001314:	4b47      	ldr	r3, [pc, #284]	; (8001434 <dacset+0x25c>)
 8001316:	ed93 7b00 	vldr	d7, [r3]
 800131a:	ed9f 1b33 	vldr	d1, [pc, #204]	; 80013e8 <dacset+0x210>
 800131e:	eeb0 0a47 	vmov.f32	s0, s14
 8001322:	eef0 0a67 	vmov.f32	s1, s15
 8001326:	f00a fb59 	bl	800b9dc <pow>
 800132a:	ec51 0b10 	vmov	r0, r1, d0
 800132e:	a338      	add	r3, pc, #224	; (adr r3, 8001410 <dacset+0x238>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f7ff f968 	bl	8000608 <__aeabi_dmul>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	4b3a      	ldr	r3, [pc, #232]	; (8001430 <dacset+0x258>)
 8001346:	f7ff fa89 	bl	800085c <__aeabi_ddiv>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4620      	mov	r0, r4
 8001350:	4629      	mov	r1, r5
 8001352:	f7fe ffa1 	bl	8000298 <__aeabi_dsub>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	4b35      	ldr	r3, [pc, #212]	; (8001434 <dacset+0x25c>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	f7ff f950 	bl	8000608 <__aeabi_dmul>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4932      	ldr	r1, [pc, #200]	; (8001438 <dacset+0x260>)
 800136e:	e9c1 2300 	strd	r2, r3, [r1]

	  //dac to digital value
	  if (flagstat!=1){
 8001372:	4b32      	ldr	r3, [pc, #200]	; (800143c <dacset+0x264>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d010      	beq.n	800139c <dacset+0x1c4>
	  output_voltage = (uint32_t)((4095.0/3.30)*dacout);
 800137a:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <dacset+0x260>)
 800137c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001380:	a325      	add	r3, pc, #148	; (adr r3, 8001418 <dacset+0x240>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff f93f 	bl	8000608 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f7ff fc11 	bl	8000bb8 <__aeabi_d2uiz>
 8001396:	4603      	mov	r3, r0
 8001398:	4a29      	ldr	r2, [pc, #164]	; (8001440 <dacset+0x268>)
 800139a:	6013      	str	r3, [r2, #0]
	  }
	  //truncate digital out
	  if (output_voltage > 4095){
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <dacset+0x268>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013a4:	d303      	bcc.n	80013ae <dacset+0x1d6>
		  output_voltage =4095;
 80013a6:	4b26      	ldr	r3, [pc, #152]	; (8001440 <dacset+0x268>)
 80013a8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80013ac:	601a      	str	r2, [r3, #0]
	  }


	  //output dac
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, output_voltage);
 80013ae:	4b24      	ldr	r3, [pc, #144]	; (8001440 <dacset+0x268>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	481a      	ldr	r0, [pc, #104]	; (8001420 <dacset+0x248>)
 80013b8:	f002 fd3b 	bl	8003e32 <HAL_DAC_SetValue>



}
 80013bc:	bf00      	nop
 80013be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013c2:	bf00      	nop
 80013c4:	f3af 8000 	nop.w
 80013c8:	66666666 	.word	0x66666666
 80013cc:	400a6666 	.word	0x400a6666
 80013d0:	00000000 	.word	0x00000000
 80013d4:	40affe00 	.word	0x40affe00
 80013d8:	3c361134 	.word	0x3c361134
 80013dc:	bfa652bd 	.word	0xbfa652bd
 80013e0:	ae147ae1 	.word	0xae147ae1
 80013e4:	3ff2e147 	.word	0x3ff2e147
 80013e8:	00000000 	.word	0x00000000
 80013ec:	40000000 	.word	0x40000000
 80013f0:	b851eb85 	.word	0xb851eb85
 80013f4:	3ffb851e 	.word	0x3ffb851e
 80013f8:	a3d70a3d 	.word	0xa3d70a3d
 80013fc:	400a3d70 	.word	0x400a3d70
 8001400:	18fc5048 	.word	0x18fc5048
 8001404:	3f92d773 	.word	0x3f92d773
 8001408:	c28f5c29 	.word	0xc28f5c29
 800140c:	3ff028f5 	.word	0x3ff028f5
 8001410:	9999999a 	.word	0x9999999a
 8001414:	40149999 	.word	0x40149999
 8001418:	e8ba2e8c 	.word	0xe8ba2e8c
 800141c:	409363a2 	.word	0x409363a2
 8001420:	20000254 	.word	0x20000254
 8001424:	20000204 	.word	0x20000204
 8001428:	200003c0 	.word	0x200003c0
 800142c:	200003c4 	.word	0x200003c4
 8001430:	408f4000 	.word	0x408f4000
 8001434:	200003c8 	.word	0x200003c8
 8001438:	200003d0 	.word	0x200003d0
 800143c:	200003f8 	.word	0x200003f8
 8001440:	200003d8 	.word	0x200003d8

08001444 <modeset>:





void modeset(){
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0

	if (MODE ==0){
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <modeset+0xa4>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d116      	bne.n	800147e <modeset+0x3a>
		//PA10 position 1 from left
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145a:	f003 f9d7 	bl	800480c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001464:	4821      	ldr	r0, [pc, #132]	; (80014ec <modeset+0xa8>)
 8001466:	f003 f9d1 	bl	800480c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2110      	movs	r1, #16
 800146e:	481f      	ldr	r0, [pc, #124]	; (80014ec <modeset+0xa8>)
 8001470:	f003 f9cc 	bl	800480c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2120      	movs	r1, #32
 8001478:	481c      	ldr	r0, [pc, #112]	; (80014ec <modeset+0xa8>)
 800147a:	f003 f9c7 	bl	800480c <HAL_GPIO_WritePin>

	}

	if (MODE ==1){
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <modeset+0xa4>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d113      	bne.n	80014ae <modeset+0x6a>
		//PB4 position 3 from left
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800148c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001490:	f003 f9bc 	bl	800480c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001494:	2201      	movs	r2, #1
 8001496:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800149a:	4814      	ldr	r0, [pc, #80]	; (80014ec <modeset+0xa8>)
 800149c:	f003 f9b6 	bl	800480c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2110      	movs	r1, #16
 80014a4:	4811      	ldr	r0, [pc, #68]	; (80014ec <modeset+0xa8>)
 80014a6:	f003 f9b1 	bl	800480c <HAL_GPIO_WritePin>


	    emergencyset();  //if mode 2nd on else off
 80014aa:	f000 f821 	bl	80014f0 <emergencyset>


		}


	if (MODE ==2){
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <modeset+0xa4>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d116      	bne.n	80014e4 <modeset+0xa0>
		//PB10 position 2 from left
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c0:	f003 f9a4 	bl	800480c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ca:	4808      	ldr	r0, [pc, #32]	; (80014ec <modeset+0xa8>)
 80014cc:	f003 f99e 	bl	800480c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80014d0:	2201      	movs	r2, #1
 80014d2:	2110      	movs	r1, #16
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <modeset+0xa8>)
 80014d6:	f003 f999 	bl	800480c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2120      	movs	r1, #32
 80014de:	4803      	ldr	r0, [pc, #12]	; (80014ec <modeset+0xa8>)
 80014e0:	f003 f994 	bl	800480c <HAL_GPIO_WritePin>

		}


}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200003dc 	.word	0x200003dc
 80014ec:	48000400 	.word	0x48000400

080014f0 <emergencyset>:


void emergencyset(){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	if (emmode==2){
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <emergencyset+0x28>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d105      	bne.n	8001508 <emergencyset+0x18>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	2120      	movs	r1, #32
 8001500:	4806      	ldr	r0, [pc, #24]	; (800151c <emergencyset+0x2c>)
 8001502:	f003 f983 	bl	800480c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
	}



}
 8001506:	e004      	b.n	8001512 <emergencyset+0x22>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	2120      	movs	r1, #32
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <emergencyset+0x2c>)
 800150e:	f003 f97d 	bl	800480c <HAL_GPIO_WritePin>
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200003dd 	.word	0x200003dd
 800151c:	48000400 	.word	0x48000400

08001520 <pwmset>:

void pwmset(){
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0

	  pwmval=(uint32_t)(((double)output_voltage)*1000/4095);
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <pwmset+0x58>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe fff3 	bl	8000514 <__aeabi_ui2d>
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <pwmset+0x5c>)
 8001534:	f7ff f868 	bl	8000608 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	a30b      	add	r3, pc, #44	; (adr r3, 8001570 <pwmset+0x50>)
 8001542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001546:	f7ff f989 	bl	800085c <__aeabi_ddiv>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fb31 	bl	8000bb8 <__aeabi_d2uiz>
 8001556:	4603      	mov	r3, r0
 8001558:	b29a      	uxth	r2, r3
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <pwmset+0x60>)
 800155c:	801a      	strh	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwmval);
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <pwmset+0x60>)
 8001560:	881a      	ldrh	r2, [r3, #0]
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <pwmset+0x64>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	641a      	str	r2, [r3, #64]	; 0x40

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	f3af 8000 	nop.w
 8001570:	00000000 	.word	0x00000000
 8001574:	40affe00 	.word	0x40affe00
 8001578:	200003d8 	.word	0x200003d8
 800157c:	408f4000 	.word	0x408f4000
 8001580:	200003de 	.word	0x200003de
 8001584:	20000268 	.word	0x20000268

08001588 <uartdecode>:


void uartdecode(){
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0

	//param flags



	if (rxSetBuf[0] == '#' && rxSetBuf[17]=='$' && (rxSetBuf[18]=='\n' || rxSetBuf[18]==0b00001010 ) && rxSetBuf[2]=='M'){
 800158c:	4b54      	ldr	r3, [pc, #336]	; (80016e0 <uartdecode+0x158>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b23      	cmp	r3, #35	; 0x23
 8001592:	d112      	bne.n	80015ba <uartdecode+0x32>
 8001594:	4b52      	ldr	r3, [pc, #328]	; (80016e0 <uartdecode+0x158>)
 8001596:	7c5b      	ldrb	r3, [r3, #17]
 8001598:	2b24      	cmp	r3, #36	; 0x24
 800159a:	d10e      	bne.n	80015ba <uartdecode+0x32>
 800159c:	4b50      	ldr	r3, [pc, #320]	; (80016e0 <uartdecode+0x158>)
 800159e:	7c9b      	ldrb	r3, [r3, #18]
 80015a0:	2b0a      	cmp	r3, #10
 80015a2:	d003      	beq.n	80015ac <uartdecode+0x24>
 80015a4:	4b4e      	ldr	r3, [pc, #312]	; (80016e0 <uartdecode+0x158>)
 80015a6:	7c9b      	ldrb	r3, [r3, #18]
 80015a8:	2b0a      	cmp	r3, #10
 80015aa:	d106      	bne.n	80015ba <uartdecode+0x32>
 80015ac:	4b4c      	ldr	r3, [pc, #304]	; (80016e0 <uartdecode+0x158>)
 80015ae:	789b      	ldrb	r3, [r3, #2]
 80015b0:	2b4d      	cmp	r3, #77	; 0x4d
 80015b2:	d102      	bne.n	80015ba <uartdecode+0x32>
		flagstat=1;
 80015b4:	4b4b      	ldr	r3, [pc, #300]	; (80016e4 <uartdecode+0x15c>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	801a      	strh	r2, [r3, #0]
	}
	flagstat=1;
 80015ba:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <uartdecode+0x15c>)
 80015bc:	2201      	movs	r2, #1
 80015be:	801a      	strh	r2, [r3, #0]



	memcpy(statepara, &rxSetBuf[13], 3);
 80015c0:	2203      	movs	r2, #3
 80015c2:	4949      	ldr	r1, [pc, #292]	; (80016e8 <uartdecode+0x160>)
 80015c4:	4849      	ldr	r0, [pc, #292]	; (80016ec <uartdecode+0x164>)
 80015c6:	f007 fa5d 	bl	8008a84 <memcpy>
	statepara[3] = '\0';
 80015ca:	4b48      	ldr	r3, [pc, #288]	; (80016ec <uartdecode+0x164>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	70da      	strb	r2, [r3, #3]
	snprintf((char*)statepara_str, 5, "%s", (char*)statepara);
 80015d0:	4b46      	ldr	r3, [pc, #280]	; (80016ec <uartdecode+0x164>)
 80015d2:	4a47      	ldr	r2, [pc, #284]	; (80016f0 <uartdecode+0x168>)
 80015d4:	2105      	movs	r1, #5
 80015d6:	4847      	ldr	r0, [pc, #284]	; (80016f4 <uartdecode+0x16c>)
 80015d8:	f007 fed4 	bl	8009384 <sniprintf>
	stateval = ((uint16_t)atoi((char*)statepara_str));
 80015dc:	4845      	ldr	r0, [pc, #276]	; (80016f4 <uartdecode+0x16c>)
 80015de:	f007 fa22 	bl	8008a26 <atoi>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	4b44      	ldr	r3, [pc, #272]	; (80016f8 <uartdecode+0x170>)
 80015e8:	801a      	strh	r2, [r3, #0]


		memcpy(par1, &rxSetBuf[5], 3);
 80015ea:	2203      	movs	r2, #3
 80015ec:	4943      	ldr	r1, [pc, #268]	; (80016fc <uartdecode+0x174>)
 80015ee:	4844      	ldr	r0, [pc, #272]	; (8001700 <uartdecode+0x178>)
 80015f0:	f007 fa48 	bl	8008a84 <memcpy>
		par1[3] = '\0';
 80015f4:	4b42      	ldr	r3, [pc, #264]	; (8001700 <uartdecode+0x178>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	70da      	strb	r2, [r3, #3]
		p1val = ((double)atoi((char*)par1));
 80015fa:	4841      	ldr	r0, [pc, #260]	; (8001700 <uartdecode+0x178>)
 80015fc:	f007 fa13 	bl	8008a26 <atoi>
 8001600:	4603      	mov	r3, r0
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ff96 	bl	8000534 <__aeabi_i2d>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7ff fad2 	bl	8000bb8 <__aeabi_d2uiz>
 8001614:	4603      	mov	r3, r0
 8001616:	b29a      	uxth	r2, r3
 8001618:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <uartdecode+0x17c>)
 800161a:	801a      	strh	r2, [r3, #0]



		memcpy(par2, &rxSetBuf[9], 3);
 800161c:	2203      	movs	r2, #3
 800161e:	493a      	ldr	r1, [pc, #232]	; (8001708 <uartdecode+0x180>)
 8001620:	483a      	ldr	r0, [pc, #232]	; (800170c <uartdecode+0x184>)
 8001622:	f007 fa2f 	bl	8008a84 <memcpy>
			par2[3] = '\0';
 8001626:	4b39      	ldr	r3, [pc, #228]	; (800170c <uartdecode+0x184>)
 8001628:	2200      	movs	r2, #0
 800162a:	70da      	strb	r2, [r3, #3]
			p2val = ((double)atoi((char*)par2));
 800162c:	4837      	ldr	r0, [pc, #220]	; (800170c <uartdecode+0x184>)
 800162e:	f007 f9fa 	bl	8008a26 <atoi>
 8001632:	4603      	mov	r3, r0
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff7d 	bl	8000534 <__aeabi_i2d>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff fab9 	bl	8000bb8 <__aeabi_d2uiz>
 8001646:	4603      	mov	r3, r0
 8001648:	b29a      	uxth	r2, r3
 800164a:	4b31      	ldr	r3, [pc, #196]	; (8001710 <uartdecode+0x188>)
 800164c:	801a      	strh	r2, [r3, #0]



	//MODE 1

	if(rxSetBuf[3] == 'F' ){
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <uartdecode+0x158>)
 8001650:	78db      	ldrb	r3, [r3, #3]
 8001652:	2b46      	cmp	r3, #70	; 0x46
 8001654:	d125      	bne.n	80016a2 <uartdecode+0x11a>
	MODE =0;
 8001656:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <uartdecode+0x18c>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]

	output_voltage =(uint32_t) (4095*(((double)atoi((char*)par1))/512.0));
 800165c:	4828      	ldr	r0, [pc, #160]	; (8001700 <uartdecode+0x178>)
 800165e:	f007 f9e2 	bl	8008a26 <atoi>
 8001662:	4603      	mov	r3, r0
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff65 	bl	8000534 <__aeabi_i2d>
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001672:	f7ff f8f3 	bl	800085c <__aeabi_ddiv>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	a316      	add	r3, pc, #88	; (adr r3, 80016d8 <uartdecode+0x150>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe ffc0 	bl	8000608 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f7ff fa92 	bl	8000bb8 <__aeabi_d2uiz>
 8001694:	4603      	mov	r3, r0
 8001696:	4a20      	ldr	r2, [pc, #128]	; (8001718 <uartdecode+0x190>)
 8001698:	6013      	str	r3, [r2, #0]

	dacset();
 800169a:	f7ff fd9d 	bl	80011d8 <dacset>
	pwmset();
 800169e:	f7ff ff3f 	bl	8001520 <pwmset>


	}

	//MODE 2
	if(rxSetBuf[3] == 'E' ){
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <uartdecode+0x158>)
 80016a4:	78db      	ldrb	r3, [r3, #3]
 80016a6:	2b45      	cmp	r3, #69	; 0x45
 80016a8:	d10b      	bne.n	80016c2 <uartdecode+0x13a>
	MODE =1;
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <uartdecode+0x18c>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	701a      	strb	r2, [r3, #0]


		 output_voltage = p1val;
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <uartdecode+0x17c>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <uartdecode+0x190>)
 80016b8:	601a      	str	r2, [r3, #0]
		dacset();
 80016ba:	f7ff fd8d 	bl	80011d8 <dacset>
		pwmset();
 80016be:	f7ff ff2f 	bl	8001520 <pwmset>

	}


	//MODE 3
	if(rxSetBuf[3] == 'M' ){
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <uartdecode+0x158>)
 80016c4:	78db      	ldrb	r3, [r3, #3]
 80016c6:	2b4d      	cmp	r3, #77	; 0x4d
 80016c8:	d102      	bne.n	80016d0 <uartdecode+0x148>
	MODE =2;
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <uartdecode+0x18c>)
 80016cc:	2202      	movs	r2, #2
 80016ce:	701a      	strb	r2, [r3, #0]





}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	f3af 8000 	nop.w
 80016d8:	00000000 	.word	0x00000000
 80016dc:	40affe00 	.word	0x40affe00
 80016e0:	20000418 	.word	0x20000418
 80016e4:	200003f8 	.word	0x200003f8
 80016e8:	20000425 	.word	0x20000425
 80016ec:	200003e0 	.word	0x200003e0
 80016f0:	0800c848 	.word	0x0800c848
 80016f4:	200003ec 	.word	0x200003ec
 80016f8:	200003f2 	.word	0x200003f2
 80016fc:	2000041d 	.word	0x2000041d
 8001700:	200003e4 	.word	0x200003e4
 8001704:	200003f4 	.word	0x200003f4
 8001708:	20000421 	.word	0x20000421
 800170c:	200003e8 	.word	0x200003e8
 8001710:	200003f6 	.word	0x200003f6
 8001714:	200003dc 	.word	0x200003dc
 8001718:	200003d8 	.word	0x200003d8
 800171c:	00000000 	.word	0x00000000

08001720 <uartencode>:

void uartencode(){
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

	 // Initialize to all zeros

	if (uartmode==1){
 8001724:	4b40      	ldr	r3, [pc, #256]	; (8001828 <uartencode+0x108>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d123      	bne.n	8001774 <uartencode+0x54>
		stateval = (uint32_t)((double)(output_voltage)*512.0/4095);
 800172c:	4b3f      	ldr	r3, [pc, #252]	; (800182c <uartencode+0x10c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe feef 	bl	8000514 <__aeabi_ui2d>
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800173e:	f7fe ff63 	bl	8000608 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	a335      	add	r3, pc, #212	; (adr r3, 8001820 <uartencode+0x100>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7ff f884 	bl	800085c <__aeabi_ddiv>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff fa2c 	bl	8000bb8 <__aeabi_d2uiz>
 8001760:	4603      	mov	r3, r0
 8001762:	b29a      	uxth	r2, r3
 8001764:	4b32      	ldr	r3, [pc, #200]	; (8001830 <uartencode+0x110>)
 8001766:	801a      	strh	r2, [r3, #0]
		p1val=0;
 8001768:	4b32      	ldr	r3, [pc, #200]	; (8001834 <uartencode+0x114>)
 800176a:	2200      	movs	r2, #0
 800176c:	801a      	strh	r2, [r3, #0]
		p2val =0;
 800176e:	4b32      	ldr	r3, [pc, #200]	; (8001838 <uartencode+0x118>)
 8001770:	2200      	movs	r2, #0
 8001772:	801a      	strh	r2, [r3, #0]

	//uint8_t tBuf[21] = "inarrognized Command\n";
	//HAL_UART_Transmit(&huart2, tBuf, 21, 5);
	// Use sprintf() to format the integer as a string and store it in the totransmit array

	sprintf((char*)(intptr_t)&statusarr[5], "%03d", p1val);
 8001774:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <uartencode+0x114>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4930      	ldr	r1, [pc, #192]	; (800183c <uartencode+0x11c>)
 800177c:	4830      	ldr	r0, [pc, #192]	; (8001840 <uartencode+0x120>)
 800177e:	f007 fe35 	bl	80093ec <siprintf>
	sprintf((char*)(intptr_t)&statusarr[9], "%03d", p2val);
 8001782:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <uartencode+0x118>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	492c      	ldr	r1, [pc, #176]	; (800183c <uartencode+0x11c>)
 800178a:	482e      	ldr	r0, [pc, #184]	; (8001844 <uartencode+0x124>)
 800178c:	f007 fe2e 	bl	80093ec <siprintf>
	//	sprintf(&statusarr[9], "%03d", p2val);
	sprintf((char*)(intptr_t)&statusarr[13], "%03d", stateval);
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <uartencode+0x110>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4929      	ldr	r1, [pc, #164]	; (800183c <uartencode+0x11c>)
 8001798:	482b      	ldr	r0, [pc, #172]	; (8001848 <uartencode+0x128>)
 800179a:	f007 fe27 	bl	80093ec <siprintf>
	statusarr[0] = '#';
 800179e:	4b2b      	ldr	r3, [pc, #172]	; (800184c <uartencode+0x12c>)
 80017a0:	2223      	movs	r2, #35	; 0x23
 80017a2:	701a      	strb	r2, [r3, #0]
	sprintf((char*)(intptr_t)&statusarr[1], "%03d", ':');
 80017a4:	223a      	movs	r2, #58	; 0x3a
 80017a6:	4925      	ldr	r1, [pc, #148]	; (800183c <uartencode+0x11c>)
 80017a8:	4829      	ldr	r0, [pc, #164]	; (8001850 <uartencode+0x130>)
 80017aa:	f007 fe1f 	bl	80093ec <siprintf>
	statusarr[2] = 'M';
 80017ae:	4b27      	ldr	r3, [pc, #156]	; (800184c <uartencode+0x12c>)
 80017b0:	224d      	movs	r2, #77	; 0x4d
 80017b2:	709a      	strb	r2, [r3, #2]
	statusarr[1] = ':';
 80017b4:	4b25      	ldr	r3, [pc, #148]	; (800184c <uartencode+0x12c>)
 80017b6:	223a      	movs	r2, #58	; 0x3a
 80017b8:	705a      	strb	r2, [r3, #1]
	statusarr[4] = ':';
 80017ba:	4b24      	ldr	r3, [pc, #144]	; (800184c <uartencode+0x12c>)
 80017bc:	223a      	movs	r2, #58	; 0x3a
 80017be:	711a      	strb	r2, [r3, #4]
	statusarr[8] = ':';
 80017c0:	4b22      	ldr	r3, [pc, #136]	; (800184c <uartencode+0x12c>)
 80017c2:	223a      	movs	r2, #58	; 0x3a
 80017c4:	721a      	strb	r2, [r3, #8]
	statusarr[12] = ':';
 80017c6:	4b21      	ldr	r3, [pc, #132]	; (800184c <uartencode+0x12c>)
 80017c8:	223a      	movs	r2, #58	; 0x3a
 80017ca:	731a      	strb	r2, [r3, #12]
	statusarr[16] = ':';
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <uartencode+0x12c>)
 80017ce:	223a      	movs	r2, #58	; 0x3a
 80017d0:	741a      	strb	r2, [r3, #16]
	statusarr[17] = '$';
 80017d2:	4b1e      	ldr	r3, [pc, #120]	; (800184c <uartencode+0x12c>)
 80017d4:	2224      	movs	r2, #36	; 0x24
 80017d6:	745a      	strb	r2, [r3, #17]
	statusarr[18] = 10;
 80017d8:	4b1c      	ldr	r3, [pc, #112]	; (800184c <uartencode+0x12c>)
 80017da:	220a      	movs	r2, #10
 80017dc:	749a      	strb	r2, [r3, #18]
	//sprintf(&statusarr[9], "%03d", p2val);

	if (MODE==0){
 80017de:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <uartencode+0x134>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d102      	bne.n	80017ec <uartencode+0xcc>

		statusarr[3] = 'F';
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <uartencode+0x12c>)
 80017e8:	2246      	movs	r2, #70	; 0x46
 80017ea:	70da      	strb	r2, [r3, #3]
	}
	if (MODE==1){
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <uartencode+0x134>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d102      	bne.n	80017fa <uartencode+0xda>

		statusarr[3] = 'E';
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <uartencode+0x12c>)
 80017f6:	2245      	movs	r2, #69	; 0x45
 80017f8:	70da      	strb	r2, [r3, #3]
	}
	if (MODE==2){
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <uartencode+0x134>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d102      	bne.n	8001808 <uartencode+0xe8>

		statusarr[3] = 'M';
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <uartencode+0x12c>)
 8001804:	224d      	movs	r2, #77	; 0x4d
 8001806:	70da      	strb	r2, [r3, #3]
	}

	HAL_UART_Transmit(&huart2, statusarr, 19, 500);
 8001808:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800180c:	2213      	movs	r2, #19
 800180e:	490f      	ldr	r1, [pc, #60]	; (800184c <uartencode+0x12c>)
 8001810:	4811      	ldr	r0, [pc, #68]	; (8001858 <uartencode+0x138>)
 8001812:	f005 ff2f 	bl	8007674 <HAL_UART_Transmit>





}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	f3af 8000 	nop.w
 8001820:	00000000 	.word	0x00000000
 8001824:	40affe00 	.word	0x40affe00
 8001828:	200003fa 	.word	0x200003fa
 800182c:	200003d8 	.word	0x200003d8
 8001830:	200003f2 	.word	0x200003f2
 8001834:	200003f4 	.word	0x200003f4
 8001838:	200003f6 	.word	0x200003f6
 800183c:	0800c84c 	.word	0x0800c84c
 8001840:	20000401 	.word	0x20000401
 8001844:	20000405 	.word	0x20000405
 8001848:	20000409 	.word	0x20000409
 800184c:	200003fc 	.word	0x200003fc
 8001850:	200003fd 	.word	0x200003fd
 8001854:	200003dc 	.word	0x200003dc
 8001858:	200002b4 	.word	0x200002b4

0800185c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001860:	f000 fe28 	bl	80024b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001864:	f000 f8b2 	bl	80019cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001868:	f000 fa78 	bl	8001d5c <MX_GPIO_Init>
  MX_DMA_Init();
 800186c:	f000 fa58 	bl	8001d20 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001870:	f000 fa24 	bl	8001cbc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001874:	f000 f910 	bl	8001a98 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001878:	f000 f97e 	bl	8001b78 <MX_DAC1_Init>
  MX_TIM2_Init();
 800187c:	f000 f9a6 	bl	8001bcc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart2, rxdata, sizeof(rxdata));
// HAL_Delay(250);
//  HAL_UART_Transmit_IT(&huart2, txData, 13);
  modeset();
 8001880:	f7ff fde0 	bl	8001444 <modeset>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001884:	210c      	movs	r1, #12
 8001886:	4844      	ldr	r0, [pc, #272]	; (8001998 <main+0x13c>)
 8001888:	f004 fd5c 	bl	8006344 <HAL_TIM_PWM_Start>

 //HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 800188c:	4b42      	ldr	r3, [pc, #264]	; (8001998 <main+0x13c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001894:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxdata, 50);
 8001896:	2232      	movs	r2, #50	; 0x32
 8001898:	4940      	ldr	r1, [pc, #256]	; (800199c <main+0x140>)
 800189a:	4841      	ldr	r0, [pc, #260]	; (80019a0 <main+0x144>)
 800189c:	f007 f868 	bl	8008970 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80018a0:	4b40      	ldr	r3, [pc, #256]	; (80019a4 <main+0x148>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4b3f      	ldr	r3, [pc, #252]	; (80019a4 <main+0x148>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0204 	bic.w	r2, r2, #4
 80018ae:	601a      	str	r2, [r3, #0]
  while (1)
  {

	  //continuous adc read outputted through dac - conditioned

	  if (power==1){
 80018b0:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <main+0x14c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d142      	bne.n	800193e <main+0xe2>
	  dacset();
 80018b8:	f7ff fc8e 	bl	80011d8 <dacset>
	  //uartencode();

	  pwmset();
 80018bc:	f7ff fe30 	bl	8001520 <pwmset>

		  if (uartmode==1){
 80018c0:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <main+0x150>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d106      	bne.n	80018d6 <main+0x7a>
			  uartdecode();
 80018c8:	f7ff fe5e 	bl	8001588 <uartdecode>
			  uartencode();
 80018cc:	f7ff ff28 	bl	8001720 <uartencode>
			  uartmode=0;
 80018d0:	4b36      	ldr	r3, [pc, #216]	; (80019ac <main+0x150>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
		  }

		  if (uartmode==2){
 80018d6:	4b35      	ldr	r3, [pc, #212]	; (80019ac <main+0x150>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d104      	bne.n	80018e8 <main+0x8c>

			  uartencode();
 80018de:	f7ff ff1f 	bl	8001720 <uartencode>
			  uartmode=0;
 80018e2:	4b32      	ldr	r3, [pc, #200]	; (80019ac <main+0x150>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
	  }

		  if (flagstat==1 && (  abs((uint32_t)(1000.0*(sliderold - vinadj)))>15  || state ==1)){
 80018e8:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <main+0x154>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d147      	bne.n	8001980 <main+0x124>
 80018f0:	4b30      	ldr	r3, [pc, #192]	; (80019b4 <main+0x158>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe1d 	bl	8000534 <__aeabi_i2d>
 80018fa:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <main+0x15c>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	f7fe fcca 	bl	8000298 <__aeabi_dsub>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <main+0x160>)
 8001912:	f7fe fe79 	bl	8000608 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	f7ff f94b 	bl	8000bb8 <__aeabi_d2uiz>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	bfb8      	it	lt
 8001928:	425b      	neglt	r3, r3
 800192a:	2b0f      	cmp	r3, #15
 800192c:	dc03      	bgt.n	8001936 <main+0xda>
 800192e:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <main+0x164>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d124      	bne.n	8001980 <main+0x124>

			  flagstat=0;
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <main+0x154>)
 8001938:	2200      	movs	r2, #0
 800193a:	801a      	strh	r2, [r3, #0]
 800193c:	e020      	b.n	8001980 <main+0x124>

	  }

	  else{

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800193e:	2200      	movs	r2, #0
 8001940:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001948:	f002 ff60 	bl	800480c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001952:	481c      	ldr	r0, [pc, #112]	; (80019c4 <main+0x168>)
 8001954:	f002 ff5a 	bl	800480c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	2110      	movs	r1, #16
 800195c:	4819      	ldr	r0, [pc, #100]	; (80019c4 <main+0x168>)
 800195e:	f002 ff55 	bl	800480c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	2120      	movs	r1, #32
 8001966:	4817      	ldr	r0, [pc, #92]	; (80019c4 <main+0x168>)
 8001968:	f002 ff50 	bl	800480c <HAL_GPIO_WritePin>
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 800196c:	2300      	movs	r3, #0
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	4815      	ldr	r0, [pc, #84]	; (80019c8 <main+0x16c>)
 8001974:	f002 fa5d 	bl	8003e32 <HAL_DAC_SetValue>
				  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <main+0x13c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2200      	movs	r2, #0
 800197e:	641a      	str	r2, [r3, #64]	; 0x40

	  }

	  if (state==1){
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <main+0x164>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d193      	bne.n	80018b0 <main+0x54>
	 		  buttonpressed();
 8001988:	f7ff f9f6 	bl	8000d78 <buttonpressed>
	 		  uartencode();
 800198c:	f7ff fec8 	bl	8001720 <uartencode>
	 		  state=0;
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <main+0x164>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
	  if (power==1){
 8001996:	e78b      	b.n	80018b0 <main+0x54>
 8001998:	20000268 	.word	0x20000268
 800199c:	2000037c 	.word	0x2000037c
 80019a0:	200002b4 	.word	0x200002b4
 80019a4:	20000338 	.word	0x20000338
 80019a8:	20000005 	.word	0x20000005
 80019ac:	200003fa 	.word	0x200003fa
 80019b0:	200003f8 	.word	0x200003f8
 80019b4:	2000042c 	.word	0x2000042c
 80019b8:	200003c8 	.word	0x200003c8
 80019bc:	408f4000 	.word	0x408f4000
 80019c0:	2000042d 	.word	0x2000042d
 80019c4:	48000400 	.word	0x48000400
 80019c8:	20000254 	.word	0x20000254

080019cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b0a6      	sub	sp, #152	; 0x98
 80019d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019d6:	2228      	movs	r2, #40	; 0x28
 80019d8:	2100      	movs	r1, #0
 80019da:	4618      	mov	r0, r3
 80019dc:	f007 f860 	bl	8008aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	2258      	movs	r2, #88	; 0x58
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f007 f852 	bl	8008aa0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019fc:	2302      	movs	r3, #2
 80019fe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a00:	2301      	movs	r3, #1
 8001a02:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a04:	2310      	movs	r3, #16
 8001a06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a18:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a26:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f002 ff2a 	bl	8004884 <HAL_RCC_OscConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001a36:	f000 fa3d 	bl	8001eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a3a:	230f      	movs	r3, #15
 8001a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a54:	2102      	movs	r1, #2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 ff68 	bl	800592c <HAL_RCC_ClockConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a62:	f000 fa27 	bl	8001eb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <SystemClock_Config+0xc8>)
 8001a68:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f004 f98c 	bl	8005d98 <HAL_RCCEx_PeriphCLKConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001a86:	f000 fa15 	bl	8001eb4 <Error_Handler>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	3798      	adds	r7, #152	; 0x98
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	00100082 	.word	0x00100082

08001a98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001a9e:	f107 031c 	add.w	r3, r7, #28
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
 8001ab8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001aba:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <MX_ADC1_Init+0xdc>)
 8001abc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001ac0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001ac2:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <MX_ADC1_Init+0xdc>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <MX_ADC1_Init+0xdc>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ace:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <MX_ADC1_Init+0xdc>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <MX_ADC1_Init+0xdc>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <MX_ADC1_Init+0xdc>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ae2:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <MX_ADC1_Init+0xdc>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ae8:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <MX_ADC1_Init+0xdc>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aee:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <MX_ADC1_Init+0xdc>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001af4:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <MX_ADC1_Init+0xdc>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001afa:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <MX_ADC1_Init+0xdc>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b02:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <MX_ADC1_Init+0xdc>)
 8001b04:	2204      	movs	r2, #4
 8001b06:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b08:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <MX_ADC1_Init+0xdc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <MX_ADC1_Init+0xdc>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b14:	4817      	ldr	r0, [pc, #92]	; (8001b74 <MX_ADC1_Init+0xdc>)
 8001b16:	f000 fd51 	bl	80025bc <HAL_ADC_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001b20:	f000 f9c8 	bl	8001eb4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4811      	ldr	r0, [pc, #68]	; (8001b74 <MX_ADC1_Init+0xdc>)
 8001b30:	f001 fe86 	bl	8003840 <HAL_ADCEx_MultiModeConfigChannel>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001b3a:	f000 f9bb 	bl	8001eb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b42:	2301      	movs	r3, #1
 8001b44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4806      	ldr	r0, [pc, #24]	; (8001b74 <MX_ADC1_Init+0xdc>)
 8001b5c:	f001 fb84 	bl	8003268 <HAL_ADC_ConfigChannel>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001b66:	f000 f9a5 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	; 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000204 	.word	0x20000204

08001b78 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001b88:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <MX_DAC1_Init+0x4c>)
 8001b8a:	4a0f      	ldr	r2, [pc, #60]	; (8001bc8 <MX_DAC1_Init+0x50>)
 8001b8c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001b8e:	480d      	ldr	r0, [pc, #52]	; (8001bc4 <MX_DAC1_Init+0x4c>)
 8001b90:	f002 f923 	bl	8003dda <HAL_DAC_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8001b9a:	f000 f98b 	bl	8001eb4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <MX_DAC1_Init+0x4c>)
 8001bae:	f002 fa0a 	bl	8003fc6 <HAL_DAC_ConfigChannel>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8001bb8:	f000 f97c 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000254 	.word	0x20000254
 8001bc8:	40007400 	.word	0x40007400

08001bcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08e      	sub	sp, #56	; 0x38
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bec:	463b      	mov	r3, r7
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
 8001bf8:	611a      	str	r2, [r3, #16]
 8001bfa:	615a      	str	r2, [r3, #20]
 8001bfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bfe:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <MX_TIM2_Init+0xec>)
 8001c00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 8001c06:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <MX_TIM2_Init+0xec>)
 8001c08:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001c0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <MX_TIM2_Init+0xec>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <MX_TIM2_Init+0xec>)
 8001c16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1c:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <MX_TIM2_Init+0xec>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <MX_TIM2_Init+0xec>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c28:	4823      	ldr	r0, [pc, #140]	; (8001cb8 <MX_TIM2_Init+0xec>)
 8001c2a:	f004 fad3 	bl	80061d4 <HAL_TIM_Base_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001c34:	f000 f93e 	bl	8001eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c42:	4619      	mov	r1, r3
 8001c44:	481c      	ldr	r0, [pc, #112]	; (8001cb8 <MX_TIM2_Init+0xec>)
 8001c46:	f004 febd 	bl	80069c4 <HAL_TIM_ConfigClockSource>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001c50:	f000 f930 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c54:	4818      	ldr	r0, [pc, #96]	; (8001cb8 <MX_TIM2_Init+0xec>)
 8001c56:	f004 fb14 	bl	8006282 <HAL_TIM_PWM_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001c60:	f000 f928 	bl	8001eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	4619      	mov	r1, r3
 8001c72:	4811      	ldr	r0, [pc, #68]	; (8001cb8 <MX_TIM2_Init+0xec>)
 8001c74:	f005 fc06 	bl	8007484 <HAL_TIMEx_MasterConfigSynchronization>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001c7e:	f000 f919 	bl	8001eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c82:	2360      	movs	r3, #96	; 0x60
 8001c84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001c86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c8a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c94:	463b      	mov	r3, r7
 8001c96:	220c      	movs	r2, #12
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <MX_TIM2_Init+0xec>)
 8001c9c:	f004 fd7e 	bl	800679c <HAL_TIM_PWM_ConfigChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8001ca6:	f000 f905 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001caa:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <MX_TIM2_Init+0xec>)
 8001cac:	f000 f9da 	bl	8002064 <HAL_TIM_MspPostInit>

}
 8001cb0:	bf00      	nop
 8001cb2:	3738      	adds	r7, #56	; 0x38
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000268 	.word	0x20000268

08001cbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cc0:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <MX_USART2_UART_Init+0x5c>)
 8001cc2:	4a16      	ldr	r2, [pc, #88]	; (8001d1c <MX_USART2_UART_Init+0x60>)
 8001cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001cc6:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <MX_USART2_UART_Init+0x5c>)
 8001cc8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <MX_USART2_UART_Init+0x5c>)
 8001cd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cd4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <MX_USART2_UART_Init+0x5c>)
 8001cd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <MX_USART2_UART_Init+0x5c>)
 8001ce0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ce4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <MX_USART2_UART_Init+0x5c>)
 8001ce8:	220c      	movs	r2, #12
 8001cea:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <MX_USART2_UART_Init+0x5c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <MX_USART2_UART_Init+0x5c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <MX_USART2_UART_Init+0x5c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <MX_USART2_UART_Init+0x5c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d04:	4804      	ldr	r0, [pc, #16]	; (8001d18 <MX_USART2_UART_Init+0x5c>)
 8001d06:	f005 fc67 	bl	80075d8 <HAL_UART_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d10:	f000 f8d0 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	200002b4 	.word	0x200002b4
 8001d1c:	40004400 	.word	0x40004400

08001d20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MX_DMA_Init+0x38>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	4a0b      	ldr	r2, [pc, #44]	; (8001d58 <MX_DMA_Init+0x38>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6153      	str	r3, [r2, #20]
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_DMA_Init+0x38>)
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	2010      	movs	r0, #16
 8001d44:	f002 f813 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001d48:	2010      	movs	r0, #16
 8001d4a:	f002 f82c 	bl	8003da6 <HAL_NVIC_EnableIRQ>

}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000

08001d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d72:	4b4d      	ldr	r3, [pc, #308]	; (8001ea8 <MX_GPIO_Init+0x14c>)
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	4a4c      	ldr	r2, [pc, #304]	; (8001ea8 <MX_GPIO_Init+0x14c>)
 8001d78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d7c:	6153      	str	r3, [r2, #20]
 8001d7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ea8 <MX_GPIO_Init+0x14c>)
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d8a:	4b47      	ldr	r3, [pc, #284]	; (8001ea8 <MX_GPIO_Init+0x14c>)
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	4a46      	ldr	r2, [pc, #280]	; (8001ea8 <MX_GPIO_Init+0x14c>)
 8001d90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d94:	6153      	str	r3, [r2, #20]
 8001d96:	4b44      	ldr	r3, [pc, #272]	; (8001ea8 <MX_GPIO_Init+0x14c>)
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <MX_GPIO_Init+0x14c>)
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	4a40      	ldr	r2, [pc, #256]	; (8001ea8 <MX_GPIO_Init+0x14c>)
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	6153      	str	r3, [r2, #20]
 8001dae:	4b3e      	ldr	r3, [pc, #248]	; (8001ea8 <MX_GPIO_Init+0x14c>)
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	4b3b      	ldr	r3, [pc, #236]	; (8001ea8 <MX_GPIO_Init+0x14c>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4a3a      	ldr	r2, [pc, #232]	; (8001ea8 <MX_GPIO_Init+0x14c>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc4:	6153      	str	r3, [r2, #20]
 8001dc6:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <MX_GPIO_Init+0x14c>)
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ddc:	f002 fd16 	bl	800480c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001de0:	2200      	movs	r2, #0
 8001de2:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001de6:	4831      	ldr	r0, [pc, #196]	; (8001eac <MX_GPIO_Init+0x150>)
 8001de8:	f002 fd10 	bl	800480c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001df2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	4619      	mov	r1, r3
 8001e02:	482b      	ldr	r0, [pc, #172]	; (8001eb0 <MX_GPIO_Init+0x154>)
 8001e04:	f002 fb60 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8001e08:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e24:	f002 fb50 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8001e28:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001e2e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e34:	2301      	movs	r3, #1
 8001e36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e42:	f002 fb41 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8001e46:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4813      	ldr	r0, [pc, #76]	; (8001eac <MX_GPIO_Init+0x150>)
 8001e60:	f002 fb32 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001e6a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e70:	2301      	movs	r3, #1
 8001e72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	480c      	ldr	r0, [pc, #48]	; (8001eac <MX_GPIO_Init+0x150>)
 8001e7c:	f002 fb24 	bl	80044c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e80:	2200      	movs	r2, #0
 8001e82:	2100      	movs	r1, #0
 8001e84:	2017      	movs	r0, #23
 8001e86:	f001 ff72 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e8a:	2017      	movs	r0, #23
 8001e8c:	f001 ff8b 	bl	8003da6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2100      	movs	r1, #0
 8001e94:	2028      	movs	r0, #40	; 0x28
 8001e96:	f001 ff6a 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e9a:	2028      	movs	r0, #40	; 0x28
 8001e9c:	f001 ff83 	bl	8003da6 <HAL_NVIC_EnableIRQ>

}
 8001ea0:	bf00      	nop
 8001ea2:	3728      	adds	r7, #40	; 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	48000400 	.word	0x48000400
 8001eb0:	48000800 	.word	0x48000800

08001eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb8:	b672      	cpsid	i
}
 8001eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <Error_Handler+0x8>
	...

08001ec0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_MspInit+0x44>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	4a0e      	ldr	r2, [pc, #56]	; (8001f04 <HAL_MspInit+0x44>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6193      	str	r3, [r2, #24]
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <HAL_MspInit+0x44>)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_MspInit+0x44>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <HAL_MspInit+0x44>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	61d3      	str	r3, [r2, #28]
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_MspInit+0x44>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ef6:	2007      	movs	r0, #7
 8001ef8:	f001 ff2e 	bl	8003d58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000

08001f08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f28:	d12c      	bne.n	8001f84 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f2a:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <HAL_ADC_MspInit+0x84>)
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	4a17      	ldr	r2, [pc, #92]	; (8001f8c <HAL_ADC_MspInit+0x84>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f34:	6153      	str	r3, [r2, #20]
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <HAL_ADC_MspInit+0x84>)
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_ADC_MspInit+0x84>)
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <HAL_ADC_MspInit+0x84>)
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f4c:	6153      	str	r3, [r2, #20]
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <HAL_ADC_MspInit+0x84>)
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f70:	f002 faaa 	bl	80044c8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2100      	movs	r1, #0
 8001f78:	2012      	movs	r0, #18
 8001f7a:	f001 fef8 	bl	8003d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001f7e:	2012      	movs	r0, #18
 8001f80:	f001 ff11 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	; 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40021000 	.word	0x40021000

08001f90 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a19      	ldr	r2, [pc, #100]	; (8002014 <HAL_DAC_MspInit+0x84>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d12c      	bne.n	800200c <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001fb2:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_DAC_MspInit+0x88>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4a18      	ldr	r2, [pc, #96]	; (8002018 <HAL_DAC_MspInit+0x88>)
 8001fb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fbc:	61d3      	str	r3, [r2, #28]
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <HAL_DAC_MspInit+0x88>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	4b13      	ldr	r3, [pc, #76]	; (8002018 <HAL_DAC_MspInit+0x88>)
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	4a12      	ldr	r2, [pc, #72]	; (8002018 <HAL_DAC_MspInit+0x88>)
 8001fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd4:	6153      	str	r3, [r2, #20]
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <HAL_DAC_MspInit+0x88>)
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fe2:	2310      	movs	r3, #16
 8001fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff8:	f002 fa66 	bl	80044c8 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2100      	movs	r1, #0
 8002000:	2036      	movs	r0, #54	; 0x36
 8002002:	f001 feb4 	bl	8003d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002006:	2036      	movs	r0, #54	; 0x36
 8002008:	f001 fecd 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800200c:	bf00      	nop
 800200e:	3728      	adds	r7, #40	; 0x28
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40007400 	.word	0x40007400
 8002018:	40021000 	.word	0x40021000

0800201c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202c:	d113      	bne.n	8002056 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <HAL_TIM_Base_MspInit+0x44>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <HAL_TIM_Base_MspInit+0x44>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	61d3      	str	r3, [r2, #28]
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_TIM_Base_MspInit+0x44>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	201c      	movs	r0, #28
 800204c:	f001 fe8f 	bl	8003d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002050:	201c      	movs	r0, #28
 8002052:	f001 fea8 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000

08002064 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 030c 	add.w	r3, r7, #12
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002084:	d11c      	bne.n	80020c0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_TIM_MspPostInit+0x64>)
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <HAL_TIM_MspPostInit+0x64>)
 800208c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002090:	6153      	str	r3, [r2, #20]
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HAL_TIM_MspPostInit+0x64>)
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800209e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020b0:	2301      	movs	r3, #1
 80020b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	4619      	mov	r1, r3
 80020ba:	4804      	ldr	r0, [pc, #16]	; (80020cc <HAL_TIM_MspPostInit+0x68>)
 80020bc:	f002 fa04 	bl	80044c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020c0:	bf00      	nop
 80020c2:	3720      	adds	r7, #32
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	48000400 	.word	0x48000400

080020d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a2e      	ldr	r2, [pc, #184]	; (80021a8 <HAL_UART_MspInit+0xd8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d156      	bne.n	80021a0 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020f2:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <HAL_UART_MspInit+0xdc>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4a2d      	ldr	r2, [pc, #180]	; (80021ac <HAL_UART_MspInit+0xdc>)
 80020f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fc:	61d3      	str	r3, [r2, #28]
 80020fe:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <HAL_UART_MspInit+0xdc>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	4b28      	ldr	r3, [pc, #160]	; (80021ac <HAL_UART_MspInit+0xdc>)
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	4a27      	ldr	r2, [pc, #156]	; (80021ac <HAL_UART_MspInit+0xdc>)
 8002110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002114:	6153      	str	r3, [r2, #20]
 8002116:	4b25      	ldr	r3, [pc, #148]	; (80021ac <HAL_UART_MspInit+0xdc>)
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002122:	230c      	movs	r3, #12
 8002124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002132:	2307      	movs	r3, #7
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002140:	f002 f9c2 	bl	80044c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002144:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <HAL_UART_MspInit+0xe0>)
 8002146:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <HAL_UART_MspInit+0xe4>)
 8002148:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800214a:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <HAL_UART_MspInit+0xe0>)
 800214c:	2200      	movs	r2, #0
 800214e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002150:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <HAL_UART_MspInit+0xe0>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002156:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <HAL_UART_MspInit+0xe0>)
 8002158:	2280      	movs	r2, #128	; 0x80
 800215a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <HAL_UART_MspInit+0xe0>)
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002162:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <HAL_UART_MspInit+0xe0>)
 8002164:	2200      	movs	r2, #0
 8002166:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <HAL_UART_MspInit+0xe0>)
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800216e:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <HAL_UART_MspInit+0xe0>)
 8002170:	2200      	movs	r2, #0
 8002172:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002174:	480e      	ldr	r0, [pc, #56]	; (80021b0 <HAL_UART_MspInit+0xe0>)
 8002176:	f001 ff7d 	bl	8004074 <HAL_DMA_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8002180:	f7ff fe98 	bl	8001eb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <HAL_UART_MspInit+0xe0>)
 8002188:	671a      	str	r2, [r3, #112]	; 0x70
 800218a:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <HAL_UART_MspInit+0xe0>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002190:	2200      	movs	r2, #0
 8002192:	2100      	movs	r1, #0
 8002194:	2026      	movs	r0, #38	; 0x26
 8002196:	f001 fdea 	bl	8003d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800219a:	2026      	movs	r0, #38	; 0x26
 800219c:	f001 fe03 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021a0:	bf00      	nop
 80021a2:	3728      	adds	r7, #40	; 0x28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40004400 	.word	0x40004400
 80021ac:	40021000 	.word	0x40021000
 80021b0:	20000338 	.word	0x20000338
 80021b4:	4002006c 	.word	0x4002006c

080021b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <NMI_Handler+0x4>

080021be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <HardFault_Handler+0x4>

080021c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <MemManage_Handler+0x4>

080021ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ce:	e7fe      	b.n	80021ce <BusFault_Handler+0x4>

080021d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <UsageFault_Handler+0x4>

080021d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002204:	f000 f99c 	bl	8002540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}

0800220c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <DMA1_Channel6_IRQHandler+0x10>)
 8002212:	f002 f84c 	bl	80042ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000338 	.word	0x20000338

08002220 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <ADC1_2_IRQHandler+0x10>)
 8002226:	f000 fce7 	bl	8002bf8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000204 	.word	0x20000204

08002234 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
state =1;
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <EXTI9_5_IRQHandler+0x2c>)
 800223a:	2201      	movs	r2, #1
 800223c:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800223e:	2040      	movs	r0, #64	; 0x40
 8002240:	f002 fafc 	bl	800483c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002244:	2080      	movs	r0, #128	; 0x80
 8002246:	f002 faf9 	bl	800483c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800224a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800224e:	f002 faf5 	bl	800483c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002252:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002256:	f002 faf1 	bl	800483c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	2000042d 	.word	0x2000042d

08002264 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <TIM2_IRQHandler+0x10>)
 800226a:	f004 f977 	bl	800655c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000268 	.word	0x20000268

08002278 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <USART2_IRQHandler+0x10>)
 800227e:	f005 fa8d 	bl	800779c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200002b4 	.word	0x200002b4

0800228c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002290:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002294:	f002 fad2 	bl	800483c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}

0800229c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80022a0:	4802      	ldr	r0, [pc, #8]	; (80022ac <TIM6_DAC_IRQHandler+0x10>)
 80022a2:	f001 fe36 	bl	8003f12 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000254 	.word	0x20000254

080022b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return 1;
 80022b4:	2301      	movs	r3, #1
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <_kill>:

int _kill(int pid, int sig)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022ca:	f006 fbb1 	bl	8008a30 <__errno>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2216      	movs	r2, #22
 80022d2:	601a      	str	r2, [r3, #0]
  return -1;
 80022d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <_exit>:

void _exit (int status)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022e8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ffe7 	bl	80022c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022f2:	e7fe      	b.n	80022f2 <_exit+0x12>

080022f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	e00a      	b.n	800231c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002306:	f3af 8000 	nop.w
 800230a:	4601      	mov	r1, r0
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	60ba      	str	r2, [r7, #8]
 8002312:	b2ca      	uxtb	r2, r1
 8002314:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	3301      	adds	r3, #1
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	429a      	cmp	r2, r3
 8002322:	dbf0      	blt.n	8002306 <_read+0x12>
  }

  return len;
 8002324:	687b      	ldr	r3, [r7, #4]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	e009      	b.n	8002354 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	60ba      	str	r2, [r7, #8]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3301      	adds	r3, #1
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	dbf1      	blt.n	8002340 <_write+0x12>
  }
  return len;
 800235c:	687b      	ldr	r3, [r7, #4]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <_close>:

int _close(int file)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800236e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800238e:	605a      	str	r2, [r3, #4]
  return 0;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <_isatty>:

int _isatty(int file)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023a6:	2301      	movs	r3, #1
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d8:	4a14      	ldr	r2, [pc, #80]	; (800242c <_sbrk+0x5c>)
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <_sbrk+0x60>)
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <_sbrk+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023ec:	4b11      	ldr	r3, [pc, #68]	; (8002434 <_sbrk+0x64>)
 80023ee:	4a12      	ldr	r2, [pc, #72]	; (8002438 <_sbrk+0x68>)
 80023f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <_sbrk+0x64>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d207      	bcs.n	8002410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002400:	f006 fb16 	bl	8008a30 <__errno>
 8002404:	4603      	mov	r3, r0
 8002406:	220c      	movs	r2, #12
 8002408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800240a:	f04f 33ff 	mov.w	r3, #4294967295
 800240e:	e009      	b.n	8002424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <_sbrk+0x64>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <_sbrk+0x64>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	4a05      	ldr	r2, [pc, #20]	; (8002434 <_sbrk+0x64>)
 8002420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002422:	68fb      	ldr	r3, [r7, #12]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20010000 	.word	0x20010000
 8002430:	00000400 	.word	0x00000400
 8002434:	20000430 	.word	0x20000430
 8002438:	20000448 	.word	0x20000448

0800243c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <SystemInit+0x20>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002446:	4a05      	ldr	r2, [pc, #20]	; (800245c <SystemInit+0x20>)
 8002448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800244c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002498 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002464:	480d      	ldr	r0, [pc, #52]	; (800249c <LoopForever+0x6>)
  ldr r1, =_edata
 8002466:	490e      	ldr	r1, [pc, #56]	; (80024a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002468:	4a0e      	ldr	r2, [pc, #56]	; (80024a4 <LoopForever+0xe>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800246c:	e002      	b.n	8002474 <LoopCopyDataInit>

0800246e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002472:	3304      	adds	r3, #4

08002474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002478:	d3f9      	bcc.n	800246e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800247a:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800247c:	4c0b      	ldr	r4, [pc, #44]	; (80024ac <LoopForever+0x16>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002480:	e001      	b.n	8002486 <LoopFillZerobss>

08002482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002484:	3204      	adds	r2, #4

08002486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002488:	d3fb      	bcc.n	8002482 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800248a:	f7ff ffd7 	bl	800243c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800248e:	f006 fad5 	bl	8008a3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002492:	f7ff f9e3 	bl	800185c <main>

08002496 <LoopForever>:

LoopForever:
    b LoopForever
 8002496:	e7fe      	b.n	8002496 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002498:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800249c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80024a4:	0800cca8 	.word	0x0800cca8
  ldr r2, =_sbss
 80024a8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80024ac:	20000448 	.word	0x20000448

080024b0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024b0:	e7fe      	b.n	80024b0 <ADC3_IRQHandler>
	...

080024b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_Init+0x28>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a07      	ldr	r2, [pc, #28]	; (80024dc <HAL_Init+0x28>)
 80024be:	f043 0310 	orr.w	r3, r3, #16
 80024c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c4:	2003      	movs	r0, #3
 80024c6:	f001 fc47 	bl	8003d58 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ca:	2000      	movs	r0, #0
 80024cc:	f000 f808 	bl	80024e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d0:	f7ff fcf6 	bl	8001ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40022000 	.word	0x40022000

080024e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <HAL_InitTick+0x54>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_InitTick+0x58>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4619      	mov	r1, r3
 80024f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fe:	4618      	mov	r0, r3
 8002500:	f001 fc5f 	bl	8003dc2 <HAL_SYSTICK_Config>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e00e      	b.n	800252c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b0f      	cmp	r3, #15
 8002512:	d80a      	bhi.n	800252a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002514:	2200      	movs	r2, #0
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	f04f 30ff 	mov.w	r0, #4294967295
 800251c:	f001 fc27 	bl	8003d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002520:	4a06      	ldr	r2, [pc, #24]	; (800253c <HAL_InitTick+0x5c>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e000      	b.n	800252c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000008 	.word	0x20000008
 8002538:	20000010 	.word	0x20000010
 800253c:	2000000c 	.word	0x2000000c

08002540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <HAL_IncTick+0x20>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_IncTick+0x24>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4413      	add	r3, r2
 8002550:	4a04      	ldr	r2, [pc, #16]	; (8002564 <HAL_IncTick+0x24>)
 8002552:	6013      	str	r3, [r2, #0]
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000010 	.word	0x20000010
 8002564:	20000434 	.word	0x20000434

08002568 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return uwTick;  
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <HAL_GetTick+0x14>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000434 	.word	0x20000434

08002580 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b09a      	sub	sp, #104	; 0x68
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e1e3      	b.n	80029a4 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d176      	bne.n	80026dc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d152      	bne.n	800269c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff fc79 	bl	8001f08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d13b      	bne.n	800269c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f001 fa61 	bl	8003aec <ADC_Disable>
 800262a:	4603      	mov	r3, r0
 800262c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b00      	cmp	r3, #0
 800263a:	d12f      	bne.n	800269c <HAL_ADC_Init+0xe0>
 800263c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002640:	2b00      	cmp	r3, #0
 8002642:	d12b      	bne.n	800269c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800264c:	f023 0302 	bic.w	r3, r3, #2
 8002650:	f043 0202 	orr.w	r2, r3, #2
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002666:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002676:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002678:	4b92      	ldr	r3, [pc, #584]	; (80028c4 <HAL_ADC_Init+0x308>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a92      	ldr	r2, [pc, #584]	; (80028c8 <HAL_ADC_Init+0x30c>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0c9a      	lsrs	r2, r3, #18
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800268e:	e002      	b.n	8002696 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	3b01      	subs	r3, #1
 8002694:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f9      	bne.n	8002690 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d007      	beq.n	80026ba <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026b8:	d110      	bne.n	80026dc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f023 0312 	bic.w	r3, r3, #18
 80026c2:	f043 0210 	orr.w	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f043 0201 	orr.w	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f040 8150 	bne.w	800298a <HAL_ADC_Init+0x3ce>
 80026ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f040 814b 	bne.w	800298a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 8143 	bne.w	800298a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800270c:	f043 0202 	orr.w	r2, r3, #2
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800271c:	d004      	beq.n	8002728 <HAL_ADC_Init+0x16c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a6a      	ldr	r2, [pc, #424]	; (80028cc <HAL_ADC_Init+0x310>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d101      	bne.n	800272c <HAL_ADC_Init+0x170>
 8002728:	4b69      	ldr	r3, [pc, #420]	; (80028d0 <HAL_ADC_Init+0x314>)
 800272a:	e000      	b.n	800272e <HAL_ADC_Init+0x172>
 800272c:	4b69      	ldr	r3, [pc, #420]	; (80028d4 <HAL_ADC_Init+0x318>)
 800272e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002738:	d102      	bne.n	8002740 <HAL_ADC_Init+0x184>
 800273a:	4b64      	ldr	r3, [pc, #400]	; (80028cc <HAL_ADC_Init+0x310>)
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	e01a      	b.n	8002776 <HAL_ADC_Init+0x1ba>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a61      	ldr	r2, [pc, #388]	; (80028cc <HAL_ADC_Init+0x310>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d103      	bne.n	8002752 <HAL_ADC_Init+0x196>
 800274a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e011      	b.n	8002776 <HAL_ADC_Init+0x1ba>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a60      	ldr	r2, [pc, #384]	; (80028d8 <HAL_ADC_Init+0x31c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d102      	bne.n	8002762 <HAL_ADC_Init+0x1a6>
 800275c:	4b5f      	ldr	r3, [pc, #380]	; (80028dc <HAL_ADC_Init+0x320>)
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	e009      	b.n	8002776 <HAL_ADC_Init+0x1ba>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a5d      	ldr	r2, [pc, #372]	; (80028dc <HAL_ADC_Init+0x320>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d102      	bne.n	8002772 <HAL_ADC_Init+0x1b6>
 800276c:	4b5a      	ldr	r3, [pc, #360]	; (80028d8 <HAL_ADC_Init+0x31c>)
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	e001      	b.n	8002776 <HAL_ADC_Init+0x1ba>
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d108      	bne.n	8002796 <HAL_ADC_Init+0x1da>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_ADC_Init+0x1da>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <HAL_ADC_Init+0x1dc>
 8002796:	2300      	movs	r3, #0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d11c      	bne.n	80027d6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800279c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d010      	beq.n	80027c4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_ADC_Init+0x202>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_ADC_Init+0x202>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_ADC_Init+0x204>
 80027be:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d108      	bne.n	80027d6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80027c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	431a      	orrs	r2, r3
 80027d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	7e5b      	ldrb	r3, [r3, #25]
 80027da:	035b      	lsls	r3, r3, #13
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027e0:	2a01      	cmp	r2, #1
 80027e2:	d002      	beq.n	80027ea <HAL_ADC_Init+0x22e>
 80027e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027e8:	e000      	b.n	80027ec <HAL_ADC_Init+0x230>
 80027ea:	2200      	movs	r2, #0
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027fc:	4313      	orrs	r3, r2
 80027fe:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d11b      	bne.n	8002842 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	7e5b      	ldrb	r3, [r3, #25]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	3b01      	subs	r3, #1
 8002818:	045a      	lsls	r2, r3, #17
 800281a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800281c:	4313      	orrs	r3, r2
 800281e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002822:	663b      	str	r3, [r7, #96]	; 0x60
 8002824:	e00d      	b.n	8002842 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800282e:	f043 0220 	orr.w	r2, r3, #32
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	f043 0201 	orr.w	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002846:	2b01      	cmp	r3, #1
 8002848:	d054      	beq.n	80028f4 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <HAL_ADC_Init+0x31c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d004      	beq.n	800285e <HAL_ADC_Init+0x2a2>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a20      	ldr	r2, [pc, #128]	; (80028dc <HAL_ADC_Init+0x320>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d140      	bne.n	80028e0 <HAL_ADC_Init+0x324>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002862:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002866:	d02a      	beq.n	80028be <HAL_ADC_Init+0x302>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002870:	d022      	beq.n	80028b8 <HAL_ADC_Init+0x2fc>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800287a:	d01a      	beq.n	80028b2 <HAL_ADC_Init+0x2f6>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002884:	d012      	beq.n	80028ac <HAL_ADC_Init+0x2f0>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800288e:	d00a      	beq.n	80028a6 <HAL_ADC_Init+0x2ea>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002898:	d002      	beq.n	80028a0 <HAL_ADC_Init+0x2e4>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	e023      	b.n	80028e8 <HAL_ADC_Init+0x32c>
 80028a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80028a4:	e020      	b.n	80028e8 <HAL_ADC_Init+0x32c>
 80028a6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80028aa:	e01d      	b.n	80028e8 <HAL_ADC_Init+0x32c>
 80028ac:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80028b0:	e01a      	b.n	80028e8 <HAL_ADC_Init+0x32c>
 80028b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028b6:	e017      	b.n	80028e8 <HAL_ADC_Init+0x32c>
 80028b8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80028bc:	e014      	b.n	80028e8 <HAL_ADC_Init+0x32c>
 80028be:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80028c2:	e011      	b.n	80028e8 <HAL_ADC_Init+0x32c>
 80028c4:	20000008 	.word	0x20000008
 80028c8:	431bde83 	.word	0x431bde83
 80028cc:	50000100 	.word	0x50000100
 80028d0:	50000300 	.word	0x50000300
 80028d4:	50000700 	.word	0x50000700
 80028d8:	50000400 	.word	0x50000400
 80028dc:	50000500 	.word	0x50000500
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028ec:	4313      	orrs	r3, r2
 80028ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028f0:	4313      	orrs	r3, r2
 80028f2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d114      	bne.n	800292c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002910:	f023 0302 	bic.w	r3, r3, #2
 8002914:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	7e1b      	ldrb	r3, [r3, #24]
 800291a:	039a      	lsls	r2, r3, #14
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4313      	orrs	r3, r2
 8002926:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002928:	4313      	orrs	r3, r2
 800292a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <HAL_ADC_Init+0x3f0>)
 8002934:	4013      	ands	r3, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800293c:	430b      	orrs	r3, r1
 800293e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d10c      	bne.n	8002962 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	f023 010f 	bic.w	r1, r3, #15
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	1e5a      	subs	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	631a      	str	r2, [r3, #48]	; 0x30
 8002960:	e007      	b.n	8002972 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 020f 	bic.w	r2, r2, #15
 8002970:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	f023 0303 	bic.w	r3, r3, #3
 8002980:	f043 0201 	orr.w	r2, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	641a      	str	r2, [r3, #64]	; 0x40
 8002988:	e00a      	b.n	80029a0 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f023 0312 	bic.w	r3, r3, #18
 8002992:	f043 0210 	orr.w	r2, r3, #16
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800299a:	2301      	movs	r3, #1
 800299c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80029a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3768      	adds	r7, #104	; 0x68
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	fff0c007 	.word	0xfff0c007

080029b0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f040 80f9 	bne.w	8002bbe <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_ADC_Start+0x2a>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e0f4      	b.n	8002bc4 <HAL_ADC_Start+0x214>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f001 f81e 	bl	8003a24 <ADC_Enable>
 80029e8:	4603      	mov	r3, r0
 80029ea:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f040 80e0 	bne.w	8002bb4 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a10:	d004      	beq.n	8002a1c <HAL_ADC_Start+0x6c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a6d      	ldr	r2, [pc, #436]	; (8002bcc <HAL_ADC_Start+0x21c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d106      	bne.n	8002a2a <HAL_ADC_Start+0x7a>
 8002a1c:	4b6c      	ldr	r3, [pc, #432]	; (8002bd0 <HAL_ADC_Start+0x220>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d010      	beq.n	8002a4a <HAL_ADC_Start+0x9a>
 8002a28:	e005      	b.n	8002a36 <HAL_ADC_Start+0x86>
 8002a2a:	4b6a      	ldr	r3, [pc, #424]	; (8002bd4 <HAL_ADC_Start+0x224>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_ADC_Start+0x9a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a3e:	d004      	beq.n	8002a4a <HAL_ADC_Start+0x9a>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a64      	ldr	r2, [pc, #400]	; (8002bd8 <HAL_ADC_Start+0x228>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d115      	bne.n	8002a76 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d036      	beq.n	8002ad2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a6c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002a74:	e02d      	b.n	8002ad2 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a8a:	d004      	beq.n	8002a96 <HAL_ADC_Start+0xe6>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a4e      	ldr	r2, [pc, #312]	; (8002bcc <HAL_ADC_Start+0x21c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d10a      	bne.n	8002aac <HAL_ADC_Start+0xfc>
 8002a96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf14      	ite	ne
 8002aa4:	2301      	movne	r3, #1
 8002aa6:	2300      	moveq	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	e008      	b.n	8002abe <HAL_ADC_Start+0x10e>
 8002aac:	4b4a      	ldr	r3, [pc, #296]	; (8002bd8 <HAL_ADC_Start+0x228>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf14      	ite	ne
 8002ab8:	2301      	movne	r3, #1
 8002aba:	2300      	moveq	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002aca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ade:	d106      	bne.n	8002aee <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae4:	f023 0206 	bic.w	r2, r3, #6
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	645a      	str	r2, [r3, #68]	; 0x44
 8002aec:	e002      	b.n	8002af4 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	221c      	movs	r2, #28
 8002b02:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b0c:	d004      	beq.n	8002b18 <HAL_ADC_Start+0x168>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a2e      	ldr	r2, [pc, #184]	; (8002bcc <HAL_ADC_Start+0x21c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d106      	bne.n	8002b26 <HAL_ADC_Start+0x176>
 8002b18:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <HAL_ADC_Start+0x220>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d03e      	beq.n	8002ba2 <HAL_ADC_Start+0x1f2>
 8002b24:	e005      	b.n	8002b32 <HAL_ADC_Start+0x182>
 8002b26:	4b2b      	ldr	r3, [pc, #172]	; (8002bd4 <HAL_ADC_Start+0x224>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d037      	beq.n	8002ba2 <HAL_ADC_Start+0x1f2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b3a:	d004      	beq.n	8002b46 <HAL_ADC_Start+0x196>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a22      	ldr	r2, [pc, #136]	; (8002bcc <HAL_ADC_Start+0x21c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d106      	bne.n	8002b54 <HAL_ADC_Start+0x1a4>
 8002b46:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <HAL_ADC_Start+0x220>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	2b05      	cmp	r3, #5
 8002b50:	d027      	beq.n	8002ba2 <HAL_ADC_Start+0x1f2>
 8002b52:	e005      	b.n	8002b60 <HAL_ADC_Start+0x1b0>
 8002b54:	4b1f      	ldr	r3, [pc, #124]	; (8002bd4 <HAL_ADC_Start+0x224>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 031f 	and.w	r3, r3, #31
 8002b5c:	2b05      	cmp	r3, #5
 8002b5e:	d020      	beq.n	8002ba2 <HAL_ADC_Start+0x1f2>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b68:	d004      	beq.n	8002b74 <HAL_ADC_Start+0x1c4>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a17      	ldr	r2, [pc, #92]	; (8002bcc <HAL_ADC_Start+0x21c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d106      	bne.n	8002b82 <HAL_ADC_Start+0x1d2>
 8002b74:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <HAL_ADC_Start+0x220>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	2b09      	cmp	r3, #9
 8002b7e:	d010      	beq.n	8002ba2 <HAL_ADC_Start+0x1f2>
 8002b80:	e005      	b.n	8002b8e <HAL_ADC_Start+0x1de>
 8002b82:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <HAL_ADC_Start+0x224>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	2b09      	cmp	r3, #9
 8002b8c:	d009      	beq.n	8002ba2 <HAL_ADC_Start+0x1f2>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b96:	d004      	beq.n	8002ba2 <HAL_ADC_Start+0x1f2>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0e      	ldr	r2, [pc, #56]	; (8002bd8 <HAL_ADC_Start+0x228>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d10f      	bne.n	8002bc2 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0204 	orr.w	r2, r2, #4
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	e006      	b.n	8002bc2 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002bbc:	e001      	b.n	8002bc2 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	50000100 	.word	0x50000100
 8002bd0:	50000300 	.word	0x50000300
 8002bd4:	50000700 	.word	0x50000700
 8002bd8:	50000400 	.word	0x50000400

08002bdc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d106      	bne.n	8002c28 <HAL_ADC_IRQHandler+0x30>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d00f      	beq.n	8002c48 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	f040 80c0 	bne.w	8002db8 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	f040 80b8 	bne.w	8002db8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d105      	bne.n	8002c60 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c68:	d004      	beq.n	8002c74 <HAL_ADC_IRQHandler+0x7c>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a8e      	ldr	r2, [pc, #568]	; (8002ea8 <HAL_ADC_IRQHandler+0x2b0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d106      	bne.n	8002c82 <HAL_ADC_IRQHandler+0x8a>
 8002c74:	4b8d      	ldr	r3, [pc, #564]	; (8002eac <HAL_ADC_IRQHandler+0x2b4>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d03e      	beq.n	8002cfe <HAL_ADC_IRQHandler+0x106>
 8002c80:	e005      	b.n	8002c8e <HAL_ADC_IRQHandler+0x96>
 8002c82:	4b8b      	ldr	r3, [pc, #556]	; (8002eb0 <HAL_ADC_IRQHandler+0x2b8>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d037      	beq.n	8002cfe <HAL_ADC_IRQHandler+0x106>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c96:	d004      	beq.n	8002ca2 <HAL_ADC_IRQHandler+0xaa>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a82      	ldr	r2, [pc, #520]	; (8002ea8 <HAL_ADC_IRQHandler+0x2b0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d106      	bne.n	8002cb0 <HAL_ADC_IRQHandler+0xb8>
 8002ca2:	4b82      	ldr	r3, [pc, #520]	; (8002eac <HAL_ADC_IRQHandler+0x2b4>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	d027      	beq.n	8002cfe <HAL_ADC_IRQHandler+0x106>
 8002cae:	e005      	b.n	8002cbc <HAL_ADC_IRQHandler+0xc4>
 8002cb0:	4b7f      	ldr	r3, [pc, #508]	; (8002eb0 <HAL_ADC_IRQHandler+0x2b8>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	2b05      	cmp	r3, #5
 8002cba:	d020      	beq.n	8002cfe <HAL_ADC_IRQHandler+0x106>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cc4:	d004      	beq.n	8002cd0 <HAL_ADC_IRQHandler+0xd8>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a77      	ldr	r2, [pc, #476]	; (8002ea8 <HAL_ADC_IRQHandler+0x2b0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d106      	bne.n	8002cde <HAL_ADC_IRQHandler+0xe6>
 8002cd0:	4b76      	ldr	r3, [pc, #472]	; (8002eac <HAL_ADC_IRQHandler+0x2b4>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	2b09      	cmp	r3, #9
 8002cda:	d010      	beq.n	8002cfe <HAL_ADC_IRQHandler+0x106>
 8002cdc:	e005      	b.n	8002cea <HAL_ADC_IRQHandler+0xf2>
 8002cde:	4b74      	ldr	r3, [pc, #464]	; (8002eb0 <HAL_ADC_IRQHandler+0x2b8>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	2b09      	cmp	r3, #9
 8002ce8:	d009      	beq.n	8002cfe <HAL_ADC_IRQHandler+0x106>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf2:	d004      	beq.n	8002cfe <HAL_ADC_IRQHandler+0x106>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a6e      	ldr	r2, [pc, #440]	; (8002eb4 <HAL_ADC_IRQHandler+0x2bc>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d104      	bne.n	8002d08 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	e00f      	b.n	8002d28 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d10:	d004      	beq.n	8002d1c <HAL_ADC_IRQHandler+0x124>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a64      	ldr	r2, [pc, #400]	; (8002ea8 <HAL_ADC_IRQHandler+0x2b0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d102      	bne.n	8002d22 <HAL_ADC_IRQHandler+0x12a>
 8002d1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d20:	e000      	b.n	8002d24 <HAL_ADC_IRQHandler+0x12c>
 8002d22:	4b64      	ldr	r3, [pc, #400]	; (8002eb4 <HAL_ADC_IRQHandler+0x2bc>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d139      	bne.n	8002daa <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d134      	bne.n	8002daa <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d12d      	bne.n	8002daa <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d11a      	bne.n	8002d92 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 020c 	bic.w	r2, r2, #12
 8002d6a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d112      	bne.n	8002daa <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d90:	e00b      	b.n	8002daa <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f043 0210 	orr.w	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	f043 0201 	orr.w	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff fbe8 	bl	8002580 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	220c      	movs	r2, #12
 8002db6:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b20      	cmp	r3, #32
 8002dc4:	d106      	bne.n	8002dd4 <HAL_ADC_IRQHandler+0x1dc>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d00f      	beq.n	8002df4 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002dde:	2b40      	cmp	r3, #64	; 0x40
 8002de0:	f040 8143 	bne.w	800306a <HAL_ADC_IRQHandler+0x472>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	2b40      	cmp	r3, #64	; 0x40
 8002df0:	f040 813b 	bne.w	800306a <HAL_ADC_IRQHandler+0x472>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e08:	d004      	beq.n	8002e14 <HAL_ADC_IRQHandler+0x21c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a26      	ldr	r2, [pc, #152]	; (8002ea8 <HAL_ADC_IRQHandler+0x2b0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d106      	bne.n	8002e22 <HAL_ADC_IRQHandler+0x22a>
 8002e14:	4b25      	ldr	r3, [pc, #148]	; (8002eac <HAL_ADC_IRQHandler+0x2b4>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d03e      	beq.n	8002e9e <HAL_ADC_IRQHandler+0x2a6>
 8002e20:	e005      	b.n	8002e2e <HAL_ADC_IRQHandler+0x236>
 8002e22:	4b23      	ldr	r3, [pc, #140]	; (8002eb0 <HAL_ADC_IRQHandler+0x2b8>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d037      	beq.n	8002e9e <HAL_ADC_IRQHandler+0x2a6>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e36:	d004      	beq.n	8002e42 <HAL_ADC_IRQHandler+0x24a>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ea8 <HAL_ADC_IRQHandler+0x2b0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d106      	bne.n	8002e50 <HAL_ADC_IRQHandler+0x258>
 8002e42:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <HAL_ADC_IRQHandler+0x2b4>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d027      	beq.n	8002e9e <HAL_ADC_IRQHandler+0x2a6>
 8002e4e:	e005      	b.n	8002e5c <HAL_ADC_IRQHandler+0x264>
 8002e50:	4b17      	ldr	r3, [pc, #92]	; (8002eb0 <HAL_ADC_IRQHandler+0x2b8>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d020      	beq.n	8002e9e <HAL_ADC_IRQHandler+0x2a6>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e64:	d004      	beq.n	8002e70 <HAL_ADC_IRQHandler+0x278>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ea8 <HAL_ADC_IRQHandler+0x2b0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d106      	bne.n	8002e7e <HAL_ADC_IRQHandler+0x286>
 8002e70:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <HAL_ADC_IRQHandler+0x2b4>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	2b09      	cmp	r3, #9
 8002e7a:	d010      	beq.n	8002e9e <HAL_ADC_IRQHandler+0x2a6>
 8002e7c:	e005      	b.n	8002e8a <HAL_ADC_IRQHandler+0x292>
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <HAL_ADC_IRQHandler+0x2b8>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	2b09      	cmp	r3, #9
 8002e88:	d009      	beq.n	8002e9e <HAL_ADC_IRQHandler+0x2a6>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e92:	d004      	beq.n	8002e9e <HAL_ADC_IRQHandler+0x2a6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a06      	ldr	r2, [pc, #24]	; (8002eb4 <HAL_ADC_IRQHandler+0x2bc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_ADC_IRQHandler+0x2c0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	e017      	b.n	8002ed8 <HAL_ADC_IRQHandler+0x2e0>
 8002ea8:	50000100 	.word	0x50000100
 8002eac:	50000300 	.word	0x50000300
 8002eb0:	50000700 	.word	0x50000700
 8002eb4:	50000400 	.word	0x50000400
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ec0:	d004      	beq.n	8002ecc <HAL_ADC_IRQHandler+0x2d4>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a5b      	ldr	r2, [pc, #364]	; (8003034 <HAL_ADC_IRQHandler+0x43c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d102      	bne.n	8002ed2 <HAL_ADC_IRQHandler+0x2da>
 8002ecc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ed0:	e000      	b.n	8002ed4 <HAL_ADC_IRQHandler+0x2dc>
 8002ed2:	4b59      	ldr	r3, [pc, #356]	; (8003038 <HAL_ADC_IRQHandler+0x440>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ede:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f040 80ba 	bne.w	800305c <HAL_ADC_IRQHandler+0x464>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00d      	beq.n	8002f0e <HAL_ADC_IRQHandler+0x316>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f040 80ad 	bne.w	800305c <HAL_ADC_IRQHandler+0x464>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f040 80a7 	bne.w	800305c <HAL_ADC_IRQHandler+0x464>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f18:	2b40      	cmp	r3, #64	; 0x40
 8002f1a:	f040 809f 	bne.w	800305c <HAL_ADC_IRQHandler+0x464>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f26:	d004      	beq.n	8002f32 <HAL_ADC_IRQHandler+0x33a>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a41      	ldr	r2, [pc, #260]	; (8003034 <HAL_ADC_IRQHandler+0x43c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d106      	bne.n	8002f40 <HAL_ADC_IRQHandler+0x348>
 8002f32:	4b42      	ldr	r3, [pc, #264]	; (800303c <HAL_ADC_IRQHandler+0x444>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d03e      	beq.n	8002fbc <HAL_ADC_IRQHandler+0x3c4>
 8002f3e:	e005      	b.n	8002f4c <HAL_ADC_IRQHandler+0x354>
 8002f40:	4b3f      	ldr	r3, [pc, #252]	; (8003040 <HAL_ADC_IRQHandler+0x448>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d037      	beq.n	8002fbc <HAL_ADC_IRQHandler+0x3c4>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f54:	d004      	beq.n	8002f60 <HAL_ADC_IRQHandler+0x368>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a36      	ldr	r2, [pc, #216]	; (8003034 <HAL_ADC_IRQHandler+0x43c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d106      	bne.n	8002f6e <HAL_ADC_IRQHandler+0x376>
 8002f60:	4b36      	ldr	r3, [pc, #216]	; (800303c <HAL_ADC_IRQHandler+0x444>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	2b06      	cmp	r3, #6
 8002f6a:	d027      	beq.n	8002fbc <HAL_ADC_IRQHandler+0x3c4>
 8002f6c:	e005      	b.n	8002f7a <HAL_ADC_IRQHandler+0x382>
 8002f6e:	4b34      	ldr	r3, [pc, #208]	; (8003040 <HAL_ADC_IRQHandler+0x448>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	2b06      	cmp	r3, #6
 8002f78:	d020      	beq.n	8002fbc <HAL_ADC_IRQHandler+0x3c4>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f82:	d004      	beq.n	8002f8e <HAL_ADC_IRQHandler+0x396>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a2a      	ldr	r2, [pc, #168]	; (8003034 <HAL_ADC_IRQHandler+0x43c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d106      	bne.n	8002f9c <HAL_ADC_IRQHandler+0x3a4>
 8002f8e:	4b2b      	ldr	r3, [pc, #172]	; (800303c <HAL_ADC_IRQHandler+0x444>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	2b07      	cmp	r3, #7
 8002f98:	d010      	beq.n	8002fbc <HAL_ADC_IRQHandler+0x3c4>
 8002f9a:	e005      	b.n	8002fa8 <HAL_ADC_IRQHandler+0x3b0>
 8002f9c:	4b28      	ldr	r3, [pc, #160]	; (8003040 <HAL_ADC_IRQHandler+0x448>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	2b07      	cmp	r3, #7
 8002fa6:	d009      	beq.n	8002fbc <HAL_ADC_IRQHandler+0x3c4>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fb0:	d004      	beq.n	8002fbc <HAL_ADC_IRQHandler+0x3c4>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a20      	ldr	r2, [pc, #128]	; (8003038 <HAL_ADC_IRQHandler+0x440>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d104      	bne.n	8002fc6 <HAL_ADC_IRQHandler+0x3ce>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	e00f      	b.n	8002fe6 <HAL_ADC_IRQHandler+0x3ee>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fce:	d004      	beq.n	8002fda <HAL_ADC_IRQHandler+0x3e2>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a17      	ldr	r2, [pc, #92]	; (8003034 <HAL_ADC_IRQHandler+0x43c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d102      	bne.n	8002fe0 <HAL_ADC_IRQHandler+0x3e8>
 8002fda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fde:	e000      	b.n	8002fe2 <HAL_ADC_IRQHandler+0x3ea>
 8002fe0:	4b15      	ldr	r3, [pc, #84]	; (8003038 <HAL_ADC_IRQHandler+0x440>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d135      	bne.n	800305c <HAL_ADC_IRQHandler+0x464>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d122      	bne.n	8003044 <HAL_ADC_IRQHandler+0x44c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800300c:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d11a      	bne.n	800305c <HAL_ADC_IRQHandler+0x464>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f043 0201 	orr.w	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	641a      	str	r2, [r3, #64]	; 0x40
 8003032:	e013      	b.n	800305c <HAL_ADC_IRQHandler+0x464>
 8003034:	50000100 	.word	0x50000100
 8003038:	50000400 	.word	0x50000400
 800303c:	50000300 	.word	0x50000300
 8003040:	50000700 	.word	0x50000700
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	f043 0210 	orr.w	r2, r3, #16
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003054:	f043 0201 	orr.w	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f8db 	bl	8003218 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2260      	movs	r2, #96	; 0x60
 8003068:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003074:	2b80      	cmp	r3, #128	; 0x80
 8003076:	d113      	bne.n	80030a0 <HAL_ADC_IRQHandler+0x4a8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003082:	2b80      	cmp	r3, #128	; 0x80
 8003084:	d10c      	bne.n	80030a0 <HAL_ADC_IRQHandler+0x4a8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff fa7e 	bl	8002594 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2280      	movs	r2, #128	; 0x80
 800309e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ae:	d115      	bne.n	80030dc <HAL_ADC_IRQHandler+0x4e4>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030be:	d10d      	bne.n	80030dc <HAL_ADC_IRQHandler+0x4e4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f8b7 	bl	8003240 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030da:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ea:	d115      	bne.n	8003118 <HAL_ADC_IRQHandler+0x520>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030fa:	d10d      	bne.n	8003118 <HAL_ADC_IRQHandler+0x520>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f8a3 	bl	8003254 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003116:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b10      	cmp	r3, #16
 8003124:	d149      	bne.n	80031ba <HAL_ADC_IRQHandler+0x5c2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b10      	cmp	r3, #16
 8003132:	d142      	bne.n	80031ba <HAL_ADC_IRQHandler+0x5c2>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003138:	2b01      	cmp	r3, #1
 800313a:	d102      	bne.n	8003142 <HAL_ADC_IRQHandler+0x54a>
    {
      overrun_error = 1U;
 800313c:	2301      	movs	r3, #1
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	e025      	b.n	800318e <HAL_ADC_IRQHandler+0x596>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800314a:	d004      	beq.n	8003156 <HAL_ADC_IRQHandler+0x55e>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a2e      	ldr	r2, [pc, #184]	; (800320c <HAL_ADC_IRQHandler+0x614>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d101      	bne.n	800315a <HAL_ADC_IRQHandler+0x562>
 8003156:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <HAL_ADC_IRQHandler+0x618>)
 8003158:	e000      	b.n	800315c <HAL_ADC_IRQHandler+0x564>
 800315a:	4b2e      	ldr	r3, [pc, #184]	; (8003214 <HAL_ADC_IRQHandler+0x61c>)
 800315c:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_ADC_IRQHandler+0x586>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b01      	cmp	r3, #1
 8003176:	d10a      	bne.n	800318e <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 8003178:	2301      	movs	r3, #1
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	e007      	b.n	800318e <HAL_ADC_IRQHandler+0x596>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 800318a:	2301      	movs	r3, #1
 800318c:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d10e      	bne.n	80031b2 <HAL_ADC_IRQHandler+0x5ba>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a4:	f043 0202 	orr.w	r2, r3, #2
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff f9fb 	bl	80025a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2210      	movs	r2, #16
 80031b8:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c8:	d11b      	bne.n	8003202 <HAL_ADC_IRQHandler+0x60a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d8:	d113      	bne.n	8003202 <HAL_ADC_IRQHandler+0x60a>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ea:	f043 0208 	orr.w	r2, r3, #8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031fa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f815 	bl	800322c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003202:	bf00      	nop
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	50000100 	.word	0x50000100
 8003210:	50000300 	.word	0x50000300
 8003214:	50000700 	.word	0x50000700

08003218 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003268:	b480      	push	{r7}
 800326a:	b09b      	sub	sp, #108	; 0x6c
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_ADC_ConfigChannel+0x22>
 8003286:	2302      	movs	r3, #2
 8003288:	e2ca      	b.n	8003820 <HAL_ADC_ConfigChannel+0x5b8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	f040 82ae 	bne.w	80037fe <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d81c      	bhi.n	80032e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4413      	add	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	461a      	mov	r2, r3
 80032be:	231f      	movs	r3, #31
 80032c0:	4093      	lsls	r3, r2
 80032c2:	43db      	mvns	r3, r3
 80032c4:	4019      	ands	r1, r3
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4413      	add	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	fa00 f203 	lsl.w	r2, r0, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	631a      	str	r2, [r3, #48]	; 0x30
 80032e2:	e063      	b.n	80033ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b09      	cmp	r3, #9
 80032ea:	d81e      	bhi.n	800332a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4413      	add	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	3b1e      	subs	r3, #30
 8003300:	221f      	movs	r2, #31
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	4019      	ands	r1, r3
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	3b1e      	subs	r3, #30
 800331c:	fa00 f203 	lsl.w	r2, r0, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	635a      	str	r2, [r3, #52]	; 0x34
 8003328:	e040      	b.n	80033ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b0e      	cmp	r3, #14
 8003330:	d81e      	bhi.n	8003370 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4413      	add	r3, r2
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	3b3c      	subs	r3, #60	; 0x3c
 8003346:	221f      	movs	r2, #31
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	4019      	ands	r1, r3
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4413      	add	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	3b3c      	subs	r3, #60	; 0x3c
 8003362:	fa00 f203 	lsl.w	r2, r0, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	639a      	str	r2, [r3, #56]	; 0x38
 800336e:	e01d      	b.n	80033ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	4413      	add	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	3b5a      	subs	r3, #90	; 0x5a
 8003384:	221f      	movs	r2, #31
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	4019      	ands	r1, r3
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4413      	add	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	3b5a      	subs	r3, #90	; 0x5a
 80033a0:	fa00 f203 	lsl.w	r2, r0, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 80e5 	bne.w	8003586 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b09      	cmp	r3, #9
 80033c2:	d91c      	bls.n	80033fe <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6999      	ldr	r1, [r3, #24]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4613      	mov	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4413      	add	r3, r2
 80033d4:	3b1e      	subs	r3, #30
 80033d6:	2207      	movs	r2, #7
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	4019      	ands	r1, r3
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	6898      	ldr	r0, [r3, #8]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4413      	add	r3, r2
 80033ee:	3b1e      	subs	r3, #30
 80033f0:	fa00 f203 	lsl.w	r2, r0, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	619a      	str	r2, [r3, #24]
 80033fc:	e019      	b.n	8003432 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6959      	ldr	r1, [r3, #20]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4613      	mov	r3, r2
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	4413      	add	r3, r2
 800340e:	2207      	movs	r2, #7
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	4019      	ands	r1, r3
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	6898      	ldr	r0, [r3, #8]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4613      	mov	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4413      	add	r3, r2
 8003426:	fa00 f203 	lsl.w	r2, r0, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	08db      	lsrs	r3, r3, #3
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	3b01      	subs	r3, #1
 8003450:	2b03      	cmp	r3, #3
 8003452:	d84f      	bhi.n	80034f4 <HAL_ADC_ConfigChannel+0x28c>
 8003454:	a201      	add	r2, pc, #4	; (adr r2, 800345c <HAL_ADC_ConfigChannel+0x1f4>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	0800346d 	.word	0x0800346d
 8003460:	0800348f 	.word	0x0800348f
 8003464:	080034b1 	.word	0x080034b1
 8003468:	080034d3 	.word	0x080034d3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003472:	4b9a      	ldr	r3, [pc, #616]	; (80036dc <HAL_ADC_ConfigChannel+0x474>)
 8003474:	4013      	ands	r3, r2
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	6812      	ldr	r2, [r2, #0]
 800347a:	0691      	lsls	r1, r2, #26
 800347c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800347e:	430a      	orrs	r2, r1
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800348a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800348c:	e07e      	b.n	800358c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003494:	4b91      	ldr	r3, [pc, #580]	; (80036dc <HAL_ADC_ConfigChannel+0x474>)
 8003496:	4013      	ands	r3, r2
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	0691      	lsls	r1, r2, #26
 800349e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034a0:	430a      	orrs	r2, r1
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034ac:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80034ae:	e06d      	b.n	800358c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80034b6:	4b89      	ldr	r3, [pc, #548]	; (80036dc <HAL_ADC_ConfigChannel+0x474>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	0691      	lsls	r1, r2, #26
 80034c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034c2:	430a      	orrs	r2, r1
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034ce:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80034d0:	e05c      	b.n	800358c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80034d8:	4b80      	ldr	r3, [pc, #512]	; (80036dc <HAL_ADC_ConfigChannel+0x474>)
 80034da:	4013      	ands	r3, r2
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	0691      	lsls	r1, r2, #26
 80034e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034e4:	430a      	orrs	r2, r1
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034f0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80034f2:	e04b      	b.n	800358c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	069b      	lsls	r3, r3, #26
 8003504:	429a      	cmp	r2, r3
 8003506:	d107      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003516:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800351e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	069b      	lsls	r3, r3, #26
 8003528:	429a      	cmp	r2, r3
 800352a:	d107      	bne.n	800353c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800353a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	069b      	lsls	r3, r3, #26
 800354c:	429a      	cmp	r2, r3
 800354e:	d107      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800355e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003566:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	069b      	lsls	r3, r3, #26
 8003570:	429a      	cmp	r2, r3
 8003572:	d10a      	bne.n	800358a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003582:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003584:	e001      	b.n	800358a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <HAL_ADC_ConfigChannel+0x324>
      break;
 800358a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b01      	cmp	r3, #1
 8003598:	d108      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x344>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x344>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <HAL_ADC_ConfigChannel+0x346>
 80035ac:	2300      	movs	r3, #0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f040 8130 	bne.w	8003814 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d00f      	beq.n	80035dc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2201      	movs	r2, #1
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43da      	mvns	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	400a      	ands	r2, r1
 80035d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80035da:	e049      	b.n	8003670 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2201      	movs	r2, #1
 80035ea:	409a      	lsls	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b09      	cmp	r3, #9
 80035fc:	d91c      	bls.n	8003638 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6999      	ldr	r1, [r3, #24]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4613      	mov	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4413      	add	r3, r2
 800360e:	3b1b      	subs	r3, #27
 8003610:	2207      	movs	r2, #7
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	4019      	ands	r1, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6898      	ldr	r0, [r3, #8]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4613      	mov	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4413      	add	r3, r2
 8003628:	3b1b      	subs	r3, #27
 800362a:	fa00 f203 	lsl.w	r2, r0, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	619a      	str	r2, [r3, #24]
 8003636:	e01b      	b.n	8003670 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6959      	ldr	r1, [r3, #20]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	4613      	mov	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	2207      	movs	r2, #7
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	4019      	ands	r1, r3
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	6898      	ldr	r0, [r3, #8]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	4613      	mov	r3, r2
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	4413      	add	r3, r2
 8003664:	fa00 f203 	lsl.w	r2, r0, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003678:	d004      	beq.n	8003684 <HAL_ADC_ConfigChannel+0x41c>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a18      	ldr	r2, [pc, #96]	; (80036e0 <HAL_ADC_ConfigChannel+0x478>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x420>
 8003684:	4b17      	ldr	r3, [pc, #92]	; (80036e4 <HAL_ADC_ConfigChannel+0x47c>)
 8003686:	e000      	b.n	800368a <HAL_ADC_ConfigChannel+0x422>
 8003688:	4b17      	ldr	r3, [pc, #92]	; (80036e8 <HAL_ADC_ConfigChannel+0x480>)
 800368a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b10      	cmp	r3, #16
 8003692:	d105      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800369c:	2b00      	cmp	r3, #0
 800369e:	d015      	beq.n	80036cc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80036a4:	2b11      	cmp	r3, #17
 80036a6:	d105      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80036a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00b      	beq.n	80036cc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80036b8:	2b12      	cmp	r3, #18
 80036ba:	f040 80ab 	bne.w	8003814 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80036be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f040 80a4 	bne.w	8003814 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036d4:	d10a      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x484>
 80036d6:	4b02      	ldr	r3, [pc, #8]	; (80036e0 <HAL_ADC_ConfigChannel+0x478>)
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	e022      	b.n	8003722 <HAL_ADC_ConfigChannel+0x4ba>
 80036dc:	83fff000 	.word	0x83fff000
 80036e0:	50000100 	.word	0x50000100
 80036e4:	50000300 	.word	0x50000300
 80036e8:	50000700 	.word	0x50000700
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a4e      	ldr	r2, [pc, #312]	; (800382c <HAL_ADC_ConfigChannel+0x5c4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d103      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x496>
 80036f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	e011      	b.n	8003722 <HAL_ADC_ConfigChannel+0x4ba>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a4b      	ldr	r2, [pc, #300]	; (8003830 <HAL_ADC_ConfigChannel+0x5c8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d102      	bne.n	800370e <HAL_ADC_ConfigChannel+0x4a6>
 8003708:	4b4a      	ldr	r3, [pc, #296]	; (8003834 <HAL_ADC_ConfigChannel+0x5cc>)
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	e009      	b.n	8003722 <HAL_ADC_ConfigChannel+0x4ba>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a48      	ldr	r2, [pc, #288]	; (8003834 <HAL_ADC_ConfigChannel+0x5cc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d102      	bne.n	800371e <HAL_ADC_ConfigChannel+0x4b6>
 8003718:	4b45      	ldr	r3, [pc, #276]	; (8003830 <HAL_ADC_ConfigChannel+0x5c8>)
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	e001      	b.n	8003722 <HAL_ADC_ConfigChannel+0x4ba>
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	2b01      	cmp	r3, #1
 800372e:	d108      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x4da>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x4da>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_ADC_ConfigChannel+0x4dc>
 8003742:	2300      	movs	r3, #0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d150      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003748:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800374a:	2b00      	cmp	r3, #0
 800374c:	d010      	beq.n	8003770 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b01      	cmp	r3, #1
 8003758:	d107      	bne.n	800376a <HAL_ADC_ConfigChannel+0x502>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_ADC_ConfigChannel+0x502>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <HAL_ADC_ConfigChannel+0x504>
 800376a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800376c:	2b00      	cmp	r3, #0
 800376e:	d13c      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b10      	cmp	r3, #16
 8003776:	d11d      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x54c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003780:	d118      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800378a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800378c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800378e:	4b2a      	ldr	r3, [pc, #168]	; (8003838 <HAL_ADC_ConfigChannel+0x5d0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a2a      	ldr	r2, [pc, #168]	; (800383c <HAL_ADC_ConfigChannel+0x5d4>)
 8003794:	fba2 2303 	umull	r2, r3, r2, r3
 8003798:	0c9a      	lsrs	r2, r3, #18
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037a4:	e002      	b.n	80037ac <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f9      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80037b2:	e02e      	b.n	8003812 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b11      	cmp	r3, #17
 80037ba:	d10b      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x56c>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037c4:	d106      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80037c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80037ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80037d2:	e01e      	b.n	8003812 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b12      	cmp	r3, #18
 80037da:	d11a      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80037dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80037e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80037e8:	e013      	b.n	8003812 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f043 0220 	orr.w	r2, r3, #32
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80037fc:	e00a      	b.n	8003814 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f043 0220 	orr.w	r2, r3, #32
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003810:	e000      	b.n	8003814 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003812:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800381c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003820:	4618      	mov	r0, r3
 8003822:	376c      	adds	r7, #108	; 0x6c
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	50000100 	.word	0x50000100
 8003830:	50000400 	.word	0x50000400
 8003834:	50000500 	.word	0x50000500
 8003838:	20000008 	.word	0x20000008
 800383c:	431bde83 	.word	0x431bde83

08003840 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003840:	b480      	push	{r7}
 8003842:	b099      	sub	sp, #100	; 0x64
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003858:	d102      	bne.n	8003860 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800385a:	4b6d      	ldr	r3, [pc, #436]	; (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	e01a      	b.n	8003896 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a6a      	ldr	r2, [pc, #424]	; (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d103      	bne.n	8003872 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800386a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	e011      	b.n	8003896 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a67      	ldr	r2, [pc, #412]	; (8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d102      	bne.n	8003882 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800387c:	4b66      	ldr	r3, [pc, #408]	; (8003a18 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	e009      	b.n	8003896 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a64      	ldr	r2, [pc, #400]	; (8003a18 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d102      	bne.n	8003892 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800388c:	4b61      	ldr	r3, [pc, #388]	; (8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800388e:	60bb      	str	r3, [r7, #8]
 8003890:	e001      	b.n	8003896 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003892:	2300      	movs	r3, #0
 8003894:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0b0      	b.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e0a9      	b.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f040 808d 	bne.w	80039e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f040 8086 	bne.w	80039e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038dc:	d004      	beq.n	80038e8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a4b      	ldr	r2, [pc, #300]	; (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d101      	bne.n	80038ec <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80038e8:	4b4c      	ldr	r3, [pc, #304]	; (8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80038ea:	e000      	b.n	80038ee <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80038ec:	4b4c      	ldr	r3, [pc, #304]	; (8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80038ee:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d040      	beq.n	800397a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80038f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800390a:	035b      	lsls	r3, r3, #13
 800390c:	430b      	orrs	r3, r1
 800390e:	431a      	orrs	r2, r3
 8003910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003912:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b01      	cmp	r3, #1
 8003920:	d108      	bne.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003934:	2300      	movs	r3, #0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d15c      	bne.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b01      	cmp	r3, #1
 8003944:	d107      	bne.n	8003956 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003956:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003958:	2b00      	cmp	r3, #0
 800395a:	d14b      	bne.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800395c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003964:	f023 030f 	bic.w	r3, r3, #15
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	6811      	ldr	r1, [r2, #0]
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	6892      	ldr	r2, [r2, #8]
 8003970:	430a      	orrs	r2, r1
 8003972:	431a      	orrs	r2, r3
 8003974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003976:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003978:	e03c      	b.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800397a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003984:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d108      	bne.n	80039a6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80039a6:	2300      	movs	r3, #0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d123      	bne.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d107      	bne.n	80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80039c8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d112      	bne.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80039ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80039d6:	f023 030f 	bic.w	r3, r3, #15
 80039da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039dc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80039de:	e009      	b.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	f043 0220 	orr.w	r2, r3, #32
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80039f2:	e000      	b.n	80039f6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80039f4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80039fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003a02:	4618      	mov	r0, r3
 8003a04:	3764      	adds	r7, #100	; 0x64
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	50000100 	.word	0x50000100
 8003a14:	50000400 	.word	0x50000400
 8003a18:	50000500 	.word	0x50000500
 8003a1c:	50000300 	.word	0x50000300
 8003a20:	50000700 	.word	0x50000700

08003a24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d108      	bne.n	8003a50 <ADC_Enable+0x2c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <ADC_Enable+0x2c>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <ADC_Enable+0x2e>
 8003a50:	2300      	movs	r3, #0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d143      	bne.n	8003ade <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	4b22      	ldr	r3, [pc, #136]	; (8003ae8 <ADC_Enable+0xc4>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00d      	beq.n	8003a80 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	f043 0210 	orr.w	r2, r3, #16
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a74:	f043 0201 	orr.w	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e02f      	b.n	8003ae0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003a90:	f7fe fd6a 	bl	8002568 <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003a96:	e01b      	b.n	8003ad0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a98:	f7fe fd66 	bl	8002568 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d914      	bls.n	8003ad0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d00d      	beq.n	8003ad0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	f043 0210 	orr.w	r2, r3, #16
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac4:	f043 0201 	orr.w	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e007      	b.n	8003ae0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d1dc      	bne.n	8003a98 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	8000003f 	.word	0x8000003f

08003aec <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d108      	bne.n	8003b18 <ADC_Disable+0x2c>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <ADC_Disable+0x2c>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <ADC_Disable+0x2e>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d047      	beq.n	8003bae <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 030d 	and.w	r3, r3, #13
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d10f      	bne.n	8003b4c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0202 	orr.w	r2, r2, #2
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2203      	movs	r2, #3
 8003b42:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003b44:	f7fe fd10 	bl	8002568 <HAL_GetTick>
 8003b48:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b4a:	e029      	b.n	8003ba0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	f043 0210 	orr.w	r2, r3, #16
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	f043 0201 	orr.w	r2, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e023      	b.n	8003bb0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b68:	f7fe fcfe 	bl	8002568 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d914      	bls.n	8003ba0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d10d      	bne.n	8003ba0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f043 0210 	orr.w	r2, r3, #16
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	f043 0201 	orr.w	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e007      	b.n	8003bb0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d0dc      	beq.n	8003b68 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <__NVIC_SetPriorityGrouping+0x44>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bea:	4a04      	ldr	r2, [pc, #16]	; (8003bfc <__NVIC_SetPriorityGrouping+0x44>)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	60d3      	str	r3, [r2, #12]
}
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	e000ed00 	.word	0xe000ed00

08003c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c04:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <__NVIC_GetPriorityGrouping+0x18>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	0a1b      	lsrs	r3, r3, #8
 8003c0a:	f003 0307 	and.w	r3, r3, #7
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	db0b      	blt.n	8003c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	f003 021f 	and.w	r2, r3, #31
 8003c34:	4907      	ldr	r1, [pc, #28]	; (8003c54 <__NVIC_EnableIRQ+0x38>)
 8003c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	e000e100 	.word	0xe000e100

08003c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	6039      	str	r1, [r7, #0]
 8003c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	db0a      	blt.n	8003c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	490c      	ldr	r1, [pc, #48]	; (8003ca4 <__NVIC_SetPriority+0x4c>)
 8003c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c76:	0112      	lsls	r2, r2, #4
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c80:	e00a      	b.n	8003c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	4908      	ldr	r1, [pc, #32]	; (8003ca8 <__NVIC_SetPriority+0x50>)
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	3b04      	subs	r3, #4
 8003c90:	0112      	lsls	r2, r2, #4
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	440b      	add	r3, r1
 8003c96:	761a      	strb	r2, [r3, #24]
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	e000e100 	.word	0xe000e100
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b089      	sub	sp, #36	; 0x24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f1c3 0307 	rsb	r3, r3, #7
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	bf28      	it	cs
 8003cca:	2304      	movcs	r3, #4
 8003ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	2b06      	cmp	r3, #6
 8003cd4:	d902      	bls.n	8003cdc <NVIC_EncodePriority+0x30>
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3b03      	subs	r3, #3
 8003cda:	e000      	b.n	8003cde <NVIC_EncodePriority+0x32>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43da      	mvns	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	401a      	ands	r2, r3
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfe:	43d9      	mvns	r1, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d04:	4313      	orrs	r3, r2
         );
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3724      	adds	r7, #36	; 0x24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d24:	d301      	bcc.n	8003d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d26:	2301      	movs	r3, #1
 8003d28:	e00f      	b.n	8003d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d2a:	4a0a      	ldr	r2, [pc, #40]	; (8003d54 <SysTick_Config+0x40>)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d32:	210f      	movs	r1, #15
 8003d34:	f04f 30ff 	mov.w	r0, #4294967295
 8003d38:	f7ff ff8e 	bl	8003c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <SysTick_Config+0x40>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d42:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <SysTick_Config+0x40>)
 8003d44:	2207      	movs	r2, #7
 8003d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	e000e010 	.word	0xe000e010

08003d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ff29 	bl	8003bb8 <__NVIC_SetPriorityGrouping>
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b086      	sub	sp, #24
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	4603      	mov	r3, r0
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d80:	f7ff ff3e 	bl	8003c00 <__NVIC_GetPriorityGrouping>
 8003d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	6978      	ldr	r0, [r7, #20]
 8003d8c:	f7ff ff8e 	bl	8003cac <NVIC_EncodePriority>
 8003d90:	4602      	mov	r2, r0
 8003d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d96:	4611      	mov	r1, r2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff ff5d 	bl	8003c58 <__NVIC_SetPriority>
}
 8003d9e:	bf00      	nop
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	4603      	mov	r3, r0
 8003dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff ff31 	bl	8003c1c <__NVIC_EnableIRQ>
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ffa2 	bl	8003d14 <SysTick_Config>
 8003dd0:	4603      	mov	r3, r0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e014      	b.n	8003e16 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	791b      	ldrb	r3, [r3, #4]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d105      	bne.n	8003e02 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7fe f8c7 	bl	8001f90 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2202      	movs	r2, #2
 8003e06:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8003e32:	b480      	push	{r7}
 8003e34:	b087      	sub	sp, #28
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	607a      	str	r2, [r7, #4]
 8003e3e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d105      	bne.n	8003e5c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4413      	add	r3, r2
 8003e56:	3308      	adds	r3, #8
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	e004      	b.n	8003e66 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4413      	add	r3, r2
 8003e62:	3314      	adds	r3, #20
 8003e64:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	795b      	ldrb	r3, [r3, #5]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_DAC_Start+0x16>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e039      	b.n	8003f06 <HAL_DAC_Start+0x8a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10f      	bne.n	8003ed8 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003ec2:	2b3c      	cmp	r3, #60	; 0x3c
 8003ec4:	d118      	bne.n	8003ef8 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 0201 	orr.w	r2, r2, #1
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	e00f      	b.n	8003ef8 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ee2:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8003ee6:	d107      	bne.n	8003ef8 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0202 	orr.w	r2, r2, #2
 8003ef6:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f28:	d120      	bne.n	8003f6c <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f38:	d118      	bne.n	8003f6c <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	f043 0201 	orr.w	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f54:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f64:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff ff59 	bl	8003e1e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f7a:	d120      	bne.n	8003fbe <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f8a:	d118      	bne.n	8003fbe <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2204      	movs	r2, #4
 8003f90:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f043 0202 	orr.w	r2, r3, #2
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003fa6:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003fb6:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f851 	bl	8004060 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b087      	sub	sp, #28
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	795b      	ldrb	r3, [r3, #5]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_DAC_ConfigChannel+0x20>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e036      	b.n	8004054 <HAL_DAC_ConfigChannel+0x8e>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003ffa:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4013      	ands	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6819      	ldr	r1, [r3, #0]
 8004034:	22c0      	movs	r2, #192	; 0xc0
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	43da      	mvns	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	400a      	ands	r2, r1
 8004044:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e037      	b.n	80040fa <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2202      	movs	r2, #2
 800408e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80040a0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80040a4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80040ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f9b7 	bl	8004450 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}  
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
 800410e:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004110:	2300      	movs	r3, #0
 8004112:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d101      	bne.n	8004122 <HAL_DMA_Start_IT+0x20>
 800411e:	2302      	movs	r3, #2
 8004120:	e04a      	b.n	80041b8 <HAL_DMA_Start_IT+0xb6>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004130:	2b01      	cmp	r3, #1
 8004132:	d13a      	bne.n	80041aa <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0201 	bic.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f94b 	bl	80043f4 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d008      	beq.n	8004178 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f042 020e 	orr.w	r2, r2, #14
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	e00f      	b.n	8004198 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 020a 	orr.w	r2, r2, #10
 8004186:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0204 	bic.w	r2, r2, #4
 8004196:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	e005      	b.n	80041b6 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80041b2:	2302      	movs	r3, #2
 80041b4:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
} 
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d008      	beq.n	80041e4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2204      	movs	r2, #4
 80041d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e020      	b.n	8004226 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 020e 	bic.w	r2, r2, #14
 80041f2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0201 	bic.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420c:	2101      	movs	r1, #1
 800420e:	fa01 f202 	lsl.w	r2, r1, r2
 8004212:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004244:	2b02      	cmp	r3, #2
 8004246:	d005      	beq.n	8004254 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2204      	movs	r2, #4
 800424c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
 8004252:	e027      	b.n	80042a4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 020e 	bic.w	r2, r2, #14
 8004262:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0201 	bic.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427c:	2101      	movs	r1, #1
 800427e:	fa01 f202 	lsl.w	r2, r1, r2
 8004282:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	4798      	blx	r3
    } 
  }
  return status;
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	2204      	movs	r2, #4
 80042cc:	409a      	lsls	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d024      	beq.n	8004320 <HAL_DMA_IRQHandler+0x72>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01f      	beq.n	8004320 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d107      	bne.n	80042fe <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0204 	bic.w	r2, r2, #4
 80042fc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004306:	2104      	movs	r1, #4
 8004308:	fa01 f202 	lsl.w	r2, r1, r2
 800430c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d06a      	beq.n	80043ec <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800431e:	e065      	b.n	80043ec <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	2202      	movs	r2, #2
 8004326:	409a      	lsls	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4013      	ands	r3, r2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d02c      	beq.n	800438a <HAL_DMA_IRQHandler+0xdc>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d027      	beq.n	800438a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 020a 	bic.w	r2, r2, #10
 8004356:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004368:	2102      	movs	r1, #2
 800436a:	fa01 f202 	lsl.w	r2, r1, r2
 800436e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	2b00      	cmp	r3, #0
 800437e:	d035      	beq.n	80043ec <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004388:	e030      	b.n	80043ec <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	2208      	movs	r2, #8
 8004390:	409a      	lsls	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4013      	ands	r3, r2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d028      	beq.n	80043ec <HAL_DMA_IRQHandler+0x13e>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d023      	beq.n	80043ec <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 020e 	bic.w	r2, r2, #14
 80043b2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043bc:	2101      	movs	r1, #1
 80043be:	fa01 f202 	lsl.w	r2, r1, r2
 80043c2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d004      	beq.n	80043ec <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
    }
  }
}  
 80043ea:	e7ff      	b.n	80043ec <HAL_DMA_IRQHandler+0x13e>
 80043ec:	bf00      	nop
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440a:	2101      	movs	r1, #1
 800440c:	fa01 f202 	lsl.w	r2, r1, r2
 8004410:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b10      	cmp	r3, #16
 8004420:	d108      	bne.n	8004434 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004432:	e007      	b.n	8004444 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	60da      	str	r2, [r3, #12]
}
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	4b14      	ldr	r3, [pc, #80]	; (80044b0 <DMA_CalcBaseAndBitshift+0x60>)
 8004460:	429a      	cmp	r2, r3
 8004462:	d80f      	bhi.n	8004484 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <DMA_CalcBaseAndBitshift+0x64>)
 800446c:	4413      	add	r3, r2
 800446e:	4a12      	ldr	r2, [pc, #72]	; (80044b8 <DMA_CalcBaseAndBitshift+0x68>)
 8004470:	fba2 2303 	umull	r2, r3, r2, r3
 8004474:	091b      	lsrs	r3, r3, #4
 8004476:	009a      	lsls	r2, r3, #2
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a0f      	ldr	r2, [pc, #60]	; (80044bc <DMA_CalcBaseAndBitshift+0x6c>)
 8004480:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004482:	e00e      	b.n	80044a2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	4b0d      	ldr	r3, [pc, #52]	; (80044c0 <DMA_CalcBaseAndBitshift+0x70>)
 800448c:	4413      	add	r3, r2
 800448e:	4a0a      	ldr	r2, [pc, #40]	; (80044b8 <DMA_CalcBaseAndBitshift+0x68>)
 8004490:	fba2 2303 	umull	r2, r3, r2, r3
 8004494:	091b      	lsrs	r3, r3, #4
 8004496:	009a      	lsls	r2, r3, #2
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a09      	ldr	r2, [pc, #36]	; (80044c4 <DMA_CalcBaseAndBitshift+0x74>)
 80044a0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40020407 	.word	0x40020407
 80044b4:	bffdfff8 	.word	0xbffdfff8
 80044b8:	cccccccd 	.word	0xcccccccd
 80044bc:	40020000 	.word	0x40020000
 80044c0:	bffdfbf8 	.word	0xbffdfbf8
 80044c4:	40020400 	.word	0x40020400

080044c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044d6:	e160      	b.n	800479a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	2101      	movs	r1, #1
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	fa01 f303 	lsl.w	r3, r1, r3
 80044e4:	4013      	ands	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 8152 	beq.w	8004794 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d005      	beq.n	8004508 <HAL_GPIO_Init+0x40>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d130      	bne.n	800456a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	2203      	movs	r2, #3
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	43db      	mvns	r3, r3
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4013      	ands	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800453e:	2201      	movs	r2, #1
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4013      	ands	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	091b      	lsrs	r3, r3, #4
 8004554:	f003 0201 	and.w	r2, r3, #1
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	2b03      	cmp	r3, #3
 8004574:	d017      	beq.n	80045a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	2203      	movs	r2, #3
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	43db      	mvns	r3, r3
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4013      	ands	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d123      	bne.n	80045fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	08da      	lsrs	r2, r3, #3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3208      	adds	r2, #8
 80045ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	220f      	movs	r2, #15
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	43db      	mvns	r3, r3
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4013      	ands	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	08da      	lsrs	r2, r3, #3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3208      	adds	r2, #8
 80045f4:	6939      	ldr	r1, [r7, #16]
 80045f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	2203      	movs	r2, #3
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43db      	mvns	r3, r3
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4013      	ands	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f003 0203 	and.w	r2, r3, #3
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80ac 	beq.w	8004794 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800463c:	4b5e      	ldr	r3, [pc, #376]	; (80047b8 <HAL_GPIO_Init+0x2f0>)
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	4a5d      	ldr	r2, [pc, #372]	; (80047b8 <HAL_GPIO_Init+0x2f0>)
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	6193      	str	r3, [r2, #24]
 8004648:	4b5b      	ldr	r3, [pc, #364]	; (80047b8 <HAL_GPIO_Init+0x2f0>)
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	60bb      	str	r3, [r7, #8]
 8004652:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004654:	4a59      	ldr	r2, [pc, #356]	; (80047bc <HAL_GPIO_Init+0x2f4>)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	089b      	lsrs	r3, r3, #2
 800465a:	3302      	adds	r3, #2
 800465c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004660:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f003 0303 	and.w	r3, r3, #3
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	220f      	movs	r2, #15
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	43db      	mvns	r3, r3
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4013      	ands	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800467e:	d025      	beq.n	80046cc <HAL_GPIO_Init+0x204>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a4f      	ldr	r2, [pc, #316]	; (80047c0 <HAL_GPIO_Init+0x2f8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d01f      	beq.n	80046c8 <HAL_GPIO_Init+0x200>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a4e      	ldr	r2, [pc, #312]	; (80047c4 <HAL_GPIO_Init+0x2fc>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d019      	beq.n	80046c4 <HAL_GPIO_Init+0x1fc>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a4d      	ldr	r2, [pc, #308]	; (80047c8 <HAL_GPIO_Init+0x300>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d013      	beq.n	80046c0 <HAL_GPIO_Init+0x1f8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a4c      	ldr	r2, [pc, #304]	; (80047cc <HAL_GPIO_Init+0x304>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00d      	beq.n	80046bc <HAL_GPIO_Init+0x1f4>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a4b      	ldr	r2, [pc, #300]	; (80047d0 <HAL_GPIO_Init+0x308>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d007      	beq.n	80046b8 <HAL_GPIO_Init+0x1f0>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a4a      	ldr	r2, [pc, #296]	; (80047d4 <HAL_GPIO_Init+0x30c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d101      	bne.n	80046b4 <HAL_GPIO_Init+0x1ec>
 80046b0:	2306      	movs	r3, #6
 80046b2:	e00c      	b.n	80046ce <HAL_GPIO_Init+0x206>
 80046b4:	2307      	movs	r3, #7
 80046b6:	e00a      	b.n	80046ce <HAL_GPIO_Init+0x206>
 80046b8:	2305      	movs	r3, #5
 80046ba:	e008      	b.n	80046ce <HAL_GPIO_Init+0x206>
 80046bc:	2304      	movs	r3, #4
 80046be:	e006      	b.n	80046ce <HAL_GPIO_Init+0x206>
 80046c0:	2303      	movs	r3, #3
 80046c2:	e004      	b.n	80046ce <HAL_GPIO_Init+0x206>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e002      	b.n	80046ce <HAL_GPIO_Init+0x206>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <HAL_GPIO_Init+0x206>
 80046cc:	2300      	movs	r3, #0
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	f002 0203 	and.w	r2, r2, #3
 80046d4:	0092      	lsls	r2, r2, #2
 80046d6:	4093      	lsls	r3, r2
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046de:	4937      	ldr	r1, [pc, #220]	; (80047bc <HAL_GPIO_Init+0x2f4>)
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	089b      	lsrs	r3, r3, #2
 80046e4:	3302      	adds	r3, #2
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046ec:	4b3a      	ldr	r3, [pc, #232]	; (80047d8 <HAL_GPIO_Init+0x310>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	43db      	mvns	r3, r3
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4013      	ands	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004710:	4a31      	ldr	r2, [pc, #196]	; (80047d8 <HAL_GPIO_Init+0x310>)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004716:	4b30      	ldr	r3, [pc, #192]	; (80047d8 <HAL_GPIO_Init+0x310>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	43db      	mvns	r3, r3
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4013      	ands	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800473a:	4a27      	ldr	r2, [pc, #156]	; (80047d8 <HAL_GPIO_Init+0x310>)
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004740:	4b25      	ldr	r3, [pc, #148]	; (80047d8 <HAL_GPIO_Init+0x310>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	43db      	mvns	r3, r3
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4013      	ands	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004764:	4a1c      	ldr	r2, [pc, #112]	; (80047d8 <HAL_GPIO_Init+0x310>)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800476a:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <HAL_GPIO_Init+0x310>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	43db      	mvns	r3, r3
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4013      	ands	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800478e:	4a12      	ldr	r2, [pc, #72]	; (80047d8 <HAL_GPIO_Init+0x310>)
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	3301      	adds	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f47f ae97 	bne.w	80044d8 <HAL_GPIO_Init+0x10>
  }
}
 80047aa:	bf00      	nop
 80047ac:	bf00      	nop
 80047ae:	371c      	adds	r7, #28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	40021000 	.word	0x40021000
 80047bc:	40010000 	.word	0x40010000
 80047c0:	48000400 	.word	0x48000400
 80047c4:	48000800 	.word	0x48000800
 80047c8:	48000c00 	.word	0x48000c00
 80047cc:	48001000 	.word	0x48001000
 80047d0:	48001400 	.word	0x48001400
 80047d4:	48001800 	.word	0x48001800
 80047d8:	40010400 	.word	0x40010400

080047dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	887b      	ldrh	r3, [r7, #2]
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047f4:	2301      	movs	r3, #1
 80047f6:	73fb      	strb	r3, [r7, #15]
 80047f8:	e001      	b.n	80047fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047fa:	2300      	movs	r3, #0
 80047fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	807b      	strh	r3, [r7, #2]
 8004818:	4613      	mov	r3, r2
 800481a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800481c:	787b      	ldrb	r3, [r7, #1]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004822:	887a      	ldrh	r2, [r7, #2]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004828:	e002      	b.n	8004830 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800482a:	887a      	ldrh	r2, [r7, #2]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004846:	4b08      	ldr	r3, [pc, #32]	; (8004868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004848:	695a      	ldr	r2, [r3, #20]
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	4013      	ands	r3, r2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d006      	beq.n	8004860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004852:	4a05      	ldr	r2, [pc, #20]	; (8004868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004858:	88fb      	ldrh	r3, [r7, #6]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 f806 	bl	800486c <HAL_GPIO_EXTI_Callback>
  }
}
 8004860:	bf00      	nop
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40010400 	.word	0x40010400

0800486c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
	...

08004884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800488a:	af00      	add	r7, sp, #0
 800488c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004890:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004894:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004896:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800489a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d102      	bne.n	80048aa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	f001 b83a 	b.w	800591e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 816f 	beq.w	8004b9e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80048c0:	4bb5      	ldr	r3, [pc, #724]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 030c 	and.w	r3, r3, #12
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d00c      	beq.n	80048e6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048cc:	4bb2      	ldr	r3, [pc, #712]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f003 030c 	and.w	r3, r3, #12
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d15c      	bne.n	8004992 <HAL_RCC_OscConfig+0x10e>
 80048d8:	4baf      	ldr	r3, [pc, #700]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80048e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e4:	d155      	bne.n	8004992 <HAL_RCC_OscConfig+0x10e>
 80048e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048ea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80048f2:	fa93 f3a3 	rbit	r3, r3
 80048f6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80048fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048fe:	fab3 f383 	clz	r3, r3
 8004902:	b2db      	uxtb	r3, r3
 8004904:	095b      	lsrs	r3, r3, #5
 8004906:	b2db      	uxtb	r3, r3
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b01      	cmp	r3, #1
 8004910:	d102      	bne.n	8004918 <HAL_RCC_OscConfig+0x94>
 8004912:	4ba1      	ldr	r3, [pc, #644]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	e015      	b.n	8004944 <HAL_RCC_OscConfig+0xc0>
 8004918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800491c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004920:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004924:	fa93 f3a3 	rbit	r3, r3
 8004928:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800492c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004930:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004934:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004938:	fa93 f3a3 	rbit	r3, r3
 800493c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004940:	4b95      	ldr	r3, [pc, #596]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004948:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800494c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004950:	fa92 f2a2 	rbit	r2, r2
 8004954:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004958:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800495c:	fab2 f282 	clz	r2, r2
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	f042 0220 	orr.w	r2, r2, #32
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	f002 021f 	and.w	r2, r2, #31
 800496c:	2101      	movs	r1, #1
 800496e:	fa01 f202 	lsl.w	r2, r1, r2
 8004972:	4013      	ands	r3, r2
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 8111 	beq.w	8004b9c <HAL_RCC_OscConfig+0x318>
 800497a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800497e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	f040 8108 	bne.w	8004b9c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	f000 bfc6 	b.w	800591e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004996:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a2:	d106      	bne.n	80049b2 <HAL_RCC_OscConfig+0x12e>
 80049a4:	4b7c      	ldr	r3, [pc, #496]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a7b      	ldr	r2, [pc, #492]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 80049aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	e036      	b.n	8004a20 <HAL_RCC_OscConfig+0x19c>
 80049b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10c      	bne.n	80049dc <HAL_RCC_OscConfig+0x158>
 80049c2:	4b75      	ldr	r3, [pc, #468]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a74      	ldr	r2, [pc, #464]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 80049c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	4b72      	ldr	r3, [pc, #456]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a71      	ldr	r2, [pc, #452]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 80049d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	e021      	b.n	8004a20 <HAL_RCC_OscConfig+0x19c>
 80049dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCC_OscConfig+0x184>
 80049ee:	4b6a      	ldr	r3, [pc, #424]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a69      	ldr	r2, [pc, #420]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 80049f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	4b67      	ldr	r3, [pc, #412]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a66      	ldr	r2, [pc, #408]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 8004a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	e00b      	b.n	8004a20 <HAL_RCC_OscConfig+0x19c>
 8004a08:	4b63      	ldr	r3, [pc, #396]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a62      	ldr	r2, [pc, #392]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 8004a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	4b60      	ldr	r3, [pc, #384]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a5f      	ldr	r2, [pc, #380]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 8004a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a1e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d059      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a30:	f7fd fd9a 	bl	8002568 <HAL_GetTick>
 8004a34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a38:	e00a      	b.n	8004a50 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a3a:	f7fd fd95 	bl	8002568 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b64      	cmp	r3, #100	; 0x64
 8004a48:	d902      	bls.n	8004a50 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	f000 bf67 	b.w	800591e <HAL_RCC_OscConfig+0x109a>
 8004a50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a54:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a58:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004a5c:	fa93 f3a3 	rbit	r3, r3
 8004a60:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004a64:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a68:	fab3 f383 	clz	r3, r3
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	095b      	lsrs	r3, r3, #5
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	f043 0301 	orr.w	r3, r3, #1
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d102      	bne.n	8004a82 <HAL_RCC_OscConfig+0x1fe>
 8004a7c:	4b46      	ldr	r3, [pc, #280]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	e015      	b.n	8004aae <HAL_RCC_OscConfig+0x22a>
 8004a82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a86:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004a8e:	fa93 f3a3 	rbit	r3, r3
 8004a92:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004a96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a9a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004a9e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004aa2:	fa93 f3a3 	rbit	r3, r3
 8004aa6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004aaa:	4b3b      	ldr	r3, [pc, #236]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ab2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004ab6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004aba:	fa92 f2a2 	rbit	r2, r2
 8004abe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004ac2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004ac6:	fab2 f282 	clz	r2, r2
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	f042 0220 	orr.w	r2, r2, #32
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	f002 021f 	and.w	r2, r2, #31
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0ab      	beq.n	8004a3a <HAL_RCC_OscConfig+0x1b6>
 8004ae2:	e05c      	b.n	8004b9e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7fd fd40 	bl	8002568 <HAL_GetTick>
 8004ae8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aec:	e00a      	b.n	8004b04 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aee:	f7fd fd3b 	bl	8002568 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b64      	cmp	r3, #100	; 0x64
 8004afc:	d902      	bls.n	8004b04 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	f000 bf0d 	b.w	800591e <HAL_RCC_OscConfig+0x109a>
 8004b04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b08:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004b10:	fa93 f3a3 	rbit	r3, r3
 8004b14:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004b18:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1c:	fab3 f383 	clz	r3, r3
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	f043 0301 	orr.w	r3, r3, #1
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d102      	bne.n	8004b36 <HAL_RCC_OscConfig+0x2b2>
 8004b30:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	e015      	b.n	8004b62 <HAL_RCC_OscConfig+0x2de>
 8004b36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b3a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004b42:	fa93 f3a3 	rbit	r3, r3
 8004b46:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004b4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b4e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004b52:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004b56:	fa93 f3a3 	rbit	r3, r3
 8004b5a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004b5e:	4b0e      	ldr	r3, [pc, #56]	; (8004b98 <HAL_RCC_OscConfig+0x314>)
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b66:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004b6a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004b6e:	fa92 f2a2 	rbit	r2, r2
 8004b72:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004b76:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004b7a:	fab2 f282 	clz	r2, r2
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	f042 0220 	orr.w	r2, r2, #32
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	f002 021f 	and.w	r2, r2, #31
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b90:	4013      	ands	r3, r2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1ab      	bne.n	8004aee <HAL_RCC_OscConfig+0x26a>
 8004b96:	e002      	b.n	8004b9e <HAL_RCC_OscConfig+0x31a>
 8004b98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ba2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 817f 	beq.w	8004eb2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004bb4:	4ba7      	ldr	r3, [pc, #668]	; (8004e54 <HAL_RCC_OscConfig+0x5d0>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 030c 	and.w	r3, r3, #12
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00c      	beq.n	8004bda <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004bc0:	4ba4      	ldr	r3, [pc, #656]	; (8004e54 <HAL_RCC_OscConfig+0x5d0>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 030c 	and.w	r3, r3, #12
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d173      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x430>
 8004bcc:	4ba1      	ldr	r3, [pc, #644]	; (8004e54 <HAL_RCC_OscConfig+0x5d0>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd8:	d16c      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x430>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004be4:	fa93 f3a3 	rbit	r3, r3
 8004be8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004bec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bf0:	fab3 f383 	clz	r3, r3
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d102      	bne.n	8004c0a <HAL_RCC_OscConfig+0x386>
 8004c04:	4b93      	ldr	r3, [pc, #588]	; (8004e54 <HAL_RCC_OscConfig+0x5d0>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	e013      	b.n	8004c32 <HAL_RCC_OscConfig+0x3ae>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c10:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004c14:	fa93 f3a3 	rbit	r3, r3
 8004c18:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004c22:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004c26:	fa93 f3a3 	rbit	r3, r3
 8004c2a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004c2e:	4b89      	ldr	r3, [pc, #548]	; (8004e54 <HAL_RCC_OscConfig+0x5d0>)
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	2202      	movs	r2, #2
 8004c34:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004c38:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004c3c:	fa92 f2a2 	rbit	r2, r2
 8004c40:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004c44:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004c48:	fab2 f282 	clz	r2, r2
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	f042 0220 	orr.w	r2, r2, #32
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	f002 021f 	and.w	r2, r2, #31
 8004c58:	2101      	movs	r1, #1
 8004c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <HAL_RCC_OscConfig+0x3f6>
 8004c64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d002      	beq.n	8004c7a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	f000 be52 	b.w	800591e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7a:	4b76      	ldr	r3, [pc, #472]	; (8004e54 <HAL_RCC_OscConfig+0x5d0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	21f8      	movs	r1, #248	; 0xf8
 8004c90:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c94:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004c98:	fa91 f1a1 	rbit	r1, r1
 8004c9c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004ca0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004ca4:	fab1 f181 	clz	r1, r1
 8004ca8:	b2c9      	uxtb	r1, r1
 8004caa:	408b      	lsls	r3, r1
 8004cac:	4969      	ldr	r1, [pc, #420]	; (8004e54 <HAL_RCC_OscConfig+0x5d0>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cb2:	e0fe      	b.n	8004eb2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cb8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 8088 	beq.w	8004dd6 <HAL_RCC_OscConfig+0x552>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ccc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004cd0:	fa93 f3a3 	rbit	r3, r3
 8004cd4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004cd8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cdc:	fab3 f383 	clz	r3, r3
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ce6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	461a      	mov	r2, r3
 8004cee:	2301      	movs	r3, #1
 8004cf0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf2:	f7fd fc39 	bl	8002568 <HAL_GetTick>
 8004cf6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cfc:	f7fd fc34 	bl	8002568 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d902      	bls.n	8004d12 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	f000 be06 	b.w	800591e <HAL_RCC_OscConfig+0x109a>
 8004d12:	2302      	movs	r3, #2
 8004d14:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d18:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004d1c:	fa93 f3a3 	rbit	r3, r3
 8004d20:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004d24:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d28:	fab3 f383 	clz	r3, r3
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d102      	bne.n	8004d42 <HAL_RCC_OscConfig+0x4be>
 8004d3c:	4b45      	ldr	r3, [pc, #276]	; (8004e54 <HAL_RCC_OscConfig+0x5d0>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	e013      	b.n	8004d6a <HAL_RCC_OscConfig+0x4e6>
 8004d42:	2302      	movs	r3, #2
 8004d44:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d48:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004d4c:	fa93 f3a3 	rbit	r3, r3
 8004d50:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004d54:	2302      	movs	r3, #2
 8004d56:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004d5a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004d5e:	fa93 f3a3 	rbit	r3, r3
 8004d62:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004d66:	4b3b      	ldr	r3, [pc, #236]	; (8004e54 <HAL_RCC_OscConfig+0x5d0>)
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004d70:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004d74:	fa92 f2a2 	rbit	r2, r2
 8004d78:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004d7c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004d80:	fab2 f282 	clz	r2, r2
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	f042 0220 	orr.w	r2, r2, #32
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	f002 021f 	and.w	r2, r2, #31
 8004d90:	2101      	movs	r1, #1
 8004d92:	fa01 f202 	lsl.w	r2, r1, r2
 8004d96:	4013      	ands	r3, r2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0af      	beq.n	8004cfc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d9c:	4b2d      	ldr	r3, [pc, #180]	; (8004e54 <HAL_RCC_OscConfig+0x5d0>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004da4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004da8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	21f8      	movs	r1, #248	; 0xf8
 8004db2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004dba:	fa91 f1a1 	rbit	r1, r1
 8004dbe:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004dc2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004dc6:	fab1 f181 	clz	r1, r1
 8004dca:	b2c9      	uxtb	r1, r1
 8004dcc:	408b      	lsls	r3, r1
 8004dce:	4921      	ldr	r1, [pc, #132]	; (8004e54 <HAL_RCC_OscConfig+0x5d0>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	600b      	str	r3, [r1, #0]
 8004dd4:	e06d      	b.n	8004eb2 <HAL_RCC_OscConfig+0x62e>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ddc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004de0:	fa93 f3a3 	rbit	r3, r3
 8004de4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004de8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dec:	fab3 f383 	clz	r3, r3
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004df6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	2300      	movs	r3, #0
 8004e00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e02:	f7fd fbb1 	bl	8002568 <HAL_GetTick>
 8004e06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e0a:	e00a      	b.n	8004e22 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e0c:	f7fd fbac 	bl	8002568 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d902      	bls.n	8004e22 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	f000 bd7e 	b.w	800591e <HAL_RCC_OscConfig+0x109a>
 8004e22:	2302      	movs	r3, #2
 8004e24:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e2c:	fa93 f3a3 	rbit	r3, r3
 8004e30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004e34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e38:	fab3 f383 	clz	r3, r3
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	f043 0301 	orr.w	r3, r3, #1
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d105      	bne.n	8004e58 <HAL_RCC_OscConfig+0x5d4>
 8004e4c:	4b01      	ldr	r3, [pc, #4]	; (8004e54 <HAL_RCC_OscConfig+0x5d0>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	e016      	b.n	8004e80 <HAL_RCC_OscConfig+0x5fc>
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000
 8004e58:	2302      	movs	r3, #2
 8004e5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e62:	fa93 f3a3 	rbit	r3, r3
 8004e66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004e70:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004e74:	fa93 f3a3 	rbit	r3, r3
 8004e78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004e7c:	4bbf      	ldr	r3, [pc, #764]	; (800517c <HAL_RCC_OscConfig+0x8f8>)
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	2202      	movs	r2, #2
 8004e82:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004e86:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004e8a:	fa92 f2a2 	rbit	r2, r2
 8004e8e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004e92:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004e96:	fab2 f282 	clz	r2, r2
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	f042 0220 	orr.w	r2, r2, #32
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	f002 021f 	and.w	r2, r2, #31
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8004eac:	4013      	ands	r3, r2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1ac      	bne.n	8004e0c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eb6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f000 8113 	beq.w	80050ee <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ecc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d07c      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x74e>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ee2:	fa93 f3a3 	rbit	r3, r3
 8004ee6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004eea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eee:	fab3 f383 	clz	r3, r3
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	4ba2      	ldr	r3, [pc, #648]	; (8005180 <HAL_RCC_OscConfig+0x8fc>)
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	461a      	mov	r2, r3
 8004efe:	2301      	movs	r3, #1
 8004f00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f02:	f7fd fb31 	bl	8002568 <HAL_GetTick>
 8004f06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f0a:	e00a      	b.n	8004f22 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f0c:	f7fd fb2c 	bl	8002568 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d902      	bls.n	8004f22 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	f000 bcfe 	b.w	800591e <HAL_RCC_OscConfig+0x109a>
 8004f22:	2302      	movs	r3, #2
 8004f24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f2c:	fa93 f2a3 	rbit	r2, r3
 8004f30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f34:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f42:	2202      	movs	r2, #2
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	fa93 f2a3 	rbit	r2, r3
 8004f54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f66:	2202      	movs	r2, #2
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	fa93 f2a3 	rbit	r2, r3
 8004f78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f80:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f82:	4b7e      	ldr	r3, [pc, #504]	; (800517c <HAL_RCC_OscConfig+0x8f8>)
 8004f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004f8e:	2102      	movs	r1, #2
 8004f90:	6019      	str	r1, [r3, #0]
 8004f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f96:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	fa93 f1a3 	rbit	r1, r3
 8004fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fa4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004fa8:	6019      	str	r1, [r3, #0]
  return result;
 8004faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	fab3 f383 	clz	r3, r3
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	f003 031f 	and.w	r3, r3, #31
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fca:	4013      	ands	r3, r2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d09d      	beq.n	8004f0c <HAL_RCC_OscConfig+0x688>
 8004fd0:	e08d      	b.n	80050ee <HAL_RCC_OscConfig+0x86a>
 8004fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fd6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004fda:	2201      	movs	r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fe2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	fa93 f2a3 	rbit	r2, r3
 8004fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ff0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ff4:	601a      	str	r2, [r3, #0]
  return result;
 8004ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ffa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ffe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005000:	fab3 f383 	clz	r3, r3
 8005004:	b2db      	uxtb	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	4b5d      	ldr	r3, [pc, #372]	; (8005180 <HAL_RCC_OscConfig+0x8fc>)
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	461a      	mov	r2, r3
 8005010:	2300      	movs	r3, #0
 8005012:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005014:	f7fd faa8 	bl	8002568 <HAL_GetTick>
 8005018:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800501c:	e00a      	b.n	8005034 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800501e:	f7fd faa3 	bl	8002568 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d902      	bls.n	8005034 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	f000 bc75 	b.w	800591e <HAL_RCC_OscConfig+0x109a>
 8005034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005038:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800503c:	2202      	movs	r2, #2
 800503e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005040:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005044:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	fa93 f2a3 	rbit	r2, r3
 800504e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005052:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800505c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005060:	2202      	movs	r2, #2
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005068:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	fa93 f2a3 	rbit	r2, r3
 8005072:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005080:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005084:	2202      	movs	r2, #2
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800508c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	fa93 f2a3 	rbit	r2, r3
 8005096:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800509a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800509e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050a0:	4b36      	ldr	r3, [pc, #216]	; (800517c <HAL_RCC_OscConfig+0x8f8>)
 80050a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80050ac:	2102      	movs	r1, #2
 80050ae:	6019      	str	r1, [r3, #0]
 80050b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	fa93 f1a3 	rbit	r1, r3
 80050be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050c2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80050c6:	6019      	str	r1, [r3, #0]
  return result;
 80050c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	fab3 f383 	clz	r3, r3
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	f003 031f 	and.w	r3, r3, #31
 80050e2:	2101      	movs	r1, #1
 80050e4:	fa01 f303 	lsl.w	r3, r1, r3
 80050e8:	4013      	ands	r3, r2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d197      	bne.n	800501e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 81a5 	beq.w	800544e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005104:	2300      	movs	r3, #0
 8005106:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800510a:	4b1c      	ldr	r3, [pc, #112]	; (800517c <HAL_RCC_OscConfig+0x8f8>)
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d116      	bne.n	8005144 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005116:	4b19      	ldr	r3, [pc, #100]	; (800517c <HAL_RCC_OscConfig+0x8f8>)
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	4a18      	ldr	r2, [pc, #96]	; (800517c <HAL_RCC_OscConfig+0x8f8>)
 800511c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005120:	61d3      	str	r3, [r2, #28]
 8005122:	4b16      	ldr	r3, [pc, #88]	; (800517c <HAL_RCC_OscConfig+0x8f8>)
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800512a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800512e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005138:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800513c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800513e:	2301      	movs	r3, #1
 8005140:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005144:	4b0f      	ldr	r3, [pc, #60]	; (8005184 <HAL_RCC_OscConfig+0x900>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514c:	2b00      	cmp	r3, #0
 800514e:	d121      	bne.n	8005194 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005150:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <HAL_RCC_OscConfig+0x900>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a0b      	ldr	r2, [pc, #44]	; (8005184 <HAL_RCC_OscConfig+0x900>)
 8005156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800515a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800515c:	f7fd fa04 	bl	8002568 <HAL_GetTick>
 8005160:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005164:	e010      	b.n	8005188 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005166:	f7fd f9ff 	bl	8002568 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b64      	cmp	r3, #100	; 0x64
 8005174:	d908      	bls.n	8005188 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e3d1      	b.n	800591e <HAL_RCC_OscConfig+0x109a>
 800517a:	bf00      	nop
 800517c:	40021000 	.word	0x40021000
 8005180:	10908120 	.word	0x10908120
 8005184:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005188:	4b8d      	ldr	r3, [pc, #564]	; (80053c0 <HAL_RCC_OscConfig+0xb3c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0e8      	beq.n	8005166 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005198:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d106      	bne.n	80051b2 <HAL_RCC_OscConfig+0x92e>
 80051a4:	4b87      	ldr	r3, [pc, #540]	; (80053c4 <HAL_RCC_OscConfig+0xb40>)
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	4a86      	ldr	r2, [pc, #536]	; (80053c4 <HAL_RCC_OscConfig+0xb40>)
 80051aa:	f043 0301 	orr.w	r3, r3, #1
 80051ae:	6213      	str	r3, [r2, #32]
 80051b0:	e035      	b.n	800521e <HAL_RCC_OscConfig+0x99a>
 80051b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10c      	bne.n	80051dc <HAL_RCC_OscConfig+0x958>
 80051c2:	4b80      	ldr	r3, [pc, #512]	; (80053c4 <HAL_RCC_OscConfig+0xb40>)
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	4a7f      	ldr	r2, [pc, #508]	; (80053c4 <HAL_RCC_OscConfig+0xb40>)
 80051c8:	f023 0301 	bic.w	r3, r3, #1
 80051cc:	6213      	str	r3, [r2, #32]
 80051ce:	4b7d      	ldr	r3, [pc, #500]	; (80053c4 <HAL_RCC_OscConfig+0xb40>)
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	4a7c      	ldr	r2, [pc, #496]	; (80053c4 <HAL_RCC_OscConfig+0xb40>)
 80051d4:	f023 0304 	bic.w	r3, r3, #4
 80051d8:	6213      	str	r3, [r2, #32]
 80051da:	e020      	b.n	800521e <HAL_RCC_OscConfig+0x99a>
 80051dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	2b05      	cmp	r3, #5
 80051ea:	d10c      	bne.n	8005206 <HAL_RCC_OscConfig+0x982>
 80051ec:	4b75      	ldr	r3, [pc, #468]	; (80053c4 <HAL_RCC_OscConfig+0xb40>)
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	4a74      	ldr	r2, [pc, #464]	; (80053c4 <HAL_RCC_OscConfig+0xb40>)
 80051f2:	f043 0304 	orr.w	r3, r3, #4
 80051f6:	6213      	str	r3, [r2, #32]
 80051f8:	4b72      	ldr	r3, [pc, #456]	; (80053c4 <HAL_RCC_OscConfig+0xb40>)
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	4a71      	ldr	r2, [pc, #452]	; (80053c4 <HAL_RCC_OscConfig+0xb40>)
 80051fe:	f043 0301 	orr.w	r3, r3, #1
 8005202:	6213      	str	r3, [r2, #32]
 8005204:	e00b      	b.n	800521e <HAL_RCC_OscConfig+0x99a>
 8005206:	4b6f      	ldr	r3, [pc, #444]	; (80053c4 <HAL_RCC_OscConfig+0xb40>)
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	4a6e      	ldr	r2, [pc, #440]	; (80053c4 <HAL_RCC_OscConfig+0xb40>)
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	6213      	str	r3, [r2, #32]
 8005212:	4b6c      	ldr	r3, [pc, #432]	; (80053c4 <HAL_RCC_OscConfig+0xb40>)
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	4a6b      	ldr	r2, [pc, #428]	; (80053c4 <HAL_RCC_OscConfig+0xb40>)
 8005218:	f023 0304 	bic.w	r3, r3, #4
 800521c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800521e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005222:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 8081 	beq.w	8005332 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005230:	f7fd f99a 	bl	8002568 <HAL_GetTick>
 8005234:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005238:	e00b      	b.n	8005252 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800523a:	f7fd f995 	bl	8002568 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f241 3288 	movw	r2, #5000	; 0x1388
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e365      	b.n	800591e <HAL_RCC_OscConfig+0x109a>
 8005252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005256:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800525a:	2202      	movs	r2, #2
 800525c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005262:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	fa93 f2a3 	rbit	r2, r3
 800526c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005270:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800527a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800527e:	2202      	movs	r2, #2
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005286:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	fa93 f2a3 	rbit	r2, r3
 8005290:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005294:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005298:	601a      	str	r2, [r3, #0]
  return result;
 800529a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800529e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80052a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a4:	fab3 f383 	clz	r3, r3
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	f043 0302 	orr.w	r3, r3, #2
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d102      	bne.n	80052be <HAL_RCC_OscConfig+0xa3a>
 80052b8:	4b42      	ldr	r3, [pc, #264]	; (80053c4 <HAL_RCC_OscConfig+0xb40>)
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	e013      	b.n	80052e6 <HAL_RCC_OscConfig+0xa62>
 80052be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80052c6:	2202      	movs	r2, #2
 80052c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	fa93 f2a3 	rbit	r2, r3
 80052d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052dc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	4b38      	ldr	r3, [pc, #224]	; (80053c4 <HAL_RCC_OscConfig+0xb40>)
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80052ea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80052ee:	2102      	movs	r1, #2
 80052f0:	6011      	str	r1, [r2, #0]
 80052f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80052f6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	fa92 f1a2 	rbit	r1, r2
 8005300:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005304:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005308:	6011      	str	r1, [r2, #0]
  return result;
 800530a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800530e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	fab2 f282 	clz	r2, r2
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	f002 021f 	and.w	r2, r2, #31
 8005324:	2101      	movs	r1, #1
 8005326:	fa01 f202 	lsl.w	r2, r1, r2
 800532a:	4013      	ands	r3, r2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d084      	beq.n	800523a <HAL_RCC_OscConfig+0x9b6>
 8005330:	e083      	b.n	800543a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005332:	f7fd f919 	bl	8002568 <HAL_GetTick>
 8005336:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800533a:	e00b      	b.n	8005354 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800533c:	f7fd f914 	bl	8002568 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	f241 3288 	movw	r2, #5000	; 0x1388
 800534c:	4293      	cmp	r3, r2
 800534e:	d901      	bls.n	8005354 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e2e4      	b.n	800591e <HAL_RCC_OscConfig+0x109a>
 8005354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005358:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800535c:	2202      	movs	r2, #2
 800535e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005360:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005364:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	fa93 f2a3 	rbit	r2, r3
 800536e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005372:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800537c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005380:	2202      	movs	r2, #2
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005388:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	fa93 f2a3 	rbit	r2, r3
 8005392:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005396:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800539a:	601a      	str	r2, [r3, #0]
  return result;
 800539c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053a0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80053a4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053a6:	fab3 f383 	clz	r3, r3
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	095b      	lsrs	r3, r3, #5
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	f043 0302 	orr.w	r3, r3, #2
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d106      	bne.n	80053c8 <HAL_RCC_OscConfig+0xb44>
 80053ba:	4b02      	ldr	r3, [pc, #8]	; (80053c4 <HAL_RCC_OscConfig+0xb40>)
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	e017      	b.n	80053f0 <HAL_RCC_OscConfig+0xb6c>
 80053c0:	40007000 	.word	0x40007000
 80053c4:	40021000 	.word	0x40021000
 80053c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053cc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80053d0:	2202      	movs	r2, #2
 80053d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053d8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	fa93 f2a3 	rbit	r2, r3
 80053e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053e6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	4bb3      	ldr	r3, [pc, #716]	; (80056bc <HAL_RCC_OscConfig+0xe38>)
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80053f4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80053f8:	2102      	movs	r1, #2
 80053fa:	6011      	str	r1, [r2, #0]
 80053fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005400:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	fa92 f1a2 	rbit	r1, r2
 800540a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800540e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8005412:	6011      	str	r1, [r2, #0]
  return result;
 8005414:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005418:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	fab2 f282 	clz	r2, r2
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	f002 021f 	and.w	r2, r2, #31
 800542e:	2101      	movs	r1, #1
 8005430:	fa01 f202 	lsl.w	r2, r1, r2
 8005434:	4013      	ands	r3, r2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d180      	bne.n	800533c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800543a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800543e:	2b01      	cmp	r3, #1
 8005440:	d105      	bne.n	800544e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005442:	4b9e      	ldr	r3, [pc, #632]	; (80056bc <HAL_RCC_OscConfig+0xe38>)
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	4a9d      	ldr	r2, [pc, #628]	; (80056bc <HAL_RCC_OscConfig+0xe38>)
 8005448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800544c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800544e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005452:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 825e 	beq.w	800591c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005460:	4b96      	ldr	r3, [pc, #600]	; (80056bc <HAL_RCC_OscConfig+0xe38>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f003 030c 	and.w	r3, r3, #12
 8005468:	2b08      	cmp	r3, #8
 800546a:	f000 821f 	beq.w	80058ac <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800546e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005472:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	2b02      	cmp	r3, #2
 800547c:	f040 8170 	bne.w	8005760 <HAL_RCC_OscConfig+0xedc>
 8005480:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005484:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005488:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800548c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005492:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	fa93 f2a3 	rbit	r2, r3
 800549c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054a0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80054a4:	601a      	str	r2, [r3, #0]
  return result;
 80054a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054aa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80054ae:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054b0:	fab3 f383 	clz	r3, r3
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	461a      	mov	r2, r3
 80054c2:	2300      	movs	r3, #0
 80054c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c6:	f7fd f84f 	bl	8002568 <HAL_GetTick>
 80054ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054ce:	e009      	b.n	80054e4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054d0:	f7fd f84a 	bl	8002568 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e21c      	b.n	800591e <HAL_RCC_OscConfig+0x109a>
 80054e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054e8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80054ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054f6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	fa93 f2a3 	rbit	r2, r3
 8005500:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005504:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005508:	601a      	str	r2, [r3, #0]
  return result;
 800550a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800550e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005512:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005514:	fab3 f383 	clz	r3, r3
 8005518:	b2db      	uxtb	r3, r3
 800551a:	095b      	lsrs	r3, r3, #5
 800551c:	b2db      	uxtb	r3, r3
 800551e:	f043 0301 	orr.w	r3, r3, #1
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	d102      	bne.n	800552e <HAL_RCC_OscConfig+0xcaa>
 8005528:	4b64      	ldr	r3, [pc, #400]	; (80056bc <HAL_RCC_OscConfig+0xe38>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	e027      	b.n	800557e <HAL_RCC_OscConfig+0xcfa>
 800552e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005532:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005536:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800553a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800553c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005540:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	fa93 f2a3 	rbit	r2, r3
 800554a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800554e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005558:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800555c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005566:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	fa93 f2a3 	rbit	r2, r3
 8005570:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005574:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	4b50      	ldr	r3, [pc, #320]	; (80056bc <HAL_RCC_OscConfig+0xe38>)
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005582:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005586:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800558a:	6011      	str	r1, [r2, #0]
 800558c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005590:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005594:	6812      	ldr	r2, [r2, #0]
 8005596:	fa92 f1a2 	rbit	r1, r2
 800559a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800559e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80055a2:	6011      	str	r1, [r2, #0]
  return result;
 80055a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80055a8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80055ac:	6812      	ldr	r2, [r2, #0]
 80055ae:	fab2 f282 	clz	r2, r2
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	f042 0220 	orr.w	r2, r2, #32
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	f002 021f 	and.w	r2, r2, #31
 80055be:	2101      	movs	r1, #1
 80055c0:	fa01 f202 	lsl.w	r2, r1, r2
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d182      	bne.n	80054d0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055ca:	4b3c      	ldr	r3, [pc, #240]	; (80056bc <HAL_RCC_OscConfig+0xe38>)
 80055cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ce:	f023 020f 	bic.w	r2, r3, #15
 80055d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	4937      	ldr	r1, [pc, #220]	; (80056bc <HAL_RCC_OscConfig+0xe38>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80055e4:	4b35      	ldr	r3, [pc, #212]	; (80056bc <HAL_RCC_OscConfig+0xe38>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80055ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6a19      	ldr	r1, [r3, #32]
 80055f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	430b      	orrs	r3, r1
 8005606:	492d      	ldr	r1, [pc, #180]	; (80056bc <HAL_RCC_OscConfig+0xe38>)
 8005608:	4313      	orrs	r3, r2
 800560a:	604b      	str	r3, [r1, #4]
 800560c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005610:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005614:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005618:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800561e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	fa93 f2a3 	rbit	r2, r3
 8005628:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800562c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005630:	601a      	str	r2, [r3, #0]
  return result;
 8005632:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005636:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800563a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800563c:	fab3 f383 	clz	r3, r3
 8005640:	b2db      	uxtb	r3, r3
 8005642:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005646:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	461a      	mov	r2, r3
 800564e:	2301      	movs	r3, #1
 8005650:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005652:	f7fc ff89 	bl	8002568 <HAL_GetTick>
 8005656:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800565a:	e009      	b.n	8005670 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800565c:	f7fc ff84 	bl	8002568 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d901      	bls.n	8005670 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e156      	b.n	800591e <HAL_RCC_OscConfig+0x109a>
 8005670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005674:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005678:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800567c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800567e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005682:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	fa93 f2a3 	rbit	r2, r3
 800568c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005690:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005694:	601a      	str	r2, [r3, #0]
  return result;
 8005696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800569a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800569e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056a0:	fab3 f383 	clz	r3, r3
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	f043 0301 	orr.w	r3, r3, #1
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d105      	bne.n	80056c0 <HAL_RCC_OscConfig+0xe3c>
 80056b4:	4b01      	ldr	r3, [pc, #4]	; (80056bc <HAL_RCC_OscConfig+0xe38>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	e02a      	b.n	8005710 <HAL_RCC_OscConfig+0xe8c>
 80056ba:	bf00      	nop
 80056bc:	40021000 	.word	0x40021000
 80056c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80056c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056d2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	fa93 f2a3 	rbit	r2, r3
 80056dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056e0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80056ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056f8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	fa93 f2a3 	rbit	r2, r3
 8005702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005706:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	4b86      	ldr	r3, [pc, #536]	; (8005928 <HAL_RCC_OscConfig+0x10a4>)
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005714:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005718:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800571c:	6011      	str	r1, [r2, #0]
 800571e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005722:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005726:	6812      	ldr	r2, [r2, #0]
 8005728:	fa92 f1a2 	rbit	r1, r2
 800572c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005730:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005734:	6011      	str	r1, [r2, #0]
  return result;
 8005736:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800573a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800573e:	6812      	ldr	r2, [r2, #0]
 8005740:	fab2 f282 	clz	r2, r2
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	f042 0220 	orr.w	r2, r2, #32
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	f002 021f 	and.w	r2, r2, #31
 8005750:	2101      	movs	r1, #1
 8005752:	fa01 f202 	lsl.w	r2, r1, r2
 8005756:	4013      	ands	r3, r2
 8005758:	2b00      	cmp	r3, #0
 800575a:	f43f af7f 	beq.w	800565c <HAL_RCC_OscConfig+0xdd8>
 800575e:	e0dd      	b.n	800591c <HAL_RCC_OscConfig+0x1098>
 8005760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005764:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005768:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800576c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005772:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	fa93 f2a3 	rbit	r2, r3
 800577c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005780:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005784:	601a      	str	r2, [r3, #0]
  return result;
 8005786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800578a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800578e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005790:	fab3 f383 	clz	r3, r3
 8005794:	b2db      	uxtb	r3, r3
 8005796:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800579a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	461a      	mov	r2, r3
 80057a2:	2300      	movs	r3, #0
 80057a4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a6:	f7fc fedf 	bl	8002568 <HAL_GetTick>
 80057aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ae:	e009      	b.n	80057c4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057b0:	f7fc feda 	bl	8002568 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e0ac      	b.n	800591e <HAL_RCC_OscConfig+0x109a>
 80057c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057c8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80057cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057d6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	fa93 f2a3 	rbit	r2, r3
 80057e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80057e8:	601a      	str	r2, [r3, #0]
  return result;
 80057ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80057f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057f4:	fab3 f383 	clz	r3, r3
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	095b      	lsrs	r3, r3, #5
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	d102      	bne.n	800580e <HAL_RCC_OscConfig+0xf8a>
 8005808:	4b47      	ldr	r3, [pc, #284]	; (8005928 <HAL_RCC_OscConfig+0x10a4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	e027      	b.n	800585e <HAL_RCC_OscConfig+0xfda>
 800580e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005812:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005816:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800581a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005820:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	fa93 f2a3 	rbit	r2, r3
 800582a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800582e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005838:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800583c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005846:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	fa93 f2a3 	rbit	r2, r3
 8005850:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005854:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	4b33      	ldr	r3, [pc, #204]	; (8005928 <HAL_RCC_OscConfig+0x10a4>)
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005862:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005866:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800586a:	6011      	str	r1, [r2, #0]
 800586c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005870:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	fa92 f1a2 	rbit	r1, r2
 800587a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800587e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005882:	6011      	str	r1, [r2, #0]
  return result;
 8005884:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005888:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800588c:	6812      	ldr	r2, [r2, #0]
 800588e:	fab2 f282 	clz	r2, r2
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	f042 0220 	orr.w	r2, r2, #32
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	f002 021f 	and.w	r2, r2, #31
 800589e:	2101      	movs	r1, #1
 80058a0:	fa01 f202 	lsl.w	r2, r1, r2
 80058a4:	4013      	ands	r3, r2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d182      	bne.n	80057b0 <HAL_RCC_OscConfig+0xf2c>
 80058aa:	e037      	b.n	800591c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e02e      	b.n	800591e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80058c0:	4b19      	ldr	r3, [pc, #100]	; (8005928 <HAL_RCC_OscConfig+0x10a4>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80058c8:	4b17      	ldr	r3, [pc, #92]	; (8005928 <HAL_RCC_OscConfig+0x10a4>)
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80058d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80058d4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80058d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d117      	bne.n	8005918 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80058e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80058ec:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80058f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d10b      	bne.n	8005918 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005900:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005904:	f003 020f 	and.w	r2, r3, #15
 8005908:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800590c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005914:	429a      	cmp	r2, r3
 8005916:	d001      	beq.n	800591c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e000      	b.n	800591e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40021000 	.word	0x40021000

0800592c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b09e      	sub	sp, #120	; 0x78
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e162      	b.n	8005c0a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005944:	4b90      	ldr	r3, [pc, #576]	; (8005b88 <HAL_RCC_ClockConfig+0x25c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d910      	bls.n	8005974 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005952:	4b8d      	ldr	r3, [pc, #564]	; (8005b88 <HAL_RCC_ClockConfig+0x25c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f023 0207 	bic.w	r2, r3, #7
 800595a:	498b      	ldr	r1, [pc, #556]	; (8005b88 <HAL_RCC_ClockConfig+0x25c>)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	4313      	orrs	r3, r2
 8005960:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005962:	4b89      	ldr	r3, [pc, #548]	; (8005b88 <HAL_RCC_ClockConfig+0x25c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	429a      	cmp	r2, r3
 800596e:	d001      	beq.n	8005974 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e14a      	b.n	8005c0a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d008      	beq.n	8005992 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005980:	4b82      	ldr	r3, [pc, #520]	; (8005b8c <HAL_RCC_ClockConfig+0x260>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	497f      	ldr	r1, [pc, #508]	; (8005b8c <HAL_RCC_ClockConfig+0x260>)
 800598e:	4313      	orrs	r3, r2
 8005990:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 80dc 	beq.w	8005b58 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d13c      	bne.n	8005a22 <HAL_RCC_ClockConfig+0xf6>
 80059a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059b0:	fa93 f3a3 	rbit	r3, r3
 80059b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80059b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059b8:	fab3 f383 	clz	r3, r3
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	f043 0301 	orr.w	r3, r3, #1
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d102      	bne.n	80059d2 <HAL_RCC_ClockConfig+0xa6>
 80059cc:	4b6f      	ldr	r3, [pc, #444]	; (8005b8c <HAL_RCC_ClockConfig+0x260>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	e00f      	b.n	80059f2 <HAL_RCC_ClockConfig+0xc6>
 80059d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059da:	fa93 f3a3 	rbit	r3, r3
 80059de:	667b      	str	r3, [r7, #100]	; 0x64
 80059e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059e4:	663b      	str	r3, [r7, #96]	; 0x60
 80059e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059e8:	fa93 f3a3 	rbit	r3, r3
 80059ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059ee:	4b67      	ldr	r3, [pc, #412]	; (8005b8c <HAL_RCC_ClockConfig+0x260>)
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80059f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80059f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059fa:	fa92 f2a2 	rbit	r2, r2
 80059fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005a00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a02:	fab2 f282 	clz	r2, r2
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	f042 0220 	orr.w	r2, r2, #32
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	f002 021f 	and.w	r2, r2, #31
 8005a12:	2101      	movs	r1, #1
 8005a14:	fa01 f202 	lsl.w	r2, r1, r2
 8005a18:	4013      	ands	r3, r2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d17b      	bne.n	8005b16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e0f3      	b.n	8005c0a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d13c      	bne.n	8005aa4 <HAL_RCC_ClockConfig+0x178>
 8005a2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a32:	fa93 f3a3 	rbit	r3, r3
 8005a36:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a3a:	fab3 f383 	clz	r3, r3
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	095b      	lsrs	r3, r3, #5
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	f043 0301 	orr.w	r3, r3, #1
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d102      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x128>
 8005a4e:	4b4f      	ldr	r3, [pc, #316]	; (8005b8c <HAL_RCC_ClockConfig+0x260>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	e00f      	b.n	8005a74 <HAL_RCC_ClockConfig+0x148>
 8005a54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a5c:	fa93 f3a3 	rbit	r3, r3
 8005a60:	647b      	str	r3, [r7, #68]	; 0x44
 8005a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a66:	643b      	str	r3, [r7, #64]	; 0x40
 8005a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a6a:	fa93 f3a3 	rbit	r3, r3
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a70:	4b46      	ldr	r3, [pc, #280]	; (8005b8c <HAL_RCC_ClockConfig+0x260>)
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a78:	63ba      	str	r2, [r7, #56]	; 0x38
 8005a7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a7c:	fa92 f2a2 	rbit	r2, r2
 8005a80:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a84:	fab2 f282 	clz	r2, r2
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	f042 0220 	orr.w	r2, r2, #32
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	f002 021f 	and.w	r2, r2, #31
 8005a94:	2101      	movs	r1, #1
 8005a96:	fa01 f202 	lsl.w	r2, r1, r2
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d13a      	bne.n	8005b16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e0b2      	b.n	8005c0a <HAL_RCC_ClockConfig+0x2de>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aaa:	fa93 f3a3 	rbit	r3, r3
 8005aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab2:	fab3 f383 	clz	r3, r3
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	f043 0301 	orr.w	r3, r3, #1
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d102      	bne.n	8005acc <HAL_RCC_ClockConfig+0x1a0>
 8005ac6:	4b31      	ldr	r3, [pc, #196]	; (8005b8c <HAL_RCC_ClockConfig+0x260>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	e00d      	b.n	8005ae8 <HAL_RCC_ClockConfig+0x1bc>
 8005acc:	2302      	movs	r3, #2
 8005ace:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	fa93 f3a3 	rbit	r3, r3
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ad8:	2302      	movs	r3, #2
 8005ada:	623b      	str	r3, [r7, #32]
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	fa93 f3a3 	rbit	r3, r3
 8005ae2:	61fb      	str	r3, [r7, #28]
 8005ae4:	4b29      	ldr	r3, [pc, #164]	; (8005b8c <HAL_RCC_ClockConfig+0x260>)
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	2202      	movs	r2, #2
 8005aea:	61ba      	str	r2, [r7, #24]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	fa92 f2a2 	rbit	r2, r2
 8005af2:	617a      	str	r2, [r7, #20]
  return result;
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	fab2 f282 	clz	r2, r2
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	f042 0220 	orr.w	r2, r2, #32
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	f002 021f 	and.w	r2, r2, #31
 8005b06:	2101      	movs	r1, #1
 8005b08:	fa01 f202 	lsl.w	r2, r1, r2
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e079      	b.n	8005c0a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b16:	4b1d      	ldr	r3, [pc, #116]	; (8005b8c <HAL_RCC_ClockConfig+0x260>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f023 0203 	bic.w	r2, r3, #3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	491a      	ldr	r1, [pc, #104]	; (8005b8c <HAL_RCC_ClockConfig+0x260>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b28:	f7fc fd1e 	bl	8002568 <HAL_GetTick>
 8005b2c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2e:	e00a      	b.n	8005b46 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b30:	f7fc fd1a 	bl	8002568 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e061      	b.n	8005c0a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b46:	4b11      	ldr	r3, [pc, #68]	; (8005b8c <HAL_RCC_ClockConfig+0x260>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f003 020c 	and.w	r2, r3, #12
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d1eb      	bne.n	8005b30 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b58:	4b0b      	ldr	r3, [pc, #44]	; (8005b88 <HAL_RCC_ClockConfig+0x25c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d214      	bcs.n	8005b90 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b66:	4b08      	ldr	r3, [pc, #32]	; (8005b88 <HAL_RCC_ClockConfig+0x25c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f023 0207 	bic.w	r2, r3, #7
 8005b6e:	4906      	ldr	r1, [pc, #24]	; (8005b88 <HAL_RCC_ClockConfig+0x25c>)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b76:	4b04      	ldr	r3, [pc, #16]	; (8005b88 <HAL_RCC_ClockConfig+0x25c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0307 	and.w	r3, r3, #7
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d005      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e040      	b.n	8005c0a <HAL_RCC_ClockConfig+0x2de>
 8005b88:	40022000 	.word	0x40022000
 8005b8c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d008      	beq.n	8005bae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b9c:	4b1d      	ldr	r3, [pc, #116]	; (8005c14 <HAL_RCC_ClockConfig+0x2e8>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	491a      	ldr	r1, [pc, #104]	; (8005c14 <HAL_RCC_ClockConfig+0x2e8>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d009      	beq.n	8005bce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bba:	4b16      	ldr	r3, [pc, #88]	; (8005c14 <HAL_RCC_ClockConfig+0x2e8>)
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4912      	ldr	r1, [pc, #72]	; (8005c14 <HAL_RCC_ClockConfig+0x2e8>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005bce:	f000 f829 	bl	8005c24 <HAL_RCC_GetSysClockFreq>
 8005bd2:	4601      	mov	r1, r0
 8005bd4:	4b0f      	ldr	r3, [pc, #60]	; (8005c14 <HAL_RCC_ClockConfig+0x2e8>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bdc:	22f0      	movs	r2, #240	; 0xf0
 8005bde:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	fa92 f2a2 	rbit	r2, r2
 8005be6:	60fa      	str	r2, [r7, #12]
  return result;
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	fab2 f282 	clz	r2, r2
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	40d3      	lsrs	r3, r2
 8005bf2:	4a09      	ldr	r2, [pc, #36]	; (8005c18 <HAL_RCC_ClockConfig+0x2ec>)
 8005bf4:	5cd3      	ldrb	r3, [r2, r3]
 8005bf6:	fa21 f303 	lsr.w	r3, r1, r3
 8005bfa:	4a08      	ldr	r2, [pc, #32]	; (8005c1c <HAL_RCC_ClockConfig+0x2f0>)
 8005bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005bfe:	4b08      	ldr	r3, [pc, #32]	; (8005c20 <HAL_RCC_ClockConfig+0x2f4>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fc fc6c 	bl	80024e0 <HAL_InitTick>
  
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3778      	adds	r7, #120	; 0x78
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	40021000 	.word	0x40021000
 8005c18:	0800c854 	.word	0x0800c854
 8005c1c:	20000008 	.word	0x20000008
 8005c20:	2000000c 	.word	0x2000000c

08005c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b08b      	sub	sp, #44	; 0x2c
 8005c28:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	2300      	movs	r3, #0
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24
 8005c36:	2300      	movs	r3, #0
 8005c38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005c3e:	4b2a      	ldr	r3, [pc, #168]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	f003 030c 	and.w	r3, r3, #12
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d002      	beq.n	8005c54 <HAL_RCC_GetSysClockFreq+0x30>
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	d003      	beq.n	8005c5a <HAL_RCC_GetSysClockFreq+0x36>
 8005c52:	e03f      	b.n	8005cd4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c54:	4b25      	ldr	r3, [pc, #148]	; (8005cec <HAL_RCC_GetSysClockFreq+0xc8>)
 8005c56:	623b      	str	r3, [r7, #32]
      break;
 8005c58:	e03f      	b.n	8005cda <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005c60:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005c64:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	fa92 f2a2 	rbit	r2, r2
 8005c6c:	607a      	str	r2, [r7, #4]
  return result;
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	fab2 f282 	clz	r2, r2
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	40d3      	lsrs	r3, r2
 8005c78:	4a1d      	ldr	r2, [pc, #116]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005c7a:	5cd3      	ldrb	r3, [r2, r3]
 8005c7c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005c7e:	4b1a      	ldr	r3, [pc, #104]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	220f      	movs	r2, #15
 8005c88:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	fa92 f2a2 	rbit	r2, r2
 8005c90:	60fa      	str	r2, [r7, #12]
  return result;
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	fab2 f282 	clz	r2, r2
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	40d3      	lsrs	r3, r2
 8005c9c:	4a15      	ldr	r2, [pc, #84]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c9e:	5cd3      	ldrb	r3, [r2, r3]
 8005ca0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d008      	beq.n	8005cbe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005cac:	4a0f      	ldr	r2, [pc, #60]	; (8005cec <HAL_RCC_GetSysClockFreq+0xc8>)
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	fb02 f303 	mul.w	r3, r2, r3
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
 8005cbc:	e007      	b.n	8005cce <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005cbe:	4a0b      	ldr	r2, [pc, #44]	; (8005cec <HAL_RCC_GetSysClockFreq+0xc8>)
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	fb02 f303 	mul.w	r3, r2, r3
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	623b      	str	r3, [r7, #32]
      break;
 8005cd2:	e002      	b.n	8005cda <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005cd4:	4b05      	ldr	r3, [pc, #20]	; (8005cec <HAL_RCC_GetSysClockFreq+0xc8>)
 8005cd6:	623b      	str	r3, [r7, #32]
      break;
 8005cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cda:	6a3b      	ldr	r3, [r7, #32]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	372c      	adds	r7, #44	; 0x2c
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	40021000 	.word	0x40021000
 8005cec:	007a1200 	.word	0x007a1200
 8005cf0:	0800c86c 	.word	0x0800c86c
 8005cf4:	0800c87c 	.word	0x0800c87c

08005cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cfc:	4b03      	ldr	r3, [pc, #12]	; (8005d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	20000008 	.word	0x20000008

08005d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005d16:	f7ff ffef 	bl	8005cf8 <HAL_RCC_GetHCLKFreq>
 8005d1a:	4601      	mov	r1, r0
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d24:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005d28:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	fa92 f2a2 	rbit	r2, r2
 8005d30:	603a      	str	r2, [r7, #0]
  return result;
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	fab2 f282 	clz	r2, r2
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	40d3      	lsrs	r3, r2
 8005d3c:	4a04      	ldr	r2, [pc, #16]	; (8005d50 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005d3e:	5cd3      	ldrb	r3, [r2, r3]
 8005d40:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005d44:	4618      	mov	r0, r3
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	0800c864 	.word	0x0800c864

08005d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005d5a:	f7ff ffcd 	bl	8005cf8 <HAL_RCC_GetHCLKFreq>
 8005d5e:	4601      	mov	r1, r0
 8005d60:	4b0b      	ldr	r3, [pc, #44]	; (8005d90 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005d68:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005d6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	fa92 f2a2 	rbit	r2, r2
 8005d74:	603a      	str	r2, [r7, #0]
  return result;
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	fab2 f282 	clz	r2, r2
 8005d7c:	b2d2      	uxtb	r2, r2
 8005d7e:	40d3      	lsrs	r3, r2
 8005d80:	4a04      	ldr	r2, [pc, #16]	; (8005d94 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005d82:	5cd3      	ldrb	r3, [r2, r3]
 8005d84:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40021000 	.word	0x40021000
 8005d94:	0800c864 	.word	0x0800c864

08005d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b092      	sub	sp, #72	; 0x48
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005da8:	2300      	movs	r3, #0
 8005daa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 80d4 	beq.w	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dbc:	4b4e      	ldr	r3, [pc, #312]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10e      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dc8:	4b4b      	ldr	r3, [pc, #300]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	4a4a      	ldr	r2, [pc, #296]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd2:	61d3      	str	r3, [r2, #28]
 8005dd4:	4b48      	ldr	r3, [pc, #288]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ddc:	60bb      	str	r3, [r7, #8]
 8005dde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005de0:	2301      	movs	r3, #1
 8005de2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005de6:	4b45      	ldr	r3, [pc, #276]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d118      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005df2:	4b42      	ldr	r3, [pc, #264]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a41      	ldr	r2, [pc, #260]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dfc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dfe:	f7fc fbb3 	bl	8002568 <HAL_GetTick>
 8005e02:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e04:	e008      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e06:	f7fc fbaf 	bl	8002568 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b64      	cmp	r3, #100	; 0x64
 8005e12:	d901      	bls.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e1d6      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e18:	4b38      	ldr	r3, [pc, #224]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0f0      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e24:	4b34      	ldr	r3, [pc, #208]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 8084 	beq.w	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d07c      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e44:	4b2c      	ldr	r3, [pc, #176]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e56:	fa93 f3a3 	rbit	r3, r3
 8005e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e5e:	fab3 f383 	clz	r3, r3
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	461a      	mov	r2, r3
 8005e66:	4b26      	ldr	r3, [pc, #152]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e68:	4413      	add	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	2301      	movs	r3, #1
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7a:	fa93 f3a3 	rbit	r3, r3
 8005e7e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e82:	fab3 f383 	clz	r3, r3
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4b1d      	ldr	r3, [pc, #116]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	461a      	mov	r2, r3
 8005e92:	2300      	movs	r3, #0
 8005e94:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e96:	4a18      	ldr	r2, [pc, #96]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d04b      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea6:	f7fc fb5f 	bl	8002568 <HAL_GetTick>
 8005eaa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eac:	e00a      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eae:	f7fc fb5b 	bl	8002568 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e180      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eca:	fa93 f3a3 	rbit	r3, r3
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	623b      	str	r3, [r7, #32]
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	fa93 f3a3 	rbit	r3, r3
 8005eda:	61fb      	str	r3, [r7, #28]
  return result;
 8005edc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ede:	fab3 f383 	clz	r3, r3
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	095b      	lsrs	r3, r3, #5
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	f043 0302 	orr.w	r3, r3, #2
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d108      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005ef2:	4b01      	ldr	r3, [pc, #4]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	e00d      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	40007000 	.word	0x40007000
 8005f00:	10908100 	.word	0x10908100
 8005f04:	2302      	movs	r3, #2
 8005f06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	fa93 f3a3 	rbit	r3, r3
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	4b9a      	ldr	r3, [pc, #616]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	2202      	movs	r2, #2
 8005f16:	613a      	str	r2, [r7, #16]
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	fa92 f2a2 	rbit	r2, r2
 8005f1e:	60fa      	str	r2, [r7, #12]
  return result;
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	fab2 f282 	clz	r2, r2
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f2c:	b2d2      	uxtb	r2, r2
 8005f2e:	f002 021f 	and.w	r2, r2, #31
 8005f32:	2101      	movs	r1, #1
 8005f34:	fa01 f202 	lsl.w	r2, r1, r2
 8005f38:	4013      	ands	r3, r2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0b7      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005f3e:	4b8f      	ldr	r3, [pc, #572]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	498c      	ldr	r1, [pc, #560]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d105      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f58:	4b88      	ldr	r3, [pc, #544]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	4a87      	ldr	r2, [pc, #540]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d008      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f70:	4b82      	ldr	r3, [pc, #520]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	f023 0203 	bic.w	r2, r3, #3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	497f      	ldr	r1, [pc, #508]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d008      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f8e:	4b7b      	ldr	r3, [pc, #492]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	4978      	ldr	r1, [pc, #480]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d008      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fac:	4b73      	ldr	r3, [pc, #460]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	4970      	ldr	r1, [pc, #448]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d008      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fca:	4b6c      	ldr	r3, [pc, #432]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	f023 0210 	bic.w	r2, r3, #16
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	4969      	ldr	r1, [pc, #420]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d008      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005fe8:	4b64      	ldr	r3, [pc, #400]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff4:	4961      	ldr	r1, [pc, #388]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	d008      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006006:	4b5d      	ldr	r3, [pc, #372]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600a:	f023 0220 	bic.w	r2, r3, #32
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	495a      	ldr	r1, [pc, #360]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006014:	4313      	orrs	r3, r2
 8006016:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d008      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006024:	4b55      	ldr	r3, [pc, #340]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006028:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	4952      	ldr	r1, [pc, #328]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006032:	4313      	orrs	r3, r2
 8006034:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	2b00      	cmp	r3, #0
 8006040:	d008      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006042:	4b4e      	ldr	r3, [pc, #312]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006046:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	494b      	ldr	r1, [pc, #300]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006050:	4313      	orrs	r3, r2
 8006052:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b00      	cmp	r3, #0
 800605e:	d008      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006060:	4b46      	ldr	r3, [pc, #280]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006064:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	4943      	ldr	r1, [pc, #268]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800606e:	4313      	orrs	r3, r2
 8006070:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800607a:	2b00      	cmp	r3, #0
 800607c:	d008      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800607e:	4b3f      	ldr	r3, [pc, #252]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608a:	493c      	ldr	r1, [pc, #240]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800608c:	4313      	orrs	r3, r2
 800608e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006098:	2b00      	cmp	r3, #0
 800609a:	d008      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800609c:	4b37      	ldr	r3, [pc, #220]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a8:	4934      	ldr	r1, [pc, #208]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d008      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80060ba:	4b30      	ldr	r3, [pc, #192]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060be:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	492d      	ldr	r1, [pc, #180]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d008      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80060d8:	4b28      	ldr	r3, [pc, #160]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e4:	4925      	ldr	r1, [pc, #148]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d008      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80060f6:	4b21      	ldr	r3, [pc, #132]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	491e      	ldr	r1, [pc, #120]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006104:	4313      	orrs	r3, r2
 8006106:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d008      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006114:	4b19      	ldr	r3, [pc, #100]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006118:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	4916      	ldr	r1, [pc, #88]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006122:	4313      	orrs	r3, r2
 8006124:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d008      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006132:	4b12      	ldr	r3, [pc, #72]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006136:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613e:	490f      	ldr	r1, [pc, #60]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006140:	4313      	orrs	r3, r2
 8006142:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d008      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006150:	4b0a      	ldr	r3, [pc, #40]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006154:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615c:	4907      	ldr	r1, [pc, #28]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800615e:	4313      	orrs	r3, r2
 8006160:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00c      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800616e:	4b03      	ldr	r3, [pc, #12]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	e002      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800617a:	bf00      	nop
 800617c:	40021000 	.word	0x40021000
 8006180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006182:	4913      	ldr	r1, [pc, #76]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006184:	4313      	orrs	r3, r2
 8006186:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d008      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006194:	4b0e      	ldr	r3, [pc, #56]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006198:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a0:	490b      	ldr	r1, [pc, #44]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d008      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80061b2:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061be:	4904      	ldr	r1, [pc, #16]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3748      	adds	r7, #72	; 0x48
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	40021000 	.word	0x40021000

080061d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e049      	b.n	800627a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7fb ff0e 	bl	800201c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	3304      	adds	r3, #4
 8006210:	4619      	mov	r1, r3
 8006212:	4610      	mov	r0, r2
 8006214:	f000 fcd2 	bl	8006bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e049      	b.n	8006328 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d106      	bne.n	80062ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f841 	bl	8006330 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2202      	movs	r2, #2
 80062b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	3304      	adds	r3, #4
 80062be:	4619      	mov	r1, r3
 80062c0:	4610      	mov	r0, r2
 80062c2:	f000 fc7b 	bl	8006bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d109      	bne.n	8006368 <HAL_TIM_PWM_Start+0x24>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b01      	cmp	r3, #1
 800635e:	bf14      	ite	ne
 8006360:	2301      	movne	r3, #1
 8006362:	2300      	moveq	r3, #0
 8006364:	b2db      	uxtb	r3, r3
 8006366:	e03c      	b.n	80063e2 <HAL_TIM_PWM_Start+0x9e>
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2b04      	cmp	r3, #4
 800636c:	d109      	bne.n	8006382 <HAL_TIM_PWM_Start+0x3e>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b01      	cmp	r3, #1
 8006378:	bf14      	ite	ne
 800637a:	2301      	movne	r3, #1
 800637c:	2300      	moveq	r3, #0
 800637e:	b2db      	uxtb	r3, r3
 8006380:	e02f      	b.n	80063e2 <HAL_TIM_PWM_Start+0x9e>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b08      	cmp	r3, #8
 8006386:	d109      	bne.n	800639c <HAL_TIM_PWM_Start+0x58>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b01      	cmp	r3, #1
 8006392:	bf14      	ite	ne
 8006394:	2301      	movne	r3, #1
 8006396:	2300      	moveq	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	e022      	b.n	80063e2 <HAL_TIM_PWM_Start+0x9e>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b0c      	cmp	r3, #12
 80063a0:	d109      	bne.n	80063b6 <HAL_TIM_PWM_Start+0x72>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	bf14      	ite	ne
 80063ae:	2301      	movne	r3, #1
 80063b0:	2300      	moveq	r3, #0
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	e015      	b.n	80063e2 <HAL_TIM_PWM_Start+0x9e>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b10      	cmp	r3, #16
 80063ba:	d109      	bne.n	80063d0 <HAL_TIM_PWM_Start+0x8c>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	bf14      	ite	ne
 80063c8:	2301      	movne	r3, #1
 80063ca:	2300      	moveq	r3, #0
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	e008      	b.n	80063e2 <HAL_TIM_PWM_Start+0x9e>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b01      	cmp	r3, #1
 80063da:	bf14      	ite	ne
 80063dc:	2301      	movne	r3, #1
 80063de:	2300      	moveq	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e0a1      	b.n	800652e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d104      	bne.n	80063fa <HAL_TIM_PWM_Start+0xb6>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063f8:	e023      	b.n	8006442 <HAL_TIM_PWM_Start+0xfe>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b04      	cmp	r3, #4
 80063fe:	d104      	bne.n	800640a <HAL_TIM_PWM_Start+0xc6>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006408:	e01b      	b.n	8006442 <HAL_TIM_PWM_Start+0xfe>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b08      	cmp	r3, #8
 800640e:	d104      	bne.n	800641a <HAL_TIM_PWM_Start+0xd6>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006418:	e013      	b.n	8006442 <HAL_TIM_PWM_Start+0xfe>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b0c      	cmp	r3, #12
 800641e:	d104      	bne.n	800642a <HAL_TIM_PWM_Start+0xe6>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006428:	e00b      	b.n	8006442 <HAL_TIM_PWM_Start+0xfe>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b10      	cmp	r3, #16
 800642e:	d104      	bne.n	800643a <HAL_TIM_PWM_Start+0xf6>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006438:	e003      	b.n	8006442 <HAL_TIM_PWM_Start+0xfe>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2202      	movs	r2, #2
 800643e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2201      	movs	r2, #1
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fff4 	bl	8007438 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a38      	ldr	r2, [pc, #224]	; (8006538 <HAL_TIM_PWM_Start+0x1f4>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d018      	beq.n	800648c <HAL_TIM_PWM_Start+0x148>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a37      	ldr	r2, [pc, #220]	; (800653c <HAL_TIM_PWM_Start+0x1f8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d013      	beq.n	800648c <HAL_TIM_PWM_Start+0x148>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a35      	ldr	r2, [pc, #212]	; (8006540 <HAL_TIM_PWM_Start+0x1fc>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00e      	beq.n	800648c <HAL_TIM_PWM_Start+0x148>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a34      	ldr	r2, [pc, #208]	; (8006544 <HAL_TIM_PWM_Start+0x200>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d009      	beq.n	800648c <HAL_TIM_PWM_Start+0x148>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a32      	ldr	r2, [pc, #200]	; (8006548 <HAL_TIM_PWM_Start+0x204>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d004      	beq.n	800648c <HAL_TIM_PWM_Start+0x148>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a31      	ldr	r2, [pc, #196]	; (800654c <HAL_TIM_PWM_Start+0x208>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d101      	bne.n	8006490 <HAL_TIM_PWM_Start+0x14c>
 800648c:	2301      	movs	r3, #1
 800648e:	e000      	b.n	8006492 <HAL_TIM_PWM_Start+0x14e>
 8006490:	2300      	movs	r3, #0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d007      	beq.n	80064a6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a23      	ldr	r2, [pc, #140]	; (8006538 <HAL_TIM_PWM_Start+0x1f4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d01d      	beq.n	80064ec <HAL_TIM_PWM_Start+0x1a8>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b8:	d018      	beq.n	80064ec <HAL_TIM_PWM_Start+0x1a8>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a24      	ldr	r2, [pc, #144]	; (8006550 <HAL_TIM_PWM_Start+0x20c>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d013      	beq.n	80064ec <HAL_TIM_PWM_Start+0x1a8>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a22      	ldr	r2, [pc, #136]	; (8006554 <HAL_TIM_PWM_Start+0x210>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d00e      	beq.n	80064ec <HAL_TIM_PWM_Start+0x1a8>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a1a      	ldr	r2, [pc, #104]	; (800653c <HAL_TIM_PWM_Start+0x1f8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d009      	beq.n	80064ec <HAL_TIM_PWM_Start+0x1a8>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a18      	ldr	r2, [pc, #96]	; (8006540 <HAL_TIM_PWM_Start+0x1fc>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d004      	beq.n	80064ec <HAL_TIM_PWM_Start+0x1a8>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a19      	ldr	r2, [pc, #100]	; (800654c <HAL_TIM_PWM_Start+0x208>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d115      	bne.n	8006518 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	4b19      	ldr	r3, [pc, #100]	; (8006558 <HAL_TIM_PWM_Start+0x214>)
 80064f4:	4013      	ands	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b06      	cmp	r3, #6
 80064fc:	d015      	beq.n	800652a <HAL_TIM_PWM_Start+0x1e6>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006504:	d011      	beq.n	800652a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f042 0201 	orr.w	r2, r2, #1
 8006514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006516:	e008      	b.n	800652a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0201 	orr.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	e000      	b.n	800652c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800652a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40012c00 	.word	0x40012c00
 800653c:	40013400 	.word	0x40013400
 8006540:	40014000 	.word	0x40014000
 8006544:	40014400 	.word	0x40014400
 8006548:	40014800 	.word	0x40014800
 800654c:	40015000 	.word	0x40015000
 8006550:	40000400 	.word	0x40000400
 8006554:	40000800 	.word	0x40000800
 8006558:	00010007 	.word	0x00010007

0800655c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b02      	cmp	r3, #2
 8006570:	d122      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b02      	cmp	r3, #2
 800657e:	d11b      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f06f 0202 	mvn.w	r2, #2
 8006588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 faed 	bl	8006b7e <HAL_TIM_IC_CaptureCallback>
 80065a4:	e005      	b.n	80065b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fadf 	bl	8006b6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 faf0 	bl	8006b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f003 0304 	and.w	r3, r3, #4
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d122      	bne.n	800660c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b04      	cmp	r3, #4
 80065d2:	d11b      	bne.n	800660c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0204 	mvn.w	r2, #4
 80065dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2202      	movs	r2, #2
 80065e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fac3 	bl	8006b7e <HAL_TIM_IC_CaptureCallback>
 80065f8:	e005      	b.n	8006606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fab5 	bl	8006b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fac6 	bl	8006b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b08      	cmp	r3, #8
 8006618:	d122      	bne.n	8006660 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f003 0308 	and.w	r3, r3, #8
 8006624:	2b08      	cmp	r3, #8
 8006626:	d11b      	bne.n	8006660 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0208 	mvn.w	r2, #8
 8006630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2204      	movs	r2, #4
 8006636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	f003 0303 	and.w	r3, r3, #3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fa99 	bl	8006b7e <HAL_TIM_IC_CaptureCallback>
 800664c:	e005      	b.n	800665a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fa8b 	bl	8006b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fa9c 	bl	8006b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f003 0310 	and.w	r3, r3, #16
 800666a:	2b10      	cmp	r3, #16
 800666c:	d122      	bne.n	80066b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f003 0310 	and.w	r3, r3, #16
 8006678:	2b10      	cmp	r3, #16
 800667a:	d11b      	bne.n	80066b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f06f 0210 	mvn.w	r2, #16
 8006684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2208      	movs	r2, #8
 800668a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fa6f 	bl	8006b7e <HAL_TIM_IC_CaptureCallback>
 80066a0:	e005      	b.n	80066ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fa61 	bl	8006b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fa72 	bl	8006b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d10e      	bne.n	80066e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d107      	bne.n	80066e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f06f 0201 	mvn.w	r2, #1
 80066d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fa3b 	bl	8006b56 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ea:	2b80      	cmp	r3, #128	; 0x80
 80066ec:	d10e      	bne.n	800670c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f8:	2b80      	cmp	r3, #128	; 0x80
 80066fa:	d107      	bne.n	800670c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 ff52 	bl	80075b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800671a:	d10e      	bne.n	800673a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006726:	2b80      	cmp	r3, #128	; 0x80
 8006728:	d107      	bne.n	800673a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 ff45 	bl	80075c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006744:	2b40      	cmp	r3, #64	; 0x40
 8006746:	d10e      	bne.n	8006766 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006752:	2b40      	cmp	r3, #64	; 0x40
 8006754:	d107      	bne.n	8006766 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800675e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fa20 	bl	8006ba6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f003 0320 	and.w	r3, r3, #32
 8006770:	2b20      	cmp	r3, #32
 8006772:	d10e      	bne.n	8006792 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b20      	cmp	r3, #32
 8006780:	d107      	bne.n	8006792 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f06f 0220 	mvn.w	r2, #32
 800678a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 ff05 	bl	800759c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006792:	bf00      	nop
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067a8:	2300      	movs	r3, #0
 80067aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d101      	bne.n	80067ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067b6:	2302      	movs	r3, #2
 80067b8:	e0ff      	b.n	80069ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b14      	cmp	r3, #20
 80067c6:	f200 80f0 	bhi.w	80069aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80067ca:	a201      	add	r2, pc, #4	; (adr r2, 80067d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d0:	08006825 	.word	0x08006825
 80067d4:	080069ab 	.word	0x080069ab
 80067d8:	080069ab 	.word	0x080069ab
 80067dc:	080069ab 	.word	0x080069ab
 80067e0:	08006865 	.word	0x08006865
 80067e4:	080069ab 	.word	0x080069ab
 80067e8:	080069ab 	.word	0x080069ab
 80067ec:	080069ab 	.word	0x080069ab
 80067f0:	080068a7 	.word	0x080068a7
 80067f4:	080069ab 	.word	0x080069ab
 80067f8:	080069ab 	.word	0x080069ab
 80067fc:	080069ab 	.word	0x080069ab
 8006800:	080068e7 	.word	0x080068e7
 8006804:	080069ab 	.word	0x080069ab
 8006808:	080069ab 	.word	0x080069ab
 800680c:	080069ab 	.word	0x080069ab
 8006810:	08006929 	.word	0x08006929
 8006814:	080069ab 	.word	0x080069ab
 8006818:	080069ab 	.word	0x080069ab
 800681c:	080069ab 	.word	0x080069ab
 8006820:	08006969 	.word	0x08006969
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	4618      	mov	r0, r3
 800682c:	f000 fa64 	bl	8006cf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699a      	ldr	r2, [r3, #24]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f042 0208 	orr.w	r2, r2, #8
 800683e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699a      	ldr	r2, [r3, #24]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0204 	bic.w	r2, r2, #4
 800684e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6999      	ldr	r1, [r3, #24]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	691a      	ldr	r2, [r3, #16]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	619a      	str	r2, [r3, #24]
      break;
 8006862:	e0a5      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fade 	bl	8006e2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800687e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699a      	ldr	r2, [r3, #24]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800688e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6999      	ldr	r1, [r3, #24]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	021a      	lsls	r2, r3, #8
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	619a      	str	r2, [r3, #24]
      break;
 80068a4:	e084      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68b9      	ldr	r1, [r7, #8]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 fb51 	bl	8006f54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69da      	ldr	r2, [r3, #28]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f042 0208 	orr.w	r2, r2, #8
 80068c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0204 	bic.w	r2, r2, #4
 80068d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69d9      	ldr	r1, [r3, #28]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	61da      	str	r2, [r3, #28]
      break;
 80068e4:	e064      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68b9      	ldr	r1, [r7, #8]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fbc3 	bl	8007078 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69da      	ldr	r2, [r3, #28]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69da      	ldr	r2, [r3, #28]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69d9      	ldr	r1, [r3, #28]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	021a      	lsls	r2, r3, #8
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	61da      	str	r2, [r3, #28]
      break;
 8006926:	e043      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68b9      	ldr	r1, [r7, #8]
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fc12 	bl	8007158 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0208 	orr.w	r2, r2, #8
 8006942:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0204 	bic.w	r2, r2, #4
 8006952:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	691a      	ldr	r2, [r3, #16]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006966:	e023      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fc5c 	bl	800722c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006982:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006992:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	021a      	lsls	r2, r3, #8
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069a8:	e002      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	75fb      	strb	r3, [r7, #23]
      break;
 80069ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop

080069c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_TIM_ConfigClockSource+0x1c>
 80069dc:	2302      	movs	r3, #2
 80069de:	e0b6      	b.n	8006b4e <HAL_TIM_ConfigClockSource+0x18a>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a1c:	d03e      	beq.n	8006a9c <HAL_TIM_ConfigClockSource+0xd8>
 8006a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a22:	f200 8087 	bhi.w	8006b34 <HAL_TIM_ConfigClockSource+0x170>
 8006a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2a:	f000 8086 	beq.w	8006b3a <HAL_TIM_ConfigClockSource+0x176>
 8006a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a32:	d87f      	bhi.n	8006b34 <HAL_TIM_ConfigClockSource+0x170>
 8006a34:	2b70      	cmp	r3, #112	; 0x70
 8006a36:	d01a      	beq.n	8006a6e <HAL_TIM_ConfigClockSource+0xaa>
 8006a38:	2b70      	cmp	r3, #112	; 0x70
 8006a3a:	d87b      	bhi.n	8006b34 <HAL_TIM_ConfigClockSource+0x170>
 8006a3c:	2b60      	cmp	r3, #96	; 0x60
 8006a3e:	d050      	beq.n	8006ae2 <HAL_TIM_ConfigClockSource+0x11e>
 8006a40:	2b60      	cmp	r3, #96	; 0x60
 8006a42:	d877      	bhi.n	8006b34 <HAL_TIM_ConfigClockSource+0x170>
 8006a44:	2b50      	cmp	r3, #80	; 0x50
 8006a46:	d03c      	beq.n	8006ac2 <HAL_TIM_ConfigClockSource+0xfe>
 8006a48:	2b50      	cmp	r3, #80	; 0x50
 8006a4a:	d873      	bhi.n	8006b34 <HAL_TIM_ConfigClockSource+0x170>
 8006a4c:	2b40      	cmp	r3, #64	; 0x40
 8006a4e:	d058      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x13e>
 8006a50:	2b40      	cmp	r3, #64	; 0x40
 8006a52:	d86f      	bhi.n	8006b34 <HAL_TIM_ConfigClockSource+0x170>
 8006a54:	2b30      	cmp	r3, #48	; 0x30
 8006a56:	d064      	beq.n	8006b22 <HAL_TIM_ConfigClockSource+0x15e>
 8006a58:	2b30      	cmp	r3, #48	; 0x30
 8006a5a:	d86b      	bhi.n	8006b34 <HAL_TIM_ConfigClockSource+0x170>
 8006a5c:	2b20      	cmp	r3, #32
 8006a5e:	d060      	beq.n	8006b22 <HAL_TIM_ConfigClockSource+0x15e>
 8006a60:	2b20      	cmp	r3, #32
 8006a62:	d867      	bhi.n	8006b34 <HAL_TIM_ConfigClockSource+0x170>
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d05c      	beq.n	8006b22 <HAL_TIM_ConfigClockSource+0x15e>
 8006a68:	2b10      	cmp	r3, #16
 8006a6a:	d05a      	beq.n	8006b22 <HAL_TIM_ConfigClockSource+0x15e>
 8006a6c:	e062      	b.n	8006b34 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	6899      	ldr	r1, [r3, #8]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f000 fcbb 	bl	80073f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	609a      	str	r2, [r3, #8]
      break;
 8006a9a:	e04f      	b.n	8006b3c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6818      	ldr	r0, [r3, #0]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	6899      	ldr	r1, [r3, #8]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f000 fca4 	bl	80073f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006abe:	609a      	str	r2, [r3, #8]
      break;
 8006ac0:	e03c      	b.n	8006b3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	6859      	ldr	r1, [r3, #4]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f000 fc18 	bl	8007304 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2150      	movs	r1, #80	; 0x50
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 fc71 	bl	80073c2 <TIM_ITRx_SetConfig>
      break;
 8006ae0:	e02c      	b.n	8006b3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6818      	ldr	r0, [r3, #0]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	6859      	ldr	r1, [r3, #4]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	461a      	mov	r2, r3
 8006af0:	f000 fc37 	bl	8007362 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2160      	movs	r1, #96	; 0x60
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 fc61 	bl	80073c2 <TIM_ITRx_SetConfig>
      break;
 8006b00:	e01c      	b.n	8006b3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6818      	ldr	r0, [r3, #0]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	6859      	ldr	r1, [r3, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f000 fbf8 	bl	8007304 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2140      	movs	r1, #64	; 0x40
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fc51 	bl	80073c2 <TIM_ITRx_SetConfig>
      break;
 8006b20:	e00c      	b.n	8006b3c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	f000 fc48 	bl	80073c2 <TIM_ITRx_SetConfig>
      break;
 8006b32:	e003      	b.n	8006b3c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	73fb      	strb	r3, [r7, #15]
      break;
 8006b38:	e000      	b.n	8006b3c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006b3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b5e:	bf00      	nop
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b083      	sub	sp, #12
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b72:	bf00      	nop
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b86:	bf00      	nop
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b9a:	bf00      	nop
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bae:	bf00      	nop
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
	...

08006bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a42      	ldr	r2, [pc, #264]	; (8006cd8 <TIM_Base_SetConfig+0x11c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d013      	beq.n	8006bfc <TIM_Base_SetConfig+0x40>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bda:	d00f      	beq.n	8006bfc <TIM_Base_SetConfig+0x40>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a3f      	ldr	r2, [pc, #252]	; (8006cdc <TIM_Base_SetConfig+0x120>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00b      	beq.n	8006bfc <TIM_Base_SetConfig+0x40>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a3e      	ldr	r2, [pc, #248]	; (8006ce0 <TIM_Base_SetConfig+0x124>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d007      	beq.n	8006bfc <TIM_Base_SetConfig+0x40>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a3d      	ldr	r2, [pc, #244]	; (8006ce4 <TIM_Base_SetConfig+0x128>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d003      	beq.n	8006bfc <TIM_Base_SetConfig+0x40>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a3c      	ldr	r2, [pc, #240]	; (8006ce8 <TIM_Base_SetConfig+0x12c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d108      	bne.n	8006c0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a31      	ldr	r2, [pc, #196]	; (8006cd8 <TIM_Base_SetConfig+0x11c>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d01f      	beq.n	8006c56 <TIM_Base_SetConfig+0x9a>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c1c:	d01b      	beq.n	8006c56 <TIM_Base_SetConfig+0x9a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a2e      	ldr	r2, [pc, #184]	; (8006cdc <TIM_Base_SetConfig+0x120>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d017      	beq.n	8006c56 <TIM_Base_SetConfig+0x9a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a2d      	ldr	r2, [pc, #180]	; (8006ce0 <TIM_Base_SetConfig+0x124>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d013      	beq.n	8006c56 <TIM_Base_SetConfig+0x9a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a2c      	ldr	r2, [pc, #176]	; (8006ce4 <TIM_Base_SetConfig+0x128>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d00f      	beq.n	8006c56 <TIM_Base_SetConfig+0x9a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a2c      	ldr	r2, [pc, #176]	; (8006cec <TIM_Base_SetConfig+0x130>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00b      	beq.n	8006c56 <TIM_Base_SetConfig+0x9a>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a2b      	ldr	r2, [pc, #172]	; (8006cf0 <TIM_Base_SetConfig+0x134>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d007      	beq.n	8006c56 <TIM_Base_SetConfig+0x9a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a2a      	ldr	r2, [pc, #168]	; (8006cf4 <TIM_Base_SetConfig+0x138>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d003      	beq.n	8006c56 <TIM_Base_SetConfig+0x9a>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a25      	ldr	r2, [pc, #148]	; (8006ce8 <TIM_Base_SetConfig+0x12c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d108      	bne.n	8006c68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a12      	ldr	r2, [pc, #72]	; (8006cd8 <TIM_Base_SetConfig+0x11c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d013      	beq.n	8006cbc <TIM_Base_SetConfig+0x100>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a13      	ldr	r2, [pc, #76]	; (8006ce4 <TIM_Base_SetConfig+0x128>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00f      	beq.n	8006cbc <TIM_Base_SetConfig+0x100>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a13      	ldr	r2, [pc, #76]	; (8006cec <TIM_Base_SetConfig+0x130>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00b      	beq.n	8006cbc <TIM_Base_SetConfig+0x100>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a12      	ldr	r2, [pc, #72]	; (8006cf0 <TIM_Base_SetConfig+0x134>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d007      	beq.n	8006cbc <TIM_Base_SetConfig+0x100>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a11      	ldr	r2, [pc, #68]	; (8006cf4 <TIM_Base_SetConfig+0x138>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d003      	beq.n	8006cbc <TIM_Base_SetConfig+0x100>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a0c      	ldr	r2, [pc, #48]	; (8006ce8 <TIM_Base_SetConfig+0x12c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d103      	bne.n	8006cc4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	691a      	ldr	r2, [r3, #16]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	615a      	str	r2, [r3, #20]
}
 8006cca:	bf00      	nop
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	40012c00 	.word	0x40012c00
 8006cdc:	40000400 	.word	0x40000400
 8006ce0:	40000800 	.word	0x40000800
 8006ce4:	40013400 	.word	0x40013400
 8006ce8:	40015000 	.word	0x40015000
 8006cec:	40014000 	.word	0x40014000
 8006cf0:	40014400 	.word	0x40014400
 8006cf4:	40014800 	.word	0x40014800

08006cf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	f023 0201 	bic.w	r2, r3, #1
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0303 	bic.w	r3, r3, #3
 8006d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f023 0302 	bic.w	r3, r3, #2
 8006d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a30      	ldr	r2, [pc, #192]	; (8006e14 <TIM_OC1_SetConfig+0x11c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d013      	beq.n	8006d80 <TIM_OC1_SetConfig+0x88>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a2f      	ldr	r2, [pc, #188]	; (8006e18 <TIM_OC1_SetConfig+0x120>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00f      	beq.n	8006d80 <TIM_OC1_SetConfig+0x88>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a2e      	ldr	r2, [pc, #184]	; (8006e1c <TIM_OC1_SetConfig+0x124>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00b      	beq.n	8006d80 <TIM_OC1_SetConfig+0x88>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a2d      	ldr	r2, [pc, #180]	; (8006e20 <TIM_OC1_SetConfig+0x128>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d007      	beq.n	8006d80 <TIM_OC1_SetConfig+0x88>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a2c      	ldr	r2, [pc, #176]	; (8006e24 <TIM_OC1_SetConfig+0x12c>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d003      	beq.n	8006d80 <TIM_OC1_SetConfig+0x88>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a2b      	ldr	r2, [pc, #172]	; (8006e28 <TIM_OC1_SetConfig+0x130>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d10c      	bne.n	8006d9a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f023 0308 	bic.w	r3, r3, #8
 8006d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f023 0304 	bic.w	r3, r3, #4
 8006d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a1d      	ldr	r2, [pc, #116]	; (8006e14 <TIM_OC1_SetConfig+0x11c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d013      	beq.n	8006dca <TIM_OC1_SetConfig+0xd2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a1c      	ldr	r2, [pc, #112]	; (8006e18 <TIM_OC1_SetConfig+0x120>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d00f      	beq.n	8006dca <TIM_OC1_SetConfig+0xd2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a1b      	ldr	r2, [pc, #108]	; (8006e1c <TIM_OC1_SetConfig+0x124>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d00b      	beq.n	8006dca <TIM_OC1_SetConfig+0xd2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a1a      	ldr	r2, [pc, #104]	; (8006e20 <TIM_OC1_SetConfig+0x128>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d007      	beq.n	8006dca <TIM_OC1_SetConfig+0xd2>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a19      	ldr	r2, [pc, #100]	; (8006e24 <TIM_OC1_SetConfig+0x12c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d003      	beq.n	8006dca <TIM_OC1_SetConfig+0xd2>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a18      	ldr	r2, [pc, #96]	; (8006e28 <TIM_OC1_SetConfig+0x130>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d111      	bne.n	8006dee <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	621a      	str	r2, [r3, #32]
}
 8006e08:	bf00      	nop
 8006e0a:	371c      	adds	r7, #28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	40012c00 	.word	0x40012c00
 8006e18:	40013400 	.word	0x40013400
 8006e1c:	40014000 	.word	0x40014000
 8006e20:	40014400 	.word	0x40014400
 8006e24:	40014800 	.word	0x40014800
 8006e28:	40015000 	.word	0x40015000

08006e2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f023 0210 	bic.w	r2, r3, #16
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	021b      	lsls	r3, r3, #8
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f023 0320 	bic.w	r3, r3, #32
 8006e7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	011b      	lsls	r3, r3, #4
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a2c      	ldr	r2, [pc, #176]	; (8006f3c <TIM_OC2_SetConfig+0x110>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d007      	beq.n	8006ea0 <TIM_OC2_SetConfig+0x74>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a2b      	ldr	r2, [pc, #172]	; (8006f40 <TIM_OC2_SetConfig+0x114>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d003      	beq.n	8006ea0 <TIM_OC2_SetConfig+0x74>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a2a      	ldr	r2, [pc, #168]	; (8006f44 <TIM_OC2_SetConfig+0x118>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d10d      	bne.n	8006ebc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	011b      	lsls	r3, r3, #4
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a1f      	ldr	r2, [pc, #124]	; (8006f3c <TIM_OC2_SetConfig+0x110>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d013      	beq.n	8006eec <TIM_OC2_SetConfig+0xc0>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a1e      	ldr	r2, [pc, #120]	; (8006f40 <TIM_OC2_SetConfig+0x114>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d00f      	beq.n	8006eec <TIM_OC2_SetConfig+0xc0>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a1e      	ldr	r2, [pc, #120]	; (8006f48 <TIM_OC2_SetConfig+0x11c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d00b      	beq.n	8006eec <TIM_OC2_SetConfig+0xc0>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a1d      	ldr	r2, [pc, #116]	; (8006f4c <TIM_OC2_SetConfig+0x120>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d007      	beq.n	8006eec <TIM_OC2_SetConfig+0xc0>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a1c      	ldr	r2, [pc, #112]	; (8006f50 <TIM_OC2_SetConfig+0x124>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d003      	beq.n	8006eec <TIM_OC2_SetConfig+0xc0>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a17      	ldr	r2, [pc, #92]	; (8006f44 <TIM_OC2_SetConfig+0x118>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d113      	bne.n	8006f14 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ef2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006efa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	621a      	str	r2, [r3, #32]
}
 8006f2e:	bf00      	nop
 8006f30:	371c      	adds	r7, #28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	40012c00 	.word	0x40012c00
 8006f40:	40013400 	.word	0x40013400
 8006f44:	40015000 	.word	0x40015000
 8006f48:	40014000 	.word	0x40014000
 8006f4c:	40014400 	.word	0x40014400
 8006f50:	40014800 	.word	0x40014800

08006f54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 0303 	bic.w	r3, r3, #3
 8006f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	021b      	lsls	r3, r3, #8
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a2b      	ldr	r2, [pc, #172]	; (8007060 <TIM_OC3_SetConfig+0x10c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d007      	beq.n	8006fc6 <TIM_OC3_SetConfig+0x72>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a2a      	ldr	r2, [pc, #168]	; (8007064 <TIM_OC3_SetConfig+0x110>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d003      	beq.n	8006fc6 <TIM_OC3_SetConfig+0x72>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a29      	ldr	r2, [pc, #164]	; (8007068 <TIM_OC3_SetConfig+0x114>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d10d      	bne.n	8006fe2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	021b      	lsls	r3, r3, #8
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fe0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a1e      	ldr	r2, [pc, #120]	; (8007060 <TIM_OC3_SetConfig+0x10c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d013      	beq.n	8007012 <TIM_OC3_SetConfig+0xbe>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a1d      	ldr	r2, [pc, #116]	; (8007064 <TIM_OC3_SetConfig+0x110>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00f      	beq.n	8007012 <TIM_OC3_SetConfig+0xbe>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a1d      	ldr	r2, [pc, #116]	; (800706c <TIM_OC3_SetConfig+0x118>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00b      	beq.n	8007012 <TIM_OC3_SetConfig+0xbe>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a1c      	ldr	r2, [pc, #112]	; (8007070 <TIM_OC3_SetConfig+0x11c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d007      	beq.n	8007012 <TIM_OC3_SetConfig+0xbe>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a1b      	ldr	r2, [pc, #108]	; (8007074 <TIM_OC3_SetConfig+0x120>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d003      	beq.n	8007012 <TIM_OC3_SetConfig+0xbe>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a16      	ldr	r2, [pc, #88]	; (8007068 <TIM_OC3_SetConfig+0x114>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d113      	bne.n	800703a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4313      	orrs	r3, r2
 800702c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	011b      	lsls	r3, r3, #4
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	4313      	orrs	r3, r2
 8007038:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	621a      	str	r2, [r3, #32]
}
 8007054:	bf00      	nop
 8007056:	371c      	adds	r7, #28
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	40012c00 	.word	0x40012c00
 8007064:	40013400 	.word	0x40013400
 8007068:	40015000 	.word	0x40015000
 800706c:	40014000 	.word	0x40014000
 8007070:	40014400 	.word	0x40014400
 8007074:	40014800 	.word	0x40014800

08007078 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	021b      	lsls	r3, r3, #8
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	031b      	lsls	r3, r3, #12
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a1a      	ldr	r2, [pc, #104]	; (8007140 <TIM_OC4_SetConfig+0xc8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d013      	beq.n	8007104 <TIM_OC4_SetConfig+0x8c>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a19      	ldr	r2, [pc, #100]	; (8007144 <TIM_OC4_SetConfig+0xcc>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00f      	beq.n	8007104 <TIM_OC4_SetConfig+0x8c>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a18      	ldr	r2, [pc, #96]	; (8007148 <TIM_OC4_SetConfig+0xd0>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00b      	beq.n	8007104 <TIM_OC4_SetConfig+0x8c>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a17      	ldr	r2, [pc, #92]	; (800714c <TIM_OC4_SetConfig+0xd4>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d007      	beq.n	8007104 <TIM_OC4_SetConfig+0x8c>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a16      	ldr	r2, [pc, #88]	; (8007150 <TIM_OC4_SetConfig+0xd8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d003      	beq.n	8007104 <TIM_OC4_SetConfig+0x8c>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a15      	ldr	r2, [pc, #84]	; (8007154 <TIM_OC4_SetConfig+0xdc>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d109      	bne.n	8007118 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800710a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	019b      	lsls	r3, r3, #6
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	4313      	orrs	r3, r2
 8007116:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	621a      	str	r2, [r3, #32]
}
 8007132:	bf00      	nop
 8007134:	371c      	adds	r7, #28
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40012c00 	.word	0x40012c00
 8007144:	40013400 	.word	0x40013400
 8007148:	40014000 	.word	0x40014000
 800714c:	40014400 	.word	0x40014400
 8007150:	40014800 	.word	0x40014800
 8007154:	40015000 	.word	0x40015000

08007158 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	4313      	orrs	r3, r2
 8007194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800719c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	041b      	lsls	r3, r3, #16
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a19      	ldr	r2, [pc, #100]	; (8007214 <TIM_OC5_SetConfig+0xbc>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d013      	beq.n	80071da <TIM_OC5_SetConfig+0x82>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a18      	ldr	r2, [pc, #96]	; (8007218 <TIM_OC5_SetConfig+0xc0>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d00f      	beq.n	80071da <TIM_OC5_SetConfig+0x82>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a17      	ldr	r2, [pc, #92]	; (800721c <TIM_OC5_SetConfig+0xc4>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d00b      	beq.n	80071da <TIM_OC5_SetConfig+0x82>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a16      	ldr	r2, [pc, #88]	; (8007220 <TIM_OC5_SetConfig+0xc8>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d007      	beq.n	80071da <TIM_OC5_SetConfig+0x82>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a15      	ldr	r2, [pc, #84]	; (8007224 <TIM_OC5_SetConfig+0xcc>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d003      	beq.n	80071da <TIM_OC5_SetConfig+0x82>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a14      	ldr	r2, [pc, #80]	; (8007228 <TIM_OC5_SetConfig+0xd0>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d109      	bne.n	80071ee <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	021b      	lsls	r3, r3, #8
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	621a      	str	r2, [r3, #32]
}
 8007208:	bf00      	nop
 800720a:	371c      	adds	r7, #28
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	40012c00 	.word	0x40012c00
 8007218:	40013400 	.word	0x40013400
 800721c:	40014000 	.word	0x40014000
 8007220:	40014400 	.word	0x40014400
 8007224:	40014800 	.word	0x40014800
 8007228:	40015000 	.word	0x40015000

0800722c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800725a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800725e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	021b      	lsls	r3, r3, #8
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	4313      	orrs	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	051b      	lsls	r3, r3, #20
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	4313      	orrs	r3, r2
 800727e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a1a      	ldr	r2, [pc, #104]	; (80072ec <TIM_OC6_SetConfig+0xc0>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d013      	beq.n	80072b0 <TIM_OC6_SetConfig+0x84>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a19      	ldr	r2, [pc, #100]	; (80072f0 <TIM_OC6_SetConfig+0xc4>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d00f      	beq.n	80072b0 <TIM_OC6_SetConfig+0x84>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a18      	ldr	r2, [pc, #96]	; (80072f4 <TIM_OC6_SetConfig+0xc8>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00b      	beq.n	80072b0 <TIM_OC6_SetConfig+0x84>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a17      	ldr	r2, [pc, #92]	; (80072f8 <TIM_OC6_SetConfig+0xcc>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d007      	beq.n	80072b0 <TIM_OC6_SetConfig+0x84>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a16      	ldr	r2, [pc, #88]	; (80072fc <TIM_OC6_SetConfig+0xd0>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d003      	beq.n	80072b0 <TIM_OC6_SetConfig+0x84>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a15      	ldr	r2, [pc, #84]	; (8007300 <TIM_OC6_SetConfig+0xd4>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d109      	bne.n	80072c4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	029b      	lsls	r3, r3, #10
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	621a      	str	r2, [r3, #32]
}
 80072de:	bf00      	nop
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	40012c00 	.word	0x40012c00
 80072f0:	40013400 	.word	0x40013400
 80072f4:	40014000 	.word	0x40014000
 80072f8:	40014400 	.word	0x40014400
 80072fc:	40014800 	.word	0x40014800
 8007300:	40015000 	.word	0x40015000

08007304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007304:	b480      	push	{r7}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	f023 0201 	bic.w	r2, r3, #1
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800732e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	011b      	lsls	r3, r3, #4
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4313      	orrs	r3, r2
 8007338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f023 030a 	bic.w	r3, r3, #10
 8007340:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	4313      	orrs	r3, r2
 8007348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	621a      	str	r2, [r3, #32]
}
 8007356:	bf00      	nop
 8007358:	371c      	adds	r7, #28
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007362:	b480      	push	{r7}
 8007364:	b087      	sub	sp, #28
 8007366:	af00      	add	r7, sp, #0
 8007368:	60f8      	str	r0, [r7, #12]
 800736a:	60b9      	str	r1, [r7, #8]
 800736c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	f023 0210 	bic.w	r2, r3, #16
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800738c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	031b      	lsls	r3, r3, #12
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	4313      	orrs	r3, r2
 8007396:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800739e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	011b      	lsls	r3, r3, #4
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	621a      	str	r2, [r3, #32]
}
 80073b6:	bf00      	nop
 80073b8:	371c      	adds	r7, #28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b085      	sub	sp, #20
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4313      	orrs	r3, r2
 80073e0:	f043 0307 	orr.w	r3, r3, #7
 80073e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	609a      	str	r2, [r3, #8]
}
 80073ec:	bf00      	nop
 80073ee:	3714      	adds	r7, #20
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007412:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	021a      	lsls	r2, r3, #8
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	431a      	orrs	r2, r3
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	4313      	orrs	r3, r2
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	4313      	orrs	r3, r2
 8007424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	609a      	str	r2, [r3, #8]
}
 800742c:	bf00      	nop
 800742e:	371c      	adds	r7, #28
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f003 031f 	and.w	r3, r3, #31
 800744a:	2201      	movs	r2, #1
 800744c:	fa02 f303 	lsl.w	r3, r2, r3
 8007450:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6a1a      	ldr	r2, [r3, #32]
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	43db      	mvns	r3, r3
 800745a:	401a      	ands	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6a1a      	ldr	r2, [r3, #32]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f003 031f 	and.w	r3, r3, #31
 800746a:	6879      	ldr	r1, [r7, #4]
 800746c:	fa01 f303 	lsl.w	r3, r1, r3
 8007470:	431a      	orrs	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	621a      	str	r2, [r3, #32]
}
 8007476:	bf00      	nop
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
	...

08007484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007494:	2b01      	cmp	r3, #1
 8007496:	d101      	bne.n	800749c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007498:	2302      	movs	r3, #2
 800749a:	e06d      	b.n	8007578 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2202      	movs	r2, #2
 80074a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a30      	ldr	r2, [pc, #192]	; (8007584 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d009      	beq.n	80074da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a2f      	ldr	r2, [pc, #188]	; (8007588 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d004      	beq.n	80074da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a2d      	ldr	r2, [pc, #180]	; (800758c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d108      	bne.n	80074ec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80074e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a1e      	ldr	r2, [pc, #120]	; (8007584 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d01d      	beq.n	800754c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007518:	d018      	beq.n	800754c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a1c      	ldr	r2, [pc, #112]	; (8007590 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d013      	beq.n	800754c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a1a      	ldr	r2, [pc, #104]	; (8007594 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00e      	beq.n	800754c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a15      	ldr	r2, [pc, #84]	; (8007588 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d009      	beq.n	800754c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a16      	ldr	r2, [pc, #88]	; (8007598 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d004      	beq.n	800754c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a11      	ldr	r2, [pc, #68]	; (800758c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d10c      	bne.n	8007566 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007552:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	4313      	orrs	r3, r2
 800755c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	40012c00 	.word	0x40012c00
 8007588:	40013400 	.word	0x40013400
 800758c:	40015000 	.word	0x40015000
 8007590:	40000400 	.word	0x40000400
 8007594:	40000800 	.word	0x40000800
 8007598:	40014000 	.word	0x40014000

0800759c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e040      	b.n	800766c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d106      	bne.n	8007600 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7fa fd68 	bl	80020d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2224      	movs	r2, #36	; 0x24
 8007604:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0201 	bic.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fbc6 	bl	8007da8 <UART_SetConfig>
 800761c:	4603      	mov	r3, r0
 800761e:	2b01      	cmp	r3, #1
 8007620:	d101      	bne.n	8007626 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e022      	b.n	800766c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fd90 	bl	8008154 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007642:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689a      	ldr	r2, [r3, #8]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007652:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0201 	orr.w	r2, r2, #1
 8007662:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fe17 	bl	8008298 <UART_CheckIdleState>
 800766a:	4603      	mov	r3, r0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08a      	sub	sp, #40	; 0x28
 8007678:	af02      	add	r7, sp, #8
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	603b      	str	r3, [r7, #0]
 8007680:	4613      	mov	r3, r2
 8007682:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007688:	2b20      	cmp	r3, #32
 800768a:	f040 8082 	bne.w	8007792 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <HAL_UART_Transmit+0x26>
 8007694:	88fb      	ldrh	r3, [r7, #6]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e07a      	b.n	8007794 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d101      	bne.n	80076ac <HAL_UART_Transmit+0x38>
 80076a8:	2302      	movs	r3, #2
 80076aa:	e073      	b.n	8007794 <HAL_UART_Transmit+0x120>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2221      	movs	r2, #33	; 0x21
 80076c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076c2:	f7fa ff51 	bl	8002568 <HAL_GetTick>
 80076c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	88fa      	ldrh	r2, [r7, #6]
 80076cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	88fa      	ldrh	r2, [r7, #6]
 80076d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e0:	d108      	bne.n	80076f4 <HAL_UART_Transmit+0x80>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d104      	bne.n	80076f4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	61bb      	str	r3, [r7, #24]
 80076f2:	e003      	b.n	80076fc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076f8:	2300      	movs	r3, #0
 80076fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007704:	e02d      	b.n	8007762 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2200      	movs	r2, #0
 800770e:	2180      	movs	r1, #128	; 0x80
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 fe0a 	bl	800832a <UART_WaitOnFlagUntilTimeout>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e039      	b.n	8007794 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10b      	bne.n	800773e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	881a      	ldrh	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007732:	b292      	uxth	r2, r2
 8007734:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	3302      	adds	r3, #2
 800773a:	61bb      	str	r3, [r7, #24]
 800773c:	e008      	b.n	8007750 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	781a      	ldrb	r2, [r3, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	b292      	uxth	r2, r2
 8007748:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	3301      	adds	r3, #1
 800774e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007756:	b29b      	uxth	r3, r3
 8007758:	3b01      	subs	r3, #1
 800775a:	b29a      	uxth	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007768:	b29b      	uxth	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1cb      	bne.n	8007706 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	2200      	movs	r2, #0
 8007776:	2140      	movs	r1, #64	; 0x40
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 fdd6 	bl	800832a <UART_WaitOnFlagUntilTimeout>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d001      	beq.n	8007788 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e005      	b.n	8007794 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2220      	movs	r2, #32
 800778c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	e000      	b.n	8007794 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007792:	2302      	movs	r3, #2
  }
}
 8007794:	4618      	mov	r0, r3
 8007796:	3720      	adds	r7, #32
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b0ba      	sub	sp, #232	; 0xe8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80077c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80077c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80077ca:	4013      	ands	r3, r2
 80077cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80077d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d115      	bne.n	8007804 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80077d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077dc:	f003 0320 	and.w	r3, r3, #32
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00f      	beq.n	8007804 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e8:	f003 0320 	and.w	r3, r3, #32
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d009      	beq.n	8007804 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 82a3 	beq.w	8007d40 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	4798      	blx	r3
      }
      return;
 8007802:	e29d      	b.n	8007d40 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007804:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 8117 	beq.w	8007a3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800780e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d106      	bne.n	8007828 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800781a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800781e:	4b85      	ldr	r3, [pc, #532]	; (8007a34 <HAL_UART_IRQHandler+0x298>)
 8007820:	4013      	ands	r3, r2
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 810a 	beq.w	8007a3c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b00      	cmp	r3, #0
 8007832:	d011      	beq.n	8007858 <HAL_UART_IRQHandler+0xbc>
 8007834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00b      	beq.n	8007858 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2201      	movs	r2, #1
 8007846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800784e:	f043 0201 	orr.w	r2, r3, #1
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d011      	beq.n	8007888 <HAL_UART_IRQHandler+0xec>
 8007864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00b      	beq.n	8007888 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2202      	movs	r2, #2
 8007876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800787e:	f043 0204 	orr.w	r2, r3, #4
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b00      	cmp	r3, #0
 8007892:	d011      	beq.n	80078b8 <HAL_UART_IRQHandler+0x11c>
 8007894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00b      	beq.n	80078b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2204      	movs	r2, #4
 80078a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ae:	f043 0202 	orr.w	r2, r3, #2
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078bc:	f003 0308 	and.w	r3, r3, #8
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d017      	beq.n	80078f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078c8:	f003 0320 	and.w	r3, r3, #32
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d105      	bne.n	80078dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80078d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00b      	beq.n	80078f4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2208      	movs	r2, #8
 80078e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ea:	f043 0208 	orr.w	r2, r3, #8
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d012      	beq.n	8007926 <HAL_UART_IRQHandler+0x18a>
 8007900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007904:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00c      	beq.n	8007926 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007914:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800791c:	f043 0220 	orr.w	r2, r3, #32
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 8209 	beq.w	8007d44 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007936:	f003 0320 	and.w	r3, r3, #32
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00d      	beq.n	800795a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800793e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007942:	f003 0320 	and.w	r3, r3, #32
 8007946:	2b00      	cmp	r3, #0
 8007948:	d007      	beq.n	800795a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007960:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796e:	2b40      	cmp	r3, #64	; 0x40
 8007970:	d005      	beq.n	800797e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007976:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800797a:	2b00      	cmp	r3, #0
 800797c:	d04f      	beq.n	8007a1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fe60 	bl	8008644 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800798e:	2b40      	cmp	r3, #64	; 0x40
 8007990:	d141      	bne.n	8007a16 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	3308      	adds	r3, #8
 8007998:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3308      	adds	r3, #8
 80079ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80079be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80079c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079ce:	e841 2300 	strex	r3, r2, [r1]
 80079d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80079d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1d9      	bne.n	8007992 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d013      	beq.n	8007a0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ea:	4a13      	ldr	r2, [pc, #76]	; (8007a38 <HAL_UART_IRQHandler+0x29c>)
 80079ec:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fc fc1d 	bl	8004232 <HAL_DMA_Abort_IT>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d017      	beq.n	8007a2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007a08:	4610      	mov	r0, r2
 8007a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a0c:	e00f      	b.n	8007a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f9c0 	bl	8007d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a14:	e00b      	b.n	8007a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f9bc 	bl	8007d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a1c:	e007      	b.n	8007a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f9b8 	bl	8007d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007a2c:	e18a      	b.n	8007d44 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a2e:	bf00      	nop
    return;
 8007a30:	e188      	b.n	8007d44 <HAL_UART_IRQHandler+0x5a8>
 8007a32:	bf00      	nop
 8007a34:	04000120 	.word	0x04000120
 8007a38:	080088dd 	.word	0x080088dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	f040 8143 	bne.w	8007ccc <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a4a:	f003 0310 	and.w	r3, r3, #16
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 813c 	beq.w	8007ccc <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a58:	f003 0310 	and.w	r3, r3, #16
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 8135 	beq.w	8007ccc <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2210      	movs	r2, #16
 8007a68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a74:	2b40      	cmp	r3, #64	; 0x40
 8007a76:	f040 80b1 	bne.w	8007bdc <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 815c 	beq.w	8007d48 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	f080 8154 	bcs.w	8007d48 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007aa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	2b20      	cmp	r3, #32
 8007ab2:	f000 8085 	beq.w	8007bc0 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007aca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ace:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ad2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	461a      	mov	r2, r3
 8007adc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ae0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ae4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007aec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007af0:	e841 2300 	strex	r3, r2, [r1]
 8007af4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007af8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1da      	bne.n	8007ab6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3308      	adds	r3, #8
 8007b06:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b0a:	e853 3f00 	ldrex	r3, [r3]
 8007b0e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b12:	f023 0301 	bic.w	r3, r3, #1
 8007b16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3308      	adds	r3, #8
 8007b20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b24:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b28:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b30:	e841 2300 	strex	r3, r2, [r1]
 8007b34:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1e1      	bne.n	8007b00 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3308      	adds	r3, #8
 8007b42:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b46:	e853 3f00 	ldrex	r3, [r3]
 8007b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b60:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b68:	e841 2300 	strex	r3, r2, [r1]
 8007b6c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1e3      	bne.n	8007b3c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2220      	movs	r2, #32
 8007b78:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b90:	f023 0310 	bic.w	r3, r3, #16
 8007b94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ba2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ba4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ba8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e4      	bne.n	8007b80 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fc fb00 	bl	80041c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7f9 f85f 	bl	8000c98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bda:	e0b5      	b.n	8007d48 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 80a7 	beq.w	8007d4c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8007bfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 80a2 	beq.w	8007d4c <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	461a      	mov	r2, r3
 8007c26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8007c2c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c32:	e841 2300 	strex	r3, r2, [r1]
 8007c36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1e4      	bne.n	8007c08 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3308      	adds	r3, #8
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	f023 0301 	bic.w	r3, r3, #1
 8007c54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c62:	633a      	str	r2, [r7, #48]	; 0x30
 8007c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c6a:	e841 2300 	strex	r3, r2, [r1]
 8007c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1e3      	bne.n	8007c3e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2220      	movs	r2, #32
 8007c7a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f023 0310 	bic.w	r3, r3, #16
 8007c9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007caa:	61fb      	str	r3, [r7, #28]
 8007cac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	69b9      	ldr	r1, [r7, #24]
 8007cb0:	69fa      	ldr	r2, [r7, #28]
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	617b      	str	r3, [r7, #20]
   return(result);
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e4      	bne.n	8007c88 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7f8 ffe7 	bl	8000c98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cca:	e03f      	b.n	8007d4c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00e      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x55a>
 8007cd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d008      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007cec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fe34 	bl	800895c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cf4:	e02d      	b.n	8007d52 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00e      	beq.n	8007d20 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d008      	beq.n	8007d20 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d01c      	beq.n	8007d50 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	4798      	blx	r3
    }
    return;
 8007d1e:	e017      	b.n	8007d50 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d012      	beq.n	8007d52 <HAL_UART_IRQHandler+0x5b6>
 8007d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00c      	beq.n	8007d52 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fde5 	bl	8008908 <UART_EndTransmit_IT>
    return;
 8007d3e:	e008      	b.n	8007d52 <HAL_UART_IRQHandler+0x5b6>
      return;
 8007d40:	bf00      	nop
 8007d42:	e006      	b.n	8007d52 <HAL_UART_IRQHandler+0x5b6>
    return;
 8007d44:	bf00      	nop
 8007d46:	e004      	b.n	8007d52 <HAL_UART_IRQHandler+0x5b6>
      return;
 8007d48:	bf00      	nop
 8007d4a:	e002      	b.n	8007d52 <HAL_UART_IRQHandler+0x5b6>
      return;
 8007d4c:	bf00      	nop
 8007d4e:	e000      	b.n	8007d52 <HAL_UART_IRQHandler+0x5b6>
    return;
 8007d50:	bf00      	nop
  }

}
 8007d52:	37e8      	adds	r7, #232	; 0xe8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	689a      	ldr	r2, [r3, #8]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	4b92      	ldr	r3, [pc, #584]	; (800801c <UART_SetConfig+0x274>)
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	6812      	ldr	r2, [r2, #0]
 8007dda:	6979      	ldr	r1, [r7, #20]
 8007ddc:	430b      	orrs	r3, r1
 8007dde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68da      	ldr	r2, [r3, #12]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a80      	ldr	r2, [pc, #512]	; (8008020 <UART_SetConfig+0x278>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d120      	bne.n	8007e66 <UART_SetConfig+0xbe>
 8007e24:	4b7f      	ldr	r3, [pc, #508]	; (8008024 <UART_SetConfig+0x27c>)
 8007e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e28:	f003 0303 	and.w	r3, r3, #3
 8007e2c:	2b03      	cmp	r3, #3
 8007e2e:	d817      	bhi.n	8007e60 <UART_SetConfig+0xb8>
 8007e30:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <UART_SetConfig+0x90>)
 8007e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e36:	bf00      	nop
 8007e38:	08007e49 	.word	0x08007e49
 8007e3c:	08007e55 	.word	0x08007e55
 8007e40:	08007e5b 	.word	0x08007e5b
 8007e44:	08007e4f 	.word	0x08007e4f
 8007e48:	2301      	movs	r3, #1
 8007e4a:	77fb      	strb	r3, [r7, #31]
 8007e4c:	e0b5      	b.n	8007fba <UART_SetConfig+0x212>
 8007e4e:	2302      	movs	r3, #2
 8007e50:	77fb      	strb	r3, [r7, #31]
 8007e52:	e0b2      	b.n	8007fba <UART_SetConfig+0x212>
 8007e54:	2304      	movs	r3, #4
 8007e56:	77fb      	strb	r3, [r7, #31]
 8007e58:	e0af      	b.n	8007fba <UART_SetConfig+0x212>
 8007e5a:	2308      	movs	r3, #8
 8007e5c:	77fb      	strb	r3, [r7, #31]
 8007e5e:	e0ac      	b.n	8007fba <UART_SetConfig+0x212>
 8007e60:	2310      	movs	r3, #16
 8007e62:	77fb      	strb	r3, [r7, #31]
 8007e64:	e0a9      	b.n	8007fba <UART_SetConfig+0x212>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a6f      	ldr	r2, [pc, #444]	; (8008028 <UART_SetConfig+0x280>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d124      	bne.n	8007eba <UART_SetConfig+0x112>
 8007e70:	4b6c      	ldr	r3, [pc, #432]	; (8008024 <UART_SetConfig+0x27c>)
 8007e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e7c:	d011      	beq.n	8007ea2 <UART_SetConfig+0xfa>
 8007e7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e82:	d817      	bhi.n	8007eb4 <UART_SetConfig+0x10c>
 8007e84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e88:	d011      	beq.n	8007eae <UART_SetConfig+0x106>
 8007e8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e8e:	d811      	bhi.n	8007eb4 <UART_SetConfig+0x10c>
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d003      	beq.n	8007e9c <UART_SetConfig+0xf4>
 8007e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e98:	d006      	beq.n	8007ea8 <UART_SetConfig+0x100>
 8007e9a:	e00b      	b.n	8007eb4 <UART_SetConfig+0x10c>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	77fb      	strb	r3, [r7, #31]
 8007ea0:	e08b      	b.n	8007fba <UART_SetConfig+0x212>
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	77fb      	strb	r3, [r7, #31]
 8007ea6:	e088      	b.n	8007fba <UART_SetConfig+0x212>
 8007ea8:	2304      	movs	r3, #4
 8007eaa:	77fb      	strb	r3, [r7, #31]
 8007eac:	e085      	b.n	8007fba <UART_SetConfig+0x212>
 8007eae:	2308      	movs	r3, #8
 8007eb0:	77fb      	strb	r3, [r7, #31]
 8007eb2:	e082      	b.n	8007fba <UART_SetConfig+0x212>
 8007eb4:	2310      	movs	r3, #16
 8007eb6:	77fb      	strb	r3, [r7, #31]
 8007eb8:	e07f      	b.n	8007fba <UART_SetConfig+0x212>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a5b      	ldr	r2, [pc, #364]	; (800802c <UART_SetConfig+0x284>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d124      	bne.n	8007f0e <UART_SetConfig+0x166>
 8007ec4:	4b57      	ldr	r3, [pc, #348]	; (8008024 <UART_SetConfig+0x27c>)
 8007ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007ecc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007ed0:	d011      	beq.n	8007ef6 <UART_SetConfig+0x14e>
 8007ed2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007ed6:	d817      	bhi.n	8007f08 <UART_SetConfig+0x160>
 8007ed8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007edc:	d011      	beq.n	8007f02 <UART_SetConfig+0x15a>
 8007ede:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ee2:	d811      	bhi.n	8007f08 <UART_SetConfig+0x160>
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <UART_SetConfig+0x148>
 8007ee8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007eec:	d006      	beq.n	8007efc <UART_SetConfig+0x154>
 8007eee:	e00b      	b.n	8007f08 <UART_SetConfig+0x160>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	77fb      	strb	r3, [r7, #31]
 8007ef4:	e061      	b.n	8007fba <UART_SetConfig+0x212>
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	77fb      	strb	r3, [r7, #31]
 8007efa:	e05e      	b.n	8007fba <UART_SetConfig+0x212>
 8007efc:	2304      	movs	r3, #4
 8007efe:	77fb      	strb	r3, [r7, #31]
 8007f00:	e05b      	b.n	8007fba <UART_SetConfig+0x212>
 8007f02:	2308      	movs	r3, #8
 8007f04:	77fb      	strb	r3, [r7, #31]
 8007f06:	e058      	b.n	8007fba <UART_SetConfig+0x212>
 8007f08:	2310      	movs	r3, #16
 8007f0a:	77fb      	strb	r3, [r7, #31]
 8007f0c:	e055      	b.n	8007fba <UART_SetConfig+0x212>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a47      	ldr	r2, [pc, #284]	; (8008030 <UART_SetConfig+0x288>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d124      	bne.n	8007f62 <UART_SetConfig+0x1ba>
 8007f18:	4b42      	ldr	r3, [pc, #264]	; (8008024 <UART_SetConfig+0x27c>)
 8007f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007f20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f24:	d011      	beq.n	8007f4a <UART_SetConfig+0x1a2>
 8007f26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f2a:	d817      	bhi.n	8007f5c <UART_SetConfig+0x1b4>
 8007f2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f30:	d011      	beq.n	8007f56 <UART_SetConfig+0x1ae>
 8007f32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f36:	d811      	bhi.n	8007f5c <UART_SetConfig+0x1b4>
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d003      	beq.n	8007f44 <UART_SetConfig+0x19c>
 8007f3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f40:	d006      	beq.n	8007f50 <UART_SetConfig+0x1a8>
 8007f42:	e00b      	b.n	8007f5c <UART_SetConfig+0x1b4>
 8007f44:	2300      	movs	r3, #0
 8007f46:	77fb      	strb	r3, [r7, #31]
 8007f48:	e037      	b.n	8007fba <UART_SetConfig+0x212>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	77fb      	strb	r3, [r7, #31]
 8007f4e:	e034      	b.n	8007fba <UART_SetConfig+0x212>
 8007f50:	2304      	movs	r3, #4
 8007f52:	77fb      	strb	r3, [r7, #31]
 8007f54:	e031      	b.n	8007fba <UART_SetConfig+0x212>
 8007f56:	2308      	movs	r3, #8
 8007f58:	77fb      	strb	r3, [r7, #31]
 8007f5a:	e02e      	b.n	8007fba <UART_SetConfig+0x212>
 8007f5c:	2310      	movs	r3, #16
 8007f5e:	77fb      	strb	r3, [r7, #31]
 8007f60:	e02b      	b.n	8007fba <UART_SetConfig+0x212>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a33      	ldr	r2, [pc, #204]	; (8008034 <UART_SetConfig+0x28c>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d124      	bne.n	8007fb6 <UART_SetConfig+0x20e>
 8007f6c:	4b2d      	ldr	r3, [pc, #180]	; (8008024 <UART_SetConfig+0x27c>)
 8007f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f70:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007f74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007f78:	d011      	beq.n	8007f9e <UART_SetConfig+0x1f6>
 8007f7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007f7e:	d817      	bhi.n	8007fb0 <UART_SetConfig+0x208>
 8007f80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f84:	d011      	beq.n	8007faa <UART_SetConfig+0x202>
 8007f86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f8a:	d811      	bhi.n	8007fb0 <UART_SetConfig+0x208>
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <UART_SetConfig+0x1f0>
 8007f90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f94:	d006      	beq.n	8007fa4 <UART_SetConfig+0x1fc>
 8007f96:	e00b      	b.n	8007fb0 <UART_SetConfig+0x208>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	77fb      	strb	r3, [r7, #31]
 8007f9c:	e00d      	b.n	8007fba <UART_SetConfig+0x212>
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	77fb      	strb	r3, [r7, #31]
 8007fa2:	e00a      	b.n	8007fba <UART_SetConfig+0x212>
 8007fa4:	2304      	movs	r3, #4
 8007fa6:	77fb      	strb	r3, [r7, #31]
 8007fa8:	e007      	b.n	8007fba <UART_SetConfig+0x212>
 8007faa:	2308      	movs	r3, #8
 8007fac:	77fb      	strb	r3, [r7, #31]
 8007fae:	e004      	b.n	8007fba <UART_SetConfig+0x212>
 8007fb0:	2310      	movs	r3, #16
 8007fb2:	77fb      	strb	r3, [r7, #31]
 8007fb4:	e001      	b.n	8007fba <UART_SetConfig+0x212>
 8007fb6:	2310      	movs	r3, #16
 8007fb8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	69db      	ldr	r3, [r3, #28]
 8007fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fc2:	d16c      	bne.n	800809e <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8007fc4:	7ffb      	ldrb	r3, [r7, #31]
 8007fc6:	2b08      	cmp	r3, #8
 8007fc8:	d838      	bhi.n	800803c <UART_SetConfig+0x294>
 8007fca:	a201      	add	r2, pc, #4	; (adr r2, 8007fd0 <UART_SetConfig+0x228>)
 8007fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd0:	08007ff5 	.word	0x08007ff5
 8007fd4:	08007ffd 	.word	0x08007ffd
 8007fd8:	08008005 	.word	0x08008005
 8007fdc:	0800803d 	.word	0x0800803d
 8007fe0:	0800800b 	.word	0x0800800b
 8007fe4:	0800803d 	.word	0x0800803d
 8007fe8:	0800803d 	.word	0x0800803d
 8007fec:	0800803d 	.word	0x0800803d
 8007ff0:	08008013 	.word	0x08008013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ff4:	f7fd fe8c 	bl	8005d10 <HAL_RCC_GetPCLK1Freq>
 8007ff8:	61b8      	str	r0, [r7, #24]
        break;
 8007ffa:	e024      	b.n	8008046 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ffc:	f7fd feaa 	bl	8005d54 <HAL_RCC_GetPCLK2Freq>
 8008000:	61b8      	str	r0, [r7, #24]
        break;
 8008002:	e020      	b.n	8008046 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008004:	4b0c      	ldr	r3, [pc, #48]	; (8008038 <UART_SetConfig+0x290>)
 8008006:	61bb      	str	r3, [r7, #24]
        break;
 8008008:	e01d      	b.n	8008046 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800800a:	f7fd fe0b 	bl	8005c24 <HAL_RCC_GetSysClockFreq>
 800800e:	61b8      	str	r0, [r7, #24]
        break;
 8008010:	e019      	b.n	8008046 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008016:	61bb      	str	r3, [r7, #24]
        break;
 8008018:	e015      	b.n	8008046 <UART_SetConfig+0x29e>
 800801a:	bf00      	nop
 800801c:	efff69f3 	.word	0xefff69f3
 8008020:	40013800 	.word	0x40013800
 8008024:	40021000 	.word	0x40021000
 8008028:	40004400 	.word	0x40004400
 800802c:	40004800 	.word	0x40004800
 8008030:	40004c00 	.word	0x40004c00
 8008034:	40005000 	.word	0x40005000
 8008038:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	77bb      	strb	r3, [r7, #30]
        break;
 8008044:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d075      	beq.n	8008138 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	005a      	lsls	r2, r3, #1
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	085b      	lsrs	r3, r3, #1
 8008056:	441a      	add	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008060:	b29b      	uxth	r3, r3
 8008062:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	2b0f      	cmp	r3, #15
 8008068:	d916      	bls.n	8008098 <UART_SetConfig+0x2f0>
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008070:	d212      	bcs.n	8008098 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	b29b      	uxth	r3, r3
 8008076:	f023 030f 	bic.w	r3, r3, #15
 800807a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	085b      	lsrs	r3, r3, #1
 8008080:	b29b      	uxth	r3, r3
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	b29a      	uxth	r2, r3
 8008088:	89fb      	ldrh	r3, [r7, #14]
 800808a:	4313      	orrs	r3, r2
 800808c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	89fa      	ldrh	r2, [r7, #14]
 8008094:	60da      	str	r2, [r3, #12]
 8008096:	e04f      	b.n	8008138 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	77bb      	strb	r3, [r7, #30]
 800809c:	e04c      	b.n	8008138 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800809e:	7ffb      	ldrb	r3, [r7, #31]
 80080a0:	2b08      	cmp	r3, #8
 80080a2:	d828      	bhi.n	80080f6 <UART_SetConfig+0x34e>
 80080a4:	a201      	add	r2, pc, #4	; (adr r2, 80080ac <UART_SetConfig+0x304>)
 80080a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080aa:	bf00      	nop
 80080ac:	080080d1 	.word	0x080080d1
 80080b0:	080080d9 	.word	0x080080d9
 80080b4:	080080e1 	.word	0x080080e1
 80080b8:	080080f7 	.word	0x080080f7
 80080bc:	080080e7 	.word	0x080080e7
 80080c0:	080080f7 	.word	0x080080f7
 80080c4:	080080f7 	.word	0x080080f7
 80080c8:	080080f7 	.word	0x080080f7
 80080cc:	080080ef 	.word	0x080080ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080d0:	f7fd fe1e 	bl	8005d10 <HAL_RCC_GetPCLK1Freq>
 80080d4:	61b8      	str	r0, [r7, #24]
        break;
 80080d6:	e013      	b.n	8008100 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080d8:	f7fd fe3c 	bl	8005d54 <HAL_RCC_GetPCLK2Freq>
 80080dc:	61b8      	str	r0, [r7, #24]
        break;
 80080de:	e00f      	b.n	8008100 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080e0:	4b1b      	ldr	r3, [pc, #108]	; (8008150 <UART_SetConfig+0x3a8>)
 80080e2:	61bb      	str	r3, [r7, #24]
        break;
 80080e4:	e00c      	b.n	8008100 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080e6:	f7fd fd9d 	bl	8005c24 <HAL_RCC_GetSysClockFreq>
 80080ea:	61b8      	str	r0, [r7, #24]
        break;
 80080ec:	e008      	b.n	8008100 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080f2:	61bb      	str	r3, [r7, #24]
        break;
 80080f4:	e004      	b.n	8008100 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80080f6:	2300      	movs	r3, #0
 80080f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	77bb      	strb	r3, [r7, #30]
        break;
 80080fe:	bf00      	nop
    }

    if (pclk != 0U)
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d018      	beq.n	8008138 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	085a      	lsrs	r2, r3, #1
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	441a      	add	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	fbb2 f3f3 	udiv	r3, r2, r3
 8008118:	b29b      	uxth	r3, r3
 800811a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	2b0f      	cmp	r3, #15
 8008120:	d908      	bls.n	8008134 <UART_SetConfig+0x38c>
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008128:	d204      	bcs.n	8008134 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	693a      	ldr	r2, [r7, #16]
 8008130:	60da      	str	r2, [r3, #12]
 8008132:	e001      	b.n	8008138 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008144:	7fbb      	ldrb	r3, [r7, #30]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3720      	adds	r7, #32
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	007a1200 	.word	0x007a1200

08008154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00a      	beq.n	800817e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	f003 0302 	and.w	r3, r3, #2
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00a      	beq.n	80081a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a4:	f003 0304 	and.w	r3, r3, #4
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00a      	beq.n	80081c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c6:	f003 0308 	and.w	r3, r3, #8
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00a      	beq.n	80081e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	430a      	orrs	r2, r1
 80081e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	f003 0310 	and.w	r3, r3, #16
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00a      	beq.n	8008206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	430a      	orrs	r2, r1
 8008204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	f003 0320 	and.w	r3, r3, #32
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00a      	beq.n	8008228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	430a      	orrs	r2, r1
 8008226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008230:	2b00      	cmp	r3, #0
 8008232:	d01a      	beq.n	800826a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	430a      	orrs	r2, r1
 8008248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008252:	d10a      	bne.n	800826a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	430a      	orrs	r2, r1
 8008268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00a      	beq.n	800828c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	430a      	orrs	r2, r1
 800828a:	605a      	str	r2, [r3, #4]
  }
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af02      	add	r7, sp, #8
 800829e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082a8:	f7fa f95e 	bl	8002568 <HAL_GetTick>
 80082ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0308 	and.w	r3, r3, #8
 80082b8:	2b08      	cmp	r3, #8
 80082ba:	d10e      	bne.n	80082da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f82d 	bl	800832a <UART_WaitOnFlagUntilTimeout>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e023      	b.n	8008322 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b04      	cmp	r3, #4
 80082e6:	d10e      	bne.n	8008306 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f817 	bl	800832a <UART_WaitOnFlagUntilTimeout>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e00d      	b.n	8008322 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2220      	movs	r2, #32
 800830a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2220      	movs	r2, #32
 8008310:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b09c      	sub	sp, #112	; 0x70
 800832e:	af00      	add	r7, sp, #0
 8008330:	60f8      	str	r0, [r7, #12]
 8008332:	60b9      	str	r1, [r7, #8]
 8008334:	603b      	str	r3, [r7, #0]
 8008336:	4613      	mov	r3, r2
 8008338:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800833a:	e0a5      	b.n	8008488 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800833c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800833e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008342:	f000 80a1 	beq.w	8008488 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008346:	f7fa f90f 	bl	8002568 <HAL_GetTick>
 800834a:	4602      	mov	r2, r0
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008352:	429a      	cmp	r2, r3
 8008354:	d302      	bcc.n	800835c <UART_WaitOnFlagUntilTimeout+0x32>
 8008356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008358:	2b00      	cmp	r3, #0
 800835a:	d13e      	bne.n	80083da <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008364:	e853 3f00 	ldrex	r3, [r3]
 8008368:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800836a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800836c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008370:	667b      	str	r3, [r7, #100]	; 0x64
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800837a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800837c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008380:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008382:	e841 2300 	strex	r3, r2, [r1]
 8008386:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1e6      	bne.n	800835c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	3308      	adds	r3, #8
 8008394:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008398:	e853 3f00 	ldrex	r3, [r3]
 800839c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800839e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a0:	f023 0301 	bic.w	r3, r3, #1
 80083a4:	663b      	str	r3, [r7, #96]	; 0x60
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3308      	adds	r3, #8
 80083ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80083b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083b6:	e841 2300 	strex	r3, r2, [r1]
 80083ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80083bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1e5      	bne.n	800838e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2220      	movs	r2, #32
 80083c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2220      	movs	r2, #32
 80083cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e067      	b.n	80084aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 0304 	and.w	r3, r3, #4
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d04f      	beq.n	8008488 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083f6:	d147      	bne.n	8008488 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008400:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840a:	e853 3f00 	ldrex	r3, [r3]
 800840e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008416:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	461a      	mov	r2, r3
 800841e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008420:	637b      	str	r3, [r7, #52]	; 0x34
 8008422:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008424:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008428:	e841 2300 	strex	r3, r2, [r1]
 800842c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800842e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1e6      	bne.n	8008402 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3308      	adds	r3, #8
 800843a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	e853 3f00 	ldrex	r3, [r3]
 8008442:	613b      	str	r3, [r7, #16]
   return(result);
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	f023 0301 	bic.w	r3, r3, #1
 800844a:	66bb      	str	r3, [r7, #104]	; 0x68
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	3308      	adds	r3, #8
 8008452:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008454:	623a      	str	r2, [r7, #32]
 8008456:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008458:	69f9      	ldr	r1, [r7, #28]
 800845a:	6a3a      	ldr	r2, [r7, #32]
 800845c:	e841 2300 	strex	r3, r2, [r1]
 8008460:	61bb      	str	r3, [r7, #24]
   return(result);
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e5      	bne.n	8008434 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2220      	movs	r2, #32
 800846c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2220      	movs	r2, #32
 8008472:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2220      	movs	r2, #32
 8008478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e010      	b.n	80084aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	69da      	ldr	r2, [r3, #28]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	4013      	ands	r3, r2
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	429a      	cmp	r2, r3
 8008496:	bf0c      	ite	eq
 8008498:	2301      	moveq	r3, #1
 800849a:	2300      	movne	r3, #0
 800849c:	b2db      	uxtb	r3, r3
 800849e:	461a      	mov	r2, r3
 80084a0:	79fb      	ldrb	r3, [r7, #7]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	f43f af4a 	beq.w	800833c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3770      	adds	r7, #112	; 0x70
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
	...

080084b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b096      	sub	sp, #88	; 0x58
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	4613      	mov	r3, r2
 80084c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	88fa      	ldrh	r2, [r7, #6]
 80084cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2222      	movs	r2, #34	; 0x22
 80084dc:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d02b      	beq.n	800853e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ea:	4a40      	ldr	r2, [pc, #256]	; (80085ec <UART_Start_Receive_DMA+0x138>)
 80084ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f2:	4a3f      	ldr	r2, [pc, #252]	; (80085f0 <UART_Start_Receive_DMA+0x13c>)
 80084f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084fa:	4a3e      	ldr	r2, [pc, #248]	; (80085f4 <UART_Start_Receive_DMA+0x140>)
 80084fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008502:	2200      	movs	r2, #0
 8008504:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3324      	adds	r3, #36	; 0x24
 8008510:	4619      	mov	r1, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008516:	461a      	mov	r2, r3
 8008518:	88fb      	ldrh	r3, [r7, #6]
 800851a:	f7fb fdf2 	bl	8004102 <HAL_DMA_Start_IT>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00c      	beq.n	800853e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2210      	movs	r2, #16
 8008528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2220      	movs	r2, #32
 8008538:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e051      	b.n	80085e2 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800854e:	e853 3f00 	ldrex	r3, [r3]
 8008552:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800855a:	657b      	str	r3, [r7, #84]	; 0x54
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	461a      	mov	r2, r3
 8008562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008564:	64bb      	str	r3, [r7, #72]	; 0x48
 8008566:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008568:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800856a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800856c:	e841 2300 	strex	r3, r2, [r1]
 8008570:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1e6      	bne.n	8008546 <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	3308      	adds	r3, #8
 800857e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008582:	e853 3f00 	ldrex	r3, [r3]
 8008586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	f043 0301 	orr.w	r3, r3, #1
 800858e:	653b      	str	r3, [r7, #80]	; 0x50
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3308      	adds	r3, #8
 8008596:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008598:	637a      	str	r2, [r7, #52]	; 0x34
 800859a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800859e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085a0:	e841 2300 	strex	r3, r2, [r1]
 80085a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1e5      	bne.n	8008578 <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3308      	adds	r3, #8
 80085b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	e853 3f00 	ldrex	r3, [r3]
 80085ba:	613b      	str	r3, [r7, #16]
   return(result);
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	3308      	adds	r3, #8
 80085ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085cc:	623a      	str	r2, [r7, #32]
 80085ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d0:	69f9      	ldr	r1, [r7, #28]
 80085d2:	6a3a      	ldr	r2, [r7, #32]
 80085d4:	e841 2300 	strex	r3, r2, [r1]
 80085d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1e5      	bne.n	80085ac <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3758      	adds	r7, #88	; 0x58
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	0800870b 	.word	0x0800870b
 80085f0:	08008829 	.word	0x08008829
 80085f4:	08008861 	.word	0x08008861

080085f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b089      	sub	sp, #36	; 0x24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	e853 3f00 	ldrex	r3, [r3]
 800860c:	60bb      	str	r3, [r7, #8]
   return(result);
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008614:	61fb      	str	r3, [r7, #28]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	61bb      	str	r3, [r7, #24]
 8008620:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008622:	6979      	ldr	r1, [r7, #20]
 8008624:	69ba      	ldr	r2, [r7, #24]
 8008626:	e841 2300 	strex	r3, r2, [r1]
 800862a:	613b      	str	r3, [r7, #16]
   return(result);
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1e6      	bne.n	8008600 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2220      	movs	r2, #32
 8008636:	679a      	str	r2, [r3, #120]	; 0x78
}
 8008638:	bf00      	nop
 800863a:	3724      	adds	r7, #36	; 0x24
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008644:	b480      	push	{r7}
 8008646:	b095      	sub	sp, #84	; 0x54
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008654:	e853 3f00 	ldrex	r3, [r3]
 8008658:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008660:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	461a      	mov	r2, r3
 8008668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800866a:	643b      	str	r3, [r7, #64]	; 0x40
 800866c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008670:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008672:	e841 2300 	strex	r3, r2, [r1]
 8008676:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1e6      	bne.n	800864c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	3308      	adds	r3, #8
 8008684:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	e853 3f00 	ldrex	r3, [r3]
 800868c:	61fb      	str	r3, [r7, #28]
   return(result);
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	f023 0301 	bic.w	r3, r3, #1
 8008694:	64bb      	str	r3, [r7, #72]	; 0x48
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	3308      	adds	r3, #8
 800869c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800869e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086a6:	e841 2300 	strex	r3, r2, [r1]
 80086aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1e5      	bne.n	800867e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d118      	bne.n	80086ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	e853 3f00 	ldrex	r3, [r3]
 80086c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f023 0310 	bic.w	r3, r3, #16
 80086ce:	647b      	str	r3, [r7, #68]	; 0x44
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	461a      	mov	r2, r3
 80086d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086d8:	61bb      	str	r3, [r7, #24]
 80086da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086dc:	6979      	ldr	r1, [r7, #20]
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	e841 2300 	strex	r3, r2, [r1]
 80086e4:	613b      	str	r3, [r7, #16]
   return(result);
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e6      	bne.n	80086ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2220      	movs	r2, #32
 80086f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80086fe:	bf00      	nop
 8008700:	3754      	adds	r7, #84	; 0x54
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b09c      	sub	sp, #112	; 0x70
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008716:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	2b20      	cmp	r3, #32
 800871e:	d070      	beq.n	8008802 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 8008720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008722:	2200      	movs	r2, #0
 8008724:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008730:	e853 3f00 	ldrex	r3, [r3]
 8008734:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800873c:	66bb      	str	r3, [r7, #104]	; 0x68
 800873e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	461a      	mov	r2, r3
 8008744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008746:	65bb      	str	r3, [r7, #88]	; 0x58
 8008748:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800874c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800874e:	e841 2300 	strex	r3, r2, [r1]
 8008752:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1e6      	bne.n	8008728 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800875a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3308      	adds	r3, #8
 8008760:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008764:	e853 3f00 	ldrex	r3, [r3]
 8008768:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800876a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800876c:	f023 0301 	bic.w	r3, r3, #1
 8008770:	667b      	str	r3, [r7, #100]	; 0x64
 8008772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3308      	adds	r3, #8
 8008778:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800877a:	647a      	str	r2, [r7, #68]	; 0x44
 800877c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008780:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e5      	bne.n	800875a <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800878e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3308      	adds	r3, #8
 8008794:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	623b      	str	r3, [r7, #32]
   return(result);
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087a4:	663b      	str	r3, [r7, #96]	; 0x60
 80087a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3308      	adds	r3, #8
 80087ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087ae:	633a      	str	r2, [r7, #48]	; 0x30
 80087b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087b6:	e841 2300 	strex	r3, r2, [r1]
 80087ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1e5      	bne.n	800878e <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c4:	2220      	movs	r2, #32
 80087c6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d118      	bne.n	8008802 <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f023 0310 	bic.w	r3, r3, #16
 80087e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	461a      	mov	r2, r3
 80087ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087ee:	61fb      	str	r3, [r7, #28]
 80087f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f2:	69b9      	ldr	r1, [r7, #24]
 80087f4:	69fa      	ldr	r2, [r7, #28]
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	617b      	str	r3, [r7, #20]
   return(result);
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1e6      	bne.n	80087d0 <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008806:	2b01      	cmp	r3, #1
 8008808:	d107      	bne.n	800881a <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800880a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800880c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008810:	4619      	mov	r1, r3
 8008812:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008814:	f7f8 fa40 	bl	8000c98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008818:	e002      	b.n	8008820 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 800881a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800881c:	f7ff faa6 	bl	8007d6c <HAL_UART_RxCpltCallback>
}
 8008820:	bf00      	nop
 8008822:	3770      	adds	r7, #112	; 0x70
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008834:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800883a:	2b01      	cmp	r3, #1
 800883c:	d109      	bne.n	8008852 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008844:	085b      	lsrs	r3, r3, #1
 8008846:	b29b      	uxth	r3, r3
 8008848:	4619      	mov	r1, r3
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f7f8 fa24 	bl	8000c98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008850:	e002      	b.n	8008858 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7ff fa94 	bl	8007d80 <HAL_UART_RxHalfCpltCallback>
}
 8008858:	bf00      	nop
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008872:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008878:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008884:	2b80      	cmp	r3, #128	; 0x80
 8008886:	d109      	bne.n	800889c <UART_DMAError+0x3c>
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	2b21      	cmp	r3, #33	; 0x21
 800888c:	d106      	bne.n	800889c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2200      	movs	r2, #0
 8008892:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008896:	6978      	ldr	r0, [r7, #20]
 8008898:	f7ff feae 	bl	80085f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a6:	2b40      	cmp	r3, #64	; 0x40
 80088a8:	d109      	bne.n	80088be <UART_DMAError+0x5e>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2b22      	cmp	r3, #34	; 0x22
 80088ae:	d106      	bne.n	80088be <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80088b8:	6978      	ldr	r0, [r7, #20]
 80088ba:	f7ff fec3 	bl	8008644 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088c4:	f043 0210 	orr.w	r2, r3, #16
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088ce:	6978      	ldr	r0, [r7, #20]
 80088d0:	f7ff fa60 	bl	8007d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088d4:	bf00      	nop
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f7ff fa4a 	bl	8007d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008900:	bf00      	nop
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b088      	sub	sp, #32
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	e853 3f00 	ldrex	r3, [r3]
 800891c:	60bb      	str	r3, [r7, #8]
   return(result);
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008924:	61fb      	str	r3, [r7, #28]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	61bb      	str	r3, [r7, #24]
 8008930:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008932:	6979      	ldr	r1, [r7, #20]
 8008934:	69ba      	ldr	r2, [r7, #24]
 8008936:	e841 2300 	strex	r3, r2, [r1]
 800893a:	613b      	str	r3, [r7, #16]
   return(result);
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1e6      	bne.n	8008910 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2220      	movs	r2, #32
 8008946:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7ff fa02 	bl	8007d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008954:	bf00      	nop
 8008956:	3720      	adds	r7, #32
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b08c      	sub	sp, #48	; 0x30
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	4613      	mov	r3, r2
 800897c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008982:	2b20      	cmp	r3, #32
 8008984:	d14a      	bne.n	8008a1c <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 800898c:	88fb      	ldrh	r3, [r7, #6]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d101      	bne.n	8008996 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e043      	b.n	8008a1e <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800899c:	2b01      	cmp	r3, #1
 800899e:	d101      	bne.n	80089a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 80089a0:	2302      	movs	r3, #2
 80089a2:	e03c      	b.n	8008a1e <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2201      	movs	r2, #1
 80089b0:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80089b2:	88fb      	ldrh	r3, [r7, #6]
 80089b4:	461a      	mov	r2, r3
 80089b6:	68b9      	ldr	r1, [r7, #8]
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f7ff fd7b 	bl	80084b4 <UART_Start_Receive_DMA>
 80089be:	4603      	mov	r3, r0
 80089c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80089c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d124      	bne.n	8008a16 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d11d      	bne.n	8008a10 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2210      	movs	r2, #16
 80089da:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	e853 3f00 	ldrex	r3, [r3]
 80089e8:	617b      	str	r3, [r7, #20]
   return(result);
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	f043 0310 	orr.w	r3, r3, #16
 80089f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	461a      	mov	r2, r3
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	627b      	str	r3, [r7, #36]	; 0x24
 80089fc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fe:	6a39      	ldr	r1, [r7, #32]
 8008a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a02:	e841 2300 	strex	r3, r2, [r1]
 8008a06:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1e6      	bne.n	80089dc <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8008a0e:	e002      	b.n	8008a16 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008a16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a1a:	e000      	b.n	8008a1e <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8008a1c:	2302      	movs	r3, #2
  }
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3730      	adds	r7, #48	; 0x30
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <atoi>:
 8008a26:	220a      	movs	r2, #10
 8008a28:	2100      	movs	r1, #0
 8008a2a:	f000 bd81 	b.w	8009530 <strtol>
	...

08008a30 <__errno>:
 8008a30:	4b01      	ldr	r3, [pc, #4]	; (8008a38 <__errno+0x8>)
 8008a32:	6818      	ldr	r0, [r3, #0]
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	20000014 	.word	0x20000014

08008a3c <__libc_init_array>:
 8008a3c:	b570      	push	{r4, r5, r6, lr}
 8008a3e:	4d0d      	ldr	r5, [pc, #52]	; (8008a74 <__libc_init_array+0x38>)
 8008a40:	4c0d      	ldr	r4, [pc, #52]	; (8008a78 <__libc_init_array+0x3c>)
 8008a42:	1b64      	subs	r4, r4, r5
 8008a44:	10a4      	asrs	r4, r4, #2
 8008a46:	2600      	movs	r6, #0
 8008a48:	42a6      	cmp	r6, r4
 8008a4a:	d109      	bne.n	8008a60 <__libc_init_array+0x24>
 8008a4c:	4d0b      	ldr	r5, [pc, #44]	; (8008a7c <__libc_init_array+0x40>)
 8008a4e:	4c0c      	ldr	r4, [pc, #48]	; (8008a80 <__libc_init_array+0x44>)
 8008a50:	f003 fee0 	bl	800c814 <_init>
 8008a54:	1b64      	subs	r4, r4, r5
 8008a56:	10a4      	asrs	r4, r4, #2
 8008a58:	2600      	movs	r6, #0
 8008a5a:	42a6      	cmp	r6, r4
 8008a5c:	d105      	bne.n	8008a6a <__libc_init_array+0x2e>
 8008a5e:	bd70      	pop	{r4, r5, r6, pc}
 8008a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a64:	4798      	blx	r3
 8008a66:	3601      	adds	r6, #1
 8008a68:	e7ee      	b.n	8008a48 <__libc_init_array+0xc>
 8008a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a6e:	4798      	blx	r3
 8008a70:	3601      	adds	r6, #1
 8008a72:	e7f2      	b.n	8008a5a <__libc_init_array+0x1e>
 8008a74:	0800cca0 	.word	0x0800cca0
 8008a78:	0800cca0 	.word	0x0800cca0
 8008a7c:	0800cca0 	.word	0x0800cca0
 8008a80:	0800cca4 	.word	0x0800cca4

08008a84 <memcpy>:
 8008a84:	440a      	add	r2, r1
 8008a86:	4291      	cmp	r1, r2
 8008a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a8c:	d100      	bne.n	8008a90 <memcpy+0xc>
 8008a8e:	4770      	bx	lr
 8008a90:	b510      	push	{r4, lr}
 8008a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a9a:	4291      	cmp	r1, r2
 8008a9c:	d1f9      	bne.n	8008a92 <memcpy+0xe>
 8008a9e:	bd10      	pop	{r4, pc}

08008aa0 <memset>:
 8008aa0:	4402      	add	r2, r0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d100      	bne.n	8008aaa <memset+0xa>
 8008aa8:	4770      	bx	lr
 8008aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8008aae:	e7f9      	b.n	8008aa4 <memset+0x4>

08008ab0 <__cvt>:
 8008ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab4:	ec55 4b10 	vmov	r4, r5, d0
 8008ab8:	2d00      	cmp	r5, #0
 8008aba:	460e      	mov	r6, r1
 8008abc:	4619      	mov	r1, r3
 8008abe:	462b      	mov	r3, r5
 8008ac0:	bfbb      	ittet	lt
 8008ac2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008ac6:	461d      	movlt	r5, r3
 8008ac8:	2300      	movge	r3, #0
 8008aca:	232d      	movlt	r3, #45	; 0x2d
 8008acc:	700b      	strb	r3, [r1, #0]
 8008ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ad0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ad4:	4691      	mov	r9, r2
 8008ad6:	f023 0820 	bic.w	r8, r3, #32
 8008ada:	bfbc      	itt	lt
 8008adc:	4622      	movlt	r2, r4
 8008ade:	4614      	movlt	r4, r2
 8008ae0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ae4:	d005      	beq.n	8008af2 <__cvt+0x42>
 8008ae6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008aea:	d100      	bne.n	8008aee <__cvt+0x3e>
 8008aec:	3601      	adds	r6, #1
 8008aee:	2102      	movs	r1, #2
 8008af0:	e000      	b.n	8008af4 <__cvt+0x44>
 8008af2:	2103      	movs	r1, #3
 8008af4:	ab03      	add	r3, sp, #12
 8008af6:	9301      	str	r3, [sp, #4]
 8008af8:	ab02      	add	r3, sp, #8
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	ec45 4b10 	vmov	d0, r4, r5
 8008b00:	4653      	mov	r3, sl
 8008b02:	4632      	mov	r2, r6
 8008b04:	f000 fdac 	bl	8009660 <_dtoa_r>
 8008b08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008b0c:	4607      	mov	r7, r0
 8008b0e:	d102      	bne.n	8008b16 <__cvt+0x66>
 8008b10:	f019 0f01 	tst.w	r9, #1
 8008b14:	d022      	beq.n	8008b5c <__cvt+0xac>
 8008b16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b1a:	eb07 0906 	add.w	r9, r7, r6
 8008b1e:	d110      	bne.n	8008b42 <__cvt+0x92>
 8008b20:	783b      	ldrb	r3, [r7, #0]
 8008b22:	2b30      	cmp	r3, #48	; 0x30
 8008b24:	d10a      	bne.n	8008b3c <__cvt+0x8c>
 8008b26:	2200      	movs	r2, #0
 8008b28:	2300      	movs	r3, #0
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	f7f7 ffd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b32:	b918      	cbnz	r0, 8008b3c <__cvt+0x8c>
 8008b34:	f1c6 0601 	rsb	r6, r6, #1
 8008b38:	f8ca 6000 	str.w	r6, [sl]
 8008b3c:	f8da 3000 	ldr.w	r3, [sl]
 8008b40:	4499      	add	r9, r3
 8008b42:	2200      	movs	r2, #0
 8008b44:	2300      	movs	r3, #0
 8008b46:	4620      	mov	r0, r4
 8008b48:	4629      	mov	r1, r5
 8008b4a:	f7f7 ffc5 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b4e:	b108      	cbz	r0, 8008b54 <__cvt+0xa4>
 8008b50:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b54:	2230      	movs	r2, #48	; 0x30
 8008b56:	9b03      	ldr	r3, [sp, #12]
 8008b58:	454b      	cmp	r3, r9
 8008b5a:	d307      	bcc.n	8008b6c <__cvt+0xbc>
 8008b5c:	9b03      	ldr	r3, [sp, #12]
 8008b5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b60:	1bdb      	subs	r3, r3, r7
 8008b62:	4638      	mov	r0, r7
 8008b64:	6013      	str	r3, [r2, #0]
 8008b66:	b004      	add	sp, #16
 8008b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6c:	1c59      	adds	r1, r3, #1
 8008b6e:	9103      	str	r1, [sp, #12]
 8008b70:	701a      	strb	r2, [r3, #0]
 8008b72:	e7f0      	b.n	8008b56 <__cvt+0xa6>

08008b74 <__exponent>:
 8008b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b76:	4603      	mov	r3, r0
 8008b78:	2900      	cmp	r1, #0
 8008b7a:	bfb8      	it	lt
 8008b7c:	4249      	neglt	r1, r1
 8008b7e:	f803 2b02 	strb.w	r2, [r3], #2
 8008b82:	bfb4      	ite	lt
 8008b84:	222d      	movlt	r2, #45	; 0x2d
 8008b86:	222b      	movge	r2, #43	; 0x2b
 8008b88:	2909      	cmp	r1, #9
 8008b8a:	7042      	strb	r2, [r0, #1]
 8008b8c:	dd2a      	ble.n	8008be4 <__exponent+0x70>
 8008b8e:	f10d 0407 	add.w	r4, sp, #7
 8008b92:	46a4      	mov	ip, r4
 8008b94:	270a      	movs	r7, #10
 8008b96:	46a6      	mov	lr, r4
 8008b98:	460a      	mov	r2, r1
 8008b9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8008b9e:	fb07 1516 	mls	r5, r7, r6, r1
 8008ba2:	3530      	adds	r5, #48	; 0x30
 8008ba4:	2a63      	cmp	r2, #99	; 0x63
 8008ba6:	f104 34ff 	add.w	r4, r4, #4294967295
 8008baa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008bae:	4631      	mov	r1, r6
 8008bb0:	dcf1      	bgt.n	8008b96 <__exponent+0x22>
 8008bb2:	3130      	adds	r1, #48	; 0x30
 8008bb4:	f1ae 0502 	sub.w	r5, lr, #2
 8008bb8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008bbc:	1c44      	adds	r4, r0, #1
 8008bbe:	4629      	mov	r1, r5
 8008bc0:	4561      	cmp	r1, ip
 8008bc2:	d30a      	bcc.n	8008bda <__exponent+0x66>
 8008bc4:	f10d 0209 	add.w	r2, sp, #9
 8008bc8:	eba2 020e 	sub.w	r2, r2, lr
 8008bcc:	4565      	cmp	r5, ip
 8008bce:	bf88      	it	hi
 8008bd0:	2200      	movhi	r2, #0
 8008bd2:	4413      	add	r3, r2
 8008bd4:	1a18      	subs	r0, r3, r0
 8008bd6:	b003      	add	sp, #12
 8008bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bde:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008be2:	e7ed      	b.n	8008bc0 <__exponent+0x4c>
 8008be4:	2330      	movs	r3, #48	; 0x30
 8008be6:	3130      	adds	r1, #48	; 0x30
 8008be8:	7083      	strb	r3, [r0, #2]
 8008bea:	70c1      	strb	r1, [r0, #3]
 8008bec:	1d03      	adds	r3, r0, #4
 8008bee:	e7f1      	b.n	8008bd4 <__exponent+0x60>

08008bf0 <_printf_float>:
 8008bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf4:	ed2d 8b02 	vpush	{d8}
 8008bf8:	b08d      	sub	sp, #52	; 0x34
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c00:	4616      	mov	r6, r2
 8008c02:	461f      	mov	r7, r3
 8008c04:	4605      	mov	r5, r0
 8008c06:	f001 fb19 	bl	800a23c <_localeconv_r>
 8008c0a:	f8d0 a000 	ldr.w	sl, [r0]
 8008c0e:	4650      	mov	r0, sl
 8008c10:	f7f7 fae6 	bl	80001e0 <strlen>
 8008c14:	2300      	movs	r3, #0
 8008c16:	930a      	str	r3, [sp, #40]	; 0x28
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	9305      	str	r3, [sp, #20]
 8008c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c20:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008c24:	3307      	adds	r3, #7
 8008c26:	f023 0307 	bic.w	r3, r3, #7
 8008c2a:	f103 0208 	add.w	r2, r3, #8
 8008c2e:	f8c8 2000 	str.w	r2, [r8]
 8008c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c36:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008c3a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008c3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c42:	9307      	str	r3, [sp, #28]
 8008c44:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c48:	ee08 0a10 	vmov	s16, r0
 8008c4c:	4b9f      	ldr	r3, [pc, #636]	; (8008ecc <_printf_float+0x2dc>)
 8008c4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c52:	f04f 32ff 	mov.w	r2, #4294967295
 8008c56:	f7f7 ff71 	bl	8000b3c <__aeabi_dcmpun>
 8008c5a:	bb88      	cbnz	r0, 8008cc0 <_printf_float+0xd0>
 8008c5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c60:	4b9a      	ldr	r3, [pc, #616]	; (8008ecc <_printf_float+0x2dc>)
 8008c62:	f04f 32ff 	mov.w	r2, #4294967295
 8008c66:	f7f7 ff4b 	bl	8000b00 <__aeabi_dcmple>
 8008c6a:	bb48      	cbnz	r0, 8008cc0 <_printf_float+0xd0>
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	2300      	movs	r3, #0
 8008c70:	4640      	mov	r0, r8
 8008c72:	4649      	mov	r1, r9
 8008c74:	f7f7 ff3a 	bl	8000aec <__aeabi_dcmplt>
 8008c78:	b110      	cbz	r0, 8008c80 <_printf_float+0x90>
 8008c7a:	232d      	movs	r3, #45	; 0x2d
 8008c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c80:	4b93      	ldr	r3, [pc, #588]	; (8008ed0 <_printf_float+0x2e0>)
 8008c82:	4894      	ldr	r0, [pc, #592]	; (8008ed4 <_printf_float+0x2e4>)
 8008c84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008c88:	bf94      	ite	ls
 8008c8a:	4698      	movls	r8, r3
 8008c8c:	4680      	movhi	r8, r0
 8008c8e:	2303      	movs	r3, #3
 8008c90:	6123      	str	r3, [r4, #16]
 8008c92:	9b05      	ldr	r3, [sp, #20]
 8008c94:	f023 0204 	bic.w	r2, r3, #4
 8008c98:	6022      	str	r2, [r4, #0]
 8008c9a:	f04f 0900 	mov.w	r9, #0
 8008c9e:	9700      	str	r7, [sp, #0]
 8008ca0:	4633      	mov	r3, r6
 8008ca2:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f000 f9d8 	bl	800905c <_printf_common>
 8008cac:	3001      	adds	r0, #1
 8008cae:	f040 8090 	bne.w	8008dd2 <_printf_float+0x1e2>
 8008cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb6:	b00d      	add	sp, #52	; 0x34
 8008cb8:	ecbd 8b02 	vpop	{d8}
 8008cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc0:	4642      	mov	r2, r8
 8008cc2:	464b      	mov	r3, r9
 8008cc4:	4640      	mov	r0, r8
 8008cc6:	4649      	mov	r1, r9
 8008cc8:	f7f7 ff38 	bl	8000b3c <__aeabi_dcmpun>
 8008ccc:	b140      	cbz	r0, 8008ce0 <_printf_float+0xf0>
 8008cce:	464b      	mov	r3, r9
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	bfbc      	itt	lt
 8008cd4:	232d      	movlt	r3, #45	; 0x2d
 8008cd6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008cda:	487f      	ldr	r0, [pc, #508]	; (8008ed8 <_printf_float+0x2e8>)
 8008cdc:	4b7f      	ldr	r3, [pc, #508]	; (8008edc <_printf_float+0x2ec>)
 8008cde:	e7d1      	b.n	8008c84 <_printf_float+0x94>
 8008ce0:	6863      	ldr	r3, [r4, #4]
 8008ce2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008ce6:	9206      	str	r2, [sp, #24]
 8008ce8:	1c5a      	adds	r2, r3, #1
 8008cea:	d13f      	bne.n	8008d6c <_printf_float+0x17c>
 8008cec:	2306      	movs	r3, #6
 8008cee:	6063      	str	r3, [r4, #4]
 8008cf0:	9b05      	ldr	r3, [sp, #20]
 8008cf2:	6861      	ldr	r1, [r4, #4]
 8008cf4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	9303      	str	r3, [sp, #12]
 8008cfc:	ab0a      	add	r3, sp, #40	; 0x28
 8008cfe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008d02:	ab09      	add	r3, sp, #36	; 0x24
 8008d04:	ec49 8b10 	vmov	d0, r8, r9
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	6022      	str	r2, [r4, #0]
 8008d0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d10:	4628      	mov	r0, r5
 8008d12:	f7ff fecd 	bl	8008ab0 <__cvt>
 8008d16:	9b06      	ldr	r3, [sp, #24]
 8008d18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d1a:	2b47      	cmp	r3, #71	; 0x47
 8008d1c:	4680      	mov	r8, r0
 8008d1e:	d108      	bne.n	8008d32 <_printf_float+0x142>
 8008d20:	1cc8      	adds	r0, r1, #3
 8008d22:	db02      	blt.n	8008d2a <_printf_float+0x13a>
 8008d24:	6863      	ldr	r3, [r4, #4]
 8008d26:	4299      	cmp	r1, r3
 8008d28:	dd41      	ble.n	8008dae <_printf_float+0x1be>
 8008d2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8008d2e:	fa5f fb8b 	uxtb.w	fp, fp
 8008d32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d36:	d820      	bhi.n	8008d7a <_printf_float+0x18a>
 8008d38:	3901      	subs	r1, #1
 8008d3a:	465a      	mov	r2, fp
 8008d3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d40:	9109      	str	r1, [sp, #36]	; 0x24
 8008d42:	f7ff ff17 	bl	8008b74 <__exponent>
 8008d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d48:	1813      	adds	r3, r2, r0
 8008d4a:	2a01      	cmp	r2, #1
 8008d4c:	4681      	mov	r9, r0
 8008d4e:	6123      	str	r3, [r4, #16]
 8008d50:	dc02      	bgt.n	8008d58 <_printf_float+0x168>
 8008d52:	6822      	ldr	r2, [r4, #0]
 8008d54:	07d2      	lsls	r2, r2, #31
 8008d56:	d501      	bpl.n	8008d5c <_printf_float+0x16c>
 8008d58:	3301      	adds	r3, #1
 8008d5a:	6123      	str	r3, [r4, #16]
 8008d5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d09c      	beq.n	8008c9e <_printf_float+0xae>
 8008d64:	232d      	movs	r3, #45	; 0x2d
 8008d66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d6a:	e798      	b.n	8008c9e <_printf_float+0xae>
 8008d6c:	9a06      	ldr	r2, [sp, #24]
 8008d6e:	2a47      	cmp	r2, #71	; 0x47
 8008d70:	d1be      	bne.n	8008cf0 <_printf_float+0x100>
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1bc      	bne.n	8008cf0 <_printf_float+0x100>
 8008d76:	2301      	movs	r3, #1
 8008d78:	e7b9      	b.n	8008cee <_printf_float+0xfe>
 8008d7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008d7e:	d118      	bne.n	8008db2 <_printf_float+0x1c2>
 8008d80:	2900      	cmp	r1, #0
 8008d82:	6863      	ldr	r3, [r4, #4]
 8008d84:	dd0b      	ble.n	8008d9e <_printf_float+0x1ae>
 8008d86:	6121      	str	r1, [r4, #16]
 8008d88:	b913      	cbnz	r3, 8008d90 <_printf_float+0x1a0>
 8008d8a:	6822      	ldr	r2, [r4, #0]
 8008d8c:	07d0      	lsls	r0, r2, #31
 8008d8e:	d502      	bpl.n	8008d96 <_printf_float+0x1a6>
 8008d90:	3301      	adds	r3, #1
 8008d92:	440b      	add	r3, r1
 8008d94:	6123      	str	r3, [r4, #16]
 8008d96:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d98:	f04f 0900 	mov.w	r9, #0
 8008d9c:	e7de      	b.n	8008d5c <_printf_float+0x16c>
 8008d9e:	b913      	cbnz	r3, 8008da6 <_printf_float+0x1b6>
 8008da0:	6822      	ldr	r2, [r4, #0]
 8008da2:	07d2      	lsls	r2, r2, #31
 8008da4:	d501      	bpl.n	8008daa <_printf_float+0x1ba>
 8008da6:	3302      	adds	r3, #2
 8008da8:	e7f4      	b.n	8008d94 <_printf_float+0x1a4>
 8008daa:	2301      	movs	r3, #1
 8008dac:	e7f2      	b.n	8008d94 <_printf_float+0x1a4>
 8008dae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008db4:	4299      	cmp	r1, r3
 8008db6:	db05      	blt.n	8008dc4 <_printf_float+0x1d4>
 8008db8:	6823      	ldr	r3, [r4, #0]
 8008dba:	6121      	str	r1, [r4, #16]
 8008dbc:	07d8      	lsls	r0, r3, #31
 8008dbe:	d5ea      	bpl.n	8008d96 <_printf_float+0x1a6>
 8008dc0:	1c4b      	adds	r3, r1, #1
 8008dc2:	e7e7      	b.n	8008d94 <_printf_float+0x1a4>
 8008dc4:	2900      	cmp	r1, #0
 8008dc6:	bfd4      	ite	le
 8008dc8:	f1c1 0202 	rsble	r2, r1, #2
 8008dcc:	2201      	movgt	r2, #1
 8008dce:	4413      	add	r3, r2
 8008dd0:	e7e0      	b.n	8008d94 <_printf_float+0x1a4>
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	055a      	lsls	r2, r3, #21
 8008dd6:	d407      	bmi.n	8008de8 <_printf_float+0x1f8>
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	4642      	mov	r2, r8
 8008ddc:	4631      	mov	r1, r6
 8008dde:	4628      	mov	r0, r5
 8008de0:	47b8      	blx	r7
 8008de2:	3001      	adds	r0, #1
 8008de4:	d12c      	bne.n	8008e40 <_printf_float+0x250>
 8008de6:	e764      	b.n	8008cb2 <_printf_float+0xc2>
 8008de8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008dec:	f240 80e0 	bls.w	8008fb0 <_printf_float+0x3c0>
 8008df0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008df4:	2200      	movs	r2, #0
 8008df6:	2300      	movs	r3, #0
 8008df8:	f7f7 fe6e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d034      	beq.n	8008e6a <_printf_float+0x27a>
 8008e00:	4a37      	ldr	r2, [pc, #220]	; (8008ee0 <_printf_float+0x2f0>)
 8008e02:	2301      	movs	r3, #1
 8008e04:	4631      	mov	r1, r6
 8008e06:	4628      	mov	r0, r5
 8008e08:	47b8      	blx	r7
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	f43f af51 	beq.w	8008cb2 <_printf_float+0xc2>
 8008e10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e14:	429a      	cmp	r2, r3
 8008e16:	db02      	blt.n	8008e1e <_printf_float+0x22e>
 8008e18:	6823      	ldr	r3, [r4, #0]
 8008e1a:	07d8      	lsls	r0, r3, #31
 8008e1c:	d510      	bpl.n	8008e40 <_printf_float+0x250>
 8008e1e:	ee18 3a10 	vmov	r3, s16
 8008e22:	4652      	mov	r2, sl
 8008e24:	4631      	mov	r1, r6
 8008e26:	4628      	mov	r0, r5
 8008e28:	47b8      	blx	r7
 8008e2a:	3001      	adds	r0, #1
 8008e2c:	f43f af41 	beq.w	8008cb2 <_printf_float+0xc2>
 8008e30:	f04f 0800 	mov.w	r8, #0
 8008e34:	f104 091a 	add.w	r9, r4, #26
 8008e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	4543      	cmp	r3, r8
 8008e3e:	dc09      	bgt.n	8008e54 <_printf_float+0x264>
 8008e40:	6823      	ldr	r3, [r4, #0]
 8008e42:	079b      	lsls	r3, r3, #30
 8008e44:	f100 8105 	bmi.w	8009052 <_printf_float+0x462>
 8008e48:	68e0      	ldr	r0, [r4, #12]
 8008e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e4c:	4298      	cmp	r0, r3
 8008e4e:	bfb8      	it	lt
 8008e50:	4618      	movlt	r0, r3
 8008e52:	e730      	b.n	8008cb6 <_printf_float+0xc6>
 8008e54:	2301      	movs	r3, #1
 8008e56:	464a      	mov	r2, r9
 8008e58:	4631      	mov	r1, r6
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	47b8      	blx	r7
 8008e5e:	3001      	adds	r0, #1
 8008e60:	f43f af27 	beq.w	8008cb2 <_printf_float+0xc2>
 8008e64:	f108 0801 	add.w	r8, r8, #1
 8008e68:	e7e6      	b.n	8008e38 <_printf_float+0x248>
 8008e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	dc39      	bgt.n	8008ee4 <_printf_float+0x2f4>
 8008e70:	4a1b      	ldr	r2, [pc, #108]	; (8008ee0 <_printf_float+0x2f0>)
 8008e72:	2301      	movs	r3, #1
 8008e74:	4631      	mov	r1, r6
 8008e76:	4628      	mov	r0, r5
 8008e78:	47b8      	blx	r7
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	f43f af19 	beq.w	8008cb2 <_printf_float+0xc2>
 8008e80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e84:	4313      	orrs	r3, r2
 8008e86:	d102      	bne.n	8008e8e <_printf_float+0x29e>
 8008e88:	6823      	ldr	r3, [r4, #0]
 8008e8a:	07d9      	lsls	r1, r3, #31
 8008e8c:	d5d8      	bpl.n	8008e40 <_printf_float+0x250>
 8008e8e:	ee18 3a10 	vmov	r3, s16
 8008e92:	4652      	mov	r2, sl
 8008e94:	4631      	mov	r1, r6
 8008e96:	4628      	mov	r0, r5
 8008e98:	47b8      	blx	r7
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	f43f af09 	beq.w	8008cb2 <_printf_float+0xc2>
 8008ea0:	f04f 0900 	mov.w	r9, #0
 8008ea4:	f104 0a1a 	add.w	sl, r4, #26
 8008ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eaa:	425b      	negs	r3, r3
 8008eac:	454b      	cmp	r3, r9
 8008eae:	dc01      	bgt.n	8008eb4 <_printf_float+0x2c4>
 8008eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eb2:	e792      	b.n	8008dda <_printf_float+0x1ea>
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	4652      	mov	r2, sl
 8008eb8:	4631      	mov	r1, r6
 8008eba:	4628      	mov	r0, r5
 8008ebc:	47b8      	blx	r7
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	f43f aef7 	beq.w	8008cb2 <_printf_float+0xc2>
 8008ec4:	f109 0901 	add.w	r9, r9, #1
 8008ec8:	e7ee      	b.n	8008ea8 <_printf_float+0x2b8>
 8008eca:	bf00      	nop
 8008ecc:	7fefffff 	.word	0x7fefffff
 8008ed0:	0800c890 	.word	0x0800c890
 8008ed4:	0800c894 	.word	0x0800c894
 8008ed8:	0800c89c 	.word	0x0800c89c
 8008edc:	0800c898 	.word	0x0800c898
 8008ee0:	0800c8a0 	.word	0x0800c8a0
 8008ee4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ee6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	bfa8      	it	ge
 8008eec:	461a      	movge	r2, r3
 8008eee:	2a00      	cmp	r2, #0
 8008ef0:	4691      	mov	r9, r2
 8008ef2:	dc37      	bgt.n	8008f64 <_printf_float+0x374>
 8008ef4:	f04f 0b00 	mov.w	fp, #0
 8008ef8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008efc:	f104 021a 	add.w	r2, r4, #26
 8008f00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f02:	9305      	str	r3, [sp, #20]
 8008f04:	eba3 0309 	sub.w	r3, r3, r9
 8008f08:	455b      	cmp	r3, fp
 8008f0a:	dc33      	bgt.n	8008f74 <_printf_float+0x384>
 8008f0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f10:	429a      	cmp	r2, r3
 8008f12:	db3b      	blt.n	8008f8c <_printf_float+0x39c>
 8008f14:	6823      	ldr	r3, [r4, #0]
 8008f16:	07da      	lsls	r2, r3, #31
 8008f18:	d438      	bmi.n	8008f8c <_printf_float+0x39c>
 8008f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f1c:	9a05      	ldr	r2, [sp, #20]
 8008f1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f20:	1a9a      	subs	r2, r3, r2
 8008f22:	eba3 0901 	sub.w	r9, r3, r1
 8008f26:	4591      	cmp	r9, r2
 8008f28:	bfa8      	it	ge
 8008f2a:	4691      	movge	r9, r2
 8008f2c:	f1b9 0f00 	cmp.w	r9, #0
 8008f30:	dc35      	bgt.n	8008f9e <_printf_float+0x3ae>
 8008f32:	f04f 0800 	mov.w	r8, #0
 8008f36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f3a:	f104 0a1a 	add.w	sl, r4, #26
 8008f3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f42:	1a9b      	subs	r3, r3, r2
 8008f44:	eba3 0309 	sub.w	r3, r3, r9
 8008f48:	4543      	cmp	r3, r8
 8008f4a:	f77f af79 	ble.w	8008e40 <_printf_float+0x250>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	4652      	mov	r2, sl
 8008f52:	4631      	mov	r1, r6
 8008f54:	4628      	mov	r0, r5
 8008f56:	47b8      	blx	r7
 8008f58:	3001      	adds	r0, #1
 8008f5a:	f43f aeaa 	beq.w	8008cb2 <_printf_float+0xc2>
 8008f5e:	f108 0801 	add.w	r8, r8, #1
 8008f62:	e7ec      	b.n	8008f3e <_printf_float+0x34e>
 8008f64:	4613      	mov	r3, r2
 8008f66:	4631      	mov	r1, r6
 8008f68:	4642      	mov	r2, r8
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	47b8      	blx	r7
 8008f6e:	3001      	adds	r0, #1
 8008f70:	d1c0      	bne.n	8008ef4 <_printf_float+0x304>
 8008f72:	e69e      	b.n	8008cb2 <_printf_float+0xc2>
 8008f74:	2301      	movs	r3, #1
 8008f76:	4631      	mov	r1, r6
 8008f78:	4628      	mov	r0, r5
 8008f7a:	9205      	str	r2, [sp, #20]
 8008f7c:	47b8      	blx	r7
 8008f7e:	3001      	adds	r0, #1
 8008f80:	f43f ae97 	beq.w	8008cb2 <_printf_float+0xc2>
 8008f84:	9a05      	ldr	r2, [sp, #20]
 8008f86:	f10b 0b01 	add.w	fp, fp, #1
 8008f8a:	e7b9      	b.n	8008f00 <_printf_float+0x310>
 8008f8c:	ee18 3a10 	vmov	r3, s16
 8008f90:	4652      	mov	r2, sl
 8008f92:	4631      	mov	r1, r6
 8008f94:	4628      	mov	r0, r5
 8008f96:	47b8      	blx	r7
 8008f98:	3001      	adds	r0, #1
 8008f9a:	d1be      	bne.n	8008f1a <_printf_float+0x32a>
 8008f9c:	e689      	b.n	8008cb2 <_printf_float+0xc2>
 8008f9e:	9a05      	ldr	r2, [sp, #20]
 8008fa0:	464b      	mov	r3, r9
 8008fa2:	4442      	add	r2, r8
 8008fa4:	4631      	mov	r1, r6
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	47b8      	blx	r7
 8008faa:	3001      	adds	r0, #1
 8008fac:	d1c1      	bne.n	8008f32 <_printf_float+0x342>
 8008fae:	e680      	b.n	8008cb2 <_printf_float+0xc2>
 8008fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fb2:	2a01      	cmp	r2, #1
 8008fb4:	dc01      	bgt.n	8008fba <_printf_float+0x3ca>
 8008fb6:	07db      	lsls	r3, r3, #31
 8008fb8:	d538      	bpl.n	800902c <_printf_float+0x43c>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	4642      	mov	r2, r8
 8008fbe:	4631      	mov	r1, r6
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	47b8      	blx	r7
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	f43f ae74 	beq.w	8008cb2 <_printf_float+0xc2>
 8008fca:	ee18 3a10 	vmov	r3, s16
 8008fce:	4652      	mov	r2, sl
 8008fd0:	4631      	mov	r1, r6
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	47b8      	blx	r7
 8008fd6:	3001      	adds	r0, #1
 8008fd8:	f43f ae6b 	beq.w	8008cb2 <_printf_float+0xc2>
 8008fdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f7f7 fd78 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fe8:	b9d8      	cbnz	r0, 8009022 <_printf_float+0x432>
 8008fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fec:	f108 0201 	add.w	r2, r8, #1
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	4631      	mov	r1, r6
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	47b8      	blx	r7
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d10e      	bne.n	800901a <_printf_float+0x42a>
 8008ffc:	e659      	b.n	8008cb2 <_printf_float+0xc2>
 8008ffe:	2301      	movs	r3, #1
 8009000:	4652      	mov	r2, sl
 8009002:	4631      	mov	r1, r6
 8009004:	4628      	mov	r0, r5
 8009006:	47b8      	blx	r7
 8009008:	3001      	adds	r0, #1
 800900a:	f43f ae52 	beq.w	8008cb2 <_printf_float+0xc2>
 800900e:	f108 0801 	add.w	r8, r8, #1
 8009012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009014:	3b01      	subs	r3, #1
 8009016:	4543      	cmp	r3, r8
 8009018:	dcf1      	bgt.n	8008ffe <_printf_float+0x40e>
 800901a:	464b      	mov	r3, r9
 800901c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009020:	e6dc      	b.n	8008ddc <_printf_float+0x1ec>
 8009022:	f04f 0800 	mov.w	r8, #0
 8009026:	f104 0a1a 	add.w	sl, r4, #26
 800902a:	e7f2      	b.n	8009012 <_printf_float+0x422>
 800902c:	2301      	movs	r3, #1
 800902e:	4642      	mov	r2, r8
 8009030:	e7df      	b.n	8008ff2 <_printf_float+0x402>
 8009032:	2301      	movs	r3, #1
 8009034:	464a      	mov	r2, r9
 8009036:	4631      	mov	r1, r6
 8009038:	4628      	mov	r0, r5
 800903a:	47b8      	blx	r7
 800903c:	3001      	adds	r0, #1
 800903e:	f43f ae38 	beq.w	8008cb2 <_printf_float+0xc2>
 8009042:	f108 0801 	add.w	r8, r8, #1
 8009046:	68e3      	ldr	r3, [r4, #12]
 8009048:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800904a:	1a5b      	subs	r3, r3, r1
 800904c:	4543      	cmp	r3, r8
 800904e:	dcf0      	bgt.n	8009032 <_printf_float+0x442>
 8009050:	e6fa      	b.n	8008e48 <_printf_float+0x258>
 8009052:	f04f 0800 	mov.w	r8, #0
 8009056:	f104 0919 	add.w	r9, r4, #25
 800905a:	e7f4      	b.n	8009046 <_printf_float+0x456>

0800905c <_printf_common>:
 800905c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009060:	4616      	mov	r6, r2
 8009062:	4699      	mov	r9, r3
 8009064:	688a      	ldr	r2, [r1, #8]
 8009066:	690b      	ldr	r3, [r1, #16]
 8009068:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800906c:	4293      	cmp	r3, r2
 800906e:	bfb8      	it	lt
 8009070:	4613      	movlt	r3, r2
 8009072:	6033      	str	r3, [r6, #0]
 8009074:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009078:	4607      	mov	r7, r0
 800907a:	460c      	mov	r4, r1
 800907c:	b10a      	cbz	r2, 8009082 <_printf_common+0x26>
 800907e:	3301      	adds	r3, #1
 8009080:	6033      	str	r3, [r6, #0]
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	0699      	lsls	r1, r3, #26
 8009086:	bf42      	ittt	mi
 8009088:	6833      	ldrmi	r3, [r6, #0]
 800908a:	3302      	addmi	r3, #2
 800908c:	6033      	strmi	r3, [r6, #0]
 800908e:	6825      	ldr	r5, [r4, #0]
 8009090:	f015 0506 	ands.w	r5, r5, #6
 8009094:	d106      	bne.n	80090a4 <_printf_common+0x48>
 8009096:	f104 0a19 	add.w	sl, r4, #25
 800909a:	68e3      	ldr	r3, [r4, #12]
 800909c:	6832      	ldr	r2, [r6, #0]
 800909e:	1a9b      	subs	r3, r3, r2
 80090a0:	42ab      	cmp	r3, r5
 80090a2:	dc26      	bgt.n	80090f2 <_printf_common+0x96>
 80090a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090a8:	1e13      	subs	r3, r2, #0
 80090aa:	6822      	ldr	r2, [r4, #0]
 80090ac:	bf18      	it	ne
 80090ae:	2301      	movne	r3, #1
 80090b0:	0692      	lsls	r2, r2, #26
 80090b2:	d42b      	bmi.n	800910c <_printf_common+0xb0>
 80090b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090b8:	4649      	mov	r1, r9
 80090ba:	4638      	mov	r0, r7
 80090bc:	47c0      	blx	r8
 80090be:	3001      	adds	r0, #1
 80090c0:	d01e      	beq.n	8009100 <_printf_common+0xa4>
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	68e5      	ldr	r5, [r4, #12]
 80090c6:	6832      	ldr	r2, [r6, #0]
 80090c8:	f003 0306 	and.w	r3, r3, #6
 80090cc:	2b04      	cmp	r3, #4
 80090ce:	bf08      	it	eq
 80090d0:	1aad      	subeq	r5, r5, r2
 80090d2:	68a3      	ldr	r3, [r4, #8]
 80090d4:	6922      	ldr	r2, [r4, #16]
 80090d6:	bf0c      	ite	eq
 80090d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090dc:	2500      	movne	r5, #0
 80090de:	4293      	cmp	r3, r2
 80090e0:	bfc4      	itt	gt
 80090e2:	1a9b      	subgt	r3, r3, r2
 80090e4:	18ed      	addgt	r5, r5, r3
 80090e6:	2600      	movs	r6, #0
 80090e8:	341a      	adds	r4, #26
 80090ea:	42b5      	cmp	r5, r6
 80090ec:	d11a      	bne.n	8009124 <_printf_common+0xc8>
 80090ee:	2000      	movs	r0, #0
 80090f0:	e008      	b.n	8009104 <_printf_common+0xa8>
 80090f2:	2301      	movs	r3, #1
 80090f4:	4652      	mov	r2, sl
 80090f6:	4649      	mov	r1, r9
 80090f8:	4638      	mov	r0, r7
 80090fa:	47c0      	blx	r8
 80090fc:	3001      	adds	r0, #1
 80090fe:	d103      	bne.n	8009108 <_printf_common+0xac>
 8009100:	f04f 30ff 	mov.w	r0, #4294967295
 8009104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009108:	3501      	adds	r5, #1
 800910a:	e7c6      	b.n	800909a <_printf_common+0x3e>
 800910c:	18e1      	adds	r1, r4, r3
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	2030      	movs	r0, #48	; 0x30
 8009112:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009116:	4422      	add	r2, r4
 8009118:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800911c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009120:	3302      	adds	r3, #2
 8009122:	e7c7      	b.n	80090b4 <_printf_common+0x58>
 8009124:	2301      	movs	r3, #1
 8009126:	4622      	mov	r2, r4
 8009128:	4649      	mov	r1, r9
 800912a:	4638      	mov	r0, r7
 800912c:	47c0      	blx	r8
 800912e:	3001      	adds	r0, #1
 8009130:	d0e6      	beq.n	8009100 <_printf_common+0xa4>
 8009132:	3601      	adds	r6, #1
 8009134:	e7d9      	b.n	80090ea <_printf_common+0x8e>
	...

08009138 <_printf_i>:
 8009138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800913c:	7e0f      	ldrb	r7, [r1, #24]
 800913e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009140:	2f78      	cmp	r7, #120	; 0x78
 8009142:	4691      	mov	r9, r2
 8009144:	4680      	mov	r8, r0
 8009146:	460c      	mov	r4, r1
 8009148:	469a      	mov	sl, r3
 800914a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800914e:	d807      	bhi.n	8009160 <_printf_i+0x28>
 8009150:	2f62      	cmp	r7, #98	; 0x62
 8009152:	d80a      	bhi.n	800916a <_printf_i+0x32>
 8009154:	2f00      	cmp	r7, #0
 8009156:	f000 80d8 	beq.w	800930a <_printf_i+0x1d2>
 800915a:	2f58      	cmp	r7, #88	; 0x58
 800915c:	f000 80a3 	beq.w	80092a6 <_printf_i+0x16e>
 8009160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009164:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009168:	e03a      	b.n	80091e0 <_printf_i+0xa8>
 800916a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800916e:	2b15      	cmp	r3, #21
 8009170:	d8f6      	bhi.n	8009160 <_printf_i+0x28>
 8009172:	a101      	add	r1, pc, #4	; (adr r1, 8009178 <_printf_i+0x40>)
 8009174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009178:	080091d1 	.word	0x080091d1
 800917c:	080091e5 	.word	0x080091e5
 8009180:	08009161 	.word	0x08009161
 8009184:	08009161 	.word	0x08009161
 8009188:	08009161 	.word	0x08009161
 800918c:	08009161 	.word	0x08009161
 8009190:	080091e5 	.word	0x080091e5
 8009194:	08009161 	.word	0x08009161
 8009198:	08009161 	.word	0x08009161
 800919c:	08009161 	.word	0x08009161
 80091a0:	08009161 	.word	0x08009161
 80091a4:	080092f1 	.word	0x080092f1
 80091a8:	08009215 	.word	0x08009215
 80091ac:	080092d3 	.word	0x080092d3
 80091b0:	08009161 	.word	0x08009161
 80091b4:	08009161 	.word	0x08009161
 80091b8:	08009313 	.word	0x08009313
 80091bc:	08009161 	.word	0x08009161
 80091c0:	08009215 	.word	0x08009215
 80091c4:	08009161 	.word	0x08009161
 80091c8:	08009161 	.word	0x08009161
 80091cc:	080092db 	.word	0x080092db
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	1d1a      	adds	r2, r3, #4
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	602a      	str	r2, [r5, #0]
 80091d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091e0:	2301      	movs	r3, #1
 80091e2:	e0a3      	b.n	800932c <_printf_i+0x1f4>
 80091e4:	6820      	ldr	r0, [r4, #0]
 80091e6:	6829      	ldr	r1, [r5, #0]
 80091e8:	0606      	lsls	r6, r0, #24
 80091ea:	f101 0304 	add.w	r3, r1, #4
 80091ee:	d50a      	bpl.n	8009206 <_printf_i+0xce>
 80091f0:	680e      	ldr	r6, [r1, #0]
 80091f2:	602b      	str	r3, [r5, #0]
 80091f4:	2e00      	cmp	r6, #0
 80091f6:	da03      	bge.n	8009200 <_printf_i+0xc8>
 80091f8:	232d      	movs	r3, #45	; 0x2d
 80091fa:	4276      	negs	r6, r6
 80091fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009200:	485e      	ldr	r0, [pc, #376]	; (800937c <_printf_i+0x244>)
 8009202:	230a      	movs	r3, #10
 8009204:	e019      	b.n	800923a <_printf_i+0x102>
 8009206:	680e      	ldr	r6, [r1, #0]
 8009208:	602b      	str	r3, [r5, #0]
 800920a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800920e:	bf18      	it	ne
 8009210:	b236      	sxthne	r6, r6
 8009212:	e7ef      	b.n	80091f4 <_printf_i+0xbc>
 8009214:	682b      	ldr	r3, [r5, #0]
 8009216:	6820      	ldr	r0, [r4, #0]
 8009218:	1d19      	adds	r1, r3, #4
 800921a:	6029      	str	r1, [r5, #0]
 800921c:	0601      	lsls	r1, r0, #24
 800921e:	d501      	bpl.n	8009224 <_printf_i+0xec>
 8009220:	681e      	ldr	r6, [r3, #0]
 8009222:	e002      	b.n	800922a <_printf_i+0xf2>
 8009224:	0646      	lsls	r6, r0, #25
 8009226:	d5fb      	bpl.n	8009220 <_printf_i+0xe8>
 8009228:	881e      	ldrh	r6, [r3, #0]
 800922a:	4854      	ldr	r0, [pc, #336]	; (800937c <_printf_i+0x244>)
 800922c:	2f6f      	cmp	r7, #111	; 0x6f
 800922e:	bf0c      	ite	eq
 8009230:	2308      	moveq	r3, #8
 8009232:	230a      	movne	r3, #10
 8009234:	2100      	movs	r1, #0
 8009236:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800923a:	6865      	ldr	r5, [r4, #4]
 800923c:	60a5      	str	r5, [r4, #8]
 800923e:	2d00      	cmp	r5, #0
 8009240:	bfa2      	ittt	ge
 8009242:	6821      	ldrge	r1, [r4, #0]
 8009244:	f021 0104 	bicge.w	r1, r1, #4
 8009248:	6021      	strge	r1, [r4, #0]
 800924a:	b90e      	cbnz	r6, 8009250 <_printf_i+0x118>
 800924c:	2d00      	cmp	r5, #0
 800924e:	d04d      	beq.n	80092ec <_printf_i+0x1b4>
 8009250:	4615      	mov	r5, r2
 8009252:	fbb6 f1f3 	udiv	r1, r6, r3
 8009256:	fb03 6711 	mls	r7, r3, r1, r6
 800925a:	5dc7      	ldrb	r7, [r0, r7]
 800925c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009260:	4637      	mov	r7, r6
 8009262:	42bb      	cmp	r3, r7
 8009264:	460e      	mov	r6, r1
 8009266:	d9f4      	bls.n	8009252 <_printf_i+0x11a>
 8009268:	2b08      	cmp	r3, #8
 800926a:	d10b      	bne.n	8009284 <_printf_i+0x14c>
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	07de      	lsls	r6, r3, #31
 8009270:	d508      	bpl.n	8009284 <_printf_i+0x14c>
 8009272:	6923      	ldr	r3, [r4, #16]
 8009274:	6861      	ldr	r1, [r4, #4]
 8009276:	4299      	cmp	r1, r3
 8009278:	bfde      	ittt	le
 800927a:	2330      	movle	r3, #48	; 0x30
 800927c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009280:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009284:	1b52      	subs	r2, r2, r5
 8009286:	6122      	str	r2, [r4, #16]
 8009288:	f8cd a000 	str.w	sl, [sp]
 800928c:	464b      	mov	r3, r9
 800928e:	aa03      	add	r2, sp, #12
 8009290:	4621      	mov	r1, r4
 8009292:	4640      	mov	r0, r8
 8009294:	f7ff fee2 	bl	800905c <_printf_common>
 8009298:	3001      	adds	r0, #1
 800929a:	d14c      	bne.n	8009336 <_printf_i+0x1fe>
 800929c:	f04f 30ff 	mov.w	r0, #4294967295
 80092a0:	b004      	add	sp, #16
 80092a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092a6:	4835      	ldr	r0, [pc, #212]	; (800937c <_printf_i+0x244>)
 80092a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80092ac:	6829      	ldr	r1, [r5, #0]
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80092b4:	6029      	str	r1, [r5, #0]
 80092b6:	061d      	lsls	r5, r3, #24
 80092b8:	d514      	bpl.n	80092e4 <_printf_i+0x1ac>
 80092ba:	07df      	lsls	r7, r3, #31
 80092bc:	bf44      	itt	mi
 80092be:	f043 0320 	orrmi.w	r3, r3, #32
 80092c2:	6023      	strmi	r3, [r4, #0]
 80092c4:	b91e      	cbnz	r6, 80092ce <_printf_i+0x196>
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	f023 0320 	bic.w	r3, r3, #32
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	2310      	movs	r3, #16
 80092d0:	e7b0      	b.n	8009234 <_printf_i+0xfc>
 80092d2:	6823      	ldr	r3, [r4, #0]
 80092d4:	f043 0320 	orr.w	r3, r3, #32
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	2378      	movs	r3, #120	; 0x78
 80092dc:	4828      	ldr	r0, [pc, #160]	; (8009380 <_printf_i+0x248>)
 80092de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092e2:	e7e3      	b.n	80092ac <_printf_i+0x174>
 80092e4:	0659      	lsls	r1, r3, #25
 80092e6:	bf48      	it	mi
 80092e8:	b2b6      	uxthmi	r6, r6
 80092ea:	e7e6      	b.n	80092ba <_printf_i+0x182>
 80092ec:	4615      	mov	r5, r2
 80092ee:	e7bb      	b.n	8009268 <_printf_i+0x130>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	6826      	ldr	r6, [r4, #0]
 80092f4:	6961      	ldr	r1, [r4, #20]
 80092f6:	1d18      	adds	r0, r3, #4
 80092f8:	6028      	str	r0, [r5, #0]
 80092fa:	0635      	lsls	r5, r6, #24
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	d501      	bpl.n	8009304 <_printf_i+0x1cc>
 8009300:	6019      	str	r1, [r3, #0]
 8009302:	e002      	b.n	800930a <_printf_i+0x1d2>
 8009304:	0670      	lsls	r0, r6, #25
 8009306:	d5fb      	bpl.n	8009300 <_printf_i+0x1c8>
 8009308:	8019      	strh	r1, [r3, #0]
 800930a:	2300      	movs	r3, #0
 800930c:	6123      	str	r3, [r4, #16]
 800930e:	4615      	mov	r5, r2
 8009310:	e7ba      	b.n	8009288 <_printf_i+0x150>
 8009312:	682b      	ldr	r3, [r5, #0]
 8009314:	1d1a      	adds	r2, r3, #4
 8009316:	602a      	str	r2, [r5, #0]
 8009318:	681d      	ldr	r5, [r3, #0]
 800931a:	6862      	ldr	r2, [r4, #4]
 800931c:	2100      	movs	r1, #0
 800931e:	4628      	mov	r0, r5
 8009320:	f7f6 ff66 	bl	80001f0 <memchr>
 8009324:	b108      	cbz	r0, 800932a <_printf_i+0x1f2>
 8009326:	1b40      	subs	r0, r0, r5
 8009328:	6060      	str	r0, [r4, #4]
 800932a:	6863      	ldr	r3, [r4, #4]
 800932c:	6123      	str	r3, [r4, #16]
 800932e:	2300      	movs	r3, #0
 8009330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009334:	e7a8      	b.n	8009288 <_printf_i+0x150>
 8009336:	6923      	ldr	r3, [r4, #16]
 8009338:	462a      	mov	r2, r5
 800933a:	4649      	mov	r1, r9
 800933c:	4640      	mov	r0, r8
 800933e:	47d0      	blx	sl
 8009340:	3001      	adds	r0, #1
 8009342:	d0ab      	beq.n	800929c <_printf_i+0x164>
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	079b      	lsls	r3, r3, #30
 8009348:	d413      	bmi.n	8009372 <_printf_i+0x23a>
 800934a:	68e0      	ldr	r0, [r4, #12]
 800934c:	9b03      	ldr	r3, [sp, #12]
 800934e:	4298      	cmp	r0, r3
 8009350:	bfb8      	it	lt
 8009352:	4618      	movlt	r0, r3
 8009354:	e7a4      	b.n	80092a0 <_printf_i+0x168>
 8009356:	2301      	movs	r3, #1
 8009358:	4632      	mov	r2, r6
 800935a:	4649      	mov	r1, r9
 800935c:	4640      	mov	r0, r8
 800935e:	47d0      	blx	sl
 8009360:	3001      	adds	r0, #1
 8009362:	d09b      	beq.n	800929c <_printf_i+0x164>
 8009364:	3501      	adds	r5, #1
 8009366:	68e3      	ldr	r3, [r4, #12]
 8009368:	9903      	ldr	r1, [sp, #12]
 800936a:	1a5b      	subs	r3, r3, r1
 800936c:	42ab      	cmp	r3, r5
 800936e:	dcf2      	bgt.n	8009356 <_printf_i+0x21e>
 8009370:	e7eb      	b.n	800934a <_printf_i+0x212>
 8009372:	2500      	movs	r5, #0
 8009374:	f104 0619 	add.w	r6, r4, #25
 8009378:	e7f5      	b.n	8009366 <_printf_i+0x22e>
 800937a:	bf00      	nop
 800937c:	0800c8a2 	.word	0x0800c8a2
 8009380:	0800c8b3 	.word	0x0800c8b3

08009384 <sniprintf>:
 8009384:	b40c      	push	{r2, r3}
 8009386:	b530      	push	{r4, r5, lr}
 8009388:	4b17      	ldr	r3, [pc, #92]	; (80093e8 <sniprintf+0x64>)
 800938a:	1e0c      	subs	r4, r1, #0
 800938c:	681d      	ldr	r5, [r3, #0]
 800938e:	b09d      	sub	sp, #116	; 0x74
 8009390:	da08      	bge.n	80093a4 <sniprintf+0x20>
 8009392:	238b      	movs	r3, #139	; 0x8b
 8009394:	602b      	str	r3, [r5, #0]
 8009396:	f04f 30ff 	mov.w	r0, #4294967295
 800939a:	b01d      	add	sp, #116	; 0x74
 800939c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093a0:	b002      	add	sp, #8
 80093a2:	4770      	bx	lr
 80093a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80093a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80093ac:	bf14      	ite	ne
 80093ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80093b2:	4623      	moveq	r3, r4
 80093b4:	9304      	str	r3, [sp, #16]
 80093b6:	9307      	str	r3, [sp, #28]
 80093b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093bc:	9002      	str	r0, [sp, #8]
 80093be:	9006      	str	r0, [sp, #24]
 80093c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80093c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80093c6:	ab21      	add	r3, sp, #132	; 0x84
 80093c8:	a902      	add	r1, sp, #8
 80093ca:	4628      	mov	r0, r5
 80093cc:	9301      	str	r3, [sp, #4]
 80093ce:	f001 fc17 	bl	800ac00 <_svfiprintf_r>
 80093d2:	1c43      	adds	r3, r0, #1
 80093d4:	bfbc      	itt	lt
 80093d6:	238b      	movlt	r3, #139	; 0x8b
 80093d8:	602b      	strlt	r3, [r5, #0]
 80093da:	2c00      	cmp	r4, #0
 80093dc:	d0dd      	beq.n	800939a <sniprintf+0x16>
 80093de:	9b02      	ldr	r3, [sp, #8]
 80093e0:	2200      	movs	r2, #0
 80093e2:	701a      	strb	r2, [r3, #0]
 80093e4:	e7d9      	b.n	800939a <sniprintf+0x16>
 80093e6:	bf00      	nop
 80093e8:	20000014 	.word	0x20000014

080093ec <siprintf>:
 80093ec:	b40e      	push	{r1, r2, r3}
 80093ee:	b500      	push	{lr}
 80093f0:	b09c      	sub	sp, #112	; 0x70
 80093f2:	ab1d      	add	r3, sp, #116	; 0x74
 80093f4:	9002      	str	r0, [sp, #8]
 80093f6:	9006      	str	r0, [sp, #24]
 80093f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093fc:	4809      	ldr	r0, [pc, #36]	; (8009424 <siprintf+0x38>)
 80093fe:	9107      	str	r1, [sp, #28]
 8009400:	9104      	str	r1, [sp, #16]
 8009402:	4909      	ldr	r1, [pc, #36]	; (8009428 <siprintf+0x3c>)
 8009404:	f853 2b04 	ldr.w	r2, [r3], #4
 8009408:	9105      	str	r1, [sp, #20]
 800940a:	6800      	ldr	r0, [r0, #0]
 800940c:	9301      	str	r3, [sp, #4]
 800940e:	a902      	add	r1, sp, #8
 8009410:	f001 fbf6 	bl	800ac00 <_svfiprintf_r>
 8009414:	9b02      	ldr	r3, [sp, #8]
 8009416:	2200      	movs	r2, #0
 8009418:	701a      	strb	r2, [r3, #0]
 800941a:	b01c      	add	sp, #112	; 0x70
 800941c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009420:	b003      	add	sp, #12
 8009422:	4770      	bx	lr
 8009424:	20000014 	.word	0x20000014
 8009428:	ffff0208 	.word	0xffff0208

0800942c <_strtol_l.constprop.0>:
 800942c:	2b01      	cmp	r3, #1
 800942e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009432:	d001      	beq.n	8009438 <_strtol_l.constprop.0+0xc>
 8009434:	2b24      	cmp	r3, #36	; 0x24
 8009436:	d906      	bls.n	8009446 <_strtol_l.constprop.0+0x1a>
 8009438:	f7ff fafa 	bl	8008a30 <__errno>
 800943c:	2316      	movs	r3, #22
 800943e:	6003      	str	r3, [r0, #0]
 8009440:	2000      	movs	r0, #0
 8009442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009446:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800952c <_strtol_l.constprop.0+0x100>
 800944a:	460d      	mov	r5, r1
 800944c:	462e      	mov	r6, r5
 800944e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009452:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009456:	f017 0708 	ands.w	r7, r7, #8
 800945a:	d1f7      	bne.n	800944c <_strtol_l.constprop.0+0x20>
 800945c:	2c2d      	cmp	r4, #45	; 0x2d
 800945e:	d132      	bne.n	80094c6 <_strtol_l.constprop.0+0x9a>
 8009460:	782c      	ldrb	r4, [r5, #0]
 8009462:	2701      	movs	r7, #1
 8009464:	1cb5      	adds	r5, r6, #2
 8009466:	2b00      	cmp	r3, #0
 8009468:	d05b      	beq.n	8009522 <_strtol_l.constprop.0+0xf6>
 800946a:	2b10      	cmp	r3, #16
 800946c:	d109      	bne.n	8009482 <_strtol_l.constprop.0+0x56>
 800946e:	2c30      	cmp	r4, #48	; 0x30
 8009470:	d107      	bne.n	8009482 <_strtol_l.constprop.0+0x56>
 8009472:	782c      	ldrb	r4, [r5, #0]
 8009474:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009478:	2c58      	cmp	r4, #88	; 0x58
 800947a:	d14d      	bne.n	8009518 <_strtol_l.constprop.0+0xec>
 800947c:	786c      	ldrb	r4, [r5, #1]
 800947e:	2310      	movs	r3, #16
 8009480:	3502      	adds	r5, #2
 8009482:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009486:	f108 38ff 	add.w	r8, r8, #4294967295
 800948a:	f04f 0c00 	mov.w	ip, #0
 800948e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009492:	4666      	mov	r6, ip
 8009494:	fb03 8a19 	mls	sl, r3, r9, r8
 8009498:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800949c:	f1be 0f09 	cmp.w	lr, #9
 80094a0:	d816      	bhi.n	80094d0 <_strtol_l.constprop.0+0xa4>
 80094a2:	4674      	mov	r4, lr
 80094a4:	42a3      	cmp	r3, r4
 80094a6:	dd24      	ble.n	80094f2 <_strtol_l.constprop.0+0xc6>
 80094a8:	f1bc 0f00 	cmp.w	ip, #0
 80094ac:	db1e      	blt.n	80094ec <_strtol_l.constprop.0+0xc0>
 80094ae:	45b1      	cmp	r9, r6
 80094b0:	d31c      	bcc.n	80094ec <_strtol_l.constprop.0+0xc0>
 80094b2:	d101      	bne.n	80094b8 <_strtol_l.constprop.0+0x8c>
 80094b4:	45a2      	cmp	sl, r4
 80094b6:	db19      	blt.n	80094ec <_strtol_l.constprop.0+0xc0>
 80094b8:	fb06 4603 	mla	r6, r6, r3, r4
 80094bc:	f04f 0c01 	mov.w	ip, #1
 80094c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094c4:	e7e8      	b.n	8009498 <_strtol_l.constprop.0+0x6c>
 80094c6:	2c2b      	cmp	r4, #43	; 0x2b
 80094c8:	bf04      	itt	eq
 80094ca:	782c      	ldrbeq	r4, [r5, #0]
 80094cc:	1cb5      	addeq	r5, r6, #2
 80094ce:	e7ca      	b.n	8009466 <_strtol_l.constprop.0+0x3a>
 80094d0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80094d4:	f1be 0f19 	cmp.w	lr, #25
 80094d8:	d801      	bhi.n	80094de <_strtol_l.constprop.0+0xb2>
 80094da:	3c37      	subs	r4, #55	; 0x37
 80094dc:	e7e2      	b.n	80094a4 <_strtol_l.constprop.0+0x78>
 80094de:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80094e2:	f1be 0f19 	cmp.w	lr, #25
 80094e6:	d804      	bhi.n	80094f2 <_strtol_l.constprop.0+0xc6>
 80094e8:	3c57      	subs	r4, #87	; 0x57
 80094ea:	e7db      	b.n	80094a4 <_strtol_l.constprop.0+0x78>
 80094ec:	f04f 3cff 	mov.w	ip, #4294967295
 80094f0:	e7e6      	b.n	80094c0 <_strtol_l.constprop.0+0x94>
 80094f2:	f1bc 0f00 	cmp.w	ip, #0
 80094f6:	da05      	bge.n	8009504 <_strtol_l.constprop.0+0xd8>
 80094f8:	2322      	movs	r3, #34	; 0x22
 80094fa:	6003      	str	r3, [r0, #0]
 80094fc:	4646      	mov	r6, r8
 80094fe:	b942      	cbnz	r2, 8009512 <_strtol_l.constprop.0+0xe6>
 8009500:	4630      	mov	r0, r6
 8009502:	e79e      	b.n	8009442 <_strtol_l.constprop.0+0x16>
 8009504:	b107      	cbz	r7, 8009508 <_strtol_l.constprop.0+0xdc>
 8009506:	4276      	negs	r6, r6
 8009508:	2a00      	cmp	r2, #0
 800950a:	d0f9      	beq.n	8009500 <_strtol_l.constprop.0+0xd4>
 800950c:	f1bc 0f00 	cmp.w	ip, #0
 8009510:	d000      	beq.n	8009514 <_strtol_l.constprop.0+0xe8>
 8009512:	1e69      	subs	r1, r5, #1
 8009514:	6011      	str	r1, [r2, #0]
 8009516:	e7f3      	b.n	8009500 <_strtol_l.constprop.0+0xd4>
 8009518:	2430      	movs	r4, #48	; 0x30
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1b1      	bne.n	8009482 <_strtol_l.constprop.0+0x56>
 800951e:	2308      	movs	r3, #8
 8009520:	e7af      	b.n	8009482 <_strtol_l.constprop.0+0x56>
 8009522:	2c30      	cmp	r4, #48	; 0x30
 8009524:	d0a5      	beq.n	8009472 <_strtol_l.constprop.0+0x46>
 8009526:	230a      	movs	r3, #10
 8009528:	e7ab      	b.n	8009482 <_strtol_l.constprop.0+0x56>
 800952a:	bf00      	nop
 800952c:	0800c8c5 	.word	0x0800c8c5

08009530 <strtol>:
 8009530:	4613      	mov	r3, r2
 8009532:	460a      	mov	r2, r1
 8009534:	4601      	mov	r1, r0
 8009536:	4802      	ldr	r0, [pc, #8]	; (8009540 <strtol+0x10>)
 8009538:	6800      	ldr	r0, [r0, #0]
 800953a:	f7ff bf77 	b.w	800942c <_strtol_l.constprop.0>
 800953e:	bf00      	nop
 8009540:	20000014 	.word	0x20000014

08009544 <quorem>:
 8009544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009548:	6903      	ldr	r3, [r0, #16]
 800954a:	690c      	ldr	r4, [r1, #16]
 800954c:	42a3      	cmp	r3, r4
 800954e:	4607      	mov	r7, r0
 8009550:	f2c0 8081 	blt.w	8009656 <quorem+0x112>
 8009554:	3c01      	subs	r4, #1
 8009556:	f101 0814 	add.w	r8, r1, #20
 800955a:	f100 0514 	add.w	r5, r0, #20
 800955e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009562:	9301      	str	r3, [sp, #4]
 8009564:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009568:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800956c:	3301      	adds	r3, #1
 800956e:	429a      	cmp	r2, r3
 8009570:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009574:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009578:	fbb2 f6f3 	udiv	r6, r2, r3
 800957c:	d331      	bcc.n	80095e2 <quorem+0x9e>
 800957e:	f04f 0e00 	mov.w	lr, #0
 8009582:	4640      	mov	r0, r8
 8009584:	46ac      	mov	ip, r5
 8009586:	46f2      	mov	sl, lr
 8009588:	f850 2b04 	ldr.w	r2, [r0], #4
 800958c:	b293      	uxth	r3, r2
 800958e:	fb06 e303 	mla	r3, r6, r3, lr
 8009592:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009596:	b29b      	uxth	r3, r3
 8009598:	ebaa 0303 	sub.w	r3, sl, r3
 800959c:	f8dc a000 	ldr.w	sl, [ip]
 80095a0:	0c12      	lsrs	r2, r2, #16
 80095a2:	fa13 f38a 	uxtah	r3, r3, sl
 80095a6:	fb06 e202 	mla	r2, r6, r2, lr
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	9b00      	ldr	r3, [sp, #0]
 80095ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80095b2:	b292      	uxth	r2, r2
 80095b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80095b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80095c0:	4581      	cmp	r9, r0
 80095c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095c6:	f84c 3b04 	str.w	r3, [ip], #4
 80095ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80095ce:	d2db      	bcs.n	8009588 <quorem+0x44>
 80095d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80095d4:	b92b      	cbnz	r3, 80095e2 <quorem+0x9e>
 80095d6:	9b01      	ldr	r3, [sp, #4]
 80095d8:	3b04      	subs	r3, #4
 80095da:	429d      	cmp	r5, r3
 80095dc:	461a      	mov	r2, r3
 80095de:	d32e      	bcc.n	800963e <quorem+0xfa>
 80095e0:	613c      	str	r4, [r7, #16]
 80095e2:	4638      	mov	r0, r7
 80095e4:	f001 f8b8 	bl	800a758 <__mcmp>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	db24      	blt.n	8009636 <quorem+0xf2>
 80095ec:	3601      	adds	r6, #1
 80095ee:	4628      	mov	r0, r5
 80095f0:	f04f 0c00 	mov.w	ip, #0
 80095f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80095f8:	f8d0 e000 	ldr.w	lr, [r0]
 80095fc:	b293      	uxth	r3, r2
 80095fe:	ebac 0303 	sub.w	r3, ip, r3
 8009602:	0c12      	lsrs	r2, r2, #16
 8009604:	fa13 f38e 	uxtah	r3, r3, lr
 8009608:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800960c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009610:	b29b      	uxth	r3, r3
 8009612:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009616:	45c1      	cmp	r9, r8
 8009618:	f840 3b04 	str.w	r3, [r0], #4
 800961c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009620:	d2e8      	bcs.n	80095f4 <quorem+0xb0>
 8009622:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009626:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800962a:	b922      	cbnz	r2, 8009636 <quorem+0xf2>
 800962c:	3b04      	subs	r3, #4
 800962e:	429d      	cmp	r5, r3
 8009630:	461a      	mov	r2, r3
 8009632:	d30a      	bcc.n	800964a <quorem+0x106>
 8009634:	613c      	str	r4, [r7, #16]
 8009636:	4630      	mov	r0, r6
 8009638:	b003      	add	sp, #12
 800963a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963e:	6812      	ldr	r2, [r2, #0]
 8009640:	3b04      	subs	r3, #4
 8009642:	2a00      	cmp	r2, #0
 8009644:	d1cc      	bne.n	80095e0 <quorem+0x9c>
 8009646:	3c01      	subs	r4, #1
 8009648:	e7c7      	b.n	80095da <quorem+0x96>
 800964a:	6812      	ldr	r2, [r2, #0]
 800964c:	3b04      	subs	r3, #4
 800964e:	2a00      	cmp	r2, #0
 8009650:	d1f0      	bne.n	8009634 <quorem+0xf0>
 8009652:	3c01      	subs	r4, #1
 8009654:	e7eb      	b.n	800962e <quorem+0xea>
 8009656:	2000      	movs	r0, #0
 8009658:	e7ee      	b.n	8009638 <quorem+0xf4>
 800965a:	0000      	movs	r0, r0
 800965c:	0000      	movs	r0, r0
	...

08009660 <_dtoa_r>:
 8009660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009664:	ed2d 8b04 	vpush	{d8-d9}
 8009668:	ec57 6b10 	vmov	r6, r7, d0
 800966c:	b093      	sub	sp, #76	; 0x4c
 800966e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009670:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009674:	9106      	str	r1, [sp, #24]
 8009676:	ee10 aa10 	vmov	sl, s0
 800967a:	4604      	mov	r4, r0
 800967c:	9209      	str	r2, [sp, #36]	; 0x24
 800967e:	930c      	str	r3, [sp, #48]	; 0x30
 8009680:	46bb      	mov	fp, r7
 8009682:	b975      	cbnz	r5, 80096a2 <_dtoa_r+0x42>
 8009684:	2010      	movs	r0, #16
 8009686:	f000 fddd 	bl	800a244 <malloc>
 800968a:	4602      	mov	r2, r0
 800968c:	6260      	str	r0, [r4, #36]	; 0x24
 800968e:	b920      	cbnz	r0, 800969a <_dtoa_r+0x3a>
 8009690:	4ba7      	ldr	r3, [pc, #668]	; (8009930 <_dtoa_r+0x2d0>)
 8009692:	21ea      	movs	r1, #234	; 0xea
 8009694:	48a7      	ldr	r0, [pc, #668]	; (8009934 <_dtoa_r+0x2d4>)
 8009696:	f001 fbc3 	bl	800ae20 <__assert_func>
 800969a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800969e:	6005      	str	r5, [r0, #0]
 80096a0:	60c5      	str	r5, [r0, #12]
 80096a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096a4:	6819      	ldr	r1, [r3, #0]
 80096a6:	b151      	cbz	r1, 80096be <_dtoa_r+0x5e>
 80096a8:	685a      	ldr	r2, [r3, #4]
 80096aa:	604a      	str	r2, [r1, #4]
 80096ac:	2301      	movs	r3, #1
 80096ae:	4093      	lsls	r3, r2
 80096b0:	608b      	str	r3, [r1, #8]
 80096b2:	4620      	mov	r0, r4
 80096b4:	f000 fe0e 	bl	800a2d4 <_Bfree>
 80096b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096ba:	2200      	movs	r2, #0
 80096bc:	601a      	str	r2, [r3, #0]
 80096be:	1e3b      	subs	r3, r7, #0
 80096c0:	bfaa      	itet	ge
 80096c2:	2300      	movge	r3, #0
 80096c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80096c8:	f8c8 3000 	strge.w	r3, [r8]
 80096cc:	4b9a      	ldr	r3, [pc, #616]	; (8009938 <_dtoa_r+0x2d8>)
 80096ce:	bfbc      	itt	lt
 80096d0:	2201      	movlt	r2, #1
 80096d2:	f8c8 2000 	strlt.w	r2, [r8]
 80096d6:	ea33 030b 	bics.w	r3, r3, fp
 80096da:	d11b      	bne.n	8009714 <_dtoa_r+0xb4>
 80096dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096de:	f242 730f 	movw	r3, #9999	; 0x270f
 80096e2:	6013      	str	r3, [r2, #0]
 80096e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096e8:	4333      	orrs	r3, r6
 80096ea:	f000 8592 	beq.w	800a212 <_dtoa_r+0xbb2>
 80096ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096f0:	b963      	cbnz	r3, 800970c <_dtoa_r+0xac>
 80096f2:	4b92      	ldr	r3, [pc, #584]	; (800993c <_dtoa_r+0x2dc>)
 80096f4:	e022      	b.n	800973c <_dtoa_r+0xdc>
 80096f6:	4b92      	ldr	r3, [pc, #584]	; (8009940 <_dtoa_r+0x2e0>)
 80096f8:	9301      	str	r3, [sp, #4]
 80096fa:	3308      	adds	r3, #8
 80096fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80096fe:	6013      	str	r3, [r2, #0]
 8009700:	9801      	ldr	r0, [sp, #4]
 8009702:	b013      	add	sp, #76	; 0x4c
 8009704:	ecbd 8b04 	vpop	{d8-d9}
 8009708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800970c:	4b8b      	ldr	r3, [pc, #556]	; (800993c <_dtoa_r+0x2dc>)
 800970e:	9301      	str	r3, [sp, #4]
 8009710:	3303      	adds	r3, #3
 8009712:	e7f3      	b.n	80096fc <_dtoa_r+0x9c>
 8009714:	2200      	movs	r2, #0
 8009716:	2300      	movs	r3, #0
 8009718:	4650      	mov	r0, sl
 800971a:	4659      	mov	r1, fp
 800971c:	f7f7 f9dc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009720:	ec4b ab19 	vmov	d9, sl, fp
 8009724:	4680      	mov	r8, r0
 8009726:	b158      	cbz	r0, 8009740 <_dtoa_r+0xe0>
 8009728:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800972a:	2301      	movs	r3, #1
 800972c:	6013      	str	r3, [r2, #0]
 800972e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 856b 	beq.w	800a20c <_dtoa_r+0xbac>
 8009736:	4883      	ldr	r0, [pc, #524]	; (8009944 <_dtoa_r+0x2e4>)
 8009738:	6018      	str	r0, [r3, #0]
 800973a:	1e43      	subs	r3, r0, #1
 800973c:	9301      	str	r3, [sp, #4]
 800973e:	e7df      	b.n	8009700 <_dtoa_r+0xa0>
 8009740:	ec4b ab10 	vmov	d0, sl, fp
 8009744:	aa10      	add	r2, sp, #64	; 0x40
 8009746:	a911      	add	r1, sp, #68	; 0x44
 8009748:	4620      	mov	r0, r4
 800974a:	f001 f8ab 	bl	800a8a4 <__d2b>
 800974e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009752:	ee08 0a10 	vmov	s16, r0
 8009756:	2d00      	cmp	r5, #0
 8009758:	f000 8084 	beq.w	8009864 <_dtoa_r+0x204>
 800975c:	ee19 3a90 	vmov	r3, s19
 8009760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009764:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009768:	4656      	mov	r6, sl
 800976a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800976e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009772:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009776:	4b74      	ldr	r3, [pc, #464]	; (8009948 <_dtoa_r+0x2e8>)
 8009778:	2200      	movs	r2, #0
 800977a:	4630      	mov	r0, r6
 800977c:	4639      	mov	r1, r7
 800977e:	f7f6 fd8b 	bl	8000298 <__aeabi_dsub>
 8009782:	a365      	add	r3, pc, #404	; (adr r3, 8009918 <_dtoa_r+0x2b8>)
 8009784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009788:	f7f6 ff3e 	bl	8000608 <__aeabi_dmul>
 800978c:	a364      	add	r3, pc, #400	; (adr r3, 8009920 <_dtoa_r+0x2c0>)
 800978e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009792:	f7f6 fd83 	bl	800029c <__adddf3>
 8009796:	4606      	mov	r6, r0
 8009798:	4628      	mov	r0, r5
 800979a:	460f      	mov	r7, r1
 800979c:	f7f6 feca 	bl	8000534 <__aeabi_i2d>
 80097a0:	a361      	add	r3, pc, #388	; (adr r3, 8009928 <_dtoa_r+0x2c8>)
 80097a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a6:	f7f6 ff2f 	bl	8000608 <__aeabi_dmul>
 80097aa:	4602      	mov	r2, r0
 80097ac:	460b      	mov	r3, r1
 80097ae:	4630      	mov	r0, r6
 80097b0:	4639      	mov	r1, r7
 80097b2:	f7f6 fd73 	bl	800029c <__adddf3>
 80097b6:	4606      	mov	r6, r0
 80097b8:	460f      	mov	r7, r1
 80097ba:	f7f7 f9d5 	bl	8000b68 <__aeabi_d2iz>
 80097be:	2200      	movs	r2, #0
 80097c0:	9000      	str	r0, [sp, #0]
 80097c2:	2300      	movs	r3, #0
 80097c4:	4630      	mov	r0, r6
 80097c6:	4639      	mov	r1, r7
 80097c8:	f7f7 f990 	bl	8000aec <__aeabi_dcmplt>
 80097cc:	b150      	cbz	r0, 80097e4 <_dtoa_r+0x184>
 80097ce:	9800      	ldr	r0, [sp, #0]
 80097d0:	f7f6 feb0 	bl	8000534 <__aeabi_i2d>
 80097d4:	4632      	mov	r2, r6
 80097d6:	463b      	mov	r3, r7
 80097d8:	f7f7 f97e 	bl	8000ad8 <__aeabi_dcmpeq>
 80097dc:	b910      	cbnz	r0, 80097e4 <_dtoa_r+0x184>
 80097de:	9b00      	ldr	r3, [sp, #0]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	9300      	str	r3, [sp, #0]
 80097e4:	9b00      	ldr	r3, [sp, #0]
 80097e6:	2b16      	cmp	r3, #22
 80097e8:	d85a      	bhi.n	80098a0 <_dtoa_r+0x240>
 80097ea:	9a00      	ldr	r2, [sp, #0]
 80097ec:	4b57      	ldr	r3, [pc, #348]	; (800994c <_dtoa_r+0x2ec>)
 80097ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f6:	ec51 0b19 	vmov	r0, r1, d9
 80097fa:	f7f7 f977 	bl	8000aec <__aeabi_dcmplt>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d050      	beq.n	80098a4 <_dtoa_r+0x244>
 8009802:	9b00      	ldr	r3, [sp, #0]
 8009804:	3b01      	subs	r3, #1
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	2300      	movs	r3, #0
 800980a:	930b      	str	r3, [sp, #44]	; 0x2c
 800980c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800980e:	1b5d      	subs	r5, r3, r5
 8009810:	1e6b      	subs	r3, r5, #1
 8009812:	9305      	str	r3, [sp, #20]
 8009814:	bf45      	ittet	mi
 8009816:	f1c5 0301 	rsbmi	r3, r5, #1
 800981a:	9304      	strmi	r3, [sp, #16]
 800981c:	2300      	movpl	r3, #0
 800981e:	2300      	movmi	r3, #0
 8009820:	bf4c      	ite	mi
 8009822:	9305      	strmi	r3, [sp, #20]
 8009824:	9304      	strpl	r3, [sp, #16]
 8009826:	9b00      	ldr	r3, [sp, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	db3d      	blt.n	80098a8 <_dtoa_r+0x248>
 800982c:	9b05      	ldr	r3, [sp, #20]
 800982e:	9a00      	ldr	r2, [sp, #0]
 8009830:	920a      	str	r2, [sp, #40]	; 0x28
 8009832:	4413      	add	r3, r2
 8009834:	9305      	str	r3, [sp, #20]
 8009836:	2300      	movs	r3, #0
 8009838:	9307      	str	r3, [sp, #28]
 800983a:	9b06      	ldr	r3, [sp, #24]
 800983c:	2b09      	cmp	r3, #9
 800983e:	f200 8089 	bhi.w	8009954 <_dtoa_r+0x2f4>
 8009842:	2b05      	cmp	r3, #5
 8009844:	bfc4      	itt	gt
 8009846:	3b04      	subgt	r3, #4
 8009848:	9306      	strgt	r3, [sp, #24]
 800984a:	9b06      	ldr	r3, [sp, #24]
 800984c:	f1a3 0302 	sub.w	r3, r3, #2
 8009850:	bfcc      	ite	gt
 8009852:	2500      	movgt	r5, #0
 8009854:	2501      	movle	r5, #1
 8009856:	2b03      	cmp	r3, #3
 8009858:	f200 8087 	bhi.w	800996a <_dtoa_r+0x30a>
 800985c:	e8df f003 	tbb	[pc, r3]
 8009860:	59383a2d 	.word	0x59383a2d
 8009864:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009868:	441d      	add	r5, r3
 800986a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800986e:	2b20      	cmp	r3, #32
 8009870:	bfc1      	itttt	gt
 8009872:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009876:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800987a:	fa0b f303 	lslgt.w	r3, fp, r3
 800987e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009882:	bfda      	itte	le
 8009884:	f1c3 0320 	rsble	r3, r3, #32
 8009888:	fa06 f003 	lslle.w	r0, r6, r3
 800988c:	4318      	orrgt	r0, r3
 800988e:	f7f6 fe41 	bl	8000514 <__aeabi_ui2d>
 8009892:	2301      	movs	r3, #1
 8009894:	4606      	mov	r6, r0
 8009896:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800989a:	3d01      	subs	r5, #1
 800989c:	930e      	str	r3, [sp, #56]	; 0x38
 800989e:	e76a      	b.n	8009776 <_dtoa_r+0x116>
 80098a0:	2301      	movs	r3, #1
 80098a2:	e7b2      	b.n	800980a <_dtoa_r+0x1aa>
 80098a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80098a6:	e7b1      	b.n	800980c <_dtoa_r+0x1ac>
 80098a8:	9b04      	ldr	r3, [sp, #16]
 80098aa:	9a00      	ldr	r2, [sp, #0]
 80098ac:	1a9b      	subs	r3, r3, r2
 80098ae:	9304      	str	r3, [sp, #16]
 80098b0:	4253      	negs	r3, r2
 80098b2:	9307      	str	r3, [sp, #28]
 80098b4:	2300      	movs	r3, #0
 80098b6:	930a      	str	r3, [sp, #40]	; 0x28
 80098b8:	e7bf      	b.n	800983a <_dtoa_r+0x1da>
 80098ba:	2300      	movs	r3, #0
 80098bc:	9308      	str	r3, [sp, #32]
 80098be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	dc55      	bgt.n	8009970 <_dtoa_r+0x310>
 80098c4:	2301      	movs	r3, #1
 80098c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098ca:	461a      	mov	r2, r3
 80098cc:	9209      	str	r2, [sp, #36]	; 0x24
 80098ce:	e00c      	b.n	80098ea <_dtoa_r+0x28a>
 80098d0:	2301      	movs	r3, #1
 80098d2:	e7f3      	b.n	80098bc <_dtoa_r+0x25c>
 80098d4:	2300      	movs	r3, #0
 80098d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098d8:	9308      	str	r3, [sp, #32]
 80098da:	9b00      	ldr	r3, [sp, #0]
 80098dc:	4413      	add	r3, r2
 80098de:	9302      	str	r3, [sp, #8]
 80098e0:	3301      	adds	r3, #1
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	9303      	str	r3, [sp, #12]
 80098e6:	bfb8      	it	lt
 80098e8:	2301      	movlt	r3, #1
 80098ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80098ec:	2200      	movs	r2, #0
 80098ee:	6042      	str	r2, [r0, #4]
 80098f0:	2204      	movs	r2, #4
 80098f2:	f102 0614 	add.w	r6, r2, #20
 80098f6:	429e      	cmp	r6, r3
 80098f8:	6841      	ldr	r1, [r0, #4]
 80098fa:	d93d      	bls.n	8009978 <_dtoa_r+0x318>
 80098fc:	4620      	mov	r0, r4
 80098fe:	f000 fca9 	bl	800a254 <_Balloc>
 8009902:	9001      	str	r0, [sp, #4]
 8009904:	2800      	cmp	r0, #0
 8009906:	d13b      	bne.n	8009980 <_dtoa_r+0x320>
 8009908:	4b11      	ldr	r3, [pc, #68]	; (8009950 <_dtoa_r+0x2f0>)
 800990a:	4602      	mov	r2, r0
 800990c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009910:	e6c0      	b.n	8009694 <_dtoa_r+0x34>
 8009912:	2301      	movs	r3, #1
 8009914:	e7df      	b.n	80098d6 <_dtoa_r+0x276>
 8009916:	bf00      	nop
 8009918:	636f4361 	.word	0x636f4361
 800991c:	3fd287a7 	.word	0x3fd287a7
 8009920:	8b60c8b3 	.word	0x8b60c8b3
 8009924:	3fc68a28 	.word	0x3fc68a28
 8009928:	509f79fb 	.word	0x509f79fb
 800992c:	3fd34413 	.word	0x3fd34413
 8009930:	0800c9d2 	.word	0x0800c9d2
 8009934:	0800c9e9 	.word	0x0800c9e9
 8009938:	7ff00000 	.word	0x7ff00000
 800993c:	0800c9ce 	.word	0x0800c9ce
 8009940:	0800c9c5 	.word	0x0800c9c5
 8009944:	0800c8a1 	.word	0x0800c8a1
 8009948:	3ff80000 	.word	0x3ff80000
 800994c:	0800cae0 	.word	0x0800cae0
 8009950:	0800ca44 	.word	0x0800ca44
 8009954:	2501      	movs	r5, #1
 8009956:	2300      	movs	r3, #0
 8009958:	9306      	str	r3, [sp, #24]
 800995a:	9508      	str	r5, [sp, #32]
 800995c:	f04f 33ff 	mov.w	r3, #4294967295
 8009960:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009964:	2200      	movs	r2, #0
 8009966:	2312      	movs	r3, #18
 8009968:	e7b0      	b.n	80098cc <_dtoa_r+0x26c>
 800996a:	2301      	movs	r3, #1
 800996c:	9308      	str	r3, [sp, #32]
 800996e:	e7f5      	b.n	800995c <_dtoa_r+0x2fc>
 8009970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009972:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009976:	e7b8      	b.n	80098ea <_dtoa_r+0x28a>
 8009978:	3101      	adds	r1, #1
 800997a:	6041      	str	r1, [r0, #4]
 800997c:	0052      	lsls	r2, r2, #1
 800997e:	e7b8      	b.n	80098f2 <_dtoa_r+0x292>
 8009980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009982:	9a01      	ldr	r2, [sp, #4]
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	9b03      	ldr	r3, [sp, #12]
 8009988:	2b0e      	cmp	r3, #14
 800998a:	f200 809d 	bhi.w	8009ac8 <_dtoa_r+0x468>
 800998e:	2d00      	cmp	r5, #0
 8009990:	f000 809a 	beq.w	8009ac8 <_dtoa_r+0x468>
 8009994:	9b00      	ldr	r3, [sp, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	dd32      	ble.n	8009a00 <_dtoa_r+0x3a0>
 800999a:	4ab7      	ldr	r2, [pc, #732]	; (8009c78 <_dtoa_r+0x618>)
 800999c:	f003 030f 	and.w	r3, r3, #15
 80099a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80099a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099a8:	9b00      	ldr	r3, [sp, #0]
 80099aa:	05d8      	lsls	r0, r3, #23
 80099ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80099b0:	d516      	bpl.n	80099e0 <_dtoa_r+0x380>
 80099b2:	4bb2      	ldr	r3, [pc, #712]	; (8009c7c <_dtoa_r+0x61c>)
 80099b4:	ec51 0b19 	vmov	r0, r1, d9
 80099b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099bc:	f7f6 ff4e 	bl	800085c <__aeabi_ddiv>
 80099c0:	f007 070f 	and.w	r7, r7, #15
 80099c4:	4682      	mov	sl, r0
 80099c6:	468b      	mov	fp, r1
 80099c8:	2503      	movs	r5, #3
 80099ca:	4eac      	ldr	r6, [pc, #688]	; (8009c7c <_dtoa_r+0x61c>)
 80099cc:	b957      	cbnz	r7, 80099e4 <_dtoa_r+0x384>
 80099ce:	4642      	mov	r2, r8
 80099d0:	464b      	mov	r3, r9
 80099d2:	4650      	mov	r0, sl
 80099d4:	4659      	mov	r1, fp
 80099d6:	f7f6 ff41 	bl	800085c <__aeabi_ddiv>
 80099da:	4682      	mov	sl, r0
 80099dc:	468b      	mov	fp, r1
 80099de:	e028      	b.n	8009a32 <_dtoa_r+0x3d2>
 80099e0:	2502      	movs	r5, #2
 80099e2:	e7f2      	b.n	80099ca <_dtoa_r+0x36a>
 80099e4:	07f9      	lsls	r1, r7, #31
 80099e6:	d508      	bpl.n	80099fa <_dtoa_r+0x39a>
 80099e8:	4640      	mov	r0, r8
 80099ea:	4649      	mov	r1, r9
 80099ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80099f0:	f7f6 fe0a 	bl	8000608 <__aeabi_dmul>
 80099f4:	3501      	adds	r5, #1
 80099f6:	4680      	mov	r8, r0
 80099f8:	4689      	mov	r9, r1
 80099fa:	107f      	asrs	r7, r7, #1
 80099fc:	3608      	adds	r6, #8
 80099fe:	e7e5      	b.n	80099cc <_dtoa_r+0x36c>
 8009a00:	f000 809b 	beq.w	8009b3a <_dtoa_r+0x4da>
 8009a04:	9b00      	ldr	r3, [sp, #0]
 8009a06:	4f9d      	ldr	r7, [pc, #628]	; (8009c7c <_dtoa_r+0x61c>)
 8009a08:	425e      	negs	r6, r3
 8009a0a:	4b9b      	ldr	r3, [pc, #620]	; (8009c78 <_dtoa_r+0x618>)
 8009a0c:	f006 020f 	and.w	r2, r6, #15
 8009a10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a18:	ec51 0b19 	vmov	r0, r1, d9
 8009a1c:	f7f6 fdf4 	bl	8000608 <__aeabi_dmul>
 8009a20:	1136      	asrs	r6, r6, #4
 8009a22:	4682      	mov	sl, r0
 8009a24:	468b      	mov	fp, r1
 8009a26:	2300      	movs	r3, #0
 8009a28:	2502      	movs	r5, #2
 8009a2a:	2e00      	cmp	r6, #0
 8009a2c:	d17a      	bne.n	8009b24 <_dtoa_r+0x4c4>
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1d3      	bne.n	80099da <_dtoa_r+0x37a>
 8009a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 8082 	beq.w	8009b3e <_dtoa_r+0x4de>
 8009a3a:	4b91      	ldr	r3, [pc, #580]	; (8009c80 <_dtoa_r+0x620>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	4650      	mov	r0, sl
 8009a40:	4659      	mov	r1, fp
 8009a42:	f7f7 f853 	bl	8000aec <__aeabi_dcmplt>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d079      	beq.n	8009b3e <_dtoa_r+0x4de>
 8009a4a:	9b03      	ldr	r3, [sp, #12]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d076      	beq.n	8009b3e <_dtoa_r+0x4de>
 8009a50:	9b02      	ldr	r3, [sp, #8]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	dd36      	ble.n	8009ac4 <_dtoa_r+0x464>
 8009a56:	9b00      	ldr	r3, [sp, #0]
 8009a58:	4650      	mov	r0, sl
 8009a5a:	4659      	mov	r1, fp
 8009a5c:	1e5f      	subs	r7, r3, #1
 8009a5e:	2200      	movs	r2, #0
 8009a60:	4b88      	ldr	r3, [pc, #544]	; (8009c84 <_dtoa_r+0x624>)
 8009a62:	f7f6 fdd1 	bl	8000608 <__aeabi_dmul>
 8009a66:	9e02      	ldr	r6, [sp, #8]
 8009a68:	4682      	mov	sl, r0
 8009a6a:	468b      	mov	fp, r1
 8009a6c:	3501      	adds	r5, #1
 8009a6e:	4628      	mov	r0, r5
 8009a70:	f7f6 fd60 	bl	8000534 <__aeabi_i2d>
 8009a74:	4652      	mov	r2, sl
 8009a76:	465b      	mov	r3, fp
 8009a78:	f7f6 fdc6 	bl	8000608 <__aeabi_dmul>
 8009a7c:	4b82      	ldr	r3, [pc, #520]	; (8009c88 <_dtoa_r+0x628>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f7f6 fc0c 	bl	800029c <__adddf3>
 8009a84:	46d0      	mov	r8, sl
 8009a86:	46d9      	mov	r9, fp
 8009a88:	4682      	mov	sl, r0
 8009a8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009a8e:	2e00      	cmp	r6, #0
 8009a90:	d158      	bne.n	8009b44 <_dtoa_r+0x4e4>
 8009a92:	4b7e      	ldr	r3, [pc, #504]	; (8009c8c <_dtoa_r+0x62c>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	4640      	mov	r0, r8
 8009a98:	4649      	mov	r1, r9
 8009a9a:	f7f6 fbfd 	bl	8000298 <__aeabi_dsub>
 8009a9e:	4652      	mov	r2, sl
 8009aa0:	465b      	mov	r3, fp
 8009aa2:	4680      	mov	r8, r0
 8009aa4:	4689      	mov	r9, r1
 8009aa6:	f7f7 f83f 	bl	8000b28 <__aeabi_dcmpgt>
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	f040 8295 	bne.w	8009fda <_dtoa_r+0x97a>
 8009ab0:	4652      	mov	r2, sl
 8009ab2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	4649      	mov	r1, r9
 8009aba:	f7f7 f817 	bl	8000aec <__aeabi_dcmplt>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	f040 8289 	bne.w	8009fd6 <_dtoa_r+0x976>
 8009ac4:	ec5b ab19 	vmov	sl, fp, d9
 8009ac8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f2c0 8148 	blt.w	8009d60 <_dtoa_r+0x700>
 8009ad0:	9a00      	ldr	r2, [sp, #0]
 8009ad2:	2a0e      	cmp	r2, #14
 8009ad4:	f300 8144 	bgt.w	8009d60 <_dtoa_r+0x700>
 8009ad8:	4b67      	ldr	r3, [pc, #412]	; (8009c78 <_dtoa_r+0x618>)
 8009ada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ade:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f280 80d5 	bge.w	8009c94 <_dtoa_r+0x634>
 8009aea:	9b03      	ldr	r3, [sp, #12]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f300 80d1 	bgt.w	8009c94 <_dtoa_r+0x634>
 8009af2:	f040 826f 	bne.w	8009fd4 <_dtoa_r+0x974>
 8009af6:	4b65      	ldr	r3, [pc, #404]	; (8009c8c <_dtoa_r+0x62c>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	4640      	mov	r0, r8
 8009afc:	4649      	mov	r1, r9
 8009afe:	f7f6 fd83 	bl	8000608 <__aeabi_dmul>
 8009b02:	4652      	mov	r2, sl
 8009b04:	465b      	mov	r3, fp
 8009b06:	f7f7 f805 	bl	8000b14 <__aeabi_dcmpge>
 8009b0a:	9e03      	ldr	r6, [sp, #12]
 8009b0c:	4637      	mov	r7, r6
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	f040 8245 	bne.w	8009f9e <_dtoa_r+0x93e>
 8009b14:	9d01      	ldr	r5, [sp, #4]
 8009b16:	2331      	movs	r3, #49	; 0x31
 8009b18:	f805 3b01 	strb.w	r3, [r5], #1
 8009b1c:	9b00      	ldr	r3, [sp, #0]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	e240      	b.n	8009fa6 <_dtoa_r+0x946>
 8009b24:	07f2      	lsls	r2, r6, #31
 8009b26:	d505      	bpl.n	8009b34 <_dtoa_r+0x4d4>
 8009b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b2c:	f7f6 fd6c 	bl	8000608 <__aeabi_dmul>
 8009b30:	3501      	adds	r5, #1
 8009b32:	2301      	movs	r3, #1
 8009b34:	1076      	asrs	r6, r6, #1
 8009b36:	3708      	adds	r7, #8
 8009b38:	e777      	b.n	8009a2a <_dtoa_r+0x3ca>
 8009b3a:	2502      	movs	r5, #2
 8009b3c:	e779      	b.n	8009a32 <_dtoa_r+0x3d2>
 8009b3e:	9f00      	ldr	r7, [sp, #0]
 8009b40:	9e03      	ldr	r6, [sp, #12]
 8009b42:	e794      	b.n	8009a6e <_dtoa_r+0x40e>
 8009b44:	9901      	ldr	r1, [sp, #4]
 8009b46:	4b4c      	ldr	r3, [pc, #304]	; (8009c78 <_dtoa_r+0x618>)
 8009b48:	4431      	add	r1, r6
 8009b4a:	910d      	str	r1, [sp, #52]	; 0x34
 8009b4c:	9908      	ldr	r1, [sp, #32]
 8009b4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b56:	2900      	cmp	r1, #0
 8009b58:	d043      	beq.n	8009be2 <_dtoa_r+0x582>
 8009b5a:	494d      	ldr	r1, [pc, #308]	; (8009c90 <_dtoa_r+0x630>)
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	f7f6 fe7d 	bl	800085c <__aeabi_ddiv>
 8009b62:	4652      	mov	r2, sl
 8009b64:	465b      	mov	r3, fp
 8009b66:	f7f6 fb97 	bl	8000298 <__aeabi_dsub>
 8009b6a:	9d01      	ldr	r5, [sp, #4]
 8009b6c:	4682      	mov	sl, r0
 8009b6e:	468b      	mov	fp, r1
 8009b70:	4649      	mov	r1, r9
 8009b72:	4640      	mov	r0, r8
 8009b74:	f7f6 fff8 	bl	8000b68 <__aeabi_d2iz>
 8009b78:	4606      	mov	r6, r0
 8009b7a:	f7f6 fcdb 	bl	8000534 <__aeabi_i2d>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	460b      	mov	r3, r1
 8009b82:	4640      	mov	r0, r8
 8009b84:	4649      	mov	r1, r9
 8009b86:	f7f6 fb87 	bl	8000298 <__aeabi_dsub>
 8009b8a:	3630      	adds	r6, #48	; 0x30
 8009b8c:	f805 6b01 	strb.w	r6, [r5], #1
 8009b90:	4652      	mov	r2, sl
 8009b92:	465b      	mov	r3, fp
 8009b94:	4680      	mov	r8, r0
 8009b96:	4689      	mov	r9, r1
 8009b98:	f7f6 ffa8 	bl	8000aec <__aeabi_dcmplt>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	d163      	bne.n	8009c68 <_dtoa_r+0x608>
 8009ba0:	4642      	mov	r2, r8
 8009ba2:	464b      	mov	r3, r9
 8009ba4:	4936      	ldr	r1, [pc, #216]	; (8009c80 <_dtoa_r+0x620>)
 8009ba6:	2000      	movs	r0, #0
 8009ba8:	f7f6 fb76 	bl	8000298 <__aeabi_dsub>
 8009bac:	4652      	mov	r2, sl
 8009bae:	465b      	mov	r3, fp
 8009bb0:	f7f6 ff9c 	bl	8000aec <__aeabi_dcmplt>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	f040 80b5 	bne.w	8009d24 <_dtoa_r+0x6c4>
 8009bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bbc:	429d      	cmp	r5, r3
 8009bbe:	d081      	beq.n	8009ac4 <_dtoa_r+0x464>
 8009bc0:	4b30      	ldr	r3, [pc, #192]	; (8009c84 <_dtoa_r+0x624>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	4650      	mov	r0, sl
 8009bc6:	4659      	mov	r1, fp
 8009bc8:	f7f6 fd1e 	bl	8000608 <__aeabi_dmul>
 8009bcc:	4b2d      	ldr	r3, [pc, #180]	; (8009c84 <_dtoa_r+0x624>)
 8009bce:	4682      	mov	sl, r0
 8009bd0:	468b      	mov	fp, r1
 8009bd2:	4640      	mov	r0, r8
 8009bd4:	4649      	mov	r1, r9
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f7f6 fd16 	bl	8000608 <__aeabi_dmul>
 8009bdc:	4680      	mov	r8, r0
 8009bde:	4689      	mov	r9, r1
 8009be0:	e7c6      	b.n	8009b70 <_dtoa_r+0x510>
 8009be2:	4650      	mov	r0, sl
 8009be4:	4659      	mov	r1, fp
 8009be6:	f7f6 fd0f 	bl	8000608 <__aeabi_dmul>
 8009bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bec:	9d01      	ldr	r5, [sp, #4]
 8009bee:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bf0:	4682      	mov	sl, r0
 8009bf2:	468b      	mov	fp, r1
 8009bf4:	4649      	mov	r1, r9
 8009bf6:	4640      	mov	r0, r8
 8009bf8:	f7f6 ffb6 	bl	8000b68 <__aeabi_d2iz>
 8009bfc:	4606      	mov	r6, r0
 8009bfe:	f7f6 fc99 	bl	8000534 <__aeabi_i2d>
 8009c02:	3630      	adds	r6, #48	; 0x30
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	4640      	mov	r0, r8
 8009c0a:	4649      	mov	r1, r9
 8009c0c:	f7f6 fb44 	bl	8000298 <__aeabi_dsub>
 8009c10:	f805 6b01 	strb.w	r6, [r5], #1
 8009c14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c16:	429d      	cmp	r5, r3
 8009c18:	4680      	mov	r8, r0
 8009c1a:	4689      	mov	r9, r1
 8009c1c:	f04f 0200 	mov.w	r2, #0
 8009c20:	d124      	bne.n	8009c6c <_dtoa_r+0x60c>
 8009c22:	4b1b      	ldr	r3, [pc, #108]	; (8009c90 <_dtoa_r+0x630>)
 8009c24:	4650      	mov	r0, sl
 8009c26:	4659      	mov	r1, fp
 8009c28:	f7f6 fb38 	bl	800029c <__adddf3>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	4640      	mov	r0, r8
 8009c32:	4649      	mov	r1, r9
 8009c34:	f7f6 ff78 	bl	8000b28 <__aeabi_dcmpgt>
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d173      	bne.n	8009d24 <_dtoa_r+0x6c4>
 8009c3c:	4652      	mov	r2, sl
 8009c3e:	465b      	mov	r3, fp
 8009c40:	4913      	ldr	r1, [pc, #76]	; (8009c90 <_dtoa_r+0x630>)
 8009c42:	2000      	movs	r0, #0
 8009c44:	f7f6 fb28 	bl	8000298 <__aeabi_dsub>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	4640      	mov	r0, r8
 8009c4e:	4649      	mov	r1, r9
 8009c50:	f7f6 ff4c 	bl	8000aec <__aeabi_dcmplt>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	f43f af35 	beq.w	8009ac4 <_dtoa_r+0x464>
 8009c5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009c5c:	1e6b      	subs	r3, r5, #1
 8009c5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c64:	2b30      	cmp	r3, #48	; 0x30
 8009c66:	d0f8      	beq.n	8009c5a <_dtoa_r+0x5fa>
 8009c68:	9700      	str	r7, [sp, #0]
 8009c6a:	e049      	b.n	8009d00 <_dtoa_r+0x6a0>
 8009c6c:	4b05      	ldr	r3, [pc, #20]	; (8009c84 <_dtoa_r+0x624>)
 8009c6e:	f7f6 fccb 	bl	8000608 <__aeabi_dmul>
 8009c72:	4680      	mov	r8, r0
 8009c74:	4689      	mov	r9, r1
 8009c76:	e7bd      	b.n	8009bf4 <_dtoa_r+0x594>
 8009c78:	0800cae0 	.word	0x0800cae0
 8009c7c:	0800cab8 	.word	0x0800cab8
 8009c80:	3ff00000 	.word	0x3ff00000
 8009c84:	40240000 	.word	0x40240000
 8009c88:	401c0000 	.word	0x401c0000
 8009c8c:	40140000 	.word	0x40140000
 8009c90:	3fe00000 	.word	0x3fe00000
 8009c94:	9d01      	ldr	r5, [sp, #4]
 8009c96:	4656      	mov	r6, sl
 8009c98:	465f      	mov	r7, fp
 8009c9a:	4642      	mov	r2, r8
 8009c9c:	464b      	mov	r3, r9
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	4639      	mov	r1, r7
 8009ca2:	f7f6 fddb 	bl	800085c <__aeabi_ddiv>
 8009ca6:	f7f6 ff5f 	bl	8000b68 <__aeabi_d2iz>
 8009caa:	4682      	mov	sl, r0
 8009cac:	f7f6 fc42 	bl	8000534 <__aeabi_i2d>
 8009cb0:	4642      	mov	r2, r8
 8009cb2:	464b      	mov	r3, r9
 8009cb4:	f7f6 fca8 	bl	8000608 <__aeabi_dmul>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	460b      	mov	r3, r1
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	4639      	mov	r1, r7
 8009cc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009cc4:	f7f6 fae8 	bl	8000298 <__aeabi_dsub>
 8009cc8:	f805 6b01 	strb.w	r6, [r5], #1
 8009ccc:	9e01      	ldr	r6, [sp, #4]
 8009cce:	9f03      	ldr	r7, [sp, #12]
 8009cd0:	1bae      	subs	r6, r5, r6
 8009cd2:	42b7      	cmp	r7, r6
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	d135      	bne.n	8009d46 <_dtoa_r+0x6e6>
 8009cda:	f7f6 fadf 	bl	800029c <__adddf3>
 8009cde:	4642      	mov	r2, r8
 8009ce0:	464b      	mov	r3, r9
 8009ce2:	4606      	mov	r6, r0
 8009ce4:	460f      	mov	r7, r1
 8009ce6:	f7f6 ff1f 	bl	8000b28 <__aeabi_dcmpgt>
 8009cea:	b9d0      	cbnz	r0, 8009d22 <_dtoa_r+0x6c2>
 8009cec:	4642      	mov	r2, r8
 8009cee:	464b      	mov	r3, r9
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	4639      	mov	r1, r7
 8009cf4:	f7f6 fef0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009cf8:	b110      	cbz	r0, 8009d00 <_dtoa_r+0x6a0>
 8009cfa:	f01a 0f01 	tst.w	sl, #1
 8009cfe:	d110      	bne.n	8009d22 <_dtoa_r+0x6c2>
 8009d00:	4620      	mov	r0, r4
 8009d02:	ee18 1a10 	vmov	r1, s16
 8009d06:	f000 fae5 	bl	800a2d4 <_Bfree>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	9800      	ldr	r0, [sp, #0]
 8009d0e:	702b      	strb	r3, [r5, #0]
 8009d10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d12:	3001      	adds	r0, #1
 8009d14:	6018      	str	r0, [r3, #0]
 8009d16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f43f acf1 	beq.w	8009700 <_dtoa_r+0xa0>
 8009d1e:	601d      	str	r5, [r3, #0]
 8009d20:	e4ee      	b.n	8009700 <_dtoa_r+0xa0>
 8009d22:	9f00      	ldr	r7, [sp, #0]
 8009d24:	462b      	mov	r3, r5
 8009d26:	461d      	mov	r5, r3
 8009d28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d2c:	2a39      	cmp	r2, #57	; 0x39
 8009d2e:	d106      	bne.n	8009d3e <_dtoa_r+0x6de>
 8009d30:	9a01      	ldr	r2, [sp, #4]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d1f7      	bne.n	8009d26 <_dtoa_r+0x6c6>
 8009d36:	9901      	ldr	r1, [sp, #4]
 8009d38:	2230      	movs	r2, #48	; 0x30
 8009d3a:	3701      	adds	r7, #1
 8009d3c:	700a      	strb	r2, [r1, #0]
 8009d3e:	781a      	ldrb	r2, [r3, #0]
 8009d40:	3201      	adds	r2, #1
 8009d42:	701a      	strb	r2, [r3, #0]
 8009d44:	e790      	b.n	8009c68 <_dtoa_r+0x608>
 8009d46:	4ba6      	ldr	r3, [pc, #664]	; (8009fe0 <_dtoa_r+0x980>)
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f7f6 fc5d 	bl	8000608 <__aeabi_dmul>
 8009d4e:	2200      	movs	r2, #0
 8009d50:	2300      	movs	r3, #0
 8009d52:	4606      	mov	r6, r0
 8009d54:	460f      	mov	r7, r1
 8009d56:	f7f6 febf 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d09d      	beq.n	8009c9a <_dtoa_r+0x63a>
 8009d5e:	e7cf      	b.n	8009d00 <_dtoa_r+0x6a0>
 8009d60:	9a08      	ldr	r2, [sp, #32]
 8009d62:	2a00      	cmp	r2, #0
 8009d64:	f000 80d7 	beq.w	8009f16 <_dtoa_r+0x8b6>
 8009d68:	9a06      	ldr	r2, [sp, #24]
 8009d6a:	2a01      	cmp	r2, #1
 8009d6c:	f300 80ba 	bgt.w	8009ee4 <_dtoa_r+0x884>
 8009d70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d72:	2a00      	cmp	r2, #0
 8009d74:	f000 80b2 	beq.w	8009edc <_dtoa_r+0x87c>
 8009d78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d7c:	9e07      	ldr	r6, [sp, #28]
 8009d7e:	9d04      	ldr	r5, [sp, #16]
 8009d80:	9a04      	ldr	r2, [sp, #16]
 8009d82:	441a      	add	r2, r3
 8009d84:	9204      	str	r2, [sp, #16]
 8009d86:	9a05      	ldr	r2, [sp, #20]
 8009d88:	2101      	movs	r1, #1
 8009d8a:	441a      	add	r2, r3
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	9205      	str	r2, [sp, #20]
 8009d90:	f000 fb58 	bl	800a444 <__i2b>
 8009d94:	4607      	mov	r7, r0
 8009d96:	2d00      	cmp	r5, #0
 8009d98:	dd0c      	ble.n	8009db4 <_dtoa_r+0x754>
 8009d9a:	9b05      	ldr	r3, [sp, #20]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	dd09      	ble.n	8009db4 <_dtoa_r+0x754>
 8009da0:	42ab      	cmp	r3, r5
 8009da2:	9a04      	ldr	r2, [sp, #16]
 8009da4:	bfa8      	it	ge
 8009da6:	462b      	movge	r3, r5
 8009da8:	1ad2      	subs	r2, r2, r3
 8009daa:	9204      	str	r2, [sp, #16]
 8009dac:	9a05      	ldr	r2, [sp, #20]
 8009dae:	1aed      	subs	r5, r5, r3
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	9305      	str	r3, [sp, #20]
 8009db4:	9b07      	ldr	r3, [sp, #28]
 8009db6:	b31b      	cbz	r3, 8009e00 <_dtoa_r+0x7a0>
 8009db8:	9b08      	ldr	r3, [sp, #32]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f000 80af 	beq.w	8009f1e <_dtoa_r+0x8be>
 8009dc0:	2e00      	cmp	r6, #0
 8009dc2:	dd13      	ble.n	8009dec <_dtoa_r+0x78c>
 8009dc4:	4639      	mov	r1, r7
 8009dc6:	4632      	mov	r2, r6
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f000 fbfb 	bl	800a5c4 <__pow5mult>
 8009dce:	ee18 2a10 	vmov	r2, s16
 8009dd2:	4601      	mov	r1, r0
 8009dd4:	4607      	mov	r7, r0
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f000 fb4a 	bl	800a470 <__multiply>
 8009ddc:	ee18 1a10 	vmov	r1, s16
 8009de0:	4680      	mov	r8, r0
 8009de2:	4620      	mov	r0, r4
 8009de4:	f000 fa76 	bl	800a2d4 <_Bfree>
 8009de8:	ee08 8a10 	vmov	s16, r8
 8009dec:	9b07      	ldr	r3, [sp, #28]
 8009dee:	1b9a      	subs	r2, r3, r6
 8009df0:	d006      	beq.n	8009e00 <_dtoa_r+0x7a0>
 8009df2:	ee18 1a10 	vmov	r1, s16
 8009df6:	4620      	mov	r0, r4
 8009df8:	f000 fbe4 	bl	800a5c4 <__pow5mult>
 8009dfc:	ee08 0a10 	vmov	s16, r0
 8009e00:	2101      	movs	r1, #1
 8009e02:	4620      	mov	r0, r4
 8009e04:	f000 fb1e 	bl	800a444 <__i2b>
 8009e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	4606      	mov	r6, r0
 8009e0e:	f340 8088 	ble.w	8009f22 <_dtoa_r+0x8c2>
 8009e12:	461a      	mov	r2, r3
 8009e14:	4601      	mov	r1, r0
 8009e16:	4620      	mov	r0, r4
 8009e18:	f000 fbd4 	bl	800a5c4 <__pow5mult>
 8009e1c:	9b06      	ldr	r3, [sp, #24]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	4606      	mov	r6, r0
 8009e22:	f340 8081 	ble.w	8009f28 <_dtoa_r+0x8c8>
 8009e26:	f04f 0800 	mov.w	r8, #0
 8009e2a:	6933      	ldr	r3, [r6, #16]
 8009e2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009e30:	6918      	ldr	r0, [r3, #16]
 8009e32:	f000 fab7 	bl	800a3a4 <__hi0bits>
 8009e36:	f1c0 0020 	rsb	r0, r0, #32
 8009e3a:	9b05      	ldr	r3, [sp, #20]
 8009e3c:	4418      	add	r0, r3
 8009e3e:	f010 001f 	ands.w	r0, r0, #31
 8009e42:	f000 8092 	beq.w	8009f6a <_dtoa_r+0x90a>
 8009e46:	f1c0 0320 	rsb	r3, r0, #32
 8009e4a:	2b04      	cmp	r3, #4
 8009e4c:	f340 808a 	ble.w	8009f64 <_dtoa_r+0x904>
 8009e50:	f1c0 001c 	rsb	r0, r0, #28
 8009e54:	9b04      	ldr	r3, [sp, #16]
 8009e56:	4403      	add	r3, r0
 8009e58:	9304      	str	r3, [sp, #16]
 8009e5a:	9b05      	ldr	r3, [sp, #20]
 8009e5c:	4403      	add	r3, r0
 8009e5e:	4405      	add	r5, r0
 8009e60:	9305      	str	r3, [sp, #20]
 8009e62:	9b04      	ldr	r3, [sp, #16]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	dd07      	ble.n	8009e78 <_dtoa_r+0x818>
 8009e68:	ee18 1a10 	vmov	r1, s16
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f000 fc02 	bl	800a678 <__lshift>
 8009e74:	ee08 0a10 	vmov	s16, r0
 8009e78:	9b05      	ldr	r3, [sp, #20]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	dd05      	ble.n	8009e8a <_dtoa_r+0x82a>
 8009e7e:	4631      	mov	r1, r6
 8009e80:	461a      	mov	r2, r3
 8009e82:	4620      	mov	r0, r4
 8009e84:	f000 fbf8 	bl	800a678 <__lshift>
 8009e88:	4606      	mov	r6, r0
 8009e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d06e      	beq.n	8009f6e <_dtoa_r+0x90e>
 8009e90:	ee18 0a10 	vmov	r0, s16
 8009e94:	4631      	mov	r1, r6
 8009e96:	f000 fc5f 	bl	800a758 <__mcmp>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	da67      	bge.n	8009f6e <_dtoa_r+0x90e>
 8009e9e:	9b00      	ldr	r3, [sp, #0]
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	ee18 1a10 	vmov	r1, s16
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	220a      	movs	r2, #10
 8009eaa:	2300      	movs	r3, #0
 8009eac:	4620      	mov	r0, r4
 8009eae:	f000 fa33 	bl	800a318 <__multadd>
 8009eb2:	9b08      	ldr	r3, [sp, #32]
 8009eb4:	ee08 0a10 	vmov	s16, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f000 81b1 	beq.w	800a220 <_dtoa_r+0xbc0>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	4639      	mov	r1, r7
 8009ec2:	220a      	movs	r2, #10
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f000 fa27 	bl	800a318 <__multadd>
 8009eca:	9b02      	ldr	r3, [sp, #8]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	4607      	mov	r7, r0
 8009ed0:	f300 808e 	bgt.w	8009ff0 <_dtoa_r+0x990>
 8009ed4:	9b06      	ldr	r3, [sp, #24]
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	dc51      	bgt.n	8009f7e <_dtoa_r+0x91e>
 8009eda:	e089      	b.n	8009ff0 <_dtoa_r+0x990>
 8009edc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ede:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009ee2:	e74b      	b.n	8009d7c <_dtoa_r+0x71c>
 8009ee4:	9b03      	ldr	r3, [sp, #12]
 8009ee6:	1e5e      	subs	r6, r3, #1
 8009ee8:	9b07      	ldr	r3, [sp, #28]
 8009eea:	42b3      	cmp	r3, r6
 8009eec:	bfbf      	itttt	lt
 8009eee:	9b07      	ldrlt	r3, [sp, #28]
 8009ef0:	9607      	strlt	r6, [sp, #28]
 8009ef2:	1af2      	sublt	r2, r6, r3
 8009ef4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009ef6:	bfb6      	itet	lt
 8009ef8:	189b      	addlt	r3, r3, r2
 8009efa:	1b9e      	subge	r6, r3, r6
 8009efc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009efe:	9b03      	ldr	r3, [sp, #12]
 8009f00:	bfb8      	it	lt
 8009f02:	2600      	movlt	r6, #0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	bfb7      	itett	lt
 8009f08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009f0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009f10:	1a9d      	sublt	r5, r3, r2
 8009f12:	2300      	movlt	r3, #0
 8009f14:	e734      	b.n	8009d80 <_dtoa_r+0x720>
 8009f16:	9e07      	ldr	r6, [sp, #28]
 8009f18:	9d04      	ldr	r5, [sp, #16]
 8009f1a:	9f08      	ldr	r7, [sp, #32]
 8009f1c:	e73b      	b.n	8009d96 <_dtoa_r+0x736>
 8009f1e:	9a07      	ldr	r2, [sp, #28]
 8009f20:	e767      	b.n	8009df2 <_dtoa_r+0x792>
 8009f22:	9b06      	ldr	r3, [sp, #24]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	dc18      	bgt.n	8009f5a <_dtoa_r+0x8fa>
 8009f28:	f1ba 0f00 	cmp.w	sl, #0
 8009f2c:	d115      	bne.n	8009f5a <_dtoa_r+0x8fa>
 8009f2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f32:	b993      	cbnz	r3, 8009f5a <_dtoa_r+0x8fa>
 8009f34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f38:	0d1b      	lsrs	r3, r3, #20
 8009f3a:	051b      	lsls	r3, r3, #20
 8009f3c:	b183      	cbz	r3, 8009f60 <_dtoa_r+0x900>
 8009f3e:	9b04      	ldr	r3, [sp, #16]
 8009f40:	3301      	adds	r3, #1
 8009f42:	9304      	str	r3, [sp, #16]
 8009f44:	9b05      	ldr	r3, [sp, #20]
 8009f46:	3301      	adds	r3, #1
 8009f48:	9305      	str	r3, [sp, #20]
 8009f4a:	f04f 0801 	mov.w	r8, #1
 8009f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f47f af6a 	bne.w	8009e2a <_dtoa_r+0x7ca>
 8009f56:	2001      	movs	r0, #1
 8009f58:	e76f      	b.n	8009e3a <_dtoa_r+0x7da>
 8009f5a:	f04f 0800 	mov.w	r8, #0
 8009f5e:	e7f6      	b.n	8009f4e <_dtoa_r+0x8ee>
 8009f60:	4698      	mov	r8, r3
 8009f62:	e7f4      	b.n	8009f4e <_dtoa_r+0x8ee>
 8009f64:	f43f af7d 	beq.w	8009e62 <_dtoa_r+0x802>
 8009f68:	4618      	mov	r0, r3
 8009f6a:	301c      	adds	r0, #28
 8009f6c:	e772      	b.n	8009e54 <_dtoa_r+0x7f4>
 8009f6e:	9b03      	ldr	r3, [sp, #12]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	dc37      	bgt.n	8009fe4 <_dtoa_r+0x984>
 8009f74:	9b06      	ldr	r3, [sp, #24]
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	dd34      	ble.n	8009fe4 <_dtoa_r+0x984>
 8009f7a:	9b03      	ldr	r3, [sp, #12]
 8009f7c:	9302      	str	r3, [sp, #8]
 8009f7e:	9b02      	ldr	r3, [sp, #8]
 8009f80:	b96b      	cbnz	r3, 8009f9e <_dtoa_r+0x93e>
 8009f82:	4631      	mov	r1, r6
 8009f84:	2205      	movs	r2, #5
 8009f86:	4620      	mov	r0, r4
 8009f88:	f000 f9c6 	bl	800a318 <__multadd>
 8009f8c:	4601      	mov	r1, r0
 8009f8e:	4606      	mov	r6, r0
 8009f90:	ee18 0a10 	vmov	r0, s16
 8009f94:	f000 fbe0 	bl	800a758 <__mcmp>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	f73f adbb 	bgt.w	8009b14 <_dtoa_r+0x4b4>
 8009f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fa0:	9d01      	ldr	r5, [sp, #4]
 8009fa2:	43db      	mvns	r3, r3
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	f04f 0800 	mov.w	r8, #0
 8009faa:	4631      	mov	r1, r6
 8009fac:	4620      	mov	r0, r4
 8009fae:	f000 f991 	bl	800a2d4 <_Bfree>
 8009fb2:	2f00      	cmp	r7, #0
 8009fb4:	f43f aea4 	beq.w	8009d00 <_dtoa_r+0x6a0>
 8009fb8:	f1b8 0f00 	cmp.w	r8, #0
 8009fbc:	d005      	beq.n	8009fca <_dtoa_r+0x96a>
 8009fbe:	45b8      	cmp	r8, r7
 8009fc0:	d003      	beq.n	8009fca <_dtoa_r+0x96a>
 8009fc2:	4641      	mov	r1, r8
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f000 f985 	bl	800a2d4 <_Bfree>
 8009fca:	4639      	mov	r1, r7
 8009fcc:	4620      	mov	r0, r4
 8009fce:	f000 f981 	bl	800a2d4 <_Bfree>
 8009fd2:	e695      	b.n	8009d00 <_dtoa_r+0x6a0>
 8009fd4:	2600      	movs	r6, #0
 8009fd6:	4637      	mov	r7, r6
 8009fd8:	e7e1      	b.n	8009f9e <_dtoa_r+0x93e>
 8009fda:	9700      	str	r7, [sp, #0]
 8009fdc:	4637      	mov	r7, r6
 8009fde:	e599      	b.n	8009b14 <_dtoa_r+0x4b4>
 8009fe0:	40240000 	.word	0x40240000
 8009fe4:	9b08      	ldr	r3, [sp, #32]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	f000 80ca 	beq.w	800a180 <_dtoa_r+0xb20>
 8009fec:	9b03      	ldr	r3, [sp, #12]
 8009fee:	9302      	str	r3, [sp, #8]
 8009ff0:	2d00      	cmp	r5, #0
 8009ff2:	dd05      	ble.n	800a000 <_dtoa_r+0x9a0>
 8009ff4:	4639      	mov	r1, r7
 8009ff6:	462a      	mov	r2, r5
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f000 fb3d 	bl	800a678 <__lshift>
 8009ffe:	4607      	mov	r7, r0
 800a000:	f1b8 0f00 	cmp.w	r8, #0
 800a004:	d05b      	beq.n	800a0be <_dtoa_r+0xa5e>
 800a006:	6879      	ldr	r1, [r7, #4]
 800a008:	4620      	mov	r0, r4
 800a00a:	f000 f923 	bl	800a254 <_Balloc>
 800a00e:	4605      	mov	r5, r0
 800a010:	b928      	cbnz	r0, 800a01e <_dtoa_r+0x9be>
 800a012:	4b87      	ldr	r3, [pc, #540]	; (800a230 <_dtoa_r+0xbd0>)
 800a014:	4602      	mov	r2, r0
 800a016:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a01a:	f7ff bb3b 	b.w	8009694 <_dtoa_r+0x34>
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	3202      	adds	r2, #2
 800a022:	0092      	lsls	r2, r2, #2
 800a024:	f107 010c 	add.w	r1, r7, #12
 800a028:	300c      	adds	r0, #12
 800a02a:	f7fe fd2b 	bl	8008a84 <memcpy>
 800a02e:	2201      	movs	r2, #1
 800a030:	4629      	mov	r1, r5
 800a032:	4620      	mov	r0, r4
 800a034:	f000 fb20 	bl	800a678 <__lshift>
 800a038:	9b01      	ldr	r3, [sp, #4]
 800a03a:	f103 0901 	add.w	r9, r3, #1
 800a03e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a042:	4413      	add	r3, r2
 800a044:	9305      	str	r3, [sp, #20]
 800a046:	f00a 0301 	and.w	r3, sl, #1
 800a04a:	46b8      	mov	r8, r7
 800a04c:	9304      	str	r3, [sp, #16]
 800a04e:	4607      	mov	r7, r0
 800a050:	4631      	mov	r1, r6
 800a052:	ee18 0a10 	vmov	r0, s16
 800a056:	f7ff fa75 	bl	8009544 <quorem>
 800a05a:	4641      	mov	r1, r8
 800a05c:	9002      	str	r0, [sp, #8]
 800a05e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a062:	ee18 0a10 	vmov	r0, s16
 800a066:	f000 fb77 	bl	800a758 <__mcmp>
 800a06a:	463a      	mov	r2, r7
 800a06c:	9003      	str	r0, [sp, #12]
 800a06e:	4631      	mov	r1, r6
 800a070:	4620      	mov	r0, r4
 800a072:	f000 fb8d 	bl	800a790 <__mdiff>
 800a076:	68c2      	ldr	r2, [r0, #12]
 800a078:	f109 3bff 	add.w	fp, r9, #4294967295
 800a07c:	4605      	mov	r5, r0
 800a07e:	bb02      	cbnz	r2, 800a0c2 <_dtoa_r+0xa62>
 800a080:	4601      	mov	r1, r0
 800a082:	ee18 0a10 	vmov	r0, s16
 800a086:	f000 fb67 	bl	800a758 <__mcmp>
 800a08a:	4602      	mov	r2, r0
 800a08c:	4629      	mov	r1, r5
 800a08e:	4620      	mov	r0, r4
 800a090:	9207      	str	r2, [sp, #28]
 800a092:	f000 f91f 	bl	800a2d4 <_Bfree>
 800a096:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a09a:	ea43 0102 	orr.w	r1, r3, r2
 800a09e:	9b04      	ldr	r3, [sp, #16]
 800a0a0:	430b      	orrs	r3, r1
 800a0a2:	464d      	mov	r5, r9
 800a0a4:	d10f      	bne.n	800a0c6 <_dtoa_r+0xa66>
 800a0a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a0aa:	d02a      	beq.n	800a102 <_dtoa_r+0xaa2>
 800a0ac:	9b03      	ldr	r3, [sp, #12]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	dd02      	ble.n	800a0b8 <_dtoa_r+0xa58>
 800a0b2:	9b02      	ldr	r3, [sp, #8]
 800a0b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a0b8:	f88b a000 	strb.w	sl, [fp]
 800a0bc:	e775      	b.n	8009faa <_dtoa_r+0x94a>
 800a0be:	4638      	mov	r0, r7
 800a0c0:	e7ba      	b.n	800a038 <_dtoa_r+0x9d8>
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	e7e2      	b.n	800a08c <_dtoa_r+0xa2c>
 800a0c6:	9b03      	ldr	r3, [sp, #12]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	db04      	blt.n	800a0d6 <_dtoa_r+0xa76>
 800a0cc:	9906      	ldr	r1, [sp, #24]
 800a0ce:	430b      	orrs	r3, r1
 800a0d0:	9904      	ldr	r1, [sp, #16]
 800a0d2:	430b      	orrs	r3, r1
 800a0d4:	d122      	bne.n	800a11c <_dtoa_r+0xabc>
 800a0d6:	2a00      	cmp	r2, #0
 800a0d8:	ddee      	ble.n	800a0b8 <_dtoa_r+0xa58>
 800a0da:	ee18 1a10 	vmov	r1, s16
 800a0de:	2201      	movs	r2, #1
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	f000 fac9 	bl	800a678 <__lshift>
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	ee08 0a10 	vmov	s16, r0
 800a0ec:	f000 fb34 	bl	800a758 <__mcmp>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	dc03      	bgt.n	800a0fc <_dtoa_r+0xa9c>
 800a0f4:	d1e0      	bne.n	800a0b8 <_dtoa_r+0xa58>
 800a0f6:	f01a 0f01 	tst.w	sl, #1
 800a0fa:	d0dd      	beq.n	800a0b8 <_dtoa_r+0xa58>
 800a0fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a100:	d1d7      	bne.n	800a0b2 <_dtoa_r+0xa52>
 800a102:	2339      	movs	r3, #57	; 0x39
 800a104:	f88b 3000 	strb.w	r3, [fp]
 800a108:	462b      	mov	r3, r5
 800a10a:	461d      	mov	r5, r3
 800a10c:	3b01      	subs	r3, #1
 800a10e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a112:	2a39      	cmp	r2, #57	; 0x39
 800a114:	d071      	beq.n	800a1fa <_dtoa_r+0xb9a>
 800a116:	3201      	adds	r2, #1
 800a118:	701a      	strb	r2, [r3, #0]
 800a11a:	e746      	b.n	8009faa <_dtoa_r+0x94a>
 800a11c:	2a00      	cmp	r2, #0
 800a11e:	dd07      	ble.n	800a130 <_dtoa_r+0xad0>
 800a120:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a124:	d0ed      	beq.n	800a102 <_dtoa_r+0xaa2>
 800a126:	f10a 0301 	add.w	r3, sl, #1
 800a12a:	f88b 3000 	strb.w	r3, [fp]
 800a12e:	e73c      	b.n	8009faa <_dtoa_r+0x94a>
 800a130:	9b05      	ldr	r3, [sp, #20]
 800a132:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a136:	4599      	cmp	r9, r3
 800a138:	d047      	beq.n	800a1ca <_dtoa_r+0xb6a>
 800a13a:	ee18 1a10 	vmov	r1, s16
 800a13e:	2300      	movs	r3, #0
 800a140:	220a      	movs	r2, #10
 800a142:	4620      	mov	r0, r4
 800a144:	f000 f8e8 	bl	800a318 <__multadd>
 800a148:	45b8      	cmp	r8, r7
 800a14a:	ee08 0a10 	vmov	s16, r0
 800a14e:	f04f 0300 	mov.w	r3, #0
 800a152:	f04f 020a 	mov.w	r2, #10
 800a156:	4641      	mov	r1, r8
 800a158:	4620      	mov	r0, r4
 800a15a:	d106      	bne.n	800a16a <_dtoa_r+0xb0a>
 800a15c:	f000 f8dc 	bl	800a318 <__multadd>
 800a160:	4680      	mov	r8, r0
 800a162:	4607      	mov	r7, r0
 800a164:	f109 0901 	add.w	r9, r9, #1
 800a168:	e772      	b.n	800a050 <_dtoa_r+0x9f0>
 800a16a:	f000 f8d5 	bl	800a318 <__multadd>
 800a16e:	4639      	mov	r1, r7
 800a170:	4680      	mov	r8, r0
 800a172:	2300      	movs	r3, #0
 800a174:	220a      	movs	r2, #10
 800a176:	4620      	mov	r0, r4
 800a178:	f000 f8ce 	bl	800a318 <__multadd>
 800a17c:	4607      	mov	r7, r0
 800a17e:	e7f1      	b.n	800a164 <_dtoa_r+0xb04>
 800a180:	9b03      	ldr	r3, [sp, #12]
 800a182:	9302      	str	r3, [sp, #8]
 800a184:	9d01      	ldr	r5, [sp, #4]
 800a186:	ee18 0a10 	vmov	r0, s16
 800a18a:	4631      	mov	r1, r6
 800a18c:	f7ff f9da 	bl	8009544 <quorem>
 800a190:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a194:	9b01      	ldr	r3, [sp, #4]
 800a196:	f805 ab01 	strb.w	sl, [r5], #1
 800a19a:	1aea      	subs	r2, r5, r3
 800a19c:	9b02      	ldr	r3, [sp, #8]
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	dd09      	ble.n	800a1b6 <_dtoa_r+0xb56>
 800a1a2:	ee18 1a10 	vmov	r1, s16
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	220a      	movs	r2, #10
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f000 f8b4 	bl	800a318 <__multadd>
 800a1b0:	ee08 0a10 	vmov	s16, r0
 800a1b4:	e7e7      	b.n	800a186 <_dtoa_r+0xb26>
 800a1b6:	9b02      	ldr	r3, [sp, #8]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	bfc8      	it	gt
 800a1bc:	461d      	movgt	r5, r3
 800a1be:	9b01      	ldr	r3, [sp, #4]
 800a1c0:	bfd8      	it	le
 800a1c2:	2501      	movle	r5, #1
 800a1c4:	441d      	add	r5, r3
 800a1c6:	f04f 0800 	mov.w	r8, #0
 800a1ca:	ee18 1a10 	vmov	r1, s16
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f000 fa51 	bl	800a678 <__lshift>
 800a1d6:	4631      	mov	r1, r6
 800a1d8:	ee08 0a10 	vmov	s16, r0
 800a1dc:	f000 fabc 	bl	800a758 <__mcmp>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	dc91      	bgt.n	800a108 <_dtoa_r+0xaa8>
 800a1e4:	d102      	bne.n	800a1ec <_dtoa_r+0xb8c>
 800a1e6:	f01a 0f01 	tst.w	sl, #1
 800a1ea:	d18d      	bne.n	800a108 <_dtoa_r+0xaa8>
 800a1ec:	462b      	mov	r3, r5
 800a1ee:	461d      	mov	r5, r3
 800a1f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1f4:	2a30      	cmp	r2, #48	; 0x30
 800a1f6:	d0fa      	beq.n	800a1ee <_dtoa_r+0xb8e>
 800a1f8:	e6d7      	b.n	8009faa <_dtoa_r+0x94a>
 800a1fa:	9a01      	ldr	r2, [sp, #4]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d184      	bne.n	800a10a <_dtoa_r+0xaaa>
 800a200:	9b00      	ldr	r3, [sp, #0]
 800a202:	3301      	adds	r3, #1
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	2331      	movs	r3, #49	; 0x31
 800a208:	7013      	strb	r3, [r2, #0]
 800a20a:	e6ce      	b.n	8009faa <_dtoa_r+0x94a>
 800a20c:	4b09      	ldr	r3, [pc, #36]	; (800a234 <_dtoa_r+0xbd4>)
 800a20e:	f7ff ba95 	b.w	800973c <_dtoa_r+0xdc>
 800a212:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a214:	2b00      	cmp	r3, #0
 800a216:	f47f aa6e 	bne.w	80096f6 <_dtoa_r+0x96>
 800a21a:	4b07      	ldr	r3, [pc, #28]	; (800a238 <_dtoa_r+0xbd8>)
 800a21c:	f7ff ba8e 	b.w	800973c <_dtoa_r+0xdc>
 800a220:	9b02      	ldr	r3, [sp, #8]
 800a222:	2b00      	cmp	r3, #0
 800a224:	dcae      	bgt.n	800a184 <_dtoa_r+0xb24>
 800a226:	9b06      	ldr	r3, [sp, #24]
 800a228:	2b02      	cmp	r3, #2
 800a22a:	f73f aea8 	bgt.w	8009f7e <_dtoa_r+0x91e>
 800a22e:	e7a9      	b.n	800a184 <_dtoa_r+0xb24>
 800a230:	0800ca44 	.word	0x0800ca44
 800a234:	0800c8a0 	.word	0x0800c8a0
 800a238:	0800c9c5 	.word	0x0800c9c5

0800a23c <_localeconv_r>:
 800a23c:	4800      	ldr	r0, [pc, #0]	; (800a240 <_localeconv_r+0x4>)
 800a23e:	4770      	bx	lr
 800a240:	20000168 	.word	0x20000168

0800a244 <malloc>:
 800a244:	4b02      	ldr	r3, [pc, #8]	; (800a250 <malloc+0xc>)
 800a246:	4601      	mov	r1, r0
 800a248:	6818      	ldr	r0, [r3, #0]
 800a24a:	f000 bc09 	b.w	800aa60 <_malloc_r>
 800a24e:	bf00      	nop
 800a250:	20000014 	.word	0x20000014

0800a254 <_Balloc>:
 800a254:	b570      	push	{r4, r5, r6, lr}
 800a256:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a258:	4604      	mov	r4, r0
 800a25a:	460d      	mov	r5, r1
 800a25c:	b976      	cbnz	r6, 800a27c <_Balloc+0x28>
 800a25e:	2010      	movs	r0, #16
 800a260:	f7ff fff0 	bl	800a244 <malloc>
 800a264:	4602      	mov	r2, r0
 800a266:	6260      	str	r0, [r4, #36]	; 0x24
 800a268:	b920      	cbnz	r0, 800a274 <_Balloc+0x20>
 800a26a:	4b18      	ldr	r3, [pc, #96]	; (800a2cc <_Balloc+0x78>)
 800a26c:	4818      	ldr	r0, [pc, #96]	; (800a2d0 <_Balloc+0x7c>)
 800a26e:	2166      	movs	r1, #102	; 0x66
 800a270:	f000 fdd6 	bl	800ae20 <__assert_func>
 800a274:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a278:	6006      	str	r6, [r0, #0]
 800a27a:	60c6      	str	r6, [r0, #12]
 800a27c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a27e:	68f3      	ldr	r3, [r6, #12]
 800a280:	b183      	cbz	r3, 800a2a4 <_Balloc+0x50>
 800a282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a28a:	b9b8      	cbnz	r0, 800a2bc <_Balloc+0x68>
 800a28c:	2101      	movs	r1, #1
 800a28e:	fa01 f605 	lsl.w	r6, r1, r5
 800a292:	1d72      	adds	r2, r6, #5
 800a294:	0092      	lsls	r2, r2, #2
 800a296:	4620      	mov	r0, r4
 800a298:	f000 fb60 	bl	800a95c <_calloc_r>
 800a29c:	b160      	cbz	r0, 800a2b8 <_Balloc+0x64>
 800a29e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2a2:	e00e      	b.n	800a2c2 <_Balloc+0x6e>
 800a2a4:	2221      	movs	r2, #33	; 0x21
 800a2a6:	2104      	movs	r1, #4
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f000 fb57 	bl	800a95c <_calloc_r>
 800a2ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2b0:	60f0      	str	r0, [r6, #12]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1e4      	bne.n	800a282 <_Balloc+0x2e>
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	bd70      	pop	{r4, r5, r6, pc}
 800a2bc:	6802      	ldr	r2, [r0, #0]
 800a2be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2c8:	e7f7      	b.n	800a2ba <_Balloc+0x66>
 800a2ca:	bf00      	nop
 800a2cc:	0800c9d2 	.word	0x0800c9d2
 800a2d0:	0800ca55 	.word	0x0800ca55

0800a2d4 <_Bfree>:
 800a2d4:	b570      	push	{r4, r5, r6, lr}
 800a2d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2d8:	4605      	mov	r5, r0
 800a2da:	460c      	mov	r4, r1
 800a2dc:	b976      	cbnz	r6, 800a2fc <_Bfree+0x28>
 800a2de:	2010      	movs	r0, #16
 800a2e0:	f7ff ffb0 	bl	800a244 <malloc>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	6268      	str	r0, [r5, #36]	; 0x24
 800a2e8:	b920      	cbnz	r0, 800a2f4 <_Bfree+0x20>
 800a2ea:	4b09      	ldr	r3, [pc, #36]	; (800a310 <_Bfree+0x3c>)
 800a2ec:	4809      	ldr	r0, [pc, #36]	; (800a314 <_Bfree+0x40>)
 800a2ee:	218a      	movs	r1, #138	; 0x8a
 800a2f0:	f000 fd96 	bl	800ae20 <__assert_func>
 800a2f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2f8:	6006      	str	r6, [r0, #0]
 800a2fa:	60c6      	str	r6, [r0, #12]
 800a2fc:	b13c      	cbz	r4, 800a30e <_Bfree+0x3a>
 800a2fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a300:	6862      	ldr	r2, [r4, #4]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a308:	6021      	str	r1, [r4, #0]
 800a30a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a30e:	bd70      	pop	{r4, r5, r6, pc}
 800a310:	0800c9d2 	.word	0x0800c9d2
 800a314:	0800ca55 	.word	0x0800ca55

0800a318 <__multadd>:
 800a318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a31c:	690d      	ldr	r5, [r1, #16]
 800a31e:	4607      	mov	r7, r0
 800a320:	460c      	mov	r4, r1
 800a322:	461e      	mov	r6, r3
 800a324:	f101 0c14 	add.w	ip, r1, #20
 800a328:	2000      	movs	r0, #0
 800a32a:	f8dc 3000 	ldr.w	r3, [ip]
 800a32e:	b299      	uxth	r1, r3
 800a330:	fb02 6101 	mla	r1, r2, r1, r6
 800a334:	0c1e      	lsrs	r6, r3, #16
 800a336:	0c0b      	lsrs	r3, r1, #16
 800a338:	fb02 3306 	mla	r3, r2, r6, r3
 800a33c:	b289      	uxth	r1, r1
 800a33e:	3001      	adds	r0, #1
 800a340:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a344:	4285      	cmp	r5, r0
 800a346:	f84c 1b04 	str.w	r1, [ip], #4
 800a34a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a34e:	dcec      	bgt.n	800a32a <__multadd+0x12>
 800a350:	b30e      	cbz	r6, 800a396 <__multadd+0x7e>
 800a352:	68a3      	ldr	r3, [r4, #8]
 800a354:	42ab      	cmp	r3, r5
 800a356:	dc19      	bgt.n	800a38c <__multadd+0x74>
 800a358:	6861      	ldr	r1, [r4, #4]
 800a35a:	4638      	mov	r0, r7
 800a35c:	3101      	adds	r1, #1
 800a35e:	f7ff ff79 	bl	800a254 <_Balloc>
 800a362:	4680      	mov	r8, r0
 800a364:	b928      	cbnz	r0, 800a372 <__multadd+0x5a>
 800a366:	4602      	mov	r2, r0
 800a368:	4b0c      	ldr	r3, [pc, #48]	; (800a39c <__multadd+0x84>)
 800a36a:	480d      	ldr	r0, [pc, #52]	; (800a3a0 <__multadd+0x88>)
 800a36c:	21b5      	movs	r1, #181	; 0xb5
 800a36e:	f000 fd57 	bl	800ae20 <__assert_func>
 800a372:	6922      	ldr	r2, [r4, #16]
 800a374:	3202      	adds	r2, #2
 800a376:	f104 010c 	add.w	r1, r4, #12
 800a37a:	0092      	lsls	r2, r2, #2
 800a37c:	300c      	adds	r0, #12
 800a37e:	f7fe fb81 	bl	8008a84 <memcpy>
 800a382:	4621      	mov	r1, r4
 800a384:	4638      	mov	r0, r7
 800a386:	f7ff ffa5 	bl	800a2d4 <_Bfree>
 800a38a:	4644      	mov	r4, r8
 800a38c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a390:	3501      	adds	r5, #1
 800a392:	615e      	str	r6, [r3, #20]
 800a394:	6125      	str	r5, [r4, #16]
 800a396:	4620      	mov	r0, r4
 800a398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a39c:	0800ca44 	.word	0x0800ca44
 800a3a0:	0800ca55 	.word	0x0800ca55

0800a3a4 <__hi0bits>:
 800a3a4:	0c03      	lsrs	r3, r0, #16
 800a3a6:	041b      	lsls	r3, r3, #16
 800a3a8:	b9d3      	cbnz	r3, 800a3e0 <__hi0bits+0x3c>
 800a3aa:	0400      	lsls	r0, r0, #16
 800a3ac:	2310      	movs	r3, #16
 800a3ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a3b2:	bf04      	itt	eq
 800a3b4:	0200      	lsleq	r0, r0, #8
 800a3b6:	3308      	addeq	r3, #8
 800a3b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a3bc:	bf04      	itt	eq
 800a3be:	0100      	lsleq	r0, r0, #4
 800a3c0:	3304      	addeq	r3, #4
 800a3c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a3c6:	bf04      	itt	eq
 800a3c8:	0080      	lsleq	r0, r0, #2
 800a3ca:	3302      	addeq	r3, #2
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	db05      	blt.n	800a3dc <__hi0bits+0x38>
 800a3d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a3d4:	f103 0301 	add.w	r3, r3, #1
 800a3d8:	bf08      	it	eq
 800a3da:	2320      	moveq	r3, #32
 800a3dc:	4618      	mov	r0, r3
 800a3de:	4770      	bx	lr
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	e7e4      	b.n	800a3ae <__hi0bits+0xa>

0800a3e4 <__lo0bits>:
 800a3e4:	6803      	ldr	r3, [r0, #0]
 800a3e6:	f013 0207 	ands.w	r2, r3, #7
 800a3ea:	4601      	mov	r1, r0
 800a3ec:	d00b      	beq.n	800a406 <__lo0bits+0x22>
 800a3ee:	07da      	lsls	r2, r3, #31
 800a3f0:	d423      	bmi.n	800a43a <__lo0bits+0x56>
 800a3f2:	0798      	lsls	r0, r3, #30
 800a3f4:	bf49      	itett	mi
 800a3f6:	085b      	lsrmi	r3, r3, #1
 800a3f8:	089b      	lsrpl	r3, r3, #2
 800a3fa:	2001      	movmi	r0, #1
 800a3fc:	600b      	strmi	r3, [r1, #0]
 800a3fe:	bf5c      	itt	pl
 800a400:	600b      	strpl	r3, [r1, #0]
 800a402:	2002      	movpl	r0, #2
 800a404:	4770      	bx	lr
 800a406:	b298      	uxth	r0, r3
 800a408:	b9a8      	cbnz	r0, 800a436 <__lo0bits+0x52>
 800a40a:	0c1b      	lsrs	r3, r3, #16
 800a40c:	2010      	movs	r0, #16
 800a40e:	b2da      	uxtb	r2, r3
 800a410:	b90a      	cbnz	r2, 800a416 <__lo0bits+0x32>
 800a412:	3008      	adds	r0, #8
 800a414:	0a1b      	lsrs	r3, r3, #8
 800a416:	071a      	lsls	r2, r3, #28
 800a418:	bf04      	itt	eq
 800a41a:	091b      	lsreq	r3, r3, #4
 800a41c:	3004      	addeq	r0, #4
 800a41e:	079a      	lsls	r2, r3, #30
 800a420:	bf04      	itt	eq
 800a422:	089b      	lsreq	r3, r3, #2
 800a424:	3002      	addeq	r0, #2
 800a426:	07da      	lsls	r2, r3, #31
 800a428:	d403      	bmi.n	800a432 <__lo0bits+0x4e>
 800a42a:	085b      	lsrs	r3, r3, #1
 800a42c:	f100 0001 	add.w	r0, r0, #1
 800a430:	d005      	beq.n	800a43e <__lo0bits+0x5a>
 800a432:	600b      	str	r3, [r1, #0]
 800a434:	4770      	bx	lr
 800a436:	4610      	mov	r0, r2
 800a438:	e7e9      	b.n	800a40e <__lo0bits+0x2a>
 800a43a:	2000      	movs	r0, #0
 800a43c:	4770      	bx	lr
 800a43e:	2020      	movs	r0, #32
 800a440:	4770      	bx	lr
	...

0800a444 <__i2b>:
 800a444:	b510      	push	{r4, lr}
 800a446:	460c      	mov	r4, r1
 800a448:	2101      	movs	r1, #1
 800a44a:	f7ff ff03 	bl	800a254 <_Balloc>
 800a44e:	4602      	mov	r2, r0
 800a450:	b928      	cbnz	r0, 800a45e <__i2b+0x1a>
 800a452:	4b05      	ldr	r3, [pc, #20]	; (800a468 <__i2b+0x24>)
 800a454:	4805      	ldr	r0, [pc, #20]	; (800a46c <__i2b+0x28>)
 800a456:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a45a:	f000 fce1 	bl	800ae20 <__assert_func>
 800a45e:	2301      	movs	r3, #1
 800a460:	6144      	str	r4, [r0, #20]
 800a462:	6103      	str	r3, [r0, #16]
 800a464:	bd10      	pop	{r4, pc}
 800a466:	bf00      	nop
 800a468:	0800ca44 	.word	0x0800ca44
 800a46c:	0800ca55 	.word	0x0800ca55

0800a470 <__multiply>:
 800a470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a474:	4691      	mov	r9, r2
 800a476:	690a      	ldr	r2, [r1, #16]
 800a478:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	bfb8      	it	lt
 800a480:	460b      	movlt	r3, r1
 800a482:	460c      	mov	r4, r1
 800a484:	bfbc      	itt	lt
 800a486:	464c      	movlt	r4, r9
 800a488:	4699      	movlt	r9, r3
 800a48a:	6927      	ldr	r7, [r4, #16]
 800a48c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a490:	68a3      	ldr	r3, [r4, #8]
 800a492:	6861      	ldr	r1, [r4, #4]
 800a494:	eb07 060a 	add.w	r6, r7, sl
 800a498:	42b3      	cmp	r3, r6
 800a49a:	b085      	sub	sp, #20
 800a49c:	bfb8      	it	lt
 800a49e:	3101      	addlt	r1, #1
 800a4a0:	f7ff fed8 	bl	800a254 <_Balloc>
 800a4a4:	b930      	cbnz	r0, 800a4b4 <__multiply+0x44>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	4b44      	ldr	r3, [pc, #272]	; (800a5bc <__multiply+0x14c>)
 800a4aa:	4845      	ldr	r0, [pc, #276]	; (800a5c0 <__multiply+0x150>)
 800a4ac:	f240 115d 	movw	r1, #349	; 0x15d
 800a4b0:	f000 fcb6 	bl	800ae20 <__assert_func>
 800a4b4:	f100 0514 	add.w	r5, r0, #20
 800a4b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a4bc:	462b      	mov	r3, r5
 800a4be:	2200      	movs	r2, #0
 800a4c0:	4543      	cmp	r3, r8
 800a4c2:	d321      	bcc.n	800a508 <__multiply+0x98>
 800a4c4:	f104 0314 	add.w	r3, r4, #20
 800a4c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a4cc:	f109 0314 	add.w	r3, r9, #20
 800a4d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a4d4:	9202      	str	r2, [sp, #8]
 800a4d6:	1b3a      	subs	r2, r7, r4
 800a4d8:	3a15      	subs	r2, #21
 800a4da:	f022 0203 	bic.w	r2, r2, #3
 800a4de:	3204      	adds	r2, #4
 800a4e0:	f104 0115 	add.w	r1, r4, #21
 800a4e4:	428f      	cmp	r7, r1
 800a4e6:	bf38      	it	cc
 800a4e8:	2204      	movcc	r2, #4
 800a4ea:	9201      	str	r2, [sp, #4]
 800a4ec:	9a02      	ldr	r2, [sp, #8]
 800a4ee:	9303      	str	r3, [sp, #12]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d80c      	bhi.n	800a50e <__multiply+0x9e>
 800a4f4:	2e00      	cmp	r6, #0
 800a4f6:	dd03      	ble.n	800a500 <__multiply+0x90>
 800a4f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d05a      	beq.n	800a5b6 <__multiply+0x146>
 800a500:	6106      	str	r6, [r0, #16]
 800a502:	b005      	add	sp, #20
 800a504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a508:	f843 2b04 	str.w	r2, [r3], #4
 800a50c:	e7d8      	b.n	800a4c0 <__multiply+0x50>
 800a50e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a512:	f1ba 0f00 	cmp.w	sl, #0
 800a516:	d024      	beq.n	800a562 <__multiply+0xf2>
 800a518:	f104 0e14 	add.w	lr, r4, #20
 800a51c:	46a9      	mov	r9, r5
 800a51e:	f04f 0c00 	mov.w	ip, #0
 800a522:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a526:	f8d9 1000 	ldr.w	r1, [r9]
 800a52a:	fa1f fb82 	uxth.w	fp, r2
 800a52e:	b289      	uxth	r1, r1
 800a530:	fb0a 110b 	mla	r1, sl, fp, r1
 800a534:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a538:	f8d9 2000 	ldr.w	r2, [r9]
 800a53c:	4461      	add	r1, ip
 800a53e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a542:	fb0a c20b 	mla	r2, sl, fp, ip
 800a546:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a54a:	b289      	uxth	r1, r1
 800a54c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a550:	4577      	cmp	r7, lr
 800a552:	f849 1b04 	str.w	r1, [r9], #4
 800a556:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a55a:	d8e2      	bhi.n	800a522 <__multiply+0xb2>
 800a55c:	9a01      	ldr	r2, [sp, #4]
 800a55e:	f845 c002 	str.w	ip, [r5, r2]
 800a562:	9a03      	ldr	r2, [sp, #12]
 800a564:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a568:	3304      	adds	r3, #4
 800a56a:	f1b9 0f00 	cmp.w	r9, #0
 800a56e:	d020      	beq.n	800a5b2 <__multiply+0x142>
 800a570:	6829      	ldr	r1, [r5, #0]
 800a572:	f104 0c14 	add.w	ip, r4, #20
 800a576:	46ae      	mov	lr, r5
 800a578:	f04f 0a00 	mov.w	sl, #0
 800a57c:	f8bc b000 	ldrh.w	fp, [ip]
 800a580:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a584:	fb09 220b 	mla	r2, r9, fp, r2
 800a588:	4492      	add	sl, r2
 800a58a:	b289      	uxth	r1, r1
 800a58c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a590:	f84e 1b04 	str.w	r1, [lr], #4
 800a594:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a598:	f8be 1000 	ldrh.w	r1, [lr]
 800a59c:	0c12      	lsrs	r2, r2, #16
 800a59e:	fb09 1102 	mla	r1, r9, r2, r1
 800a5a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a5a6:	4567      	cmp	r7, ip
 800a5a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a5ac:	d8e6      	bhi.n	800a57c <__multiply+0x10c>
 800a5ae:	9a01      	ldr	r2, [sp, #4]
 800a5b0:	50a9      	str	r1, [r5, r2]
 800a5b2:	3504      	adds	r5, #4
 800a5b4:	e79a      	b.n	800a4ec <__multiply+0x7c>
 800a5b6:	3e01      	subs	r6, #1
 800a5b8:	e79c      	b.n	800a4f4 <__multiply+0x84>
 800a5ba:	bf00      	nop
 800a5bc:	0800ca44 	.word	0x0800ca44
 800a5c0:	0800ca55 	.word	0x0800ca55

0800a5c4 <__pow5mult>:
 800a5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5c8:	4615      	mov	r5, r2
 800a5ca:	f012 0203 	ands.w	r2, r2, #3
 800a5ce:	4606      	mov	r6, r0
 800a5d0:	460f      	mov	r7, r1
 800a5d2:	d007      	beq.n	800a5e4 <__pow5mult+0x20>
 800a5d4:	4c25      	ldr	r4, [pc, #148]	; (800a66c <__pow5mult+0xa8>)
 800a5d6:	3a01      	subs	r2, #1
 800a5d8:	2300      	movs	r3, #0
 800a5da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5de:	f7ff fe9b 	bl	800a318 <__multadd>
 800a5e2:	4607      	mov	r7, r0
 800a5e4:	10ad      	asrs	r5, r5, #2
 800a5e6:	d03d      	beq.n	800a664 <__pow5mult+0xa0>
 800a5e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a5ea:	b97c      	cbnz	r4, 800a60c <__pow5mult+0x48>
 800a5ec:	2010      	movs	r0, #16
 800a5ee:	f7ff fe29 	bl	800a244 <malloc>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	6270      	str	r0, [r6, #36]	; 0x24
 800a5f6:	b928      	cbnz	r0, 800a604 <__pow5mult+0x40>
 800a5f8:	4b1d      	ldr	r3, [pc, #116]	; (800a670 <__pow5mult+0xac>)
 800a5fa:	481e      	ldr	r0, [pc, #120]	; (800a674 <__pow5mult+0xb0>)
 800a5fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a600:	f000 fc0e 	bl	800ae20 <__assert_func>
 800a604:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a608:	6004      	str	r4, [r0, #0]
 800a60a:	60c4      	str	r4, [r0, #12]
 800a60c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a610:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a614:	b94c      	cbnz	r4, 800a62a <__pow5mult+0x66>
 800a616:	f240 2171 	movw	r1, #625	; 0x271
 800a61a:	4630      	mov	r0, r6
 800a61c:	f7ff ff12 	bl	800a444 <__i2b>
 800a620:	2300      	movs	r3, #0
 800a622:	f8c8 0008 	str.w	r0, [r8, #8]
 800a626:	4604      	mov	r4, r0
 800a628:	6003      	str	r3, [r0, #0]
 800a62a:	f04f 0900 	mov.w	r9, #0
 800a62e:	07eb      	lsls	r3, r5, #31
 800a630:	d50a      	bpl.n	800a648 <__pow5mult+0x84>
 800a632:	4639      	mov	r1, r7
 800a634:	4622      	mov	r2, r4
 800a636:	4630      	mov	r0, r6
 800a638:	f7ff ff1a 	bl	800a470 <__multiply>
 800a63c:	4639      	mov	r1, r7
 800a63e:	4680      	mov	r8, r0
 800a640:	4630      	mov	r0, r6
 800a642:	f7ff fe47 	bl	800a2d4 <_Bfree>
 800a646:	4647      	mov	r7, r8
 800a648:	106d      	asrs	r5, r5, #1
 800a64a:	d00b      	beq.n	800a664 <__pow5mult+0xa0>
 800a64c:	6820      	ldr	r0, [r4, #0]
 800a64e:	b938      	cbnz	r0, 800a660 <__pow5mult+0x9c>
 800a650:	4622      	mov	r2, r4
 800a652:	4621      	mov	r1, r4
 800a654:	4630      	mov	r0, r6
 800a656:	f7ff ff0b 	bl	800a470 <__multiply>
 800a65a:	6020      	str	r0, [r4, #0]
 800a65c:	f8c0 9000 	str.w	r9, [r0]
 800a660:	4604      	mov	r4, r0
 800a662:	e7e4      	b.n	800a62e <__pow5mult+0x6a>
 800a664:	4638      	mov	r0, r7
 800a666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a66a:	bf00      	nop
 800a66c:	0800cba8 	.word	0x0800cba8
 800a670:	0800c9d2 	.word	0x0800c9d2
 800a674:	0800ca55 	.word	0x0800ca55

0800a678 <__lshift>:
 800a678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a67c:	460c      	mov	r4, r1
 800a67e:	6849      	ldr	r1, [r1, #4]
 800a680:	6923      	ldr	r3, [r4, #16]
 800a682:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a686:	68a3      	ldr	r3, [r4, #8]
 800a688:	4607      	mov	r7, r0
 800a68a:	4691      	mov	r9, r2
 800a68c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a690:	f108 0601 	add.w	r6, r8, #1
 800a694:	42b3      	cmp	r3, r6
 800a696:	db0b      	blt.n	800a6b0 <__lshift+0x38>
 800a698:	4638      	mov	r0, r7
 800a69a:	f7ff fddb 	bl	800a254 <_Balloc>
 800a69e:	4605      	mov	r5, r0
 800a6a0:	b948      	cbnz	r0, 800a6b6 <__lshift+0x3e>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	4b2a      	ldr	r3, [pc, #168]	; (800a750 <__lshift+0xd8>)
 800a6a6:	482b      	ldr	r0, [pc, #172]	; (800a754 <__lshift+0xdc>)
 800a6a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a6ac:	f000 fbb8 	bl	800ae20 <__assert_func>
 800a6b0:	3101      	adds	r1, #1
 800a6b2:	005b      	lsls	r3, r3, #1
 800a6b4:	e7ee      	b.n	800a694 <__lshift+0x1c>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	f100 0114 	add.w	r1, r0, #20
 800a6bc:	f100 0210 	add.w	r2, r0, #16
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	4553      	cmp	r3, sl
 800a6c4:	db37      	blt.n	800a736 <__lshift+0xbe>
 800a6c6:	6920      	ldr	r0, [r4, #16]
 800a6c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6cc:	f104 0314 	add.w	r3, r4, #20
 800a6d0:	f019 091f 	ands.w	r9, r9, #31
 800a6d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a6dc:	d02f      	beq.n	800a73e <__lshift+0xc6>
 800a6de:	f1c9 0e20 	rsb	lr, r9, #32
 800a6e2:	468a      	mov	sl, r1
 800a6e4:	f04f 0c00 	mov.w	ip, #0
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	fa02 f209 	lsl.w	r2, r2, r9
 800a6ee:	ea42 020c 	orr.w	r2, r2, ip
 800a6f2:	f84a 2b04 	str.w	r2, [sl], #4
 800a6f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6fa:	4298      	cmp	r0, r3
 800a6fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a700:	d8f2      	bhi.n	800a6e8 <__lshift+0x70>
 800a702:	1b03      	subs	r3, r0, r4
 800a704:	3b15      	subs	r3, #21
 800a706:	f023 0303 	bic.w	r3, r3, #3
 800a70a:	3304      	adds	r3, #4
 800a70c:	f104 0215 	add.w	r2, r4, #21
 800a710:	4290      	cmp	r0, r2
 800a712:	bf38      	it	cc
 800a714:	2304      	movcc	r3, #4
 800a716:	f841 c003 	str.w	ip, [r1, r3]
 800a71a:	f1bc 0f00 	cmp.w	ip, #0
 800a71e:	d001      	beq.n	800a724 <__lshift+0xac>
 800a720:	f108 0602 	add.w	r6, r8, #2
 800a724:	3e01      	subs	r6, #1
 800a726:	4638      	mov	r0, r7
 800a728:	612e      	str	r6, [r5, #16]
 800a72a:	4621      	mov	r1, r4
 800a72c:	f7ff fdd2 	bl	800a2d4 <_Bfree>
 800a730:	4628      	mov	r0, r5
 800a732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a736:	f842 0f04 	str.w	r0, [r2, #4]!
 800a73a:	3301      	adds	r3, #1
 800a73c:	e7c1      	b.n	800a6c2 <__lshift+0x4a>
 800a73e:	3904      	subs	r1, #4
 800a740:	f853 2b04 	ldr.w	r2, [r3], #4
 800a744:	f841 2f04 	str.w	r2, [r1, #4]!
 800a748:	4298      	cmp	r0, r3
 800a74a:	d8f9      	bhi.n	800a740 <__lshift+0xc8>
 800a74c:	e7ea      	b.n	800a724 <__lshift+0xac>
 800a74e:	bf00      	nop
 800a750:	0800ca44 	.word	0x0800ca44
 800a754:	0800ca55 	.word	0x0800ca55

0800a758 <__mcmp>:
 800a758:	b530      	push	{r4, r5, lr}
 800a75a:	6902      	ldr	r2, [r0, #16]
 800a75c:	690c      	ldr	r4, [r1, #16]
 800a75e:	1b12      	subs	r2, r2, r4
 800a760:	d10e      	bne.n	800a780 <__mcmp+0x28>
 800a762:	f100 0314 	add.w	r3, r0, #20
 800a766:	3114      	adds	r1, #20
 800a768:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a76c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a770:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a774:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a778:	42a5      	cmp	r5, r4
 800a77a:	d003      	beq.n	800a784 <__mcmp+0x2c>
 800a77c:	d305      	bcc.n	800a78a <__mcmp+0x32>
 800a77e:	2201      	movs	r2, #1
 800a780:	4610      	mov	r0, r2
 800a782:	bd30      	pop	{r4, r5, pc}
 800a784:	4283      	cmp	r3, r0
 800a786:	d3f3      	bcc.n	800a770 <__mcmp+0x18>
 800a788:	e7fa      	b.n	800a780 <__mcmp+0x28>
 800a78a:	f04f 32ff 	mov.w	r2, #4294967295
 800a78e:	e7f7      	b.n	800a780 <__mcmp+0x28>

0800a790 <__mdiff>:
 800a790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a794:	460c      	mov	r4, r1
 800a796:	4606      	mov	r6, r0
 800a798:	4611      	mov	r1, r2
 800a79a:	4620      	mov	r0, r4
 800a79c:	4690      	mov	r8, r2
 800a79e:	f7ff ffdb 	bl	800a758 <__mcmp>
 800a7a2:	1e05      	subs	r5, r0, #0
 800a7a4:	d110      	bne.n	800a7c8 <__mdiff+0x38>
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	f7ff fd53 	bl	800a254 <_Balloc>
 800a7ae:	b930      	cbnz	r0, 800a7be <__mdiff+0x2e>
 800a7b0:	4b3a      	ldr	r3, [pc, #232]	; (800a89c <__mdiff+0x10c>)
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	f240 2132 	movw	r1, #562	; 0x232
 800a7b8:	4839      	ldr	r0, [pc, #228]	; (800a8a0 <__mdiff+0x110>)
 800a7ba:	f000 fb31 	bl	800ae20 <__assert_func>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c8:	bfa4      	itt	ge
 800a7ca:	4643      	movge	r3, r8
 800a7cc:	46a0      	movge	r8, r4
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a7d4:	bfa6      	itte	ge
 800a7d6:	461c      	movge	r4, r3
 800a7d8:	2500      	movge	r5, #0
 800a7da:	2501      	movlt	r5, #1
 800a7dc:	f7ff fd3a 	bl	800a254 <_Balloc>
 800a7e0:	b920      	cbnz	r0, 800a7ec <__mdiff+0x5c>
 800a7e2:	4b2e      	ldr	r3, [pc, #184]	; (800a89c <__mdiff+0x10c>)
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a7ea:	e7e5      	b.n	800a7b8 <__mdiff+0x28>
 800a7ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a7f0:	6926      	ldr	r6, [r4, #16]
 800a7f2:	60c5      	str	r5, [r0, #12]
 800a7f4:	f104 0914 	add.w	r9, r4, #20
 800a7f8:	f108 0514 	add.w	r5, r8, #20
 800a7fc:	f100 0e14 	add.w	lr, r0, #20
 800a800:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a804:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a808:	f108 0210 	add.w	r2, r8, #16
 800a80c:	46f2      	mov	sl, lr
 800a80e:	2100      	movs	r1, #0
 800a810:	f859 3b04 	ldr.w	r3, [r9], #4
 800a814:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a818:	fa1f f883 	uxth.w	r8, r3
 800a81c:	fa11 f18b 	uxtah	r1, r1, fp
 800a820:	0c1b      	lsrs	r3, r3, #16
 800a822:	eba1 0808 	sub.w	r8, r1, r8
 800a826:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a82a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a82e:	fa1f f888 	uxth.w	r8, r8
 800a832:	1419      	asrs	r1, r3, #16
 800a834:	454e      	cmp	r6, r9
 800a836:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a83a:	f84a 3b04 	str.w	r3, [sl], #4
 800a83e:	d8e7      	bhi.n	800a810 <__mdiff+0x80>
 800a840:	1b33      	subs	r3, r6, r4
 800a842:	3b15      	subs	r3, #21
 800a844:	f023 0303 	bic.w	r3, r3, #3
 800a848:	3304      	adds	r3, #4
 800a84a:	3415      	adds	r4, #21
 800a84c:	42a6      	cmp	r6, r4
 800a84e:	bf38      	it	cc
 800a850:	2304      	movcc	r3, #4
 800a852:	441d      	add	r5, r3
 800a854:	4473      	add	r3, lr
 800a856:	469e      	mov	lr, r3
 800a858:	462e      	mov	r6, r5
 800a85a:	4566      	cmp	r6, ip
 800a85c:	d30e      	bcc.n	800a87c <__mdiff+0xec>
 800a85e:	f10c 0203 	add.w	r2, ip, #3
 800a862:	1b52      	subs	r2, r2, r5
 800a864:	f022 0203 	bic.w	r2, r2, #3
 800a868:	3d03      	subs	r5, #3
 800a86a:	45ac      	cmp	ip, r5
 800a86c:	bf38      	it	cc
 800a86e:	2200      	movcc	r2, #0
 800a870:	441a      	add	r2, r3
 800a872:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a876:	b17b      	cbz	r3, 800a898 <__mdiff+0x108>
 800a878:	6107      	str	r7, [r0, #16]
 800a87a:	e7a3      	b.n	800a7c4 <__mdiff+0x34>
 800a87c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a880:	fa11 f288 	uxtah	r2, r1, r8
 800a884:	1414      	asrs	r4, r2, #16
 800a886:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a88a:	b292      	uxth	r2, r2
 800a88c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a890:	f84e 2b04 	str.w	r2, [lr], #4
 800a894:	1421      	asrs	r1, r4, #16
 800a896:	e7e0      	b.n	800a85a <__mdiff+0xca>
 800a898:	3f01      	subs	r7, #1
 800a89a:	e7ea      	b.n	800a872 <__mdiff+0xe2>
 800a89c:	0800ca44 	.word	0x0800ca44
 800a8a0:	0800ca55 	.word	0x0800ca55

0800a8a4 <__d2b>:
 800a8a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8a8:	4689      	mov	r9, r1
 800a8aa:	2101      	movs	r1, #1
 800a8ac:	ec57 6b10 	vmov	r6, r7, d0
 800a8b0:	4690      	mov	r8, r2
 800a8b2:	f7ff fccf 	bl	800a254 <_Balloc>
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	b930      	cbnz	r0, 800a8c8 <__d2b+0x24>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	4b25      	ldr	r3, [pc, #148]	; (800a954 <__d2b+0xb0>)
 800a8be:	4826      	ldr	r0, [pc, #152]	; (800a958 <__d2b+0xb4>)
 800a8c0:	f240 310a 	movw	r1, #778	; 0x30a
 800a8c4:	f000 faac 	bl	800ae20 <__assert_func>
 800a8c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a8cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a8d0:	bb35      	cbnz	r5, 800a920 <__d2b+0x7c>
 800a8d2:	2e00      	cmp	r6, #0
 800a8d4:	9301      	str	r3, [sp, #4]
 800a8d6:	d028      	beq.n	800a92a <__d2b+0x86>
 800a8d8:	4668      	mov	r0, sp
 800a8da:	9600      	str	r6, [sp, #0]
 800a8dc:	f7ff fd82 	bl	800a3e4 <__lo0bits>
 800a8e0:	9900      	ldr	r1, [sp, #0]
 800a8e2:	b300      	cbz	r0, 800a926 <__d2b+0x82>
 800a8e4:	9a01      	ldr	r2, [sp, #4]
 800a8e6:	f1c0 0320 	rsb	r3, r0, #32
 800a8ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ee:	430b      	orrs	r3, r1
 800a8f0:	40c2      	lsrs	r2, r0
 800a8f2:	6163      	str	r3, [r4, #20]
 800a8f4:	9201      	str	r2, [sp, #4]
 800a8f6:	9b01      	ldr	r3, [sp, #4]
 800a8f8:	61a3      	str	r3, [r4, #24]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	bf14      	ite	ne
 800a8fe:	2202      	movne	r2, #2
 800a900:	2201      	moveq	r2, #1
 800a902:	6122      	str	r2, [r4, #16]
 800a904:	b1d5      	cbz	r5, 800a93c <__d2b+0x98>
 800a906:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a90a:	4405      	add	r5, r0
 800a90c:	f8c9 5000 	str.w	r5, [r9]
 800a910:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a914:	f8c8 0000 	str.w	r0, [r8]
 800a918:	4620      	mov	r0, r4
 800a91a:	b003      	add	sp, #12
 800a91c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a920:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a924:	e7d5      	b.n	800a8d2 <__d2b+0x2e>
 800a926:	6161      	str	r1, [r4, #20]
 800a928:	e7e5      	b.n	800a8f6 <__d2b+0x52>
 800a92a:	a801      	add	r0, sp, #4
 800a92c:	f7ff fd5a 	bl	800a3e4 <__lo0bits>
 800a930:	9b01      	ldr	r3, [sp, #4]
 800a932:	6163      	str	r3, [r4, #20]
 800a934:	2201      	movs	r2, #1
 800a936:	6122      	str	r2, [r4, #16]
 800a938:	3020      	adds	r0, #32
 800a93a:	e7e3      	b.n	800a904 <__d2b+0x60>
 800a93c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a940:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a944:	f8c9 0000 	str.w	r0, [r9]
 800a948:	6918      	ldr	r0, [r3, #16]
 800a94a:	f7ff fd2b 	bl	800a3a4 <__hi0bits>
 800a94e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a952:	e7df      	b.n	800a914 <__d2b+0x70>
 800a954:	0800ca44 	.word	0x0800ca44
 800a958:	0800ca55 	.word	0x0800ca55

0800a95c <_calloc_r>:
 800a95c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a95e:	fba1 2402 	umull	r2, r4, r1, r2
 800a962:	b94c      	cbnz	r4, 800a978 <_calloc_r+0x1c>
 800a964:	4611      	mov	r1, r2
 800a966:	9201      	str	r2, [sp, #4]
 800a968:	f000 f87a 	bl	800aa60 <_malloc_r>
 800a96c:	9a01      	ldr	r2, [sp, #4]
 800a96e:	4605      	mov	r5, r0
 800a970:	b930      	cbnz	r0, 800a980 <_calloc_r+0x24>
 800a972:	4628      	mov	r0, r5
 800a974:	b003      	add	sp, #12
 800a976:	bd30      	pop	{r4, r5, pc}
 800a978:	220c      	movs	r2, #12
 800a97a:	6002      	str	r2, [r0, #0]
 800a97c:	2500      	movs	r5, #0
 800a97e:	e7f8      	b.n	800a972 <_calloc_r+0x16>
 800a980:	4621      	mov	r1, r4
 800a982:	f7fe f88d 	bl	8008aa0 <memset>
 800a986:	e7f4      	b.n	800a972 <_calloc_r+0x16>

0800a988 <_free_r>:
 800a988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a98a:	2900      	cmp	r1, #0
 800a98c:	d044      	beq.n	800aa18 <_free_r+0x90>
 800a98e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a992:	9001      	str	r0, [sp, #4]
 800a994:	2b00      	cmp	r3, #0
 800a996:	f1a1 0404 	sub.w	r4, r1, #4
 800a99a:	bfb8      	it	lt
 800a99c:	18e4      	addlt	r4, r4, r3
 800a99e:	f000 fa9b 	bl	800aed8 <__malloc_lock>
 800a9a2:	4a1e      	ldr	r2, [pc, #120]	; (800aa1c <_free_r+0x94>)
 800a9a4:	9801      	ldr	r0, [sp, #4]
 800a9a6:	6813      	ldr	r3, [r2, #0]
 800a9a8:	b933      	cbnz	r3, 800a9b8 <_free_r+0x30>
 800a9aa:	6063      	str	r3, [r4, #4]
 800a9ac:	6014      	str	r4, [r2, #0]
 800a9ae:	b003      	add	sp, #12
 800a9b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9b4:	f000 ba96 	b.w	800aee4 <__malloc_unlock>
 800a9b8:	42a3      	cmp	r3, r4
 800a9ba:	d908      	bls.n	800a9ce <_free_r+0x46>
 800a9bc:	6825      	ldr	r5, [r4, #0]
 800a9be:	1961      	adds	r1, r4, r5
 800a9c0:	428b      	cmp	r3, r1
 800a9c2:	bf01      	itttt	eq
 800a9c4:	6819      	ldreq	r1, [r3, #0]
 800a9c6:	685b      	ldreq	r3, [r3, #4]
 800a9c8:	1949      	addeq	r1, r1, r5
 800a9ca:	6021      	streq	r1, [r4, #0]
 800a9cc:	e7ed      	b.n	800a9aa <_free_r+0x22>
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	b10b      	cbz	r3, 800a9d8 <_free_r+0x50>
 800a9d4:	42a3      	cmp	r3, r4
 800a9d6:	d9fa      	bls.n	800a9ce <_free_r+0x46>
 800a9d8:	6811      	ldr	r1, [r2, #0]
 800a9da:	1855      	adds	r5, r2, r1
 800a9dc:	42a5      	cmp	r5, r4
 800a9de:	d10b      	bne.n	800a9f8 <_free_r+0x70>
 800a9e0:	6824      	ldr	r4, [r4, #0]
 800a9e2:	4421      	add	r1, r4
 800a9e4:	1854      	adds	r4, r2, r1
 800a9e6:	42a3      	cmp	r3, r4
 800a9e8:	6011      	str	r1, [r2, #0]
 800a9ea:	d1e0      	bne.n	800a9ae <_free_r+0x26>
 800a9ec:	681c      	ldr	r4, [r3, #0]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	6053      	str	r3, [r2, #4]
 800a9f2:	4421      	add	r1, r4
 800a9f4:	6011      	str	r1, [r2, #0]
 800a9f6:	e7da      	b.n	800a9ae <_free_r+0x26>
 800a9f8:	d902      	bls.n	800aa00 <_free_r+0x78>
 800a9fa:	230c      	movs	r3, #12
 800a9fc:	6003      	str	r3, [r0, #0]
 800a9fe:	e7d6      	b.n	800a9ae <_free_r+0x26>
 800aa00:	6825      	ldr	r5, [r4, #0]
 800aa02:	1961      	adds	r1, r4, r5
 800aa04:	428b      	cmp	r3, r1
 800aa06:	bf04      	itt	eq
 800aa08:	6819      	ldreq	r1, [r3, #0]
 800aa0a:	685b      	ldreq	r3, [r3, #4]
 800aa0c:	6063      	str	r3, [r4, #4]
 800aa0e:	bf04      	itt	eq
 800aa10:	1949      	addeq	r1, r1, r5
 800aa12:	6021      	streq	r1, [r4, #0]
 800aa14:	6054      	str	r4, [r2, #4]
 800aa16:	e7ca      	b.n	800a9ae <_free_r+0x26>
 800aa18:	b003      	add	sp, #12
 800aa1a:	bd30      	pop	{r4, r5, pc}
 800aa1c:	20000438 	.word	0x20000438

0800aa20 <sbrk_aligned>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	4e0e      	ldr	r6, [pc, #56]	; (800aa5c <sbrk_aligned+0x3c>)
 800aa24:	460c      	mov	r4, r1
 800aa26:	6831      	ldr	r1, [r6, #0]
 800aa28:	4605      	mov	r5, r0
 800aa2a:	b911      	cbnz	r1, 800aa32 <sbrk_aligned+0x12>
 800aa2c:	f000 f9e8 	bl	800ae00 <_sbrk_r>
 800aa30:	6030      	str	r0, [r6, #0]
 800aa32:	4621      	mov	r1, r4
 800aa34:	4628      	mov	r0, r5
 800aa36:	f000 f9e3 	bl	800ae00 <_sbrk_r>
 800aa3a:	1c43      	adds	r3, r0, #1
 800aa3c:	d00a      	beq.n	800aa54 <sbrk_aligned+0x34>
 800aa3e:	1cc4      	adds	r4, r0, #3
 800aa40:	f024 0403 	bic.w	r4, r4, #3
 800aa44:	42a0      	cmp	r0, r4
 800aa46:	d007      	beq.n	800aa58 <sbrk_aligned+0x38>
 800aa48:	1a21      	subs	r1, r4, r0
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	f000 f9d8 	bl	800ae00 <_sbrk_r>
 800aa50:	3001      	adds	r0, #1
 800aa52:	d101      	bne.n	800aa58 <sbrk_aligned+0x38>
 800aa54:	f04f 34ff 	mov.w	r4, #4294967295
 800aa58:	4620      	mov	r0, r4
 800aa5a:	bd70      	pop	{r4, r5, r6, pc}
 800aa5c:	2000043c 	.word	0x2000043c

0800aa60 <_malloc_r>:
 800aa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa64:	1ccd      	adds	r5, r1, #3
 800aa66:	f025 0503 	bic.w	r5, r5, #3
 800aa6a:	3508      	adds	r5, #8
 800aa6c:	2d0c      	cmp	r5, #12
 800aa6e:	bf38      	it	cc
 800aa70:	250c      	movcc	r5, #12
 800aa72:	2d00      	cmp	r5, #0
 800aa74:	4607      	mov	r7, r0
 800aa76:	db01      	blt.n	800aa7c <_malloc_r+0x1c>
 800aa78:	42a9      	cmp	r1, r5
 800aa7a:	d905      	bls.n	800aa88 <_malloc_r+0x28>
 800aa7c:	230c      	movs	r3, #12
 800aa7e:	603b      	str	r3, [r7, #0]
 800aa80:	2600      	movs	r6, #0
 800aa82:	4630      	mov	r0, r6
 800aa84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa88:	4e2e      	ldr	r6, [pc, #184]	; (800ab44 <_malloc_r+0xe4>)
 800aa8a:	f000 fa25 	bl	800aed8 <__malloc_lock>
 800aa8e:	6833      	ldr	r3, [r6, #0]
 800aa90:	461c      	mov	r4, r3
 800aa92:	bb34      	cbnz	r4, 800aae2 <_malloc_r+0x82>
 800aa94:	4629      	mov	r1, r5
 800aa96:	4638      	mov	r0, r7
 800aa98:	f7ff ffc2 	bl	800aa20 <sbrk_aligned>
 800aa9c:	1c43      	adds	r3, r0, #1
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	d14d      	bne.n	800ab3e <_malloc_r+0xde>
 800aaa2:	6834      	ldr	r4, [r6, #0]
 800aaa4:	4626      	mov	r6, r4
 800aaa6:	2e00      	cmp	r6, #0
 800aaa8:	d140      	bne.n	800ab2c <_malloc_r+0xcc>
 800aaaa:	6823      	ldr	r3, [r4, #0]
 800aaac:	4631      	mov	r1, r6
 800aaae:	4638      	mov	r0, r7
 800aab0:	eb04 0803 	add.w	r8, r4, r3
 800aab4:	f000 f9a4 	bl	800ae00 <_sbrk_r>
 800aab8:	4580      	cmp	r8, r0
 800aaba:	d13a      	bne.n	800ab32 <_malloc_r+0xd2>
 800aabc:	6821      	ldr	r1, [r4, #0]
 800aabe:	3503      	adds	r5, #3
 800aac0:	1a6d      	subs	r5, r5, r1
 800aac2:	f025 0503 	bic.w	r5, r5, #3
 800aac6:	3508      	adds	r5, #8
 800aac8:	2d0c      	cmp	r5, #12
 800aaca:	bf38      	it	cc
 800aacc:	250c      	movcc	r5, #12
 800aace:	4629      	mov	r1, r5
 800aad0:	4638      	mov	r0, r7
 800aad2:	f7ff ffa5 	bl	800aa20 <sbrk_aligned>
 800aad6:	3001      	adds	r0, #1
 800aad8:	d02b      	beq.n	800ab32 <_malloc_r+0xd2>
 800aada:	6823      	ldr	r3, [r4, #0]
 800aadc:	442b      	add	r3, r5
 800aade:	6023      	str	r3, [r4, #0]
 800aae0:	e00e      	b.n	800ab00 <_malloc_r+0xa0>
 800aae2:	6822      	ldr	r2, [r4, #0]
 800aae4:	1b52      	subs	r2, r2, r5
 800aae6:	d41e      	bmi.n	800ab26 <_malloc_r+0xc6>
 800aae8:	2a0b      	cmp	r2, #11
 800aaea:	d916      	bls.n	800ab1a <_malloc_r+0xba>
 800aaec:	1961      	adds	r1, r4, r5
 800aaee:	42a3      	cmp	r3, r4
 800aaf0:	6025      	str	r5, [r4, #0]
 800aaf2:	bf18      	it	ne
 800aaf4:	6059      	strne	r1, [r3, #4]
 800aaf6:	6863      	ldr	r3, [r4, #4]
 800aaf8:	bf08      	it	eq
 800aafa:	6031      	streq	r1, [r6, #0]
 800aafc:	5162      	str	r2, [r4, r5]
 800aafe:	604b      	str	r3, [r1, #4]
 800ab00:	4638      	mov	r0, r7
 800ab02:	f104 060b 	add.w	r6, r4, #11
 800ab06:	f000 f9ed 	bl	800aee4 <__malloc_unlock>
 800ab0a:	f026 0607 	bic.w	r6, r6, #7
 800ab0e:	1d23      	adds	r3, r4, #4
 800ab10:	1af2      	subs	r2, r6, r3
 800ab12:	d0b6      	beq.n	800aa82 <_malloc_r+0x22>
 800ab14:	1b9b      	subs	r3, r3, r6
 800ab16:	50a3      	str	r3, [r4, r2]
 800ab18:	e7b3      	b.n	800aa82 <_malloc_r+0x22>
 800ab1a:	6862      	ldr	r2, [r4, #4]
 800ab1c:	42a3      	cmp	r3, r4
 800ab1e:	bf0c      	ite	eq
 800ab20:	6032      	streq	r2, [r6, #0]
 800ab22:	605a      	strne	r2, [r3, #4]
 800ab24:	e7ec      	b.n	800ab00 <_malloc_r+0xa0>
 800ab26:	4623      	mov	r3, r4
 800ab28:	6864      	ldr	r4, [r4, #4]
 800ab2a:	e7b2      	b.n	800aa92 <_malloc_r+0x32>
 800ab2c:	4634      	mov	r4, r6
 800ab2e:	6876      	ldr	r6, [r6, #4]
 800ab30:	e7b9      	b.n	800aaa6 <_malloc_r+0x46>
 800ab32:	230c      	movs	r3, #12
 800ab34:	603b      	str	r3, [r7, #0]
 800ab36:	4638      	mov	r0, r7
 800ab38:	f000 f9d4 	bl	800aee4 <__malloc_unlock>
 800ab3c:	e7a1      	b.n	800aa82 <_malloc_r+0x22>
 800ab3e:	6025      	str	r5, [r4, #0]
 800ab40:	e7de      	b.n	800ab00 <_malloc_r+0xa0>
 800ab42:	bf00      	nop
 800ab44:	20000438 	.word	0x20000438

0800ab48 <__ssputs_r>:
 800ab48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab4c:	688e      	ldr	r6, [r1, #8]
 800ab4e:	429e      	cmp	r6, r3
 800ab50:	4682      	mov	sl, r0
 800ab52:	460c      	mov	r4, r1
 800ab54:	4690      	mov	r8, r2
 800ab56:	461f      	mov	r7, r3
 800ab58:	d838      	bhi.n	800abcc <__ssputs_r+0x84>
 800ab5a:	898a      	ldrh	r2, [r1, #12]
 800ab5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab60:	d032      	beq.n	800abc8 <__ssputs_r+0x80>
 800ab62:	6825      	ldr	r5, [r4, #0]
 800ab64:	6909      	ldr	r1, [r1, #16]
 800ab66:	eba5 0901 	sub.w	r9, r5, r1
 800ab6a:	6965      	ldr	r5, [r4, #20]
 800ab6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab74:	3301      	adds	r3, #1
 800ab76:	444b      	add	r3, r9
 800ab78:	106d      	asrs	r5, r5, #1
 800ab7a:	429d      	cmp	r5, r3
 800ab7c:	bf38      	it	cc
 800ab7e:	461d      	movcc	r5, r3
 800ab80:	0553      	lsls	r3, r2, #21
 800ab82:	d531      	bpl.n	800abe8 <__ssputs_r+0xa0>
 800ab84:	4629      	mov	r1, r5
 800ab86:	f7ff ff6b 	bl	800aa60 <_malloc_r>
 800ab8a:	4606      	mov	r6, r0
 800ab8c:	b950      	cbnz	r0, 800aba4 <__ssputs_r+0x5c>
 800ab8e:	230c      	movs	r3, #12
 800ab90:	f8ca 3000 	str.w	r3, [sl]
 800ab94:	89a3      	ldrh	r3, [r4, #12]
 800ab96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab9a:	81a3      	strh	r3, [r4, #12]
 800ab9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aba4:	6921      	ldr	r1, [r4, #16]
 800aba6:	464a      	mov	r2, r9
 800aba8:	f7fd ff6c 	bl	8008a84 <memcpy>
 800abac:	89a3      	ldrh	r3, [r4, #12]
 800abae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800abb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abb6:	81a3      	strh	r3, [r4, #12]
 800abb8:	6126      	str	r6, [r4, #16]
 800abba:	6165      	str	r5, [r4, #20]
 800abbc:	444e      	add	r6, r9
 800abbe:	eba5 0509 	sub.w	r5, r5, r9
 800abc2:	6026      	str	r6, [r4, #0]
 800abc4:	60a5      	str	r5, [r4, #8]
 800abc6:	463e      	mov	r6, r7
 800abc8:	42be      	cmp	r6, r7
 800abca:	d900      	bls.n	800abce <__ssputs_r+0x86>
 800abcc:	463e      	mov	r6, r7
 800abce:	6820      	ldr	r0, [r4, #0]
 800abd0:	4632      	mov	r2, r6
 800abd2:	4641      	mov	r1, r8
 800abd4:	f000 f966 	bl	800aea4 <memmove>
 800abd8:	68a3      	ldr	r3, [r4, #8]
 800abda:	1b9b      	subs	r3, r3, r6
 800abdc:	60a3      	str	r3, [r4, #8]
 800abde:	6823      	ldr	r3, [r4, #0]
 800abe0:	4433      	add	r3, r6
 800abe2:	6023      	str	r3, [r4, #0]
 800abe4:	2000      	movs	r0, #0
 800abe6:	e7db      	b.n	800aba0 <__ssputs_r+0x58>
 800abe8:	462a      	mov	r2, r5
 800abea:	f000 f981 	bl	800aef0 <_realloc_r>
 800abee:	4606      	mov	r6, r0
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d1e1      	bne.n	800abb8 <__ssputs_r+0x70>
 800abf4:	6921      	ldr	r1, [r4, #16]
 800abf6:	4650      	mov	r0, sl
 800abf8:	f7ff fec6 	bl	800a988 <_free_r>
 800abfc:	e7c7      	b.n	800ab8e <__ssputs_r+0x46>
	...

0800ac00 <_svfiprintf_r>:
 800ac00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac04:	4698      	mov	r8, r3
 800ac06:	898b      	ldrh	r3, [r1, #12]
 800ac08:	061b      	lsls	r3, r3, #24
 800ac0a:	b09d      	sub	sp, #116	; 0x74
 800ac0c:	4607      	mov	r7, r0
 800ac0e:	460d      	mov	r5, r1
 800ac10:	4614      	mov	r4, r2
 800ac12:	d50e      	bpl.n	800ac32 <_svfiprintf_r+0x32>
 800ac14:	690b      	ldr	r3, [r1, #16]
 800ac16:	b963      	cbnz	r3, 800ac32 <_svfiprintf_r+0x32>
 800ac18:	2140      	movs	r1, #64	; 0x40
 800ac1a:	f7ff ff21 	bl	800aa60 <_malloc_r>
 800ac1e:	6028      	str	r0, [r5, #0]
 800ac20:	6128      	str	r0, [r5, #16]
 800ac22:	b920      	cbnz	r0, 800ac2e <_svfiprintf_r+0x2e>
 800ac24:	230c      	movs	r3, #12
 800ac26:	603b      	str	r3, [r7, #0]
 800ac28:	f04f 30ff 	mov.w	r0, #4294967295
 800ac2c:	e0d1      	b.n	800add2 <_svfiprintf_r+0x1d2>
 800ac2e:	2340      	movs	r3, #64	; 0x40
 800ac30:	616b      	str	r3, [r5, #20]
 800ac32:	2300      	movs	r3, #0
 800ac34:	9309      	str	r3, [sp, #36]	; 0x24
 800ac36:	2320      	movs	r3, #32
 800ac38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac40:	2330      	movs	r3, #48	; 0x30
 800ac42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800adec <_svfiprintf_r+0x1ec>
 800ac46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac4a:	f04f 0901 	mov.w	r9, #1
 800ac4e:	4623      	mov	r3, r4
 800ac50:	469a      	mov	sl, r3
 800ac52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac56:	b10a      	cbz	r2, 800ac5c <_svfiprintf_r+0x5c>
 800ac58:	2a25      	cmp	r2, #37	; 0x25
 800ac5a:	d1f9      	bne.n	800ac50 <_svfiprintf_r+0x50>
 800ac5c:	ebba 0b04 	subs.w	fp, sl, r4
 800ac60:	d00b      	beq.n	800ac7a <_svfiprintf_r+0x7a>
 800ac62:	465b      	mov	r3, fp
 800ac64:	4622      	mov	r2, r4
 800ac66:	4629      	mov	r1, r5
 800ac68:	4638      	mov	r0, r7
 800ac6a:	f7ff ff6d 	bl	800ab48 <__ssputs_r>
 800ac6e:	3001      	adds	r0, #1
 800ac70:	f000 80aa 	beq.w	800adc8 <_svfiprintf_r+0x1c8>
 800ac74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac76:	445a      	add	r2, fp
 800ac78:	9209      	str	r2, [sp, #36]	; 0x24
 800ac7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f000 80a2 	beq.w	800adc8 <_svfiprintf_r+0x1c8>
 800ac84:	2300      	movs	r3, #0
 800ac86:	f04f 32ff 	mov.w	r2, #4294967295
 800ac8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac8e:	f10a 0a01 	add.w	sl, sl, #1
 800ac92:	9304      	str	r3, [sp, #16]
 800ac94:	9307      	str	r3, [sp, #28]
 800ac96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac9a:	931a      	str	r3, [sp, #104]	; 0x68
 800ac9c:	4654      	mov	r4, sl
 800ac9e:	2205      	movs	r2, #5
 800aca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aca4:	4851      	ldr	r0, [pc, #324]	; (800adec <_svfiprintf_r+0x1ec>)
 800aca6:	f7f5 faa3 	bl	80001f0 <memchr>
 800acaa:	9a04      	ldr	r2, [sp, #16]
 800acac:	b9d8      	cbnz	r0, 800ace6 <_svfiprintf_r+0xe6>
 800acae:	06d0      	lsls	r0, r2, #27
 800acb0:	bf44      	itt	mi
 800acb2:	2320      	movmi	r3, #32
 800acb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acb8:	0711      	lsls	r1, r2, #28
 800acba:	bf44      	itt	mi
 800acbc:	232b      	movmi	r3, #43	; 0x2b
 800acbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acc2:	f89a 3000 	ldrb.w	r3, [sl]
 800acc6:	2b2a      	cmp	r3, #42	; 0x2a
 800acc8:	d015      	beq.n	800acf6 <_svfiprintf_r+0xf6>
 800acca:	9a07      	ldr	r2, [sp, #28]
 800accc:	4654      	mov	r4, sl
 800acce:	2000      	movs	r0, #0
 800acd0:	f04f 0c0a 	mov.w	ip, #10
 800acd4:	4621      	mov	r1, r4
 800acd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acda:	3b30      	subs	r3, #48	; 0x30
 800acdc:	2b09      	cmp	r3, #9
 800acde:	d94e      	bls.n	800ad7e <_svfiprintf_r+0x17e>
 800ace0:	b1b0      	cbz	r0, 800ad10 <_svfiprintf_r+0x110>
 800ace2:	9207      	str	r2, [sp, #28]
 800ace4:	e014      	b.n	800ad10 <_svfiprintf_r+0x110>
 800ace6:	eba0 0308 	sub.w	r3, r0, r8
 800acea:	fa09 f303 	lsl.w	r3, r9, r3
 800acee:	4313      	orrs	r3, r2
 800acf0:	9304      	str	r3, [sp, #16]
 800acf2:	46a2      	mov	sl, r4
 800acf4:	e7d2      	b.n	800ac9c <_svfiprintf_r+0x9c>
 800acf6:	9b03      	ldr	r3, [sp, #12]
 800acf8:	1d19      	adds	r1, r3, #4
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	9103      	str	r1, [sp, #12]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	bfbb      	ittet	lt
 800ad02:	425b      	neglt	r3, r3
 800ad04:	f042 0202 	orrlt.w	r2, r2, #2
 800ad08:	9307      	strge	r3, [sp, #28]
 800ad0a:	9307      	strlt	r3, [sp, #28]
 800ad0c:	bfb8      	it	lt
 800ad0e:	9204      	strlt	r2, [sp, #16]
 800ad10:	7823      	ldrb	r3, [r4, #0]
 800ad12:	2b2e      	cmp	r3, #46	; 0x2e
 800ad14:	d10c      	bne.n	800ad30 <_svfiprintf_r+0x130>
 800ad16:	7863      	ldrb	r3, [r4, #1]
 800ad18:	2b2a      	cmp	r3, #42	; 0x2a
 800ad1a:	d135      	bne.n	800ad88 <_svfiprintf_r+0x188>
 800ad1c:	9b03      	ldr	r3, [sp, #12]
 800ad1e:	1d1a      	adds	r2, r3, #4
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	9203      	str	r2, [sp, #12]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	bfb8      	it	lt
 800ad28:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad2c:	3402      	adds	r4, #2
 800ad2e:	9305      	str	r3, [sp, #20]
 800ad30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800adfc <_svfiprintf_r+0x1fc>
 800ad34:	7821      	ldrb	r1, [r4, #0]
 800ad36:	2203      	movs	r2, #3
 800ad38:	4650      	mov	r0, sl
 800ad3a:	f7f5 fa59 	bl	80001f0 <memchr>
 800ad3e:	b140      	cbz	r0, 800ad52 <_svfiprintf_r+0x152>
 800ad40:	2340      	movs	r3, #64	; 0x40
 800ad42:	eba0 000a 	sub.w	r0, r0, sl
 800ad46:	fa03 f000 	lsl.w	r0, r3, r0
 800ad4a:	9b04      	ldr	r3, [sp, #16]
 800ad4c:	4303      	orrs	r3, r0
 800ad4e:	3401      	adds	r4, #1
 800ad50:	9304      	str	r3, [sp, #16]
 800ad52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad56:	4826      	ldr	r0, [pc, #152]	; (800adf0 <_svfiprintf_r+0x1f0>)
 800ad58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad5c:	2206      	movs	r2, #6
 800ad5e:	f7f5 fa47 	bl	80001f0 <memchr>
 800ad62:	2800      	cmp	r0, #0
 800ad64:	d038      	beq.n	800add8 <_svfiprintf_r+0x1d8>
 800ad66:	4b23      	ldr	r3, [pc, #140]	; (800adf4 <_svfiprintf_r+0x1f4>)
 800ad68:	bb1b      	cbnz	r3, 800adb2 <_svfiprintf_r+0x1b2>
 800ad6a:	9b03      	ldr	r3, [sp, #12]
 800ad6c:	3307      	adds	r3, #7
 800ad6e:	f023 0307 	bic.w	r3, r3, #7
 800ad72:	3308      	adds	r3, #8
 800ad74:	9303      	str	r3, [sp, #12]
 800ad76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad78:	4433      	add	r3, r6
 800ad7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad7c:	e767      	b.n	800ac4e <_svfiprintf_r+0x4e>
 800ad7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad82:	460c      	mov	r4, r1
 800ad84:	2001      	movs	r0, #1
 800ad86:	e7a5      	b.n	800acd4 <_svfiprintf_r+0xd4>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	3401      	adds	r4, #1
 800ad8c:	9305      	str	r3, [sp, #20]
 800ad8e:	4619      	mov	r1, r3
 800ad90:	f04f 0c0a 	mov.w	ip, #10
 800ad94:	4620      	mov	r0, r4
 800ad96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad9a:	3a30      	subs	r2, #48	; 0x30
 800ad9c:	2a09      	cmp	r2, #9
 800ad9e:	d903      	bls.n	800ada8 <_svfiprintf_r+0x1a8>
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d0c5      	beq.n	800ad30 <_svfiprintf_r+0x130>
 800ada4:	9105      	str	r1, [sp, #20]
 800ada6:	e7c3      	b.n	800ad30 <_svfiprintf_r+0x130>
 800ada8:	fb0c 2101 	mla	r1, ip, r1, r2
 800adac:	4604      	mov	r4, r0
 800adae:	2301      	movs	r3, #1
 800adb0:	e7f0      	b.n	800ad94 <_svfiprintf_r+0x194>
 800adb2:	ab03      	add	r3, sp, #12
 800adb4:	9300      	str	r3, [sp, #0]
 800adb6:	462a      	mov	r2, r5
 800adb8:	4b0f      	ldr	r3, [pc, #60]	; (800adf8 <_svfiprintf_r+0x1f8>)
 800adba:	a904      	add	r1, sp, #16
 800adbc:	4638      	mov	r0, r7
 800adbe:	f7fd ff17 	bl	8008bf0 <_printf_float>
 800adc2:	1c42      	adds	r2, r0, #1
 800adc4:	4606      	mov	r6, r0
 800adc6:	d1d6      	bne.n	800ad76 <_svfiprintf_r+0x176>
 800adc8:	89ab      	ldrh	r3, [r5, #12]
 800adca:	065b      	lsls	r3, r3, #25
 800adcc:	f53f af2c 	bmi.w	800ac28 <_svfiprintf_r+0x28>
 800add0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800add2:	b01d      	add	sp, #116	; 0x74
 800add4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800add8:	ab03      	add	r3, sp, #12
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	462a      	mov	r2, r5
 800adde:	4b06      	ldr	r3, [pc, #24]	; (800adf8 <_svfiprintf_r+0x1f8>)
 800ade0:	a904      	add	r1, sp, #16
 800ade2:	4638      	mov	r0, r7
 800ade4:	f7fe f9a8 	bl	8009138 <_printf_i>
 800ade8:	e7eb      	b.n	800adc2 <_svfiprintf_r+0x1c2>
 800adea:	bf00      	nop
 800adec:	0800cbb4 	.word	0x0800cbb4
 800adf0:	0800cbbe 	.word	0x0800cbbe
 800adf4:	08008bf1 	.word	0x08008bf1
 800adf8:	0800ab49 	.word	0x0800ab49
 800adfc:	0800cbba 	.word	0x0800cbba

0800ae00 <_sbrk_r>:
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	4d06      	ldr	r5, [pc, #24]	; (800ae1c <_sbrk_r+0x1c>)
 800ae04:	2300      	movs	r3, #0
 800ae06:	4604      	mov	r4, r0
 800ae08:	4608      	mov	r0, r1
 800ae0a:	602b      	str	r3, [r5, #0]
 800ae0c:	f7f7 fae0 	bl	80023d0 <_sbrk>
 800ae10:	1c43      	adds	r3, r0, #1
 800ae12:	d102      	bne.n	800ae1a <_sbrk_r+0x1a>
 800ae14:	682b      	ldr	r3, [r5, #0]
 800ae16:	b103      	cbz	r3, 800ae1a <_sbrk_r+0x1a>
 800ae18:	6023      	str	r3, [r4, #0]
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
 800ae1c:	20000440 	.word	0x20000440

0800ae20 <__assert_func>:
 800ae20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae22:	4614      	mov	r4, r2
 800ae24:	461a      	mov	r2, r3
 800ae26:	4b09      	ldr	r3, [pc, #36]	; (800ae4c <__assert_func+0x2c>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4605      	mov	r5, r0
 800ae2c:	68d8      	ldr	r0, [r3, #12]
 800ae2e:	b14c      	cbz	r4, 800ae44 <__assert_func+0x24>
 800ae30:	4b07      	ldr	r3, [pc, #28]	; (800ae50 <__assert_func+0x30>)
 800ae32:	9100      	str	r1, [sp, #0]
 800ae34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae38:	4906      	ldr	r1, [pc, #24]	; (800ae54 <__assert_func+0x34>)
 800ae3a:	462b      	mov	r3, r5
 800ae3c:	f000 f80e 	bl	800ae5c <fiprintf>
 800ae40:	f000 faac 	bl	800b39c <abort>
 800ae44:	4b04      	ldr	r3, [pc, #16]	; (800ae58 <__assert_func+0x38>)
 800ae46:	461c      	mov	r4, r3
 800ae48:	e7f3      	b.n	800ae32 <__assert_func+0x12>
 800ae4a:	bf00      	nop
 800ae4c:	20000014 	.word	0x20000014
 800ae50:	0800cbc5 	.word	0x0800cbc5
 800ae54:	0800cbd2 	.word	0x0800cbd2
 800ae58:	0800cc00 	.word	0x0800cc00

0800ae5c <fiprintf>:
 800ae5c:	b40e      	push	{r1, r2, r3}
 800ae5e:	b503      	push	{r0, r1, lr}
 800ae60:	4601      	mov	r1, r0
 800ae62:	ab03      	add	r3, sp, #12
 800ae64:	4805      	ldr	r0, [pc, #20]	; (800ae7c <fiprintf+0x20>)
 800ae66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae6a:	6800      	ldr	r0, [r0, #0]
 800ae6c:	9301      	str	r3, [sp, #4]
 800ae6e:	f000 f897 	bl	800afa0 <_vfiprintf_r>
 800ae72:	b002      	add	sp, #8
 800ae74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae78:	b003      	add	sp, #12
 800ae7a:	4770      	bx	lr
 800ae7c:	20000014 	.word	0x20000014

0800ae80 <__ascii_mbtowc>:
 800ae80:	b082      	sub	sp, #8
 800ae82:	b901      	cbnz	r1, 800ae86 <__ascii_mbtowc+0x6>
 800ae84:	a901      	add	r1, sp, #4
 800ae86:	b142      	cbz	r2, 800ae9a <__ascii_mbtowc+0x1a>
 800ae88:	b14b      	cbz	r3, 800ae9e <__ascii_mbtowc+0x1e>
 800ae8a:	7813      	ldrb	r3, [r2, #0]
 800ae8c:	600b      	str	r3, [r1, #0]
 800ae8e:	7812      	ldrb	r2, [r2, #0]
 800ae90:	1e10      	subs	r0, r2, #0
 800ae92:	bf18      	it	ne
 800ae94:	2001      	movne	r0, #1
 800ae96:	b002      	add	sp, #8
 800ae98:	4770      	bx	lr
 800ae9a:	4610      	mov	r0, r2
 800ae9c:	e7fb      	b.n	800ae96 <__ascii_mbtowc+0x16>
 800ae9e:	f06f 0001 	mvn.w	r0, #1
 800aea2:	e7f8      	b.n	800ae96 <__ascii_mbtowc+0x16>

0800aea4 <memmove>:
 800aea4:	4288      	cmp	r0, r1
 800aea6:	b510      	push	{r4, lr}
 800aea8:	eb01 0402 	add.w	r4, r1, r2
 800aeac:	d902      	bls.n	800aeb4 <memmove+0x10>
 800aeae:	4284      	cmp	r4, r0
 800aeb0:	4623      	mov	r3, r4
 800aeb2:	d807      	bhi.n	800aec4 <memmove+0x20>
 800aeb4:	1e43      	subs	r3, r0, #1
 800aeb6:	42a1      	cmp	r1, r4
 800aeb8:	d008      	beq.n	800aecc <memmove+0x28>
 800aeba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aec2:	e7f8      	b.n	800aeb6 <memmove+0x12>
 800aec4:	4402      	add	r2, r0
 800aec6:	4601      	mov	r1, r0
 800aec8:	428a      	cmp	r2, r1
 800aeca:	d100      	bne.n	800aece <memmove+0x2a>
 800aecc:	bd10      	pop	{r4, pc}
 800aece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aed6:	e7f7      	b.n	800aec8 <memmove+0x24>

0800aed8 <__malloc_lock>:
 800aed8:	4801      	ldr	r0, [pc, #4]	; (800aee0 <__malloc_lock+0x8>)
 800aeda:	f000 bc1f 	b.w	800b71c <__retarget_lock_acquire_recursive>
 800aede:	bf00      	nop
 800aee0:	20000444 	.word	0x20000444

0800aee4 <__malloc_unlock>:
 800aee4:	4801      	ldr	r0, [pc, #4]	; (800aeec <__malloc_unlock+0x8>)
 800aee6:	f000 bc1a 	b.w	800b71e <__retarget_lock_release_recursive>
 800aeea:	bf00      	nop
 800aeec:	20000444 	.word	0x20000444

0800aef0 <_realloc_r>:
 800aef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aef4:	4680      	mov	r8, r0
 800aef6:	4614      	mov	r4, r2
 800aef8:	460e      	mov	r6, r1
 800aefa:	b921      	cbnz	r1, 800af06 <_realloc_r+0x16>
 800aefc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af00:	4611      	mov	r1, r2
 800af02:	f7ff bdad 	b.w	800aa60 <_malloc_r>
 800af06:	b92a      	cbnz	r2, 800af14 <_realloc_r+0x24>
 800af08:	f7ff fd3e 	bl	800a988 <_free_r>
 800af0c:	4625      	mov	r5, r4
 800af0e:	4628      	mov	r0, r5
 800af10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af14:	f000 fc6a 	bl	800b7ec <_malloc_usable_size_r>
 800af18:	4284      	cmp	r4, r0
 800af1a:	4607      	mov	r7, r0
 800af1c:	d802      	bhi.n	800af24 <_realloc_r+0x34>
 800af1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af22:	d812      	bhi.n	800af4a <_realloc_r+0x5a>
 800af24:	4621      	mov	r1, r4
 800af26:	4640      	mov	r0, r8
 800af28:	f7ff fd9a 	bl	800aa60 <_malloc_r>
 800af2c:	4605      	mov	r5, r0
 800af2e:	2800      	cmp	r0, #0
 800af30:	d0ed      	beq.n	800af0e <_realloc_r+0x1e>
 800af32:	42bc      	cmp	r4, r7
 800af34:	4622      	mov	r2, r4
 800af36:	4631      	mov	r1, r6
 800af38:	bf28      	it	cs
 800af3a:	463a      	movcs	r2, r7
 800af3c:	f7fd fda2 	bl	8008a84 <memcpy>
 800af40:	4631      	mov	r1, r6
 800af42:	4640      	mov	r0, r8
 800af44:	f7ff fd20 	bl	800a988 <_free_r>
 800af48:	e7e1      	b.n	800af0e <_realloc_r+0x1e>
 800af4a:	4635      	mov	r5, r6
 800af4c:	e7df      	b.n	800af0e <_realloc_r+0x1e>

0800af4e <__sfputc_r>:
 800af4e:	6893      	ldr	r3, [r2, #8]
 800af50:	3b01      	subs	r3, #1
 800af52:	2b00      	cmp	r3, #0
 800af54:	b410      	push	{r4}
 800af56:	6093      	str	r3, [r2, #8]
 800af58:	da08      	bge.n	800af6c <__sfputc_r+0x1e>
 800af5a:	6994      	ldr	r4, [r2, #24]
 800af5c:	42a3      	cmp	r3, r4
 800af5e:	db01      	blt.n	800af64 <__sfputc_r+0x16>
 800af60:	290a      	cmp	r1, #10
 800af62:	d103      	bne.n	800af6c <__sfputc_r+0x1e>
 800af64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af68:	f000 b94a 	b.w	800b200 <__swbuf_r>
 800af6c:	6813      	ldr	r3, [r2, #0]
 800af6e:	1c58      	adds	r0, r3, #1
 800af70:	6010      	str	r0, [r2, #0]
 800af72:	7019      	strb	r1, [r3, #0]
 800af74:	4608      	mov	r0, r1
 800af76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <__sfputs_r>:
 800af7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af7e:	4606      	mov	r6, r0
 800af80:	460f      	mov	r7, r1
 800af82:	4614      	mov	r4, r2
 800af84:	18d5      	adds	r5, r2, r3
 800af86:	42ac      	cmp	r4, r5
 800af88:	d101      	bne.n	800af8e <__sfputs_r+0x12>
 800af8a:	2000      	movs	r0, #0
 800af8c:	e007      	b.n	800af9e <__sfputs_r+0x22>
 800af8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af92:	463a      	mov	r2, r7
 800af94:	4630      	mov	r0, r6
 800af96:	f7ff ffda 	bl	800af4e <__sfputc_r>
 800af9a:	1c43      	adds	r3, r0, #1
 800af9c:	d1f3      	bne.n	800af86 <__sfputs_r+0xa>
 800af9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800afa0 <_vfiprintf_r>:
 800afa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa4:	460d      	mov	r5, r1
 800afa6:	b09d      	sub	sp, #116	; 0x74
 800afa8:	4614      	mov	r4, r2
 800afaa:	4698      	mov	r8, r3
 800afac:	4606      	mov	r6, r0
 800afae:	b118      	cbz	r0, 800afb8 <_vfiprintf_r+0x18>
 800afb0:	6983      	ldr	r3, [r0, #24]
 800afb2:	b90b      	cbnz	r3, 800afb8 <_vfiprintf_r+0x18>
 800afb4:	f000 fb14 	bl	800b5e0 <__sinit>
 800afb8:	4b89      	ldr	r3, [pc, #548]	; (800b1e0 <_vfiprintf_r+0x240>)
 800afba:	429d      	cmp	r5, r3
 800afbc:	d11b      	bne.n	800aff6 <_vfiprintf_r+0x56>
 800afbe:	6875      	ldr	r5, [r6, #4]
 800afc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afc2:	07d9      	lsls	r1, r3, #31
 800afc4:	d405      	bmi.n	800afd2 <_vfiprintf_r+0x32>
 800afc6:	89ab      	ldrh	r3, [r5, #12]
 800afc8:	059a      	lsls	r2, r3, #22
 800afca:	d402      	bmi.n	800afd2 <_vfiprintf_r+0x32>
 800afcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afce:	f000 fba5 	bl	800b71c <__retarget_lock_acquire_recursive>
 800afd2:	89ab      	ldrh	r3, [r5, #12]
 800afd4:	071b      	lsls	r3, r3, #28
 800afd6:	d501      	bpl.n	800afdc <_vfiprintf_r+0x3c>
 800afd8:	692b      	ldr	r3, [r5, #16]
 800afda:	b9eb      	cbnz	r3, 800b018 <_vfiprintf_r+0x78>
 800afdc:	4629      	mov	r1, r5
 800afde:	4630      	mov	r0, r6
 800afe0:	f000 f96e 	bl	800b2c0 <__swsetup_r>
 800afe4:	b1c0      	cbz	r0, 800b018 <_vfiprintf_r+0x78>
 800afe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afe8:	07dc      	lsls	r4, r3, #31
 800afea:	d50e      	bpl.n	800b00a <_vfiprintf_r+0x6a>
 800afec:	f04f 30ff 	mov.w	r0, #4294967295
 800aff0:	b01d      	add	sp, #116	; 0x74
 800aff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff6:	4b7b      	ldr	r3, [pc, #492]	; (800b1e4 <_vfiprintf_r+0x244>)
 800aff8:	429d      	cmp	r5, r3
 800affa:	d101      	bne.n	800b000 <_vfiprintf_r+0x60>
 800affc:	68b5      	ldr	r5, [r6, #8]
 800affe:	e7df      	b.n	800afc0 <_vfiprintf_r+0x20>
 800b000:	4b79      	ldr	r3, [pc, #484]	; (800b1e8 <_vfiprintf_r+0x248>)
 800b002:	429d      	cmp	r5, r3
 800b004:	bf08      	it	eq
 800b006:	68f5      	ldreq	r5, [r6, #12]
 800b008:	e7da      	b.n	800afc0 <_vfiprintf_r+0x20>
 800b00a:	89ab      	ldrh	r3, [r5, #12]
 800b00c:	0598      	lsls	r0, r3, #22
 800b00e:	d4ed      	bmi.n	800afec <_vfiprintf_r+0x4c>
 800b010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b012:	f000 fb84 	bl	800b71e <__retarget_lock_release_recursive>
 800b016:	e7e9      	b.n	800afec <_vfiprintf_r+0x4c>
 800b018:	2300      	movs	r3, #0
 800b01a:	9309      	str	r3, [sp, #36]	; 0x24
 800b01c:	2320      	movs	r3, #32
 800b01e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b022:	f8cd 800c 	str.w	r8, [sp, #12]
 800b026:	2330      	movs	r3, #48	; 0x30
 800b028:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b1ec <_vfiprintf_r+0x24c>
 800b02c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b030:	f04f 0901 	mov.w	r9, #1
 800b034:	4623      	mov	r3, r4
 800b036:	469a      	mov	sl, r3
 800b038:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b03c:	b10a      	cbz	r2, 800b042 <_vfiprintf_r+0xa2>
 800b03e:	2a25      	cmp	r2, #37	; 0x25
 800b040:	d1f9      	bne.n	800b036 <_vfiprintf_r+0x96>
 800b042:	ebba 0b04 	subs.w	fp, sl, r4
 800b046:	d00b      	beq.n	800b060 <_vfiprintf_r+0xc0>
 800b048:	465b      	mov	r3, fp
 800b04a:	4622      	mov	r2, r4
 800b04c:	4629      	mov	r1, r5
 800b04e:	4630      	mov	r0, r6
 800b050:	f7ff ff94 	bl	800af7c <__sfputs_r>
 800b054:	3001      	adds	r0, #1
 800b056:	f000 80aa 	beq.w	800b1ae <_vfiprintf_r+0x20e>
 800b05a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b05c:	445a      	add	r2, fp
 800b05e:	9209      	str	r2, [sp, #36]	; 0x24
 800b060:	f89a 3000 	ldrb.w	r3, [sl]
 800b064:	2b00      	cmp	r3, #0
 800b066:	f000 80a2 	beq.w	800b1ae <_vfiprintf_r+0x20e>
 800b06a:	2300      	movs	r3, #0
 800b06c:	f04f 32ff 	mov.w	r2, #4294967295
 800b070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b074:	f10a 0a01 	add.w	sl, sl, #1
 800b078:	9304      	str	r3, [sp, #16]
 800b07a:	9307      	str	r3, [sp, #28]
 800b07c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b080:	931a      	str	r3, [sp, #104]	; 0x68
 800b082:	4654      	mov	r4, sl
 800b084:	2205      	movs	r2, #5
 800b086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b08a:	4858      	ldr	r0, [pc, #352]	; (800b1ec <_vfiprintf_r+0x24c>)
 800b08c:	f7f5 f8b0 	bl	80001f0 <memchr>
 800b090:	9a04      	ldr	r2, [sp, #16]
 800b092:	b9d8      	cbnz	r0, 800b0cc <_vfiprintf_r+0x12c>
 800b094:	06d1      	lsls	r1, r2, #27
 800b096:	bf44      	itt	mi
 800b098:	2320      	movmi	r3, #32
 800b09a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b09e:	0713      	lsls	r3, r2, #28
 800b0a0:	bf44      	itt	mi
 800b0a2:	232b      	movmi	r3, #43	; 0x2b
 800b0a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b0ac:	2b2a      	cmp	r3, #42	; 0x2a
 800b0ae:	d015      	beq.n	800b0dc <_vfiprintf_r+0x13c>
 800b0b0:	9a07      	ldr	r2, [sp, #28]
 800b0b2:	4654      	mov	r4, sl
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	f04f 0c0a 	mov.w	ip, #10
 800b0ba:	4621      	mov	r1, r4
 800b0bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0c0:	3b30      	subs	r3, #48	; 0x30
 800b0c2:	2b09      	cmp	r3, #9
 800b0c4:	d94e      	bls.n	800b164 <_vfiprintf_r+0x1c4>
 800b0c6:	b1b0      	cbz	r0, 800b0f6 <_vfiprintf_r+0x156>
 800b0c8:	9207      	str	r2, [sp, #28]
 800b0ca:	e014      	b.n	800b0f6 <_vfiprintf_r+0x156>
 800b0cc:	eba0 0308 	sub.w	r3, r0, r8
 800b0d0:	fa09 f303 	lsl.w	r3, r9, r3
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	9304      	str	r3, [sp, #16]
 800b0d8:	46a2      	mov	sl, r4
 800b0da:	e7d2      	b.n	800b082 <_vfiprintf_r+0xe2>
 800b0dc:	9b03      	ldr	r3, [sp, #12]
 800b0de:	1d19      	adds	r1, r3, #4
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	9103      	str	r1, [sp, #12]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	bfbb      	ittet	lt
 800b0e8:	425b      	neglt	r3, r3
 800b0ea:	f042 0202 	orrlt.w	r2, r2, #2
 800b0ee:	9307      	strge	r3, [sp, #28]
 800b0f0:	9307      	strlt	r3, [sp, #28]
 800b0f2:	bfb8      	it	lt
 800b0f4:	9204      	strlt	r2, [sp, #16]
 800b0f6:	7823      	ldrb	r3, [r4, #0]
 800b0f8:	2b2e      	cmp	r3, #46	; 0x2e
 800b0fa:	d10c      	bne.n	800b116 <_vfiprintf_r+0x176>
 800b0fc:	7863      	ldrb	r3, [r4, #1]
 800b0fe:	2b2a      	cmp	r3, #42	; 0x2a
 800b100:	d135      	bne.n	800b16e <_vfiprintf_r+0x1ce>
 800b102:	9b03      	ldr	r3, [sp, #12]
 800b104:	1d1a      	adds	r2, r3, #4
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	9203      	str	r2, [sp, #12]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	bfb8      	it	lt
 800b10e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b112:	3402      	adds	r4, #2
 800b114:	9305      	str	r3, [sp, #20]
 800b116:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b1fc <_vfiprintf_r+0x25c>
 800b11a:	7821      	ldrb	r1, [r4, #0]
 800b11c:	2203      	movs	r2, #3
 800b11e:	4650      	mov	r0, sl
 800b120:	f7f5 f866 	bl	80001f0 <memchr>
 800b124:	b140      	cbz	r0, 800b138 <_vfiprintf_r+0x198>
 800b126:	2340      	movs	r3, #64	; 0x40
 800b128:	eba0 000a 	sub.w	r0, r0, sl
 800b12c:	fa03 f000 	lsl.w	r0, r3, r0
 800b130:	9b04      	ldr	r3, [sp, #16]
 800b132:	4303      	orrs	r3, r0
 800b134:	3401      	adds	r4, #1
 800b136:	9304      	str	r3, [sp, #16]
 800b138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b13c:	482c      	ldr	r0, [pc, #176]	; (800b1f0 <_vfiprintf_r+0x250>)
 800b13e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b142:	2206      	movs	r2, #6
 800b144:	f7f5 f854 	bl	80001f0 <memchr>
 800b148:	2800      	cmp	r0, #0
 800b14a:	d03f      	beq.n	800b1cc <_vfiprintf_r+0x22c>
 800b14c:	4b29      	ldr	r3, [pc, #164]	; (800b1f4 <_vfiprintf_r+0x254>)
 800b14e:	bb1b      	cbnz	r3, 800b198 <_vfiprintf_r+0x1f8>
 800b150:	9b03      	ldr	r3, [sp, #12]
 800b152:	3307      	adds	r3, #7
 800b154:	f023 0307 	bic.w	r3, r3, #7
 800b158:	3308      	adds	r3, #8
 800b15a:	9303      	str	r3, [sp, #12]
 800b15c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b15e:	443b      	add	r3, r7
 800b160:	9309      	str	r3, [sp, #36]	; 0x24
 800b162:	e767      	b.n	800b034 <_vfiprintf_r+0x94>
 800b164:	fb0c 3202 	mla	r2, ip, r2, r3
 800b168:	460c      	mov	r4, r1
 800b16a:	2001      	movs	r0, #1
 800b16c:	e7a5      	b.n	800b0ba <_vfiprintf_r+0x11a>
 800b16e:	2300      	movs	r3, #0
 800b170:	3401      	adds	r4, #1
 800b172:	9305      	str	r3, [sp, #20]
 800b174:	4619      	mov	r1, r3
 800b176:	f04f 0c0a 	mov.w	ip, #10
 800b17a:	4620      	mov	r0, r4
 800b17c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b180:	3a30      	subs	r2, #48	; 0x30
 800b182:	2a09      	cmp	r2, #9
 800b184:	d903      	bls.n	800b18e <_vfiprintf_r+0x1ee>
 800b186:	2b00      	cmp	r3, #0
 800b188:	d0c5      	beq.n	800b116 <_vfiprintf_r+0x176>
 800b18a:	9105      	str	r1, [sp, #20]
 800b18c:	e7c3      	b.n	800b116 <_vfiprintf_r+0x176>
 800b18e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b192:	4604      	mov	r4, r0
 800b194:	2301      	movs	r3, #1
 800b196:	e7f0      	b.n	800b17a <_vfiprintf_r+0x1da>
 800b198:	ab03      	add	r3, sp, #12
 800b19a:	9300      	str	r3, [sp, #0]
 800b19c:	462a      	mov	r2, r5
 800b19e:	4b16      	ldr	r3, [pc, #88]	; (800b1f8 <_vfiprintf_r+0x258>)
 800b1a0:	a904      	add	r1, sp, #16
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	f7fd fd24 	bl	8008bf0 <_printf_float>
 800b1a8:	4607      	mov	r7, r0
 800b1aa:	1c78      	adds	r0, r7, #1
 800b1ac:	d1d6      	bne.n	800b15c <_vfiprintf_r+0x1bc>
 800b1ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1b0:	07d9      	lsls	r1, r3, #31
 800b1b2:	d405      	bmi.n	800b1c0 <_vfiprintf_r+0x220>
 800b1b4:	89ab      	ldrh	r3, [r5, #12]
 800b1b6:	059a      	lsls	r2, r3, #22
 800b1b8:	d402      	bmi.n	800b1c0 <_vfiprintf_r+0x220>
 800b1ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1bc:	f000 faaf 	bl	800b71e <__retarget_lock_release_recursive>
 800b1c0:	89ab      	ldrh	r3, [r5, #12]
 800b1c2:	065b      	lsls	r3, r3, #25
 800b1c4:	f53f af12 	bmi.w	800afec <_vfiprintf_r+0x4c>
 800b1c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1ca:	e711      	b.n	800aff0 <_vfiprintf_r+0x50>
 800b1cc:	ab03      	add	r3, sp, #12
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	462a      	mov	r2, r5
 800b1d2:	4b09      	ldr	r3, [pc, #36]	; (800b1f8 <_vfiprintf_r+0x258>)
 800b1d4:	a904      	add	r1, sp, #16
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	f7fd ffae 	bl	8009138 <_printf_i>
 800b1dc:	e7e4      	b.n	800b1a8 <_vfiprintf_r+0x208>
 800b1de:	bf00      	nop
 800b1e0:	0800cc2c 	.word	0x0800cc2c
 800b1e4:	0800cc4c 	.word	0x0800cc4c
 800b1e8:	0800cc0c 	.word	0x0800cc0c
 800b1ec:	0800cbb4 	.word	0x0800cbb4
 800b1f0:	0800cbbe 	.word	0x0800cbbe
 800b1f4:	08008bf1 	.word	0x08008bf1
 800b1f8:	0800af7d 	.word	0x0800af7d
 800b1fc:	0800cbba 	.word	0x0800cbba

0800b200 <__swbuf_r>:
 800b200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b202:	460e      	mov	r6, r1
 800b204:	4614      	mov	r4, r2
 800b206:	4605      	mov	r5, r0
 800b208:	b118      	cbz	r0, 800b212 <__swbuf_r+0x12>
 800b20a:	6983      	ldr	r3, [r0, #24]
 800b20c:	b90b      	cbnz	r3, 800b212 <__swbuf_r+0x12>
 800b20e:	f000 f9e7 	bl	800b5e0 <__sinit>
 800b212:	4b21      	ldr	r3, [pc, #132]	; (800b298 <__swbuf_r+0x98>)
 800b214:	429c      	cmp	r4, r3
 800b216:	d12b      	bne.n	800b270 <__swbuf_r+0x70>
 800b218:	686c      	ldr	r4, [r5, #4]
 800b21a:	69a3      	ldr	r3, [r4, #24]
 800b21c:	60a3      	str	r3, [r4, #8]
 800b21e:	89a3      	ldrh	r3, [r4, #12]
 800b220:	071a      	lsls	r2, r3, #28
 800b222:	d52f      	bpl.n	800b284 <__swbuf_r+0x84>
 800b224:	6923      	ldr	r3, [r4, #16]
 800b226:	b36b      	cbz	r3, 800b284 <__swbuf_r+0x84>
 800b228:	6923      	ldr	r3, [r4, #16]
 800b22a:	6820      	ldr	r0, [r4, #0]
 800b22c:	1ac0      	subs	r0, r0, r3
 800b22e:	6963      	ldr	r3, [r4, #20]
 800b230:	b2f6      	uxtb	r6, r6
 800b232:	4283      	cmp	r3, r0
 800b234:	4637      	mov	r7, r6
 800b236:	dc04      	bgt.n	800b242 <__swbuf_r+0x42>
 800b238:	4621      	mov	r1, r4
 800b23a:	4628      	mov	r0, r5
 800b23c:	f000 f93c 	bl	800b4b8 <_fflush_r>
 800b240:	bb30      	cbnz	r0, 800b290 <__swbuf_r+0x90>
 800b242:	68a3      	ldr	r3, [r4, #8]
 800b244:	3b01      	subs	r3, #1
 800b246:	60a3      	str	r3, [r4, #8]
 800b248:	6823      	ldr	r3, [r4, #0]
 800b24a:	1c5a      	adds	r2, r3, #1
 800b24c:	6022      	str	r2, [r4, #0]
 800b24e:	701e      	strb	r6, [r3, #0]
 800b250:	6963      	ldr	r3, [r4, #20]
 800b252:	3001      	adds	r0, #1
 800b254:	4283      	cmp	r3, r0
 800b256:	d004      	beq.n	800b262 <__swbuf_r+0x62>
 800b258:	89a3      	ldrh	r3, [r4, #12]
 800b25a:	07db      	lsls	r3, r3, #31
 800b25c:	d506      	bpl.n	800b26c <__swbuf_r+0x6c>
 800b25e:	2e0a      	cmp	r6, #10
 800b260:	d104      	bne.n	800b26c <__swbuf_r+0x6c>
 800b262:	4621      	mov	r1, r4
 800b264:	4628      	mov	r0, r5
 800b266:	f000 f927 	bl	800b4b8 <_fflush_r>
 800b26a:	b988      	cbnz	r0, 800b290 <__swbuf_r+0x90>
 800b26c:	4638      	mov	r0, r7
 800b26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b270:	4b0a      	ldr	r3, [pc, #40]	; (800b29c <__swbuf_r+0x9c>)
 800b272:	429c      	cmp	r4, r3
 800b274:	d101      	bne.n	800b27a <__swbuf_r+0x7a>
 800b276:	68ac      	ldr	r4, [r5, #8]
 800b278:	e7cf      	b.n	800b21a <__swbuf_r+0x1a>
 800b27a:	4b09      	ldr	r3, [pc, #36]	; (800b2a0 <__swbuf_r+0xa0>)
 800b27c:	429c      	cmp	r4, r3
 800b27e:	bf08      	it	eq
 800b280:	68ec      	ldreq	r4, [r5, #12]
 800b282:	e7ca      	b.n	800b21a <__swbuf_r+0x1a>
 800b284:	4621      	mov	r1, r4
 800b286:	4628      	mov	r0, r5
 800b288:	f000 f81a 	bl	800b2c0 <__swsetup_r>
 800b28c:	2800      	cmp	r0, #0
 800b28e:	d0cb      	beq.n	800b228 <__swbuf_r+0x28>
 800b290:	f04f 37ff 	mov.w	r7, #4294967295
 800b294:	e7ea      	b.n	800b26c <__swbuf_r+0x6c>
 800b296:	bf00      	nop
 800b298:	0800cc2c 	.word	0x0800cc2c
 800b29c:	0800cc4c 	.word	0x0800cc4c
 800b2a0:	0800cc0c 	.word	0x0800cc0c

0800b2a4 <__ascii_wctomb>:
 800b2a4:	b149      	cbz	r1, 800b2ba <__ascii_wctomb+0x16>
 800b2a6:	2aff      	cmp	r2, #255	; 0xff
 800b2a8:	bf85      	ittet	hi
 800b2aa:	238a      	movhi	r3, #138	; 0x8a
 800b2ac:	6003      	strhi	r3, [r0, #0]
 800b2ae:	700a      	strbls	r2, [r1, #0]
 800b2b0:	f04f 30ff 	movhi.w	r0, #4294967295
 800b2b4:	bf98      	it	ls
 800b2b6:	2001      	movls	r0, #1
 800b2b8:	4770      	bx	lr
 800b2ba:	4608      	mov	r0, r1
 800b2bc:	4770      	bx	lr
	...

0800b2c0 <__swsetup_r>:
 800b2c0:	4b32      	ldr	r3, [pc, #200]	; (800b38c <__swsetup_r+0xcc>)
 800b2c2:	b570      	push	{r4, r5, r6, lr}
 800b2c4:	681d      	ldr	r5, [r3, #0]
 800b2c6:	4606      	mov	r6, r0
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	b125      	cbz	r5, 800b2d6 <__swsetup_r+0x16>
 800b2cc:	69ab      	ldr	r3, [r5, #24]
 800b2ce:	b913      	cbnz	r3, 800b2d6 <__swsetup_r+0x16>
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	f000 f985 	bl	800b5e0 <__sinit>
 800b2d6:	4b2e      	ldr	r3, [pc, #184]	; (800b390 <__swsetup_r+0xd0>)
 800b2d8:	429c      	cmp	r4, r3
 800b2da:	d10f      	bne.n	800b2fc <__swsetup_r+0x3c>
 800b2dc:	686c      	ldr	r4, [r5, #4]
 800b2de:	89a3      	ldrh	r3, [r4, #12]
 800b2e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2e4:	0719      	lsls	r1, r3, #28
 800b2e6:	d42c      	bmi.n	800b342 <__swsetup_r+0x82>
 800b2e8:	06dd      	lsls	r5, r3, #27
 800b2ea:	d411      	bmi.n	800b310 <__swsetup_r+0x50>
 800b2ec:	2309      	movs	r3, #9
 800b2ee:	6033      	str	r3, [r6, #0]
 800b2f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b2f4:	81a3      	strh	r3, [r4, #12]
 800b2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fa:	e03e      	b.n	800b37a <__swsetup_r+0xba>
 800b2fc:	4b25      	ldr	r3, [pc, #148]	; (800b394 <__swsetup_r+0xd4>)
 800b2fe:	429c      	cmp	r4, r3
 800b300:	d101      	bne.n	800b306 <__swsetup_r+0x46>
 800b302:	68ac      	ldr	r4, [r5, #8]
 800b304:	e7eb      	b.n	800b2de <__swsetup_r+0x1e>
 800b306:	4b24      	ldr	r3, [pc, #144]	; (800b398 <__swsetup_r+0xd8>)
 800b308:	429c      	cmp	r4, r3
 800b30a:	bf08      	it	eq
 800b30c:	68ec      	ldreq	r4, [r5, #12]
 800b30e:	e7e6      	b.n	800b2de <__swsetup_r+0x1e>
 800b310:	0758      	lsls	r0, r3, #29
 800b312:	d512      	bpl.n	800b33a <__swsetup_r+0x7a>
 800b314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b316:	b141      	cbz	r1, 800b32a <__swsetup_r+0x6a>
 800b318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b31c:	4299      	cmp	r1, r3
 800b31e:	d002      	beq.n	800b326 <__swsetup_r+0x66>
 800b320:	4630      	mov	r0, r6
 800b322:	f7ff fb31 	bl	800a988 <_free_r>
 800b326:	2300      	movs	r3, #0
 800b328:	6363      	str	r3, [r4, #52]	; 0x34
 800b32a:	89a3      	ldrh	r3, [r4, #12]
 800b32c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b330:	81a3      	strh	r3, [r4, #12]
 800b332:	2300      	movs	r3, #0
 800b334:	6063      	str	r3, [r4, #4]
 800b336:	6923      	ldr	r3, [r4, #16]
 800b338:	6023      	str	r3, [r4, #0]
 800b33a:	89a3      	ldrh	r3, [r4, #12]
 800b33c:	f043 0308 	orr.w	r3, r3, #8
 800b340:	81a3      	strh	r3, [r4, #12]
 800b342:	6923      	ldr	r3, [r4, #16]
 800b344:	b94b      	cbnz	r3, 800b35a <__swsetup_r+0x9a>
 800b346:	89a3      	ldrh	r3, [r4, #12]
 800b348:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b34c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b350:	d003      	beq.n	800b35a <__swsetup_r+0x9a>
 800b352:	4621      	mov	r1, r4
 800b354:	4630      	mov	r0, r6
 800b356:	f000 fa09 	bl	800b76c <__smakebuf_r>
 800b35a:	89a0      	ldrh	r0, [r4, #12]
 800b35c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b360:	f010 0301 	ands.w	r3, r0, #1
 800b364:	d00a      	beq.n	800b37c <__swsetup_r+0xbc>
 800b366:	2300      	movs	r3, #0
 800b368:	60a3      	str	r3, [r4, #8]
 800b36a:	6963      	ldr	r3, [r4, #20]
 800b36c:	425b      	negs	r3, r3
 800b36e:	61a3      	str	r3, [r4, #24]
 800b370:	6923      	ldr	r3, [r4, #16]
 800b372:	b943      	cbnz	r3, 800b386 <__swsetup_r+0xc6>
 800b374:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b378:	d1ba      	bne.n	800b2f0 <__swsetup_r+0x30>
 800b37a:	bd70      	pop	{r4, r5, r6, pc}
 800b37c:	0781      	lsls	r1, r0, #30
 800b37e:	bf58      	it	pl
 800b380:	6963      	ldrpl	r3, [r4, #20]
 800b382:	60a3      	str	r3, [r4, #8]
 800b384:	e7f4      	b.n	800b370 <__swsetup_r+0xb0>
 800b386:	2000      	movs	r0, #0
 800b388:	e7f7      	b.n	800b37a <__swsetup_r+0xba>
 800b38a:	bf00      	nop
 800b38c:	20000014 	.word	0x20000014
 800b390:	0800cc2c 	.word	0x0800cc2c
 800b394:	0800cc4c 	.word	0x0800cc4c
 800b398:	0800cc0c 	.word	0x0800cc0c

0800b39c <abort>:
 800b39c:	b508      	push	{r3, lr}
 800b39e:	2006      	movs	r0, #6
 800b3a0:	f000 fa54 	bl	800b84c <raise>
 800b3a4:	2001      	movs	r0, #1
 800b3a6:	f7f6 ff9b 	bl	80022e0 <_exit>
	...

0800b3ac <__sflush_r>:
 800b3ac:	898a      	ldrh	r2, [r1, #12]
 800b3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b2:	4605      	mov	r5, r0
 800b3b4:	0710      	lsls	r0, r2, #28
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	d458      	bmi.n	800b46c <__sflush_r+0xc0>
 800b3ba:	684b      	ldr	r3, [r1, #4]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	dc05      	bgt.n	800b3cc <__sflush_r+0x20>
 800b3c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	dc02      	bgt.n	800b3cc <__sflush_r+0x20>
 800b3c6:	2000      	movs	r0, #0
 800b3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3ce:	2e00      	cmp	r6, #0
 800b3d0:	d0f9      	beq.n	800b3c6 <__sflush_r+0x1a>
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b3d8:	682f      	ldr	r7, [r5, #0]
 800b3da:	602b      	str	r3, [r5, #0]
 800b3dc:	d032      	beq.n	800b444 <__sflush_r+0x98>
 800b3de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	075a      	lsls	r2, r3, #29
 800b3e4:	d505      	bpl.n	800b3f2 <__sflush_r+0x46>
 800b3e6:	6863      	ldr	r3, [r4, #4]
 800b3e8:	1ac0      	subs	r0, r0, r3
 800b3ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3ec:	b10b      	cbz	r3, 800b3f2 <__sflush_r+0x46>
 800b3ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b3f0:	1ac0      	subs	r0, r0, r3
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3f8:	6a21      	ldr	r1, [r4, #32]
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	47b0      	blx	r6
 800b3fe:	1c43      	adds	r3, r0, #1
 800b400:	89a3      	ldrh	r3, [r4, #12]
 800b402:	d106      	bne.n	800b412 <__sflush_r+0x66>
 800b404:	6829      	ldr	r1, [r5, #0]
 800b406:	291d      	cmp	r1, #29
 800b408:	d82c      	bhi.n	800b464 <__sflush_r+0xb8>
 800b40a:	4a2a      	ldr	r2, [pc, #168]	; (800b4b4 <__sflush_r+0x108>)
 800b40c:	40ca      	lsrs	r2, r1
 800b40e:	07d6      	lsls	r6, r2, #31
 800b410:	d528      	bpl.n	800b464 <__sflush_r+0xb8>
 800b412:	2200      	movs	r2, #0
 800b414:	6062      	str	r2, [r4, #4]
 800b416:	04d9      	lsls	r1, r3, #19
 800b418:	6922      	ldr	r2, [r4, #16]
 800b41a:	6022      	str	r2, [r4, #0]
 800b41c:	d504      	bpl.n	800b428 <__sflush_r+0x7c>
 800b41e:	1c42      	adds	r2, r0, #1
 800b420:	d101      	bne.n	800b426 <__sflush_r+0x7a>
 800b422:	682b      	ldr	r3, [r5, #0]
 800b424:	b903      	cbnz	r3, 800b428 <__sflush_r+0x7c>
 800b426:	6560      	str	r0, [r4, #84]	; 0x54
 800b428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b42a:	602f      	str	r7, [r5, #0]
 800b42c:	2900      	cmp	r1, #0
 800b42e:	d0ca      	beq.n	800b3c6 <__sflush_r+0x1a>
 800b430:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b434:	4299      	cmp	r1, r3
 800b436:	d002      	beq.n	800b43e <__sflush_r+0x92>
 800b438:	4628      	mov	r0, r5
 800b43a:	f7ff faa5 	bl	800a988 <_free_r>
 800b43e:	2000      	movs	r0, #0
 800b440:	6360      	str	r0, [r4, #52]	; 0x34
 800b442:	e7c1      	b.n	800b3c8 <__sflush_r+0x1c>
 800b444:	6a21      	ldr	r1, [r4, #32]
 800b446:	2301      	movs	r3, #1
 800b448:	4628      	mov	r0, r5
 800b44a:	47b0      	blx	r6
 800b44c:	1c41      	adds	r1, r0, #1
 800b44e:	d1c7      	bne.n	800b3e0 <__sflush_r+0x34>
 800b450:	682b      	ldr	r3, [r5, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d0c4      	beq.n	800b3e0 <__sflush_r+0x34>
 800b456:	2b1d      	cmp	r3, #29
 800b458:	d001      	beq.n	800b45e <__sflush_r+0xb2>
 800b45a:	2b16      	cmp	r3, #22
 800b45c:	d101      	bne.n	800b462 <__sflush_r+0xb6>
 800b45e:	602f      	str	r7, [r5, #0]
 800b460:	e7b1      	b.n	800b3c6 <__sflush_r+0x1a>
 800b462:	89a3      	ldrh	r3, [r4, #12]
 800b464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b468:	81a3      	strh	r3, [r4, #12]
 800b46a:	e7ad      	b.n	800b3c8 <__sflush_r+0x1c>
 800b46c:	690f      	ldr	r7, [r1, #16]
 800b46e:	2f00      	cmp	r7, #0
 800b470:	d0a9      	beq.n	800b3c6 <__sflush_r+0x1a>
 800b472:	0793      	lsls	r3, r2, #30
 800b474:	680e      	ldr	r6, [r1, #0]
 800b476:	bf08      	it	eq
 800b478:	694b      	ldreq	r3, [r1, #20]
 800b47a:	600f      	str	r7, [r1, #0]
 800b47c:	bf18      	it	ne
 800b47e:	2300      	movne	r3, #0
 800b480:	eba6 0807 	sub.w	r8, r6, r7
 800b484:	608b      	str	r3, [r1, #8]
 800b486:	f1b8 0f00 	cmp.w	r8, #0
 800b48a:	dd9c      	ble.n	800b3c6 <__sflush_r+0x1a>
 800b48c:	6a21      	ldr	r1, [r4, #32]
 800b48e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b490:	4643      	mov	r3, r8
 800b492:	463a      	mov	r2, r7
 800b494:	4628      	mov	r0, r5
 800b496:	47b0      	blx	r6
 800b498:	2800      	cmp	r0, #0
 800b49a:	dc06      	bgt.n	800b4aa <__sflush_r+0xfe>
 800b49c:	89a3      	ldrh	r3, [r4, #12]
 800b49e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4a2:	81a3      	strh	r3, [r4, #12]
 800b4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a8:	e78e      	b.n	800b3c8 <__sflush_r+0x1c>
 800b4aa:	4407      	add	r7, r0
 800b4ac:	eba8 0800 	sub.w	r8, r8, r0
 800b4b0:	e7e9      	b.n	800b486 <__sflush_r+0xda>
 800b4b2:	bf00      	nop
 800b4b4:	20400001 	.word	0x20400001

0800b4b8 <_fflush_r>:
 800b4b8:	b538      	push	{r3, r4, r5, lr}
 800b4ba:	690b      	ldr	r3, [r1, #16]
 800b4bc:	4605      	mov	r5, r0
 800b4be:	460c      	mov	r4, r1
 800b4c0:	b913      	cbnz	r3, 800b4c8 <_fflush_r+0x10>
 800b4c2:	2500      	movs	r5, #0
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	bd38      	pop	{r3, r4, r5, pc}
 800b4c8:	b118      	cbz	r0, 800b4d2 <_fflush_r+0x1a>
 800b4ca:	6983      	ldr	r3, [r0, #24]
 800b4cc:	b90b      	cbnz	r3, 800b4d2 <_fflush_r+0x1a>
 800b4ce:	f000 f887 	bl	800b5e0 <__sinit>
 800b4d2:	4b14      	ldr	r3, [pc, #80]	; (800b524 <_fflush_r+0x6c>)
 800b4d4:	429c      	cmp	r4, r3
 800b4d6:	d11b      	bne.n	800b510 <_fflush_r+0x58>
 800b4d8:	686c      	ldr	r4, [r5, #4]
 800b4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d0ef      	beq.n	800b4c2 <_fflush_r+0xa>
 800b4e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b4e4:	07d0      	lsls	r0, r2, #31
 800b4e6:	d404      	bmi.n	800b4f2 <_fflush_r+0x3a>
 800b4e8:	0599      	lsls	r1, r3, #22
 800b4ea:	d402      	bmi.n	800b4f2 <_fflush_r+0x3a>
 800b4ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4ee:	f000 f915 	bl	800b71c <__retarget_lock_acquire_recursive>
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	4621      	mov	r1, r4
 800b4f6:	f7ff ff59 	bl	800b3ac <__sflush_r>
 800b4fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4fc:	07da      	lsls	r2, r3, #31
 800b4fe:	4605      	mov	r5, r0
 800b500:	d4e0      	bmi.n	800b4c4 <_fflush_r+0xc>
 800b502:	89a3      	ldrh	r3, [r4, #12]
 800b504:	059b      	lsls	r3, r3, #22
 800b506:	d4dd      	bmi.n	800b4c4 <_fflush_r+0xc>
 800b508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b50a:	f000 f908 	bl	800b71e <__retarget_lock_release_recursive>
 800b50e:	e7d9      	b.n	800b4c4 <_fflush_r+0xc>
 800b510:	4b05      	ldr	r3, [pc, #20]	; (800b528 <_fflush_r+0x70>)
 800b512:	429c      	cmp	r4, r3
 800b514:	d101      	bne.n	800b51a <_fflush_r+0x62>
 800b516:	68ac      	ldr	r4, [r5, #8]
 800b518:	e7df      	b.n	800b4da <_fflush_r+0x22>
 800b51a:	4b04      	ldr	r3, [pc, #16]	; (800b52c <_fflush_r+0x74>)
 800b51c:	429c      	cmp	r4, r3
 800b51e:	bf08      	it	eq
 800b520:	68ec      	ldreq	r4, [r5, #12]
 800b522:	e7da      	b.n	800b4da <_fflush_r+0x22>
 800b524:	0800cc2c 	.word	0x0800cc2c
 800b528:	0800cc4c 	.word	0x0800cc4c
 800b52c:	0800cc0c 	.word	0x0800cc0c

0800b530 <std>:
 800b530:	2300      	movs	r3, #0
 800b532:	b510      	push	{r4, lr}
 800b534:	4604      	mov	r4, r0
 800b536:	e9c0 3300 	strd	r3, r3, [r0]
 800b53a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b53e:	6083      	str	r3, [r0, #8]
 800b540:	8181      	strh	r1, [r0, #12]
 800b542:	6643      	str	r3, [r0, #100]	; 0x64
 800b544:	81c2      	strh	r2, [r0, #14]
 800b546:	6183      	str	r3, [r0, #24]
 800b548:	4619      	mov	r1, r3
 800b54a:	2208      	movs	r2, #8
 800b54c:	305c      	adds	r0, #92	; 0x5c
 800b54e:	f7fd faa7 	bl	8008aa0 <memset>
 800b552:	4b05      	ldr	r3, [pc, #20]	; (800b568 <std+0x38>)
 800b554:	6263      	str	r3, [r4, #36]	; 0x24
 800b556:	4b05      	ldr	r3, [pc, #20]	; (800b56c <std+0x3c>)
 800b558:	62a3      	str	r3, [r4, #40]	; 0x28
 800b55a:	4b05      	ldr	r3, [pc, #20]	; (800b570 <std+0x40>)
 800b55c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b55e:	4b05      	ldr	r3, [pc, #20]	; (800b574 <std+0x44>)
 800b560:	6224      	str	r4, [r4, #32]
 800b562:	6323      	str	r3, [r4, #48]	; 0x30
 800b564:	bd10      	pop	{r4, pc}
 800b566:	bf00      	nop
 800b568:	0800b885 	.word	0x0800b885
 800b56c:	0800b8a7 	.word	0x0800b8a7
 800b570:	0800b8df 	.word	0x0800b8df
 800b574:	0800b903 	.word	0x0800b903

0800b578 <_cleanup_r>:
 800b578:	4901      	ldr	r1, [pc, #4]	; (800b580 <_cleanup_r+0x8>)
 800b57a:	f000 b8af 	b.w	800b6dc <_fwalk_reent>
 800b57e:	bf00      	nop
 800b580:	0800b4b9 	.word	0x0800b4b9

0800b584 <__sfmoreglue>:
 800b584:	b570      	push	{r4, r5, r6, lr}
 800b586:	2268      	movs	r2, #104	; 0x68
 800b588:	1e4d      	subs	r5, r1, #1
 800b58a:	4355      	muls	r5, r2
 800b58c:	460e      	mov	r6, r1
 800b58e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b592:	f7ff fa65 	bl	800aa60 <_malloc_r>
 800b596:	4604      	mov	r4, r0
 800b598:	b140      	cbz	r0, 800b5ac <__sfmoreglue+0x28>
 800b59a:	2100      	movs	r1, #0
 800b59c:	e9c0 1600 	strd	r1, r6, [r0]
 800b5a0:	300c      	adds	r0, #12
 800b5a2:	60a0      	str	r0, [r4, #8]
 800b5a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b5a8:	f7fd fa7a 	bl	8008aa0 <memset>
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	bd70      	pop	{r4, r5, r6, pc}

0800b5b0 <__sfp_lock_acquire>:
 800b5b0:	4801      	ldr	r0, [pc, #4]	; (800b5b8 <__sfp_lock_acquire+0x8>)
 800b5b2:	f000 b8b3 	b.w	800b71c <__retarget_lock_acquire_recursive>
 800b5b6:	bf00      	nop
 800b5b8:	20000445 	.word	0x20000445

0800b5bc <__sfp_lock_release>:
 800b5bc:	4801      	ldr	r0, [pc, #4]	; (800b5c4 <__sfp_lock_release+0x8>)
 800b5be:	f000 b8ae 	b.w	800b71e <__retarget_lock_release_recursive>
 800b5c2:	bf00      	nop
 800b5c4:	20000445 	.word	0x20000445

0800b5c8 <__sinit_lock_acquire>:
 800b5c8:	4801      	ldr	r0, [pc, #4]	; (800b5d0 <__sinit_lock_acquire+0x8>)
 800b5ca:	f000 b8a7 	b.w	800b71c <__retarget_lock_acquire_recursive>
 800b5ce:	bf00      	nop
 800b5d0:	20000446 	.word	0x20000446

0800b5d4 <__sinit_lock_release>:
 800b5d4:	4801      	ldr	r0, [pc, #4]	; (800b5dc <__sinit_lock_release+0x8>)
 800b5d6:	f000 b8a2 	b.w	800b71e <__retarget_lock_release_recursive>
 800b5da:	bf00      	nop
 800b5dc:	20000446 	.word	0x20000446

0800b5e0 <__sinit>:
 800b5e0:	b510      	push	{r4, lr}
 800b5e2:	4604      	mov	r4, r0
 800b5e4:	f7ff fff0 	bl	800b5c8 <__sinit_lock_acquire>
 800b5e8:	69a3      	ldr	r3, [r4, #24]
 800b5ea:	b11b      	cbz	r3, 800b5f4 <__sinit+0x14>
 800b5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5f0:	f7ff bff0 	b.w	800b5d4 <__sinit_lock_release>
 800b5f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b5f8:	6523      	str	r3, [r4, #80]	; 0x50
 800b5fa:	4b13      	ldr	r3, [pc, #76]	; (800b648 <__sinit+0x68>)
 800b5fc:	4a13      	ldr	r2, [pc, #76]	; (800b64c <__sinit+0x6c>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	62a2      	str	r2, [r4, #40]	; 0x28
 800b602:	42a3      	cmp	r3, r4
 800b604:	bf04      	itt	eq
 800b606:	2301      	moveq	r3, #1
 800b608:	61a3      	streq	r3, [r4, #24]
 800b60a:	4620      	mov	r0, r4
 800b60c:	f000 f820 	bl	800b650 <__sfp>
 800b610:	6060      	str	r0, [r4, #4]
 800b612:	4620      	mov	r0, r4
 800b614:	f000 f81c 	bl	800b650 <__sfp>
 800b618:	60a0      	str	r0, [r4, #8]
 800b61a:	4620      	mov	r0, r4
 800b61c:	f000 f818 	bl	800b650 <__sfp>
 800b620:	2200      	movs	r2, #0
 800b622:	60e0      	str	r0, [r4, #12]
 800b624:	2104      	movs	r1, #4
 800b626:	6860      	ldr	r0, [r4, #4]
 800b628:	f7ff ff82 	bl	800b530 <std>
 800b62c:	68a0      	ldr	r0, [r4, #8]
 800b62e:	2201      	movs	r2, #1
 800b630:	2109      	movs	r1, #9
 800b632:	f7ff ff7d 	bl	800b530 <std>
 800b636:	68e0      	ldr	r0, [r4, #12]
 800b638:	2202      	movs	r2, #2
 800b63a:	2112      	movs	r1, #18
 800b63c:	f7ff ff78 	bl	800b530 <std>
 800b640:	2301      	movs	r3, #1
 800b642:	61a3      	str	r3, [r4, #24]
 800b644:	e7d2      	b.n	800b5ec <__sinit+0xc>
 800b646:	bf00      	nop
 800b648:	0800c88c 	.word	0x0800c88c
 800b64c:	0800b579 	.word	0x0800b579

0800b650 <__sfp>:
 800b650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b652:	4607      	mov	r7, r0
 800b654:	f7ff ffac 	bl	800b5b0 <__sfp_lock_acquire>
 800b658:	4b1e      	ldr	r3, [pc, #120]	; (800b6d4 <__sfp+0x84>)
 800b65a:	681e      	ldr	r6, [r3, #0]
 800b65c:	69b3      	ldr	r3, [r6, #24]
 800b65e:	b913      	cbnz	r3, 800b666 <__sfp+0x16>
 800b660:	4630      	mov	r0, r6
 800b662:	f7ff ffbd 	bl	800b5e0 <__sinit>
 800b666:	3648      	adds	r6, #72	; 0x48
 800b668:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b66c:	3b01      	subs	r3, #1
 800b66e:	d503      	bpl.n	800b678 <__sfp+0x28>
 800b670:	6833      	ldr	r3, [r6, #0]
 800b672:	b30b      	cbz	r3, 800b6b8 <__sfp+0x68>
 800b674:	6836      	ldr	r6, [r6, #0]
 800b676:	e7f7      	b.n	800b668 <__sfp+0x18>
 800b678:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b67c:	b9d5      	cbnz	r5, 800b6b4 <__sfp+0x64>
 800b67e:	4b16      	ldr	r3, [pc, #88]	; (800b6d8 <__sfp+0x88>)
 800b680:	60e3      	str	r3, [r4, #12]
 800b682:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b686:	6665      	str	r5, [r4, #100]	; 0x64
 800b688:	f000 f847 	bl	800b71a <__retarget_lock_init_recursive>
 800b68c:	f7ff ff96 	bl	800b5bc <__sfp_lock_release>
 800b690:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b694:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b698:	6025      	str	r5, [r4, #0]
 800b69a:	61a5      	str	r5, [r4, #24]
 800b69c:	2208      	movs	r2, #8
 800b69e:	4629      	mov	r1, r5
 800b6a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b6a4:	f7fd f9fc 	bl	8008aa0 <memset>
 800b6a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b6ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6b4:	3468      	adds	r4, #104	; 0x68
 800b6b6:	e7d9      	b.n	800b66c <__sfp+0x1c>
 800b6b8:	2104      	movs	r1, #4
 800b6ba:	4638      	mov	r0, r7
 800b6bc:	f7ff ff62 	bl	800b584 <__sfmoreglue>
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	6030      	str	r0, [r6, #0]
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	d1d5      	bne.n	800b674 <__sfp+0x24>
 800b6c8:	f7ff ff78 	bl	800b5bc <__sfp_lock_release>
 800b6cc:	230c      	movs	r3, #12
 800b6ce:	603b      	str	r3, [r7, #0]
 800b6d0:	e7ee      	b.n	800b6b0 <__sfp+0x60>
 800b6d2:	bf00      	nop
 800b6d4:	0800c88c 	.word	0x0800c88c
 800b6d8:	ffff0001 	.word	0xffff0001

0800b6dc <_fwalk_reent>:
 800b6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6e0:	4606      	mov	r6, r0
 800b6e2:	4688      	mov	r8, r1
 800b6e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b6e8:	2700      	movs	r7, #0
 800b6ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6ee:	f1b9 0901 	subs.w	r9, r9, #1
 800b6f2:	d505      	bpl.n	800b700 <_fwalk_reent+0x24>
 800b6f4:	6824      	ldr	r4, [r4, #0]
 800b6f6:	2c00      	cmp	r4, #0
 800b6f8:	d1f7      	bne.n	800b6ea <_fwalk_reent+0xe>
 800b6fa:	4638      	mov	r0, r7
 800b6fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b700:	89ab      	ldrh	r3, [r5, #12]
 800b702:	2b01      	cmp	r3, #1
 800b704:	d907      	bls.n	800b716 <_fwalk_reent+0x3a>
 800b706:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b70a:	3301      	adds	r3, #1
 800b70c:	d003      	beq.n	800b716 <_fwalk_reent+0x3a>
 800b70e:	4629      	mov	r1, r5
 800b710:	4630      	mov	r0, r6
 800b712:	47c0      	blx	r8
 800b714:	4307      	orrs	r7, r0
 800b716:	3568      	adds	r5, #104	; 0x68
 800b718:	e7e9      	b.n	800b6ee <_fwalk_reent+0x12>

0800b71a <__retarget_lock_init_recursive>:
 800b71a:	4770      	bx	lr

0800b71c <__retarget_lock_acquire_recursive>:
 800b71c:	4770      	bx	lr

0800b71e <__retarget_lock_release_recursive>:
 800b71e:	4770      	bx	lr

0800b720 <__swhatbuf_r>:
 800b720:	b570      	push	{r4, r5, r6, lr}
 800b722:	460e      	mov	r6, r1
 800b724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b728:	2900      	cmp	r1, #0
 800b72a:	b096      	sub	sp, #88	; 0x58
 800b72c:	4614      	mov	r4, r2
 800b72e:	461d      	mov	r5, r3
 800b730:	da08      	bge.n	800b744 <__swhatbuf_r+0x24>
 800b732:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b736:	2200      	movs	r2, #0
 800b738:	602a      	str	r2, [r5, #0]
 800b73a:	061a      	lsls	r2, r3, #24
 800b73c:	d410      	bmi.n	800b760 <__swhatbuf_r+0x40>
 800b73e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b742:	e00e      	b.n	800b762 <__swhatbuf_r+0x42>
 800b744:	466a      	mov	r2, sp
 800b746:	f000 f903 	bl	800b950 <_fstat_r>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	dbf1      	blt.n	800b732 <__swhatbuf_r+0x12>
 800b74e:	9a01      	ldr	r2, [sp, #4]
 800b750:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b754:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b758:	425a      	negs	r2, r3
 800b75a:	415a      	adcs	r2, r3
 800b75c:	602a      	str	r2, [r5, #0]
 800b75e:	e7ee      	b.n	800b73e <__swhatbuf_r+0x1e>
 800b760:	2340      	movs	r3, #64	; 0x40
 800b762:	2000      	movs	r0, #0
 800b764:	6023      	str	r3, [r4, #0]
 800b766:	b016      	add	sp, #88	; 0x58
 800b768:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b76c <__smakebuf_r>:
 800b76c:	898b      	ldrh	r3, [r1, #12]
 800b76e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b770:	079d      	lsls	r5, r3, #30
 800b772:	4606      	mov	r6, r0
 800b774:	460c      	mov	r4, r1
 800b776:	d507      	bpl.n	800b788 <__smakebuf_r+0x1c>
 800b778:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	6123      	str	r3, [r4, #16]
 800b780:	2301      	movs	r3, #1
 800b782:	6163      	str	r3, [r4, #20]
 800b784:	b002      	add	sp, #8
 800b786:	bd70      	pop	{r4, r5, r6, pc}
 800b788:	ab01      	add	r3, sp, #4
 800b78a:	466a      	mov	r2, sp
 800b78c:	f7ff ffc8 	bl	800b720 <__swhatbuf_r>
 800b790:	9900      	ldr	r1, [sp, #0]
 800b792:	4605      	mov	r5, r0
 800b794:	4630      	mov	r0, r6
 800b796:	f7ff f963 	bl	800aa60 <_malloc_r>
 800b79a:	b948      	cbnz	r0, 800b7b0 <__smakebuf_r+0x44>
 800b79c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7a0:	059a      	lsls	r2, r3, #22
 800b7a2:	d4ef      	bmi.n	800b784 <__smakebuf_r+0x18>
 800b7a4:	f023 0303 	bic.w	r3, r3, #3
 800b7a8:	f043 0302 	orr.w	r3, r3, #2
 800b7ac:	81a3      	strh	r3, [r4, #12]
 800b7ae:	e7e3      	b.n	800b778 <__smakebuf_r+0xc>
 800b7b0:	4b0d      	ldr	r3, [pc, #52]	; (800b7e8 <__smakebuf_r+0x7c>)
 800b7b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b7b4:	89a3      	ldrh	r3, [r4, #12]
 800b7b6:	6020      	str	r0, [r4, #0]
 800b7b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7bc:	81a3      	strh	r3, [r4, #12]
 800b7be:	9b00      	ldr	r3, [sp, #0]
 800b7c0:	6163      	str	r3, [r4, #20]
 800b7c2:	9b01      	ldr	r3, [sp, #4]
 800b7c4:	6120      	str	r0, [r4, #16]
 800b7c6:	b15b      	cbz	r3, 800b7e0 <__smakebuf_r+0x74>
 800b7c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	f000 f8d1 	bl	800b974 <_isatty_r>
 800b7d2:	b128      	cbz	r0, 800b7e0 <__smakebuf_r+0x74>
 800b7d4:	89a3      	ldrh	r3, [r4, #12]
 800b7d6:	f023 0303 	bic.w	r3, r3, #3
 800b7da:	f043 0301 	orr.w	r3, r3, #1
 800b7de:	81a3      	strh	r3, [r4, #12]
 800b7e0:	89a0      	ldrh	r0, [r4, #12]
 800b7e2:	4305      	orrs	r5, r0
 800b7e4:	81a5      	strh	r5, [r4, #12]
 800b7e6:	e7cd      	b.n	800b784 <__smakebuf_r+0x18>
 800b7e8:	0800b579 	.word	0x0800b579

0800b7ec <_malloc_usable_size_r>:
 800b7ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7f0:	1f18      	subs	r0, r3, #4
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	bfbc      	itt	lt
 800b7f6:	580b      	ldrlt	r3, [r1, r0]
 800b7f8:	18c0      	addlt	r0, r0, r3
 800b7fa:	4770      	bx	lr

0800b7fc <_raise_r>:
 800b7fc:	291f      	cmp	r1, #31
 800b7fe:	b538      	push	{r3, r4, r5, lr}
 800b800:	4604      	mov	r4, r0
 800b802:	460d      	mov	r5, r1
 800b804:	d904      	bls.n	800b810 <_raise_r+0x14>
 800b806:	2316      	movs	r3, #22
 800b808:	6003      	str	r3, [r0, #0]
 800b80a:	f04f 30ff 	mov.w	r0, #4294967295
 800b80e:	bd38      	pop	{r3, r4, r5, pc}
 800b810:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b812:	b112      	cbz	r2, 800b81a <_raise_r+0x1e>
 800b814:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b818:	b94b      	cbnz	r3, 800b82e <_raise_r+0x32>
 800b81a:	4620      	mov	r0, r4
 800b81c:	f000 f830 	bl	800b880 <_getpid_r>
 800b820:	462a      	mov	r2, r5
 800b822:	4601      	mov	r1, r0
 800b824:	4620      	mov	r0, r4
 800b826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b82a:	f000 b817 	b.w	800b85c <_kill_r>
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d00a      	beq.n	800b848 <_raise_r+0x4c>
 800b832:	1c59      	adds	r1, r3, #1
 800b834:	d103      	bne.n	800b83e <_raise_r+0x42>
 800b836:	2316      	movs	r3, #22
 800b838:	6003      	str	r3, [r0, #0]
 800b83a:	2001      	movs	r0, #1
 800b83c:	e7e7      	b.n	800b80e <_raise_r+0x12>
 800b83e:	2400      	movs	r4, #0
 800b840:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b844:	4628      	mov	r0, r5
 800b846:	4798      	blx	r3
 800b848:	2000      	movs	r0, #0
 800b84a:	e7e0      	b.n	800b80e <_raise_r+0x12>

0800b84c <raise>:
 800b84c:	4b02      	ldr	r3, [pc, #8]	; (800b858 <raise+0xc>)
 800b84e:	4601      	mov	r1, r0
 800b850:	6818      	ldr	r0, [r3, #0]
 800b852:	f7ff bfd3 	b.w	800b7fc <_raise_r>
 800b856:	bf00      	nop
 800b858:	20000014 	.word	0x20000014

0800b85c <_kill_r>:
 800b85c:	b538      	push	{r3, r4, r5, lr}
 800b85e:	4d07      	ldr	r5, [pc, #28]	; (800b87c <_kill_r+0x20>)
 800b860:	2300      	movs	r3, #0
 800b862:	4604      	mov	r4, r0
 800b864:	4608      	mov	r0, r1
 800b866:	4611      	mov	r1, r2
 800b868:	602b      	str	r3, [r5, #0]
 800b86a:	f7f6 fd29 	bl	80022c0 <_kill>
 800b86e:	1c43      	adds	r3, r0, #1
 800b870:	d102      	bne.n	800b878 <_kill_r+0x1c>
 800b872:	682b      	ldr	r3, [r5, #0]
 800b874:	b103      	cbz	r3, 800b878 <_kill_r+0x1c>
 800b876:	6023      	str	r3, [r4, #0]
 800b878:	bd38      	pop	{r3, r4, r5, pc}
 800b87a:	bf00      	nop
 800b87c:	20000440 	.word	0x20000440

0800b880 <_getpid_r>:
 800b880:	f7f6 bd16 	b.w	80022b0 <_getpid>

0800b884 <__sread>:
 800b884:	b510      	push	{r4, lr}
 800b886:	460c      	mov	r4, r1
 800b888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b88c:	f000 f894 	bl	800b9b8 <_read_r>
 800b890:	2800      	cmp	r0, #0
 800b892:	bfab      	itete	ge
 800b894:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b896:	89a3      	ldrhlt	r3, [r4, #12]
 800b898:	181b      	addge	r3, r3, r0
 800b89a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b89e:	bfac      	ite	ge
 800b8a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b8a2:	81a3      	strhlt	r3, [r4, #12]
 800b8a4:	bd10      	pop	{r4, pc}

0800b8a6 <__swrite>:
 800b8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8aa:	461f      	mov	r7, r3
 800b8ac:	898b      	ldrh	r3, [r1, #12]
 800b8ae:	05db      	lsls	r3, r3, #23
 800b8b0:	4605      	mov	r5, r0
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	4616      	mov	r6, r2
 800b8b6:	d505      	bpl.n	800b8c4 <__swrite+0x1e>
 800b8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8bc:	2302      	movs	r3, #2
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f000 f868 	bl	800b994 <_lseek_r>
 800b8c4:	89a3      	ldrh	r3, [r4, #12]
 800b8c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8ce:	81a3      	strh	r3, [r4, #12]
 800b8d0:	4632      	mov	r2, r6
 800b8d2:	463b      	mov	r3, r7
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8da:	f000 b817 	b.w	800b90c <_write_r>

0800b8de <__sseek>:
 800b8de:	b510      	push	{r4, lr}
 800b8e0:	460c      	mov	r4, r1
 800b8e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8e6:	f000 f855 	bl	800b994 <_lseek_r>
 800b8ea:	1c43      	adds	r3, r0, #1
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	bf15      	itete	ne
 800b8f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b8f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b8f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b8fa:	81a3      	strheq	r3, [r4, #12]
 800b8fc:	bf18      	it	ne
 800b8fe:	81a3      	strhne	r3, [r4, #12]
 800b900:	bd10      	pop	{r4, pc}

0800b902 <__sclose>:
 800b902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b906:	f000 b813 	b.w	800b930 <_close_r>
	...

0800b90c <_write_r>:
 800b90c:	b538      	push	{r3, r4, r5, lr}
 800b90e:	4d07      	ldr	r5, [pc, #28]	; (800b92c <_write_r+0x20>)
 800b910:	4604      	mov	r4, r0
 800b912:	4608      	mov	r0, r1
 800b914:	4611      	mov	r1, r2
 800b916:	2200      	movs	r2, #0
 800b918:	602a      	str	r2, [r5, #0]
 800b91a:	461a      	mov	r2, r3
 800b91c:	f7f6 fd07 	bl	800232e <_write>
 800b920:	1c43      	adds	r3, r0, #1
 800b922:	d102      	bne.n	800b92a <_write_r+0x1e>
 800b924:	682b      	ldr	r3, [r5, #0]
 800b926:	b103      	cbz	r3, 800b92a <_write_r+0x1e>
 800b928:	6023      	str	r3, [r4, #0]
 800b92a:	bd38      	pop	{r3, r4, r5, pc}
 800b92c:	20000440 	.word	0x20000440

0800b930 <_close_r>:
 800b930:	b538      	push	{r3, r4, r5, lr}
 800b932:	4d06      	ldr	r5, [pc, #24]	; (800b94c <_close_r+0x1c>)
 800b934:	2300      	movs	r3, #0
 800b936:	4604      	mov	r4, r0
 800b938:	4608      	mov	r0, r1
 800b93a:	602b      	str	r3, [r5, #0]
 800b93c:	f7f6 fd13 	bl	8002366 <_close>
 800b940:	1c43      	adds	r3, r0, #1
 800b942:	d102      	bne.n	800b94a <_close_r+0x1a>
 800b944:	682b      	ldr	r3, [r5, #0]
 800b946:	b103      	cbz	r3, 800b94a <_close_r+0x1a>
 800b948:	6023      	str	r3, [r4, #0]
 800b94a:	bd38      	pop	{r3, r4, r5, pc}
 800b94c:	20000440 	.word	0x20000440

0800b950 <_fstat_r>:
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	4d07      	ldr	r5, [pc, #28]	; (800b970 <_fstat_r+0x20>)
 800b954:	2300      	movs	r3, #0
 800b956:	4604      	mov	r4, r0
 800b958:	4608      	mov	r0, r1
 800b95a:	4611      	mov	r1, r2
 800b95c:	602b      	str	r3, [r5, #0]
 800b95e:	f7f6 fd0e 	bl	800237e <_fstat>
 800b962:	1c43      	adds	r3, r0, #1
 800b964:	d102      	bne.n	800b96c <_fstat_r+0x1c>
 800b966:	682b      	ldr	r3, [r5, #0]
 800b968:	b103      	cbz	r3, 800b96c <_fstat_r+0x1c>
 800b96a:	6023      	str	r3, [r4, #0]
 800b96c:	bd38      	pop	{r3, r4, r5, pc}
 800b96e:	bf00      	nop
 800b970:	20000440 	.word	0x20000440

0800b974 <_isatty_r>:
 800b974:	b538      	push	{r3, r4, r5, lr}
 800b976:	4d06      	ldr	r5, [pc, #24]	; (800b990 <_isatty_r+0x1c>)
 800b978:	2300      	movs	r3, #0
 800b97a:	4604      	mov	r4, r0
 800b97c:	4608      	mov	r0, r1
 800b97e:	602b      	str	r3, [r5, #0]
 800b980:	f7f6 fd0d 	bl	800239e <_isatty>
 800b984:	1c43      	adds	r3, r0, #1
 800b986:	d102      	bne.n	800b98e <_isatty_r+0x1a>
 800b988:	682b      	ldr	r3, [r5, #0]
 800b98a:	b103      	cbz	r3, 800b98e <_isatty_r+0x1a>
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	bd38      	pop	{r3, r4, r5, pc}
 800b990:	20000440 	.word	0x20000440

0800b994 <_lseek_r>:
 800b994:	b538      	push	{r3, r4, r5, lr}
 800b996:	4d07      	ldr	r5, [pc, #28]	; (800b9b4 <_lseek_r+0x20>)
 800b998:	4604      	mov	r4, r0
 800b99a:	4608      	mov	r0, r1
 800b99c:	4611      	mov	r1, r2
 800b99e:	2200      	movs	r2, #0
 800b9a0:	602a      	str	r2, [r5, #0]
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	f7f6 fd06 	bl	80023b4 <_lseek>
 800b9a8:	1c43      	adds	r3, r0, #1
 800b9aa:	d102      	bne.n	800b9b2 <_lseek_r+0x1e>
 800b9ac:	682b      	ldr	r3, [r5, #0]
 800b9ae:	b103      	cbz	r3, 800b9b2 <_lseek_r+0x1e>
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	bd38      	pop	{r3, r4, r5, pc}
 800b9b4:	20000440 	.word	0x20000440

0800b9b8 <_read_r>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	4d07      	ldr	r5, [pc, #28]	; (800b9d8 <_read_r+0x20>)
 800b9bc:	4604      	mov	r4, r0
 800b9be:	4608      	mov	r0, r1
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	602a      	str	r2, [r5, #0]
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	f7f6 fc94 	bl	80022f4 <_read>
 800b9cc:	1c43      	adds	r3, r0, #1
 800b9ce:	d102      	bne.n	800b9d6 <_read_r+0x1e>
 800b9d0:	682b      	ldr	r3, [r5, #0]
 800b9d2:	b103      	cbz	r3, 800b9d6 <_read_r+0x1e>
 800b9d4:	6023      	str	r3, [r4, #0]
 800b9d6:	bd38      	pop	{r3, r4, r5, pc}
 800b9d8:	20000440 	.word	0x20000440

0800b9dc <pow>:
 800b9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9de:	ed2d 8b02 	vpush	{d8}
 800b9e2:	eeb0 8a40 	vmov.f32	s16, s0
 800b9e6:	eef0 8a60 	vmov.f32	s17, s1
 800b9ea:	ec55 4b11 	vmov	r4, r5, d1
 800b9ee:	f000 f867 	bl	800bac0 <__ieee754_pow>
 800b9f2:	4622      	mov	r2, r4
 800b9f4:	462b      	mov	r3, r5
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	4629      	mov	r1, r5
 800b9fa:	ec57 6b10 	vmov	r6, r7, d0
 800b9fe:	f7f5 f89d 	bl	8000b3c <__aeabi_dcmpun>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	d13b      	bne.n	800ba7e <pow+0xa2>
 800ba06:	ec51 0b18 	vmov	r0, r1, d8
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	f7f5 f863 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba12:	b1b8      	cbz	r0, 800ba44 <pow+0x68>
 800ba14:	2200      	movs	r2, #0
 800ba16:	2300      	movs	r3, #0
 800ba18:	4620      	mov	r0, r4
 800ba1a:	4629      	mov	r1, r5
 800ba1c:	f7f5 f85c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba20:	2800      	cmp	r0, #0
 800ba22:	d146      	bne.n	800bab2 <pow+0xd6>
 800ba24:	ec45 4b10 	vmov	d0, r4, r5
 800ba28:	f000 fe63 	bl	800c6f2 <finite>
 800ba2c:	b338      	cbz	r0, 800ba7e <pow+0xa2>
 800ba2e:	2200      	movs	r2, #0
 800ba30:	2300      	movs	r3, #0
 800ba32:	4620      	mov	r0, r4
 800ba34:	4629      	mov	r1, r5
 800ba36:	f7f5 f859 	bl	8000aec <__aeabi_dcmplt>
 800ba3a:	b300      	cbz	r0, 800ba7e <pow+0xa2>
 800ba3c:	f7fc fff8 	bl	8008a30 <__errno>
 800ba40:	2322      	movs	r3, #34	; 0x22
 800ba42:	e01b      	b.n	800ba7c <pow+0xa0>
 800ba44:	ec47 6b10 	vmov	d0, r6, r7
 800ba48:	f000 fe53 	bl	800c6f2 <finite>
 800ba4c:	b9e0      	cbnz	r0, 800ba88 <pow+0xac>
 800ba4e:	eeb0 0a48 	vmov.f32	s0, s16
 800ba52:	eef0 0a68 	vmov.f32	s1, s17
 800ba56:	f000 fe4c 	bl	800c6f2 <finite>
 800ba5a:	b1a8      	cbz	r0, 800ba88 <pow+0xac>
 800ba5c:	ec45 4b10 	vmov	d0, r4, r5
 800ba60:	f000 fe47 	bl	800c6f2 <finite>
 800ba64:	b180      	cbz	r0, 800ba88 <pow+0xac>
 800ba66:	4632      	mov	r2, r6
 800ba68:	463b      	mov	r3, r7
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	4639      	mov	r1, r7
 800ba6e:	f7f5 f865 	bl	8000b3c <__aeabi_dcmpun>
 800ba72:	2800      	cmp	r0, #0
 800ba74:	d0e2      	beq.n	800ba3c <pow+0x60>
 800ba76:	f7fc ffdb 	bl	8008a30 <__errno>
 800ba7a:	2321      	movs	r3, #33	; 0x21
 800ba7c:	6003      	str	r3, [r0, #0]
 800ba7e:	ecbd 8b02 	vpop	{d8}
 800ba82:	ec47 6b10 	vmov	d0, r6, r7
 800ba86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba88:	2200      	movs	r2, #0
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	4639      	mov	r1, r7
 800ba90:	f7f5 f822 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d0f2      	beq.n	800ba7e <pow+0xa2>
 800ba98:	eeb0 0a48 	vmov.f32	s0, s16
 800ba9c:	eef0 0a68 	vmov.f32	s1, s17
 800baa0:	f000 fe27 	bl	800c6f2 <finite>
 800baa4:	2800      	cmp	r0, #0
 800baa6:	d0ea      	beq.n	800ba7e <pow+0xa2>
 800baa8:	ec45 4b10 	vmov	d0, r4, r5
 800baac:	f000 fe21 	bl	800c6f2 <finite>
 800bab0:	e7c3      	b.n	800ba3a <pow+0x5e>
 800bab2:	4f01      	ldr	r7, [pc, #4]	; (800bab8 <pow+0xdc>)
 800bab4:	2600      	movs	r6, #0
 800bab6:	e7e2      	b.n	800ba7e <pow+0xa2>
 800bab8:	3ff00000 	.word	0x3ff00000
 800babc:	00000000 	.word	0x00000000

0800bac0 <__ieee754_pow>:
 800bac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac4:	ed2d 8b06 	vpush	{d8-d10}
 800bac8:	b089      	sub	sp, #36	; 0x24
 800baca:	ed8d 1b00 	vstr	d1, [sp]
 800bace:	e9dd 2900 	ldrd	r2, r9, [sp]
 800bad2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800bad6:	ea58 0102 	orrs.w	r1, r8, r2
 800bada:	ec57 6b10 	vmov	r6, r7, d0
 800bade:	d115      	bne.n	800bb0c <__ieee754_pow+0x4c>
 800bae0:	19b3      	adds	r3, r6, r6
 800bae2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bae6:	4152      	adcs	r2, r2
 800bae8:	4299      	cmp	r1, r3
 800baea:	4b89      	ldr	r3, [pc, #548]	; (800bd10 <__ieee754_pow+0x250>)
 800baec:	4193      	sbcs	r3, r2
 800baee:	f080 84d2 	bcs.w	800c496 <__ieee754_pow+0x9d6>
 800baf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800baf6:	4630      	mov	r0, r6
 800baf8:	4639      	mov	r1, r7
 800bafa:	f7f4 fbcf 	bl	800029c <__adddf3>
 800bafe:	ec41 0b10 	vmov	d0, r0, r1
 800bb02:	b009      	add	sp, #36	; 0x24
 800bb04:	ecbd 8b06 	vpop	{d8-d10}
 800bb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb0c:	4b81      	ldr	r3, [pc, #516]	; (800bd14 <__ieee754_pow+0x254>)
 800bb0e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800bb12:	429c      	cmp	r4, r3
 800bb14:	ee10 aa10 	vmov	sl, s0
 800bb18:	463d      	mov	r5, r7
 800bb1a:	dc06      	bgt.n	800bb2a <__ieee754_pow+0x6a>
 800bb1c:	d101      	bne.n	800bb22 <__ieee754_pow+0x62>
 800bb1e:	2e00      	cmp	r6, #0
 800bb20:	d1e7      	bne.n	800baf2 <__ieee754_pow+0x32>
 800bb22:	4598      	cmp	r8, r3
 800bb24:	dc01      	bgt.n	800bb2a <__ieee754_pow+0x6a>
 800bb26:	d10f      	bne.n	800bb48 <__ieee754_pow+0x88>
 800bb28:	b172      	cbz	r2, 800bb48 <__ieee754_pow+0x88>
 800bb2a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bb2e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bb32:	ea55 050a 	orrs.w	r5, r5, sl
 800bb36:	d1dc      	bne.n	800baf2 <__ieee754_pow+0x32>
 800bb38:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bb3c:	18db      	adds	r3, r3, r3
 800bb3e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bb42:	4152      	adcs	r2, r2
 800bb44:	429d      	cmp	r5, r3
 800bb46:	e7d0      	b.n	800baea <__ieee754_pow+0x2a>
 800bb48:	2d00      	cmp	r5, #0
 800bb4a:	da3b      	bge.n	800bbc4 <__ieee754_pow+0x104>
 800bb4c:	4b72      	ldr	r3, [pc, #456]	; (800bd18 <__ieee754_pow+0x258>)
 800bb4e:	4598      	cmp	r8, r3
 800bb50:	dc51      	bgt.n	800bbf6 <__ieee754_pow+0x136>
 800bb52:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bb56:	4598      	cmp	r8, r3
 800bb58:	f340 84ac 	ble.w	800c4b4 <__ieee754_pow+0x9f4>
 800bb5c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bb60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bb64:	2b14      	cmp	r3, #20
 800bb66:	dd0f      	ble.n	800bb88 <__ieee754_pow+0xc8>
 800bb68:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bb6c:	fa22 f103 	lsr.w	r1, r2, r3
 800bb70:	fa01 f303 	lsl.w	r3, r1, r3
 800bb74:	4293      	cmp	r3, r2
 800bb76:	f040 849d 	bne.w	800c4b4 <__ieee754_pow+0x9f4>
 800bb7a:	f001 0101 	and.w	r1, r1, #1
 800bb7e:	f1c1 0302 	rsb	r3, r1, #2
 800bb82:	9304      	str	r3, [sp, #16]
 800bb84:	b182      	cbz	r2, 800bba8 <__ieee754_pow+0xe8>
 800bb86:	e05f      	b.n	800bc48 <__ieee754_pow+0x188>
 800bb88:	2a00      	cmp	r2, #0
 800bb8a:	d15b      	bne.n	800bc44 <__ieee754_pow+0x184>
 800bb8c:	f1c3 0314 	rsb	r3, r3, #20
 800bb90:	fa48 f103 	asr.w	r1, r8, r3
 800bb94:	fa01 f303 	lsl.w	r3, r1, r3
 800bb98:	4543      	cmp	r3, r8
 800bb9a:	f040 8488 	bne.w	800c4ae <__ieee754_pow+0x9ee>
 800bb9e:	f001 0101 	and.w	r1, r1, #1
 800bba2:	f1c1 0302 	rsb	r3, r1, #2
 800bba6:	9304      	str	r3, [sp, #16]
 800bba8:	4b5c      	ldr	r3, [pc, #368]	; (800bd1c <__ieee754_pow+0x25c>)
 800bbaa:	4598      	cmp	r8, r3
 800bbac:	d132      	bne.n	800bc14 <__ieee754_pow+0x154>
 800bbae:	f1b9 0f00 	cmp.w	r9, #0
 800bbb2:	f280 8478 	bge.w	800c4a6 <__ieee754_pow+0x9e6>
 800bbb6:	4959      	ldr	r1, [pc, #356]	; (800bd1c <__ieee754_pow+0x25c>)
 800bbb8:	4632      	mov	r2, r6
 800bbba:	463b      	mov	r3, r7
 800bbbc:	2000      	movs	r0, #0
 800bbbe:	f7f4 fe4d 	bl	800085c <__aeabi_ddiv>
 800bbc2:	e79c      	b.n	800bafe <__ieee754_pow+0x3e>
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	9304      	str	r3, [sp, #16]
 800bbc8:	2a00      	cmp	r2, #0
 800bbca:	d13d      	bne.n	800bc48 <__ieee754_pow+0x188>
 800bbcc:	4b51      	ldr	r3, [pc, #324]	; (800bd14 <__ieee754_pow+0x254>)
 800bbce:	4598      	cmp	r8, r3
 800bbd0:	d1ea      	bne.n	800bba8 <__ieee754_pow+0xe8>
 800bbd2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bbd6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bbda:	ea53 030a 	orrs.w	r3, r3, sl
 800bbde:	f000 845a 	beq.w	800c496 <__ieee754_pow+0x9d6>
 800bbe2:	4b4f      	ldr	r3, [pc, #316]	; (800bd20 <__ieee754_pow+0x260>)
 800bbe4:	429c      	cmp	r4, r3
 800bbe6:	dd08      	ble.n	800bbfa <__ieee754_pow+0x13a>
 800bbe8:	f1b9 0f00 	cmp.w	r9, #0
 800bbec:	f2c0 8457 	blt.w	800c49e <__ieee754_pow+0x9de>
 800bbf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbf4:	e783      	b.n	800bafe <__ieee754_pow+0x3e>
 800bbf6:	2302      	movs	r3, #2
 800bbf8:	e7e5      	b.n	800bbc6 <__ieee754_pow+0x106>
 800bbfa:	f1b9 0f00 	cmp.w	r9, #0
 800bbfe:	f04f 0000 	mov.w	r0, #0
 800bc02:	f04f 0100 	mov.w	r1, #0
 800bc06:	f6bf af7a 	bge.w	800bafe <__ieee754_pow+0x3e>
 800bc0a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bc0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bc12:	e774      	b.n	800bafe <__ieee754_pow+0x3e>
 800bc14:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bc18:	d106      	bne.n	800bc28 <__ieee754_pow+0x168>
 800bc1a:	4632      	mov	r2, r6
 800bc1c:	463b      	mov	r3, r7
 800bc1e:	4630      	mov	r0, r6
 800bc20:	4639      	mov	r1, r7
 800bc22:	f7f4 fcf1 	bl	8000608 <__aeabi_dmul>
 800bc26:	e76a      	b.n	800bafe <__ieee754_pow+0x3e>
 800bc28:	4b3e      	ldr	r3, [pc, #248]	; (800bd24 <__ieee754_pow+0x264>)
 800bc2a:	4599      	cmp	r9, r3
 800bc2c:	d10c      	bne.n	800bc48 <__ieee754_pow+0x188>
 800bc2e:	2d00      	cmp	r5, #0
 800bc30:	db0a      	blt.n	800bc48 <__ieee754_pow+0x188>
 800bc32:	ec47 6b10 	vmov	d0, r6, r7
 800bc36:	b009      	add	sp, #36	; 0x24
 800bc38:	ecbd 8b06 	vpop	{d8-d10}
 800bc3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc40:	f000 bc6c 	b.w	800c51c <__ieee754_sqrt>
 800bc44:	2300      	movs	r3, #0
 800bc46:	9304      	str	r3, [sp, #16]
 800bc48:	ec47 6b10 	vmov	d0, r6, r7
 800bc4c:	f000 fd48 	bl	800c6e0 <fabs>
 800bc50:	ec51 0b10 	vmov	r0, r1, d0
 800bc54:	f1ba 0f00 	cmp.w	sl, #0
 800bc58:	d129      	bne.n	800bcae <__ieee754_pow+0x1ee>
 800bc5a:	b124      	cbz	r4, 800bc66 <__ieee754_pow+0x1a6>
 800bc5c:	4b2f      	ldr	r3, [pc, #188]	; (800bd1c <__ieee754_pow+0x25c>)
 800bc5e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d123      	bne.n	800bcae <__ieee754_pow+0x1ee>
 800bc66:	f1b9 0f00 	cmp.w	r9, #0
 800bc6a:	da05      	bge.n	800bc78 <__ieee754_pow+0x1b8>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	460b      	mov	r3, r1
 800bc70:	2000      	movs	r0, #0
 800bc72:	492a      	ldr	r1, [pc, #168]	; (800bd1c <__ieee754_pow+0x25c>)
 800bc74:	f7f4 fdf2 	bl	800085c <__aeabi_ddiv>
 800bc78:	2d00      	cmp	r5, #0
 800bc7a:	f6bf af40 	bge.w	800bafe <__ieee754_pow+0x3e>
 800bc7e:	9b04      	ldr	r3, [sp, #16]
 800bc80:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bc84:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bc88:	4323      	orrs	r3, r4
 800bc8a:	d108      	bne.n	800bc9e <__ieee754_pow+0x1de>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	4610      	mov	r0, r2
 800bc92:	4619      	mov	r1, r3
 800bc94:	f7f4 fb00 	bl	8000298 <__aeabi_dsub>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	e78f      	b.n	800bbbe <__ieee754_pow+0xfe>
 800bc9e:	9b04      	ldr	r3, [sp, #16]
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	f47f af2c 	bne.w	800bafe <__ieee754_pow+0x3e>
 800bca6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bcaa:	4619      	mov	r1, r3
 800bcac:	e727      	b.n	800bafe <__ieee754_pow+0x3e>
 800bcae:	0feb      	lsrs	r3, r5, #31
 800bcb0:	3b01      	subs	r3, #1
 800bcb2:	9306      	str	r3, [sp, #24]
 800bcb4:	9a06      	ldr	r2, [sp, #24]
 800bcb6:	9b04      	ldr	r3, [sp, #16]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	d102      	bne.n	800bcc2 <__ieee754_pow+0x202>
 800bcbc:	4632      	mov	r2, r6
 800bcbe:	463b      	mov	r3, r7
 800bcc0:	e7e6      	b.n	800bc90 <__ieee754_pow+0x1d0>
 800bcc2:	4b19      	ldr	r3, [pc, #100]	; (800bd28 <__ieee754_pow+0x268>)
 800bcc4:	4598      	cmp	r8, r3
 800bcc6:	f340 80fb 	ble.w	800bec0 <__ieee754_pow+0x400>
 800bcca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bcce:	4598      	cmp	r8, r3
 800bcd0:	4b13      	ldr	r3, [pc, #76]	; (800bd20 <__ieee754_pow+0x260>)
 800bcd2:	dd0c      	ble.n	800bcee <__ieee754_pow+0x22e>
 800bcd4:	429c      	cmp	r4, r3
 800bcd6:	dc0f      	bgt.n	800bcf8 <__ieee754_pow+0x238>
 800bcd8:	f1b9 0f00 	cmp.w	r9, #0
 800bcdc:	da0f      	bge.n	800bcfe <__ieee754_pow+0x23e>
 800bcde:	2000      	movs	r0, #0
 800bce0:	b009      	add	sp, #36	; 0x24
 800bce2:	ecbd 8b06 	vpop	{d8-d10}
 800bce6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcea:	f000 bcf0 	b.w	800c6ce <__math_oflow>
 800bcee:	429c      	cmp	r4, r3
 800bcf0:	dbf2      	blt.n	800bcd8 <__ieee754_pow+0x218>
 800bcf2:	4b0a      	ldr	r3, [pc, #40]	; (800bd1c <__ieee754_pow+0x25c>)
 800bcf4:	429c      	cmp	r4, r3
 800bcf6:	dd19      	ble.n	800bd2c <__ieee754_pow+0x26c>
 800bcf8:	f1b9 0f00 	cmp.w	r9, #0
 800bcfc:	dcef      	bgt.n	800bcde <__ieee754_pow+0x21e>
 800bcfe:	2000      	movs	r0, #0
 800bd00:	b009      	add	sp, #36	; 0x24
 800bd02:	ecbd 8b06 	vpop	{d8-d10}
 800bd06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0a:	f000 bcd7 	b.w	800c6bc <__math_uflow>
 800bd0e:	bf00      	nop
 800bd10:	fff00000 	.word	0xfff00000
 800bd14:	7ff00000 	.word	0x7ff00000
 800bd18:	433fffff 	.word	0x433fffff
 800bd1c:	3ff00000 	.word	0x3ff00000
 800bd20:	3fefffff 	.word	0x3fefffff
 800bd24:	3fe00000 	.word	0x3fe00000
 800bd28:	41e00000 	.word	0x41e00000
 800bd2c:	4b60      	ldr	r3, [pc, #384]	; (800beb0 <__ieee754_pow+0x3f0>)
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f7f4 fab2 	bl	8000298 <__aeabi_dsub>
 800bd34:	a354      	add	r3, pc, #336	; (adr r3, 800be88 <__ieee754_pow+0x3c8>)
 800bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	460d      	mov	r5, r1
 800bd3e:	f7f4 fc63 	bl	8000608 <__aeabi_dmul>
 800bd42:	a353      	add	r3, pc, #332	; (adr r3, 800be90 <__ieee754_pow+0x3d0>)
 800bd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd48:	4606      	mov	r6, r0
 800bd4a:	460f      	mov	r7, r1
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	4629      	mov	r1, r5
 800bd50:	f7f4 fc5a 	bl	8000608 <__aeabi_dmul>
 800bd54:	4b57      	ldr	r3, [pc, #348]	; (800beb4 <__ieee754_pow+0x3f4>)
 800bd56:	4682      	mov	sl, r0
 800bd58:	468b      	mov	fp, r1
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	4629      	mov	r1, r5
 800bd60:	f7f4 fc52 	bl	8000608 <__aeabi_dmul>
 800bd64:	4602      	mov	r2, r0
 800bd66:	460b      	mov	r3, r1
 800bd68:	a14b      	add	r1, pc, #300	; (adr r1, 800be98 <__ieee754_pow+0x3d8>)
 800bd6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd6e:	f7f4 fa93 	bl	8000298 <__aeabi_dsub>
 800bd72:	4622      	mov	r2, r4
 800bd74:	462b      	mov	r3, r5
 800bd76:	f7f4 fc47 	bl	8000608 <__aeabi_dmul>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	2000      	movs	r0, #0
 800bd80:	494d      	ldr	r1, [pc, #308]	; (800beb8 <__ieee754_pow+0x3f8>)
 800bd82:	f7f4 fa89 	bl	8000298 <__aeabi_dsub>
 800bd86:	4622      	mov	r2, r4
 800bd88:	4680      	mov	r8, r0
 800bd8a:	4689      	mov	r9, r1
 800bd8c:	462b      	mov	r3, r5
 800bd8e:	4620      	mov	r0, r4
 800bd90:	4629      	mov	r1, r5
 800bd92:	f7f4 fc39 	bl	8000608 <__aeabi_dmul>
 800bd96:	4602      	mov	r2, r0
 800bd98:	460b      	mov	r3, r1
 800bd9a:	4640      	mov	r0, r8
 800bd9c:	4649      	mov	r1, r9
 800bd9e:	f7f4 fc33 	bl	8000608 <__aeabi_dmul>
 800bda2:	a33f      	add	r3, pc, #252	; (adr r3, 800bea0 <__ieee754_pow+0x3e0>)
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	f7f4 fc2e 	bl	8000608 <__aeabi_dmul>
 800bdac:	4602      	mov	r2, r0
 800bdae:	460b      	mov	r3, r1
 800bdb0:	4650      	mov	r0, sl
 800bdb2:	4659      	mov	r1, fp
 800bdb4:	f7f4 fa70 	bl	8000298 <__aeabi_dsub>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4680      	mov	r8, r0
 800bdbe:	4689      	mov	r9, r1
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	4639      	mov	r1, r7
 800bdc4:	f7f4 fa6a 	bl	800029c <__adddf3>
 800bdc8:	2000      	movs	r0, #0
 800bdca:	4632      	mov	r2, r6
 800bdcc:	463b      	mov	r3, r7
 800bdce:	4604      	mov	r4, r0
 800bdd0:	460d      	mov	r5, r1
 800bdd2:	f7f4 fa61 	bl	8000298 <__aeabi_dsub>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	460b      	mov	r3, r1
 800bdda:	4640      	mov	r0, r8
 800bddc:	4649      	mov	r1, r9
 800bdde:	f7f4 fa5b 	bl	8000298 <__aeabi_dsub>
 800bde2:	9b04      	ldr	r3, [sp, #16]
 800bde4:	9a06      	ldr	r2, [sp, #24]
 800bde6:	3b01      	subs	r3, #1
 800bde8:	4313      	orrs	r3, r2
 800bdea:	4682      	mov	sl, r0
 800bdec:	468b      	mov	fp, r1
 800bdee:	f040 81e7 	bne.w	800c1c0 <__ieee754_pow+0x700>
 800bdf2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bea8 <__ieee754_pow+0x3e8>
 800bdf6:	eeb0 8a47 	vmov.f32	s16, s14
 800bdfa:	eef0 8a67 	vmov.f32	s17, s15
 800bdfe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800be02:	2600      	movs	r6, #0
 800be04:	4632      	mov	r2, r6
 800be06:	463b      	mov	r3, r7
 800be08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be0c:	f7f4 fa44 	bl	8000298 <__aeabi_dsub>
 800be10:	4622      	mov	r2, r4
 800be12:	462b      	mov	r3, r5
 800be14:	f7f4 fbf8 	bl	8000608 <__aeabi_dmul>
 800be18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be1c:	4680      	mov	r8, r0
 800be1e:	4689      	mov	r9, r1
 800be20:	4650      	mov	r0, sl
 800be22:	4659      	mov	r1, fp
 800be24:	f7f4 fbf0 	bl	8000608 <__aeabi_dmul>
 800be28:	4602      	mov	r2, r0
 800be2a:	460b      	mov	r3, r1
 800be2c:	4640      	mov	r0, r8
 800be2e:	4649      	mov	r1, r9
 800be30:	f7f4 fa34 	bl	800029c <__adddf3>
 800be34:	4632      	mov	r2, r6
 800be36:	463b      	mov	r3, r7
 800be38:	4680      	mov	r8, r0
 800be3a:	4689      	mov	r9, r1
 800be3c:	4620      	mov	r0, r4
 800be3e:	4629      	mov	r1, r5
 800be40:	f7f4 fbe2 	bl	8000608 <__aeabi_dmul>
 800be44:	460b      	mov	r3, r1
 800be46:	4604      	mov	r4, r0
 800be48:	460d      	mov	r5, r1
 800be4a:	4602      	mov	r2, r0
 800be4c:	4649      	mov	r1, r9
 800be4e:	4640      	mov	r0, r8
 800be50:	f7f4 fa24 	bl	800029c <__adddf3>
 800be54:	4b19      	ldr	r3, [pc, #100]	; (800bebc <__ieee754_pow+0x3fc>)
 800be56:	4299      	cmp	r1, r3
 800be58:	ec45 4b19 	vmov	d9, r4, r5
 800be5c:	4606      	mov	r6, r0
 800be5e:	460f      	mov	r7, r1
 800be60:	468b      	mov	fp, r1
 800be62:	f340 82f1 	ble.w	800c448 <__ieee754_pow+0x988>
 800be66:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800be6a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800be6e:	4303      	orrs	r3, r0
 800be70:	f000 81e4 	beq.w	800c23c <__ieee754_pow+0x77c>
 800be74:	ec51 0b18 	vmov	r0, r1, d8
 800be78:	2200      	movs	r2, #0
 800be7a:	2300      	movs	r3, #0
 800be7c:	f7f4 fe36 	bl	8000aec <__aeabi_dcmplt>
 800be80:	3800      	subs	r0, #0
 800be82:	bf18      	it	ne
 800be84:	2001      	movne	r0, #1
 800be86:	e72b      	b.n	800bce0 <__ieee754_pow+0x220>
 800be88:	60000000 	.word	0x60000000
 800be8c:	3ff71547 	.word	0x3ff71547
 800be90:	f85ddf44 	.word	0xf85ddf44
 800be94:	3e54ae0b 	.word	0x3e54ae0b
 800be98:	55555555 	.word	0x55555555
 800be9c:	3fd55555 	.word	0x3fd55555
 800bea0:	652b82fe 	.word	0x652b82fe
 800bea4:	3ff71547 	.word	0x3ff71547
 800bea8:	00000000 	.word	0x00000000
 800beac:	bff00000 	.word	0xbff00000
 800beb0:	3ff00000 	.word	0x3ff00000
 800beb4:	3fd00000 	.word	0x3fd00000
 800beb8:	3fe00000 	.word	0x3fe00000
 800bebc:	408fffff 	.word	0x408fffff
 800bec0:	4bd5      	ldr	r3, [pc, #852]	; (800c218 <__ieee754_pow+0x758>)
 800bec2:	402b      	ands	r3, r5
 800bec4:	2200      	movs	r2, #0
 800bec6:	b92b      	cbnz	r3, 800bed4 <__ieee754_pow+0x414>
 800bec8:	4bd4      	ldr	r3, [pc, #848]	; (800c21c <__ieee754_pow+0x75c>)
 800beca:	f7f4 fb9d 	bl	8000608 <__aeabi_dmul>
 800bece:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bed2:	460c      	mov	r4, r1
 800bed4:	1523      	asrs	r3, r4, #20
 800bed6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800beda:	4413      	add	r3, r2
 800bedc:	9305      	str	r3, [sp, #20]
 800bede:	4bd0      	ldr	r3, [pc, #832]	; (800c220 <__ieee754_pow+0x760>)
 800bee0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bee4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bee8:	429c      	cmp	r4, r3
 800beea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800beee:	dd08      	ble.n	800bf02 <__ieee754_pow+0x442>
 800bef0:	4bcc      	ldr	r3, [pc, #816]	; (800c224 <__ieee754_pow+0x764>)
 800bef2:	429c      	cmp	r4, r3
 800bef4:	f340 8162 	ble.w	800c1bc <__ieee754_pow+0x6fc>
 800bef8:	9b05      	ldr	r3, [sp, #20]
 800befa:	3301      	adds	r3, #1
 800befc:	9305      	str	r3, [sp, #20]
 800befe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bf02:	2400      	movs	r4, #0
 800bf04:	00e3      	lsls	r3, r4, #3
 800bf06:	9307      	str	r3, [sp, #28]
 800bf08:	4bc7      	ldr	r3, [pc, #796]	; (800c228 <__ieee754_pow+0x768>)
 800bf0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf0e:	ed93 7b00 	vldr	d7, [r3]
 800bf12:	4629      	mov	r1, r5
 800bf14:	ec53 2b17 	vmov	r2, r3, d7
 800bf18:	eeb0 9a47 	vmov.f32	s18, s14
 800bf1c:	eef0 9a67 	vmov.f32	s19, s15
 800bf20:	4682      	mov	sl, r0
 800bf22:	f7f4 f9b9 	bl	8000298 <__aeabi_dsub>
 800bf26:	4652      	mov	r2, sl
 800bf28:	4606      	mov	r6, r0
 800bf2a:	460f      	mov	r7, r1
 800bf2c:	462b      	mov	r3, r5
 800bf2e:	ec51 0b19 	vmov	r0, r1, d9
 800bf32:	f7f4 f9b3 	bl	800029c <__adddf3>
 800bf36:	4602      	mov	r2, r0
 800bf38:	460b      	mov	r3, r1
 800bf3a:	2000      	movs	r0, #0
 800bf3c:	49bb      	ldr	r1, [pc, #748]	; (800c22c <__ieee754_pow+0x76c>)
 800bf3e:	f7f4 fc8d 	bl	800085c <__aeabi_ddiv>
 800bf42:	ec41 0b1a 	vmov	d10, r0, r1
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	4639      	mov	r1, r7
 800bf4e:	f7f4 fb5b 	bl	8000608 <__aeabi_dmul>
 800bf52:	2300      	movs	r3, #0
 800bf54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf58:	9302      	str	r3, [sp, #8]
 800bf5a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bf5e:	46ab      	mov	fp, r5
 800bf60:	106d      	asrs	r5, r5, #1
 800bf62:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bf66:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bf6a:	ec41 0b18 	vmov	d8, r0, r1
 800bf6e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bf72:	2200      	movs	r2, #0
 800bf74:	4640      	mov	r0, r8
 800bf76:	4649      	mov	r1, r9
 800bf78:	4614      	mov	r4, r2
 800bf7a:	461d      	mov	r5, r3
 800bf7c:	f7f4 fb44 	bl	8000608 <__aeabi_dmul>
 800bf80:	4602      	mov	r2, r0
 800bf82:	460b      	mov	r3, r1
 800bf84:	4630      	mov	r0, r6
 800bf86:	4639      	mov	r1, r7
 800bf88:	f7f4 f986 	bl	8000298 <__aeabi_dsub>
 800bf8c:	ec53 2b19 	vmov	r2, r3, d9
 800bf90:	4606      	mov	r6, r0
 800bf92:	460f      	mov	r7, r1
 800bf94:	4620      	mov	r0, r4
 800bf96:	4629      	mov	r1, r5
 800bf98:	f7f4 f97e 	bl	8000298 <__aeabi_dsub>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	4650      	mov	r0, sl
 800bfa2:	4659      	mov	r1, fp
 800bfa4:	f7f4 f978 	bl	8000298 <__aeabi_dsub>
 800bfa8:	4642      	mov	r2, r8
 800bfaa:	464b      	mov	r3, r9
 800bfac:	f7f4 fb2c 	bl	8000608 <__aeabi_dmul>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	4630      	mov	r0, r6
 800bfb6:	4639      	mov	r1, r7
 800bfb8:	f7f4 f96e 	bl	8000298 <__aeabi_dsub>
 800bfbc:	ec53 2b1a 	vmov	r2, r3, d10
 800bfc0:	f7f4 fb22 	bl	8000608 <__aeabi_dmul>
 800bfc4:	ec53 2b18 	vmov	r2, r3, d8
 800bfc8:	ec41 0b19 	vmov	d9, r0, r1
 800bfcc:	ec51 0b18 	vmov	r0, r1, d8
 800bfd0:	f7f4 fb1a 	bl	8000608 <__aeabi_dmul>
 800bfd4:	a37c      	add	r3, pc, #496	; (adr r3, 800c1c8 <__ieee754_pow+0x708>)
 800bfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfda:	4604      	mov	r4, r0
 800bfdc:	460d      	mov	r5, r1
 800bfde:	f7f4 fb13 	bl	8000608 <__aeabi_dmul>
 800bfe2:	a37b      	add	r3, pc, #492	; (adr r3, 800c1d0 <__ieee754_pow+0x710>)
 800bfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe8:	f7f4 f958 	bl	800029c <__adddf3>
 800bfec:	4622      	mov	r2, r4
 800bfee:	462b      	mov	r3, r5
 800bff0:	f7f4 fb0a 	bl	8000608 <__aeabi_dmul>
 800bff4:	a378      	add	r3, pc, #480	; (adr r3, 800c1d8 <__ieee754_pow+0x718>)
 800bff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffa:	f7f4 f94f 	bl	800029c <__adddf3>
 800bffe:	4622      	mov	r2, r4
 800c000:	462b      	mov	r3, r5
 800c002:	f7f4 fb01 	bl	8000608 <__aeabi_dmul>
 800c006:	a376      	add	r3, pc, #472	; (adr r3, 800c1e0 <__ieee754_pow+0x720>)
 800c008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00c:	f7f4 f946 	bl	800029c <__adddf3>
 800c010:	4622      	mov	r2, r4
 800c012:	462b      	mov	r3, r5
 800c014:	f7f4 faf8 	bl	8000608 <__aeabi_dmul>
 800c018:	a373      	add	r3, pc, #460	; (adr r3, 800c1e8 <__ieee754_pow+0x728>)
 800c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01e:	f7f4 f93d 	bl	800029c <__adddf3>
 800c022:	4622      	mov	r2, r4
 800c024:	462b      	mov	r3, r5
 800c026:	f7f4 faef 	bl	8000608 <__aeabi_dmul>
 800c02a:	a371      	add	r3, pc, #452	; (adr r3, 800c1f0 <__ieee754_pow+0x730>)
 800c02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c030:	f7f4 f934 	bl	800029c <__adddf3>
 800c034:	4622      	mov	r2, r4
 800c036:	4606      	mov	r6, r0
 800c038:	460f      	mov	r7, r1
 800c03a:	462b      	mov	r3, r5
 800c03c:	4620      	mov	r0, r4
 800c03e:	4629      	mov	r1, r5
 800c040:	f7f4 fae2 	bl	8000608 <__aeabi_dmul>
 800c044:	4602      	mov	r2, r0
 800c046:	460b      	mov	r3, r1
 800c048:	4630      	mov	r0, r6
 800c04a:	4639      	mov	r1, r7
 800c04c:	f7f4 fadc 	bl	8000608 <__aeabi_dmul>
 800c050:	4642      	mov	r2, r8
 800c052:	4604      	mov	r4, r0
 800c054:	460d      	mov	r5, r1
 800c056:	464b      	mov	r3, r9
 800c058:	ec51 0b18 	vmov	r0, r1, d8
 800c05c:	f7f4 f91e 	bl	800029c <__adddf3>
 800c060:	ec53 2b19 	vmov	r2, r3, d9
 800c064:	f7f4 fad0 	bl	8000608 <__aeabi_dmul>
 800c068:	4622      	mov	r2, r4
 800c06a:	462b      	mov	r3, r5
 800c06c:	f7f4 f916 	bl	800029c <__adddf3>
 800c070:	4642      	mov	r2, r8
 800c072:	4682      	mov	sl, r0
 800c074:	468b      	mov	fp, r1
 800c076:	464b      	mov	r3, r9
 800c078:	4640      	mov	r0, r8
 800c07a:	4649      	mov	r1, r9
 800c07c:	f7f4 fac4 	bl	8000608 <__aeabi_dmul>
 800c080:	4b6b      	ldr	r3, [pc, #428]	; (800c230 <__ieee754_pow+0x770>)
 800c082:	2200      	movs	r2, #0
 800c084:	4606      	mov	r6, r0
 800c086:	460f      	mov	r7, r1
 800c088:	f7f4 f908 	bl	800029c <__adddf3>
 800c08c:	4652      	mov	r2, sl
 800c08e:	465b      	mov	r3, fp
 800c090:	f7f4 f904 	bl	800029c <__adddf3>
 800c094:	2000      	movs	r0, #0
 800c096:	4604      	mov	r4, r0
 800c098:	460d      	mov	r5, r1
 800c09a:	4602      	mov	r2, r0
 800c09c:	460b      	mov	r3, r1
 800c09e:	4640      	mov	r0, r8
 800c0a0:	4649      	mov	r1, r9
 800c0a2:	f7f4 fab1 	bl	8000608 <__aeabi_dmul>
 800c0a6:	4b62      	ldr	r3, [pc, #392]	; (800c230 <__ieee754_pow+0x770>)
 800c0a8:	4680      	mov	r8, r0
 800c0aa:	4689      	mov	r9, r1
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	f7f4 f8f1 	bl	8000298 <__aeabi_dsub>
 800c0b6:	4632      	mov	r2, r6
 800c0b8:	463b      	mov	r3, r7
 800c0ba:	f7f4 f8ed 	bl	8000298 <__aeabi_dsub>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	4650      	mov	r0, sl
 800c0c4:	4659      	mov	r1, fp
 800c0c6:	f7f4 f8e7 	bl	8000298 <__aeabi_dsub>
 800c0ca:	ec53 2b18 	vmov	r2, r3, d8
 800c0ce:	f7f4 fa9b 	bl	8000608 <__aeabi_dmul>
 800c0d2:	4622      	mov	r2, r4
 800c0d4:	4606      	mov	r6, r0
 800c0d6:	460f      	mov	r7, r1
 800c0d8:	462b      	mov	r3, r5
 800c0da:	ec51 0b19 	vmov	r0, r1, d9
 800c0de:	f7f4 fa93 	bl	8000608 <__aeabi_dmul>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	4639      	mov	r1, r7
 800c0ea:	f7f4 f8d7 	bl	800029c <__adddf3>
 800c0ee:	4606      	mov	r6, r0
 800c0f0:	460f      	mov	r7, r1
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	4640      	mov	r0, r8
 800c0f8:	4649      	mov	r1, r9
 800c0fa:	f7f4 f8cf 	bl	800029c <__adddf3>
 800c0fe:	a33e      	add	r3, pc, #248	; (adr r3, 800c1f8 <__ieee754_pow+0x738>)
 800c100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c104:	2000      	movs	r0, #0
 800c106:	4604      	mov	r4, r0
 800c108:	460d      	mov	r5, r1
 800c10a:	f7f4 fa7d 	bl	8000608 <__aeabi_dmul>
 800c10e:	4642      	mov	r2, r8
 800c110:	ec41 0b18 	vmov	d8, r0, r1
 800c114:	464b      	mov	r3, r9
 800c116:	4620      	mov	r0, r4
 800c118:	4629      	mov	r1, r5
 800c11a:	f7f4 f8bd 	bl	8000298 <__aeabi_dsub>
 800c11e:	4602      	mov	r2, r0
 800c120:	460b      	mov	r3, r1
 800c122:	4630      	mov	r0, r6
 800c124:	4639      	mov	r1, r7
 800c126:	f7f4 f8b7 	bl	8000298 <__aeabi_dsub>
 800c12a:	a335      	add	r3, pc, #212	; (adr r3, 800c200 <__ieee754_pow+0x740>)
 800c12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c130:	f7f4 fa6a 	bl	8000608 <__aeabi_dmul>
 800c134:	a334      	add	r3, pc, #208	; (adr r3, 800c208 <__ieee754_pow+0x748>)
 800c136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13a:	4606      	mov	r6, r0
 800c13c:	460f      	mov	r7, r1
 800c13e:	4620      	mov	r0, r4
 800c140:	4629      	mov	r1, r5
 800c142:	f7f4 fa61 	bl	8000608 <__aeabi_dmul>
 800c146:	4602      	mov	r2, r0
 800c148:	460b      	mov	r3, r1
 800c14a:	4630      	mov	r0, r6
 800c14c:	4639      	mov	r1, r7
 800c14e:	f7f4 f8a5 	bl	800029c <__adddf3>
 800c152:	9a07      	ldr	r2, [sp, #28]
 800c154:	4b37      	ldr	r3, [pc, #220]	; (800c234 <__ieee754_pow+0x774>)
 800c156:	4413      	add	r3, r2
 800c158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15c:	f7f4 f89e 	bl	800029c <__adddf3>
 800c160:	4682      	mov	sl, r0
 800c162:	9805      	ldr	r0, [sp, #20]
 800c164:	468b      	mov	fp, r1
 800c166:	f7f4 f9e5 	bl	8000534 <__aeabi_i2d>
 800c16a:	9a07      	ldr	r2, [sp, #28]
 800c16c:	4b32      	ldr	r3, [pc, #200]	; (800c238 <__ieee754_pow+0x778>)
 800c16e:	4413      	add	r3, r2
 800c170:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c174:	4606      	mov	r6, r0
 800c176:	460f      	mov	r7, r1
 800c178:	4652      	mov	r2, sl
 800c17a:	465b      	mov	r3, fp
 800c17c:	ec51 0b18 	vmov	r0, r1, d8
 800c180:	f7f4 f88c 	bl	800029c <__adddf3>
 800c184:	4642      	mov	r2, r8
 800c186:	464b      	mov	r3, r9
 800c188:	f7f4 f888 	bl	800029c <__adddf3>
 800c18c:	4632      	mov	r2, r6
 800c18e:	463b      	mov	r3, r7
 800c190:	f7f4 f884 	bl	800029c <__adddf3>
 800c194:	2000      	movs	r0, #0
 800c196:	4632      	mov	r2, r6
 800c198:	463b      	mov	r3, r7
 800c19a:	4604      	mov	r4, r0
 800c19c:	460d      	mov	r5, r1
 800c19e:	f7f4 f87b 	bl	8000298 <__aeabi_dsub>
 800c1a2:	4642      	mov	r2, r8
 800c1a4:	464b      	mov	r3, r9
 800c1a6:	f7f4 f877 	bl	8000298 <__aeabi_dsub>
 800c1aa:	ec53 2b18 	vmov	r2, r3, d8
 800c1ae:	f7f4 f873 	bl	8000298 <__aeabi_dsub>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	4650      	mov	r0, sl
 800c1b8:	4659      	mov	r1, fp
 800c1ba:	e610      	b.n	800bdde <__ieee754_pow+0x31e>
 800c1bc:	2401      	movs	r4, #1
 800c1be:	e6a1      	b.n	800bf04 <__ieee754_pow+0x444>
 800c1c0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c210 <__ieee754_pow+0x750>
 800c1c4:	e617      	b.n	800bdf6 <__ieee754_pow+0x336>
 800c1c6:	bf00      	nop
 800c1c8:	4a454eef 	.word	0x4a454eef
 800c1cc:	3fca7e28 	.word	0x3fca7e28
 800c1d0:	93c9db65 	.word	0x93c9db65
 800c1d4:	3fcd864a 	.word	0x3fcd864a
 800c1d8:	a91d4101 	.word	0xa91d4101
 800c1dc:	3fd17460 	.word	0x3fd17460
 800c1e0:	518f264d 	.word	0x518f264d
 800c1e4:	3fd55555 	.word	0x3fd55555
 800c1e8:	db6fabff 	.word	0xdb6fabff
 800c1ec:	3fdb6db6 	.word	0x3fdb6db6
 800c1f0:	33333303 	.word	0x33333303
 800c1f4:	3fe33333 	.word	0x3fe33333
 800c1f8:	e0000000 	.word	0xe0000000
 800c1fc:	3feec709 	.word	0x3feec709
 800c200:	dc3a03fd 	.word	0xdc3a03fd
 800c204:	3feec709 	.word	0x3feec709
 800c208:	145b01f5 	.word	0x145b01f5
 800c20c:	be3e2fe0 	.word	0xbe3e2fe0
 800c210:	00000000 	.word	0x00000000
 800c214:	3ff00000 	.word	0x3ff00000
 800c218:	7ff00000 	.word	0x7ff00000
 800c21c:	43400000 	.word	0x43400000
 800c220:	0003988e 	.word	0x0003988e
 800c224:	000bb679 	.word	0x000bb679
 800c228:	0800cc70 	.word	0x0800cc70
 800c22c:	3ff00000 	.word	0x3ff00000
 800c230:	40080000 	.word	0x40080000
 800c234:	0800cc90 	.word	0x0800cc90
 800c238:	0800cc80 	.word	0x0800cc80
 800c23c:	a3b5      	add	r3, pc, #724	; (adr r3, 800c514 <__ieee754_pow+0xa54>)
 800c23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c242:	4640      	mov	r0, r8
 800c244:	4649      	mov	r1, r9
 800c246:	f7f4 f829 	bl	800029c <__adddf3>
 800c24a:	4622      	mov	r2, r4
 800c24c:	ec41 0b1a 	vmov	d10, r0, r1
 800c250:	462b      	mov	r3, r5
 800c252:	4630      	mov	r0, r6
 800c254:	4639      	mov	r1, r7
 800c256:	f7f4 f81f 	bl	8000298 <__aeabi_dsub>
 800c25a:	4602      	mov	r2, r0
 800c25c:	460b      	mov	r3, r1
 800c25e:	ec51 0b1a 	vmov	r0, r1, d10
 800c262:	f7f4 fc61 	bl	8000b28 <__aeabi_dcmpgt>
 800c266:	2800      	cmp	r0, #0
 800c268:	f47f ae04 	bne.w	800be74 <__ieee754_pow+0x3b4>
 800c26c:	4aa4      	ldr	r2, [pc, #656]	; (800c500 <__ieee754_pow+0xa40>)
 800c26e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c272:	4293      	cmp	r3, r2
 800c274:	f340 8108 	ble.w	800c488 <__ieee754_pow+0x9c8>
 800c278:	151b      	asrs	r3, r3, #20
 800c27a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c27e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c282:	fa4a f303 	asr.w	r3, sl, r3
 800c286:	445b      	add	r3, fp
 800c288:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c28c:	4e9d      	ldr	r6, [pc, #628]	; (800c504 <__ieee754_pow+0xa44>)
 800c28e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c292:	4116      	asrs	r6, r2
 800c294:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c298:	2000      	movs	r0, #0
 800c29a:	ea23 0106 	bic.w	r1, r3, r6
 800c29e:	f1c2 0214 	rsb	r2, r2, #20
 800c2a2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c2a6:	fa4a fa02 	asr.w	sl, sl, r2
 800c2aa:	f1bb 0f00 	cmp.w	fp, #0
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	4629      	mov	r1, r5
 800c2b6:	bfb8      	it	lt
 800c2b8:	f1ca 0a00 	rsblt	sl, sl, #0
 800c2bc:	f7f3 ffec 	bl	8000298 <__aeabi_dsub>
 800c2c0:	ec41 0b19 	vmov	d9, r0, r1
 800c2c4:	4642      	mov	r2, r8
 800c2c6:	464b      	mov	r3, r9
 800c2c8:	ec51 0b19 	vmov	r0, r1, d9
 800c2cc:	f7f3 ffe6 	bl	800029c <__adddf3>
 800c2d0:	a37b      	add	r3, pc, #492	; (adr r3, 800c4c0 <__ieee754_pow+0xa00>)
 800c2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	4604      	mov	r4, r0
 800c2da:	460d      	mov	r5, r1
 800c2dc:	f7f4 f994 	bl	8000608 <__aeabi_dmul>
 800c2e0:	ec53 2b19 	vmov	r2, r3, d9
 800c2e4:	4606      	mov	r6, r0
 800c2e6:	460f      	mov	r7, r1
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	4629      	mov	r1, r5
 800c2ec:	f7f3 ffd4 	bl	8000298 <__aeabi_dsub>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	4640      	mov	r0, r8
 800c2f6:	4649      	mov	r1, r9
 800c2f8:	f7f3 ffce 	bl	8000298 <__aeabi_dsub>
 800c2fc:	a372      	add	r3, pc, #456	; (adr r3, 800c4c8 <__ieee754_pow+0xa08>)
 800c2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c302:	f7f4 f981 	bl	8000608 <__aeabi_dmul>
 800c306:	a372      	add	r3, pc, #456	; (adr r3, 800c4d0 <__ieee754_pow+0xa10>)
 800c308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30c:	4680      	mov	r8, r0
 800c30e:	4689      	mov	r9, r1
 800c310:	4620      	mov	r0, r4
 800c312:	4629      	mov	r1, r5
 800c314:	f7f4 f978 	bl	8000608 <__aeabi_dmul>
 800c318:	4602      	mov	r2, r0
 800c31a:	460b      	mov	r3, r1
 800c31c:	4640      	mov	r0, r8
 800c31e:	4649      	mov	r1, r9
 800c320:	f7f3 ffbc 	bl	800029c <__adddf3>
 800c324:	4604      	mov	r4, r0
 800c326:	460d      	mov	r5, r1
 800c328:	4602      	mov	r2, r0
 800c32a:	460b      	mov	r3, r1
 800c32c:	4630      	mov	r0, r6
 800c32e:	4639      	mov	r1, r7
 800c330:	f7f3 ffb4 	bl	800029c <__adddf3>
 800c334:	4632      	mov	r2, r6
 800c336:	463b      	mov	r3, r7
 800c338:	4680      	mov	r8, r0
 800c33a:	4689      	mov	r9, r1
 800c33c:	f7f3 ffac 	bl	8000298 <__aeabi_dsub>
 800c340:	4602      	mov	r2, r0
 800c342:	460b      	mov	r3, r1
 800c344:	4620      	mov	r0, r4
 800c346:	4629      	mov	r1, r5
 800c348:	f7f3 ffa6 	bl	8000298 <__aeabi_dsub>
 800c34c:	4642      	mov	r2, r8
 800c34e:	4606      	mov	r6, r0
 800c350:	460f      	mov	r7, r1
 800c352:	464b      	mov	r3, r9
 800c354:	4640      	mov	r0, r8
 800c356:	4649      	mov	r1, r9
 800c358:	f7f4 f956 	bl	8000608 <__aeabi_dmul>
 800c35c:	a35e      	add	r3, pc, #376	; (adr r3, 800c4d8 <__ieee754_pow+0xa18>)
 800c35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c362:	4604      	mov	r4, r0
 800c364:	460d      	mov	r5, r1
 800c366:	f7f4 f94f 	bl	8000608 <__aeabi_dmul>
 800c36a:	a35d      	add	r3, pc, #372	; (adr r3, 800c4e0 <__ieee754_pow+0xa20>)
 800c36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c370:	f7f3 ff92 	bl	8000298 <__aeabi_dsub>
 800c374:	4622      	mov	r2, r4
 800c376:	462b      	mov	r3, r5
 800c378:	f7f4 f946 	bl	8000608 <__aeabi_dmul>
 800c37c:	a35a      	add	r3, pc, #360	; (adr r3, 800c4e8 <__ieee754_pow+0xa28>)
 800c37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c382:	f7f3 ff8b 	bl	800029c <__adddf3>
 800c386:	4622      	mov	r2, r4
 800c388:	462b      	mov	r3, r5
 800c38a:	f7f4 f93d 	bl	8000608 <__aeabi_dmul>
 800c38e:	a358      	add	r3, pc, #352	; (adr r3, 800c4f0 <__ieee754_pow+0xa30>)
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	f7f3 ff80 	bl	8000298 <__aeabi_dsub>
 800c398:	4622      	mov	r2, r4
 800c39a:	462b      	mov	r3, r5
 800c39c:	f7f4 f934 	bl	8000608 <__aeabi_dmul>
 800c3a0:	a355      	add	r3, pc, #340	; (adr r3, 800c4f8 <__ieee754_pow+0xa38>)
 800c3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a6:	f7f3 ff79 	bl	800029c <__adddf3>
 800c3aa:	4622      	mov	r2, r4
 800c3ac:	462b      	mov	r3, r5
 800c3ae:	f7f4 f92b 	bl	8000608 <__aeabi_dmul>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	4640      	mov	r0, r8
 800c3b8:	4649      	mov	r1, r9
 800c3ba:	f7f3 ff6d 	bl	8000298 <__aeabi_dsub>
 800c3be:	4604      	mov	r4, r0
 800c3c0:	460d      	mov	r5, r1
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	4640      	mov	r0, r8
 800c3c8:	4649      	mov	r1, r9
 800c3ca:	f7f4 f91d 	bl	8000608 <__aeabi_dmul>
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	ec41 0b19 	vmov	d9, r0, r1
 800c3d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c3d8:	4620      	mov	r0, r4
 800c3da:	4629      	mov	r1, r5
 800c3dc:	f7f3 ff5c 	bl	8000298 <__aeabi_dsub>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	ec51 0b19 	vmov	r0, r1, d9
 800c3e8:	f7f4 fa38 	bl	800085c <__aeabi_ddiv>
 800c3ec:	4632      	mov	r2, r6
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	460d      	mov	r5, r1
 800c3f2:	463b      	mov	r3, r7
 800c3f4:	4640      	mov	r0, r8
 800c3f6:	4649      	mov	r1, r9
 800c3f8:	f7f4 f906 	bl	8000608 <__aeabi_dmul>
 800c3fc:	4632      	mov	r2, r6
 800c3fe:	463b      	mov	r3, r7
 800c400:	f7f3 ff4c 	bl	800029c <__adddf3>
 800c404:	4602      	mov	r2, r0
 800c406:	460b      	mov	r3, r1
 800c408:	4620      	mov	r0, r4
 800c40a:	4629      	mov	r1, r5
 800c40c:	f7f3 ff44 	bl	8000298 <__aeabi_dsub>
 800c410:	4642      	mov	r2, r8
 800c412:	464b      	mov	r3, r9
 800c414:	f7f3 ff40 	bl	8000298 <__aeabi_dsub>
 800c418:	460b      	mov	r3, r1
 800c41a:	4602      	mov	r2, r0
 800c41c:	493a      	ldr	r1, [pc, #232]	; (800c508 <__ieee754_pow+0xa48>)
 800c41e:	2000      	movs	r0, #0
 800c420:	f7f3 ff3a 	bl	8000298 <__aeabi_dsub>
 800c424:	ec41 0b10 	vmov	d0, r0, r1
 800c428:	ee10 3a90 	vmov	r3, s1
 800c42c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c434:	da2b      	bge.n	800c48e <__ieee754_pow+0x9ce>
 800c436:	4650      	mov	r0, sl
 800c438:	f000 f966 	bl	800c708 <scalbn>
 800c43c:	ec51 0b10 	vmov	r0, r1, d0
 800c440:	ec53 2b18 	vmov	r2, r3, d8
 800c444:	f7ff bbed 	b.w	800bc22 <__ieee754_pow+0x162>
 800c448:	4b30      	ldr	r3, [pc, #192]	; (800c50c <__ieee754_pow+0xa4c>)
 800c44a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c44e:	429e      	cmp	r6, r3
 800c450:	f77f af0c 	ble.w	800c26c <__ieee754_pow+0x7ac>
 800c454:	4b2e      	ldr	r3, [pc, #184]	; (800c510 <__ieee754_pow+0xa50>)
 800c456:	440b      	add	r3, r1
 800c458:	4303      	orrs	r3, r0
 800c45a:	d009      	beq.n	800c470 <__ieee754_pow+0x9b0>
 800c45c:	ec51 0b18 	vmov	r0, r1, d8
 800c460:	2200      	movs	r2, #0
 800c462:	2300      	movs	r3, #0
 800c464:	f7f4 fb42 	bl	8000aec <__aeabi_dcmplt>
 800c468:	3800      	subs	r0, #0
 800c46a:	bf18      	it	ne
 800c46c:	2001      	movne	r0, #1
 800c46e:	e447      	b.n	800bd00 <__ieee754_pow+0x240>
 800c470:	4622      	mov	r2, r4
 800c472:	462b      	mov	r3, r5
 800c474:	f7f3 ff10 	bl	8000298 <__aeabi_dsub>
 800c478:	4642      	mov	r2, r8
 800c47a:	464b      	mov	r3, r9
 800c47c:	f7f4 fb4a 	bl	8000b14 <__aeabi_dcmpge>
 800c480:	2800      	cmp	r0, #0
 800c482:	f43f aef3 	beq.w	800c26c <__ieee754_pow+0x7ac>
 800c486:	e7e9      	b.n	800c45c <__ieee754_pow+0x99c>
 800c488:	f04f 0a00 	mov.w	sl, #0
 800c48c:	e71a      	b.n	800c2c4 <__ieee754_pow+0x804>
 800c48e:	ec51 0b10 	vmov	r0, r1, d0
 800c492:	4619      	mov	r1, r3
 800c494:	e7d4      	b.n	800c440 <__ieee754_pow+0x980>
 800c496:	491c      	ldr	r1, [pc, #112]	; (800c508 <__ieee754_pow+0xa48>)
 800c498:	2000      	movs	r0, #0
 800c49a:	f7ff bb30 	b.w	800bafe <__ieee754_pow+0x3e>
 800c49e:	2000      	movs	r0, #0
 800c4a0:	2100      	movs	r1, #0
 800c4a2:	f7ff bb2c 	b.w	800bafe <__ieee754_pow+0x3e>
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	4639      	mov	r1, r7
 800c4aa:	f7ff bb28 	b.w	800bafe <__ieee754_pow+0x3e>
 800c4ae:	9204      	str	r2, [sp, #16]
 800c4b0:	f7ff bb7a 	b.w	800bba8 <__ieee754_pow+0xe8>
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	f7ff bb64 	b.w	800bb82 <__ieee754_pow+0xc2>
 800c4ba:	bf00      	nop
 800c4bc:	f3af 8000 	nop.w
 800c4c0:	00000000 	.word	0x00000000
 800c4c4:	3fe62e43 	.word	0x3fe62e43
 800c4c8:	fefa39ef 	.word	0xfefa39ef
 800c4cc:	3fe62e42 	.word	0x3fe62e42
 800c4d0:	0ca86c39 	.word	0x0ca86c39
 800c4d4:	be205c61 	.word	0xbe205c61
 800c4d8:	72bea4d0 	.word	0x72bea4d0
 800c4dc:	3e663769 	.word	0x3e663769
 800c4e0:	c5d26bf1 	.word	0xc5d26bf1
 800c4e4:	3ebbbd41 	.word	0x3ebbbd41
 800c4e8:	af25de2c 	.word	0xaf25de2c
 800c4ec:	3f11566a 	.word	0x3f11566a
 800c4f0:	16bebd93 	.word	0x16bebd93
 800c4f4:	3f66c16c 	.word	0x3f66c16c
 800c4f8:	5555553e 	.word	0x5555553e
 800c4fc:	3fc55555 	.word	0x3fc55555
 800c500:	3fe00000 	.word	0x3fe00000
 800c504:	000fffff 	.word	0x000fffff
 800c508:	3ff00000 	.word	0x3ff00000
 800c50c:	4090cbff 	.word	0x4090cbff
 800c510:	3f6f3400 	.word	0x3f6f3400
 800c514:	652b82fe 	.word	0x652b82fe
 800c518:	3c971547 	.word	0x3c971547

0800c51c <__ieee754_sqrt>:
 800c51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c520:	ec55 4b10 	vmov	r4, r5, d0
 800c524:	4e55      	ldr	r6, [pc, #340]	; (800c67c <__ieee754_sqrt+0x160>)
 800c526:	43ae      	bics	r6, r5
 800c528:	ee10 0a10 	vmov	r0, s0
 800c52c:	ee10 3a10 	vmov	r3, s0
 800c530:	462a      	mov	r2, r5
 800c532:	4629      	mov	r1, r5
 800c534:	d110      	bne.n	800c558 <__ieee754_sqrt+0x3c>
 800c536:	ee10 2a10 	vmov	r2, s0
 800c53a:	462b      	mov	r3, r5
 800c53c:	f7f4 f864 	bl	8000608 <__aeabi_dmul>
 800c540:	4602      	mov	r2, r0
 800c542:	460b      	mov	r3, r1
 800c544:	4620      	mov	r0, r4
 800c546:	4629      	mov	r1, r5
 800c548:	f7f3 fea8 	bl	800029c <__adddf3>
 800c54c:	4604      	mov	r4, r0
 800c54e:	460d      	mov	r5, r1
 800c550:	ec45 4b10 	vmov	d0, r4, r5
 800c554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c558:	2d00      	cmp	r5, #0
 800c55a:	dc10      	bgt.n	800c57e <__ieee754_sqrt+0x62>
 800c55c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c560:	4330      	orrs	r0, r6
 800c562:	d0f5      	beq.n	800c550 <__ieee754_sqrt+0x34>
 800c564:	b15d      	cbz	r5, 800c57e <__ieee754_sqrt+0x62>
 800c566:	ee10 2a10 	vmov	r2, s0
 800c56a:	462b      	mov	r3, r5
 800c56c:	ee10 0a10 	vmov	r0, s0
 800c570:	f7f3 fe92 	bl	8000298 <__aeabi_dsub>
 800c574:	4602      	mov	r2, r0
 800c576:	460b      	mov	r3, r1
 800c578:	f7f4 f970 	bl	800085c <__aeabi_ddiv>
 800c57c:	e7e6      	b.n	800c54c <__ieee754_sqrt+0x30>
 800c57e:	1512      	asrs	r2, r2, #20
 800c580:	d074      	beq.n	800c66c <__ieee754_sqrt+0x150>
 800c582:	07d4      	lsls	r4, r2, #31
 800c584:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c588:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c58c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c590:	bf5e      	ittt	pl
 800c592:	0fda      	lsrpl	r2, r3, #31
 800c594:	005b      	lslpl	r3, r3, #1
 800c596:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c59a:	2400      	movs	r4, #0
 800c59c:	0fda      	lsrs	r2, r3, #31
 800c59e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c5a2:	107f      	asrs	r7, r7, #1
 800c5a4:	005b      	lsls	r3, r3, #1
 800c5a6:	2516      	movs	r5, #22
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c5ae:	1886      	adds	r6, r0, r2
 800c5b0:	428e      	cmp	r6, r1
 800c5b2:	bfde      	ittt	le
 800c5b4:	1b89      	suble	r1, r1, r6
 800c5b6:	18b0      	addle	r0, r6, r2
 800c5b8:	18a4      	addle	r4, r4, r2
 800c5ba:	0049      	lsls	r1, r1, #1
 800c5bc:	3d01      	subs	r5, #1
 800c5be:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c5c2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c5c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c5ca:	d1f0      	bne.n	800c5ae <__ieee754_sqrt+0x92>
 800c5cc:	462a      	mov	r2, r5
 800c5ce:	f04f 0e20 	mov.w	lr, #32
 800c5d2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c5d6:	4281      	cmp	r1, r0
 800c5d8:	eb06 0c05 	add.w	ip, r6, r5
 800c5dc:	dc02      	bgt.n	800c5e4 <__ieee754_sqrt+0xc8>
 800c5de:	d113      	bne.n	800c608 <__ieee754_sqrt+0xec>
 800c5e0:	459c      	cmp	ip, r3
 800c5e2:	d811      	bhi.n	800c608 <__ieee754_sqrt+0xec>
 800c5e4:	f1bc 0f00 	cmp.w	ip, #0
 800c5e8:	eb0c 0506 	add.w	r5, ip, r6
 800c5ec:	da43      	bge.n	800c676 <__ieee754_sqrt+0x15a>
 800c5ee:	2d00      	cmp	r5, #0
 800c5f0:	db41      	blt.n	800c676 <__ieee754_sqrt+0x15a>
 800c5f2:	f100 0801 	add.w	r8, r0, #1
 800c5f6:	1a09      	subs	r1, r1, r0
 800c5f8:	459c      	cmp	ip, r3
 800c5fa:	bf88      	it	hi
 800c5fc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c600:	eba3 030c 	sub.w	r3, r3, ip
 800c604:	4432      	add	r2, r6
 800c606:	4640      	mov	r0, r8
 800c608:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c60c:	f1be 0e01 	subs.w	lr, lr, #1
 800c610:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c614:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c618:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c61c:	d1db      	bne.n	800c5d6 <__ieee754_sqrt+0xba>
 800c61e:	430b      	orrs	r3, r1
 800c620:	d006      	beq.n	800c630 <__ieee754_sqrt+0x114>
 800c622:	1c50      	adds	r0, r2, #1
 800c624:	bf13      	iteet	ne
 800c626:	3201      	addne	r2, #1
 800c628:	3401      	addeq	r4, #1
 800c62a:	4672      	moveq	r2, lr
 800c62c:	f022 0201 	bicne.w	r2, r2, #1
 800c630:	1063      	asrs	r3, r4, #1
 800c632:	0852      	lsrs	r2, r2, #1
 800c634:	07e1      	lsls	r1, r4, #31
 800c636:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c63a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c63e:	bf48      	it	mi
 800c640:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c644:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c648:	4614      	mov	r4, r2
 800c64a:	e781      	b.n	800c550 <__ieee754_sqrt+0x34>
 800c64c:	0ad9      	lsrs	r1, r3, #11
 800c64e:	3815      	subs	r0, #21
 800c650:	055b      	lsls	r3, r3, #21
 800c652:	2900      	cmp	r1, #0
 800c654:	d0fa      	beq.n	800c64c <__ieee754_sqrt+0x130>
 800c656:	02cd      	lsls	r5, r1, #11
 800c658:	d50a      	bpl.n	800c670 <__ieee754_sqrt+0x154>
 800c65a:	f1c2 0420 	rsb	r4, r2, #32
 800c65e:	fa23 f404 	lsr.w	r4, r3, r4
 800c662:	1e55      	subs	r5, r2, #1
 800c664:	4093      	lsls	r3, r2
 800c666:	4321      	orrs	r1, r4
 800c668:	1b42      	subs	r2, r0, r5
 800c66a:	e78a      	b.n	800c582 <__ieee754_sqrt+0x66>
 800c66c:	4610      	mov	r0, r2
 800c66e:	e7f0      	b.n	800c652 <__ieee754_sqrt+0x136>
 800c670:	0049      	lsls	r1, r1, #1
 800c672:	3201      	adds	r2, #1
 800c674:	e7ef      	b.n	800c656 <__ieee754_sqrt+0x13a>
 800c676:	4680      	mov	r8, r0
 800c678:	e7bd      	b.n	800c5f6 <__ieee754_sqrt+0xda>
 800c67a:	bf00      	nop
 800c67c:	7ff00000 	.word	0x7ff00000

0800c680 <with_errno>:
 800c680:	b570      	push	{r4, r5, r6, lr}
 800c682:	4604      	mov	r4, r0
 800c684:	460d      	mov	r5, r1
 800c686:	4616      	mov	r6, r2
 800c688:	f7fc f9d2 	bl	8008a30 <__errno>
 800c68c:	4629      	mov	r1, r5
 800c68e:	6006      	str	r6, [r0, #0]
 800c690:	4620      	mov	r0, r4
 800c692:	bd70      	pop	{r4, r5, r6, pc}

0800c694 <xflow>:
 800c694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c696:	4614      	mov	r4, r2
 800c698:	461d      	mov	r5, r3
 800c69a:	b108      	cbz	r0, 800c6a0 <xflow+0xc>
 800c69c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c6a0:	e9cd 2300 	strd	r2, r3, [sp]
 800c6a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	4629      	mov	r1, r5
 800c6ac:	f7f3 ffac 	bl	8000608 <__aeabi_dmul>
 800c6b0:	2222      	movs	r2, #34	; 0x22
 800c6b2:	b003      	add	sp, #12
 800c6b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6b8:	f7ff bfe2 	b.w	800c680 <with_errno>

0800c6bc <__math_uflow>:
 800c6bc:	b508      	push	{r3, lr}
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c6c4:	f7ff ffe6 	bl	800c694 <xflow>
 800c6c8:	ec41 0b10 	vmov	d0, r0, r1
 800c6cc:	bd08      	pop	{r3, pc}

0800c6ce <__math_oflow>:
 800c6ce:	b508      	push	{r3, lr}
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c6d6:	f7ff ffdd 	bl	800c694 <xflow>
 800c6da:	ec41 0b10 	vmov	d0, r0, r1
 800c6de:	bd08      	pop	{r3, pc}

0800c6e0 <fabs>:
 800c6e0:	ec51 0b10 	vmov	r0, r1, d0
 800c6e4:	ee10 2a10 	vmov	r2, s0
 800c6e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c6ec:	ec43 2b10 	vmov	d0, r2, r3
 800c6f0:	4770      	bx	lr

0800c6f2 <finite>:
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	ed8d 0b00 	vstr	d0, [sp]
 800c6f8:	9801      	ldr	r0, [sp, #4]
 800c6fa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c6fe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c702:	0fc0      	lsrs	r0, r0, #31
 800c704:	b002      	add	sp, #8
 800c706:	4770      	bx	lr

0800c708 <scalbn>:
 800c708:	b570      	push	{r4, r5, r6, lr}
 800c70a:	ec55 4b10 	vmov	r4, r5, d0
 800c70e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c712:	4606      	mov	r6, r0
 800c714:	462b      	mov	r3, r5
 800c716:	b99a      	cbnz	r2, 800c740 <scalbn+0x38>
 800c718:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c71c:	4323      	orrs	r3, r4
 800c71e:	d036      	beq.n	800c78e <scalbn+0x86>
 800c720:	4b39      	ldr	r3, [pc, #228]	; (800c808 <scalbn+0x100>)
 800c722:	4629      	mov	r1, r5
 800c724:	ee10 0a10 	vmov	r0, s0
 800c728:	2200      	movs	r2, #0
 800c72a:	f7f3 ff6d 	bl	8000608 <__aeabi_dmul>
 800c72e:	4b37      	ldr	r3, [pc, #220]	; (800c80c <scalbn+0x104>)
 800c730:	429e      	cmp	r6, r3
 800c732:	4604      	mov	r4, r0
 800c734:	460d      	mov	r5, r1
 800c736:	da10      	bge.n	800c75a <scalbn+0x52>
 800c738:	a32b      	add	r3, pc, #172	; (adr r3, 800c7e8 <scalbn+0xe0>)
 800c73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73e:	e03a      	b.n	800c7b6 <scalbn+0xae>
 800c740:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c744:	428a      	cmp	r2, r1
 800c746:	d10c      	bne.n	800c762 <scalbn+0x5a>
 800c748:	ee10 2a10 	vmov	r2, s0
 800c74c:	4620      	mov	r0, r4
 800c74e:	4629      	mov	r1, r5
 800c750:	f7f3 fda4 	bl	800029c <__adddf3>
 800c754:	4604      	mov	r4, r0
 800c756:	460d      	mov	r5, r1
 800c758:	e019      	b.n	800c78e <scalbn+0x86>
 800c75a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c75e:	460b      	mov	r3, r1
 800c760:	3a36      	subs	r2, #54	; 0x36
 800c762:	4432      	add	r2, r6
 800c764:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c768:	428a      	cmp	r2, r1
 800c76a:	dd08      	ble.n	800c77e <scalbn+0x76>
 800c76c:	2d00      	cmp	r5, #0
 800c76e:	a120      	add	r1, pc, #128	; (adr r1, 800c7f0 <scalbn+0xe8>)
 800c770:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c774:	da1c      	bge.n	800c7b0 <scalbn+0xa8>
 800c776:	a120      	add	r1, pc, #128	; (adr r1, 800c7f8 <scalbn+0xf0>)
 800c778:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c77c:	e018      	b.n	800c7b0 <scalbn+0xa8>
 800c77e:	2a00      	cmp	r2, #0
 800c780:	dd08      	ble.n	800c794 <scalbn+0x8c>
 800c782:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c786:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c78a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c78e:	ec45 4b10 	vmov	d0, r4, r5
 800c792:	bd70      	pop	{r4, r5, r6, pc}
 800c794:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c798:	da19      	bge.n	800c7ce <scalbn+0xc6>
 800c79a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c79e:	429e      	cmp	r6, r3
 800c7a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c7a4:	dd0a      	ble.n	800c7bc <scalbn+0xb4>
 800c7a6:	a112      	add	r1, pc, #72	; (adr r1, 800c7f0 <scalbn+0xe8>)
 800c7a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d1e2      	bne.n	800c776 <scalbn+0x6e>
 800c7b0:	a30f      	add	r3, pc, #60	; (adr r3, 800c7f0 <scalbn+0xe8>)
 800c7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b6:	f7f3 ff27 	bl	8000608 <__aeabi_dmul>
 800c7ba:	e7cb      	b.n	800c754 <scalbn+0x4c>
 800c7bc:	a10a      	add	r1, pc, #40	; (adr r1, 800c7e8 <scalbn+0xe0>)
 800c7be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d0b8      	beq.n	800c738 <scalbn+0x30>
 800c7c6:	a10e      	add	r1, pc, #56	; (adr r1, 800c800 <scalbn+0xf8>)
 800c7c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7cc:	e7b4      	b.n	800c738 <scalbn+0x30>
 800c7ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c7d2:	3236      	adds	r2, #54	; 0x36
 800c7d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c7d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c7dc:	4620      	mov	r0, r4
 800c7de:	4b0c      	ldr	r3, [pc, #48]	; (800c810 <scalbn+0x108>)
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	e7e8      	b.n	800c7b6 <scalbn+0xae>
 800c7e4:	f3af 8000 	nop.w
 800c7e8:	c2f8f359 	.word	0xc2f8f359
 800c7ec:	01a56e1f 	.word	0x01a56e1f
 800c7f0:	8800759c 	.word	0x8800759c
 800c7f4:	7e37e43c 	.word	0x7e37e43c
 800c7f8:	8800759c 	.word	0x8800759c
 800c7fc:	fe37e43c 	.word	0xfe37e43c
 800c800:	c2f8f359 	.word	0xc2f8f359
 800c804:	81a56e1f 	.word	0x81a56e1f
 800c808:	43500000 	.word	0x43500000
 800c80c:	ffff3cb0 	.word	0xffff3cb0
 800c810:	3c900000 	.word	0x3c900000

0800c814 <_init>:
 800c814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c816:	bf00      	nop
 800c818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c81a:	bc08      	pop	{r3}
 800c81c:	469e      	mov	lr, r3
 800c81e:	4770      	bx	lr

0800c820 <_fini>:
 800c820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c822:	bf00      	nop
 800c824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c826:	bc08      	pop	{r3}
 800c828:	469e      	mov	lr, r3
 800c82a:	4770      	bx	lr
