
E-Design.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004874  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004a14  08004a14  00014a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a88  08004a88  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08004a88  08004a88  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a88  08004a88  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a88  08004a88  00014a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a8c  08004a8c  00014a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          000000c8  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000014c  2000014c  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b258  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b4e  00000000  00000000  0002b30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000798  00000000  00000000  0002ce60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006f0  00000000  00000000  0002d5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f366  00000000  00000000  0002dce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aefa  00000000  00000000  0004d04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be262  00000000  00000000  00057f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001161aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002160  00000000  00000000  001161fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080049fc 	.word	0x080049fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	080049fc 	.word	0x080049fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_UART_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit_IT(&huart2, rxData, 1);
 8000288:	2201      	movs	r2, #1
 800028a:	4904      	ldr	r1, [pc, #16]	; (800029c <HAL_UART_RxCpltCallback+0x1c>)
 800028c:	4804      	ldr	r0, [pc, #16]	; (80002a0 <HAL_UART_RxCpltCallback+0x20>)
 800028e:	f002 fc59 	bl	8002b44 <HAL_UART_Transmit_IT>
}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	20000124 	.word	0x20000124
 80002a0:	200000a0 	.word	0x200000a0

080002a4 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef*huart){
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]


}
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr

080002b8 <buttonpressed>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void buttonpressed(){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0

              if ((HAL_GetTick() - tickspr) >= 20){
 80002bc:	f000 fb22 	bl	8000904 <HAL_GetTick>
 80002c0:	4603      	mov	r3, r0
 80002c2:	4a25      	ldr	r2, [pc, #148]	; (8000358 <buttonpressed+0xa0>)
 80002c4:	6812      	ldr	r2, [r2, #0]
 80002c6:	1a9b      	subs	r3, r3, r2
 80002c8:	2b13      	cmp	r3, #19
 80002ca:	d939      	bls.n	8000340 <buttonpressed+0x88>

                           if ((prevstate == 1) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0)){
 80002cc:	4b23      	ldr	r3, [pc, #140]	; (800035c <buttonpressed+0xa4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d122      	bne.n	800031a <buttonpressed+0x62>
 80002d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002dc:	f000 fe54 	bl	8000f88 <HAL_GPIO_ReadPin>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d119      	bne.n	800031a <buttonpressed+0x62>

                        	   count++;
 80002e6:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <buttonpressed+0xa8>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	3301      	adds	r3, #1
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	4b1c      	ldr	r3, [pc, #112]	; (8000360 <buttonpressed+0xa8>)
 80002f0:	701a      	strb	r2, [r3, #0]
                        	   if (count==1000){
                        	   count=0;
                        	                           	   }

                               tickspr = HAL_GetTick();
 80002f2:	f000 fb07 	bl	8000904 <HAL_GetTick>
 80002f6:	4603      	mov	r3, r0
 80002f8:	461a      	mov	r2, r3
 80002fa:	4b17      	ldr	r3, [pc, #92]	; (8000358 <buttonpressed+0xa0>)
 80002fc:	601a      	str	r2, [r3, #0]
                               snprintf(countarr, 5, "%03d\n", count);
 80002fe:	4b18      	ldr	r3, [pc, #96]	; (8000360 <buttonpressed+0xa8>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	4a18      	ldr	r2, [pc, #96]	; (8000364 <buttonpressed+0xac>)
 8000304:	2105      	movs	r1, #5
 8000306:	4818      	ldr	r0, [pc, #96]	; (8000368 <buttonpressed+0xb0>)
 8000308:	f003 fef6 	bl	80040f8 <sniprintf>
                               HAL_UART_Transmit(&huart2, countarr, 4, 1000);
 800030c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000310:	2204      	movs	r2, #4
 8000312:	4915      	ldr	r1, [pc, #84]	; (8000368 <buttonpressed+0xb0>)
 8000314:	4815      	ldr	r0, [pc, #84]	; (800036c <buttonpressed+0xb4>)
 8000316:	f002 fb81 	bl	8002a1c <HAL_UART_Transmit>
                           }

                           if ((prevstate == 0) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1)){
 800031a:	4b10      	ldr	r3, [pc, #64]	; (800035c <buttonpressed+0xa4>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d10e      	bne.n	8000340 <buttonpressed+0x88>
 8000322:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032a:	f000 fe2d 	bl	8000f88 <HAL_GPIO_ReadPin>
 800032e:	4603      	mov	r3, r0
 8000330:	2b01      	cmp	r3, #1
 8000332:	d105      	bne.n	8000340 <buttonpressed+0x88>
                        	   tickspr = HAL_GetTick();
 8000334:	f000 fae6 	bl	8000904 <HAL_GetTick>
 8000338:	4603      	mov	r3, r0
 800033a:	461a      	mov	r2, r3
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <buttonpressed+0xa0>)
 800033e:	601a      	str	r2, [r3, #0]
                           }



              }
              prevstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000340:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000348:	f000 fe1e 	bl	8000f88 <HAL_GPIO_ReadPin>
 800034c:	4603      	mov	r3, r0
 800034e:	461a      	mov	r2, r3
 8000350:	4b02      	ldr	r3, [pc, #8]	; (800035c <buttonpressed+0xa4>)
 8000352:	601a      	str	r2, [r3, #0]
}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000128 	.word	0x20000128
 800035c:	20000010 	.word	0x20000010
 8000360:	20000125 	.word	0x20000125
 8000364:	08004a14 	.word	0x08004a14
 8000368:	2000012c 	.word	0x2000012c
 800036c:	200000a0 	.word	0x200000a0

08000370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000374:	f000 fa6c 	bl	8000850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000378:	f000 f824 	bl	80003c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037c:	f000 f8b2 	bl	80004e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000380:	f000 f87e 	bl	8000480 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
 HAL_Delay(250);
 8000384:	20fa      	movs	r0, #250	; 0xfa
 8000386:	f000 fac9 	bl	800091c <HAL_Delay>
  HAL_UART_Transmit_IT(&huart2, txData, 13);
 800038a:	220d      	movs	r2, #13
 800038c:	4909      	ldr	r1, [pc, #36]	; (80003b4 <main+0x44>)
 800038e:	480a      	ldr	r0, [pc, #40]	; (80003b8 <main+0x48>)
 8000390:	f002 fbd8 	bl	8002b44 <HAL_UART_Transmit_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&huart2, rxData, 1);
 8000394:	2201      	movs	r2, #1
 8000396:	4909      	ldr	r1, [pc, #36]	; (80003bc <main+0x4c>)
 8000398:	4807      	ldr	r0, [pc, #28]	; (80003b8 <main+0x48>)
 800039a:	f002 fc41 	bl	8002c20 <HAL_UART_Receive_IT>


	  if (state==1){
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <main+0x50>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d1f6      	bne.n	8000394 <main+0x24>

		  buttonpressed();
 80003a6:	f7ff ff87 	bl	80002b8 <buttonpressed>
		  state=0;
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <main+0x50>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2, rxData, 1);
 80003b0:	e7f0      	b.n	8000394 <main+0x24>
 80003b2:	bf00      	nop
 80003b4:	20000000 	.word	0x20000000
 80003b8:	200000a0 	.word	0x200000a0
 80003bc:	20000124 	.word	0x20000124
 80003c0:	20000131 	.word	0x20000131

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b0a6      	sub	sp, #152	; 0x98
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003ce:	2228      	movs	r2, #40	; 0x28
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f003 fe88 	bl	80040e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
 80003e4:	60da      	str	r2, [r3, #12]
 80003e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2258      	movs	r2, #88	; 0x58
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f003 fe7a 	bl	80040e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f4:	2302      	movs	r3, #2
 80003f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f8:	2301      	movs	r3, #1
 80003fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003fc:	2310      	movs	r3, #16
 80003fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000402:	2302      	movs	r3, #2
 8000404:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000408:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800040c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000410:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000414:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000422:	4618      	mov	r0, r3
 8000424:	f000 fe04 	bl	8001030 <HAL_RCC_OscConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800042e:	f000 f8df 	bl	80005f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000432:	230f      	movs	r3, #15
 8000434:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000436:	2302      	movs	r3, #2
 8000438:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800043e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000442:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000448:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800044c:	2102      	movs	r1, #2
 800044e:	4618      	mov	r0, r3
 8000450:	f001 fe42 	bl	80020d8 <HAL_RCC_ClockConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800045a:	f000 f8c9 	bl	80005f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800045e:	2302      	movs	r3, #2
 8000460:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000462:	2300      	movs	r3, #0
 8000464:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	4618      	mov	r0, r3
 800046a:	f002 f86b 	bl	8002544 <HAL_RCCEx_PeriphCLKConfig>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000474:	f000 f8bc 	bl	80005f0 <Error_Handler>
  }
}
 8000478:	bf00      	nop
 800047a:	3798      	adds	r7, #152	; 0x98
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}

08000480 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000484:	4b15      	ldr	r3, [pc, #84]	; (80004dc <MX_USART2_UART_Init+0x5c>)
 8000486:	4a16      	ldr	r2, [pc, #88]	; (80004e0 <MX_USART2_UART_Init+0x60>)
 8000488:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800048a:	4b14      	ldr	r3, [pc, #80]	; (80004dc <MX_USART2_UART_Init+0x5c>)
 800048c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000490:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000492:	4b12      	ldr	r3, [pc, #72]	; (80004dc <MX_USART2_UART_Init+0x5c>)
 8000494:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000498:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <MX_USART2_UART_Init+0x5c>)
 800049c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_USART2_UART_Init+0x5c>)
 80004a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004a8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <MX_USART2_UART_Init+0x5c>)
 80004ac:	220c      	movs	r2, #12
 80004ae:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004b0:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <MX_USART2_UART_Init+0x5c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <MX_USART2_UART_Init+0x5c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004bc:	4b07      	ldr	r3, [pc, #28]	; (80004dc <MX_USART2_UART_Init+0x5c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <MX_USART2_UART_Init+0x5c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004c8:	4804      	ldr	r0, [pc, #16]	; (80004dc <MX_USART2_UART_Init+0x5c>)
 80004ca:	f002 fa59 	bl	8002980 <HAL_UART_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80004d4:	f000 f88c 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	200000a0 	.word	0x200000a0
 80004e0:	40004400 	.word	0x40004400

080004e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	4b3b      	ldr	r3, [pc, #236]	; (80005e8 <MX_GPIO_Init+0x104>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a3a      	ldr	r2, [pc, #232]	; (80005e8 <MX_GPIO_Init+0x104>)
 8000500:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b38      	ldr	r3, [pc, #224]	; (80005e8 <MX_GPIO_Init+0x104>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800050e:	613b      	str	r3, [r7, #16]
 8000510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000512:	4b35      	ldr	r3, [pc, #212]	; (80005e8 <MX_GPIO_Init+0x104>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a34      	ldr	r2, [pc, #208]	; (80005e8 <MX_GPIO_Init+0x104>)
 8000518:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b32      	ldr	r3, [pc, #200]	; (80005e8 <MX_GPIO_Init+0x104>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b2f      	ldr	r3, [pc, #188]	; (80005e8 <MX_GPIO_Init+0x104>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a2e      	ldr	r2, [pc, #184]	; (80005e8 <MX_GPIO_Init+0x104>)
 8000530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	4b2c      	ldr	r3, [pc, #176]	; (80005e8 <MX_GPIO_Init+0x104>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	4b29      	ldr	r3, [pc, #164]	; (80005e8 <MX_GPIO_Init+0x104>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a28      	ldr	r2, [pc, #160]	; (80005e8 <MX_GPIO_Init+0x104>)
 8000548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b26      	ldr	r3, [pc, #152]	; (80005e8 <MX_GPIO_Init+0x104>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2120      	movs	r1, #32
 800055e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000562:	f000 fd29 	bl	8000fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000566:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800056c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4619      	mov	r1, r3
 800057c:	481b      	ldr	r0, [pc, #108]	; (80005ec <MX_GPIO_Init+0x108>)
 800057e:	f000 fb79 	bl	8000c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000582:	2320      	movs	r3, #32
 8000584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058e:	2300      	movs	r3, #0
 8000590:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059c:	f000 fb6a 	bl	8000c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005a6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80005aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ba:	f000 fb5b 	bl	8000c74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	2017      	movs	r0, #23
 80005c4:	f000 faa9 	bl	8000b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005c8:	2017      	movs	r0, #23
 80005ca:	f000 fac2 	bl	8000b52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	2028      	movs	r0, #40	; 0x28
 80005d4:	f000 faa1 	bl	8000b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005d8:	2028      	movs	r0, #40	; 0x28
 80005da:	f000 faba 	bl	8000b52 <HAL_NVIC_EnableIRQ>

}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	; 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000
 80005ec:	48000800 	.word	0x48000800

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <Error_Handler+0x8>
	...

080005fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_MspInit+0x44>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <HAL_MspInit+0x44>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6193      	str	r3, [r2, #24]
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <HAL_MspInit+0x44>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_MspInit+0x44>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <HAL_MspInit+0x44>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	61d3      	str	r3, [r2, #28]
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_MspInit+0x44>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000632:	2007      	movs	r0, #7
 8000634:	f000 fa66 	bl	8000b04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000

08000644 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a1b      	ldr	r2, [pc, #108]	; (80006d0 <HAL_UART_MspInit+0x8c>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d130      	bne.n	80006c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000666:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <HAL_UART_MspInit+0x90>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	4a1a      	ldr	r2, [pc, #104]	; (80006d4 <HAL_UART_MspInit+0x90>)
 800066c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000670:	61d3      	str	r3, [r2, #28]
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <HAL_UART_MspInit+0x90>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_UART_MspInit+0x90>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <HAL_UART_MspInit+0x90>)
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000688:	6153      	str	r3, [r2, #20]
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_UART_MspInit+0x90>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000696:	230c      	movs	r3, #12
 8000698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069a:	2302      	movs	r3, #2
 800069c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006a6:	2307      	movs	r3, #7
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b4:	f000 fade 	bl	8000c74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	2026      	movs	r0, #38	; 0x26
 80006be:	f000 fa2c 	bl	8000b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006c2:	2026      	movs	r0, #38	; 0x26
 80006c4:	f000 fa45 	bl	8000b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	; 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40004400 	.word	0x40004400
 80006d4:	40021000 	.word	0x40021000

080006d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <NMI_Handler+0x4>

080006de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <HardFault_Handler+0x4>

080006e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <MemManage_Handler+0x4>

080006ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <BusFault_Handler+0x4>

080006f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <UsageFault_Handler+0x4>

080006f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000724:	f000 f8da 	bl	80008dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
state =1;
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <EXTI9_5_IRQHandler+0x18>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000736:	f44f 7000 	mov.w	r0, #512	; 0x200
 800073a:	f000 fc55 	bl	8000fe8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000131 	.word	0x20000131

08000748 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <USART2_IRQHandler+0x10>)
 800074e:	f002 fab5 	bl	8002cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000a0 	.word	0x200000a0

0800075c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000760:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000764:	f000 fc40 	bl	8000fe8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000774:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <_sbrk+0x5c>)
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <_sbrk+0x60>)
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <_sbrk+0x64>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d102      	bne.n	800078e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <_sbrk+0x64>)
 800078a:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <_sbrk+0x68>)
 800078c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <_sbrk+0x64>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	693a      	ldr	r2, [r7, #16]
 8000798:	429a      	cmp	r2, r3
 800079a:	d207      	bcs.n	80007ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800079c:	f003 fc7a 	bl	8004094 <__errno>
 80007a0:	4603      	mov	r3, r0
 80007a2:	220c      	movs	r2, #12
 80007a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	e009      	b.n	80007c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <_sbrk+0x64>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <_sbrk+0x64>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <_sbrk+0x64>)
 80007bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007be:	68fb      	ldr	r3, [r7, #12]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20010000 	.word	0x20010000
 80007cc:	00000400 	.word	0x00000400
 80007d0:	20000134 	.word	0x20000134
 80007d4:	20000150 	.word	0x20000150

080007d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <SystemInit+0x20>)
 80007de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007e2:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <SystemInit+0x20>)
 80007e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000834 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <LoopForever+0x6>)
  ldr r1, =_edata
 8000802:	490e      	ldr	r1, [pc, #56]	; (800083c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000804:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <LoopForever+0xe>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a0b      	ldr	r2, [pc, #44]	; (8000844 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000818:	4c0b      	ldr	r4, [pc, #44]	; (8000848 <LoopForever+0x16>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000826:	f7ff ffd7 	bl	80007d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800082a:	f003 fc39 	bl	80040a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800082e:	f7ff fd9f 	bl	8000370 <main>

08000832 <LoopForever>:

LoopForever:
    b LoopForever
 8000832:	e7fe      	b.n	8000832 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000834:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800083c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000840:	08004a90 	.word	0x08004a90
  ldr r2, =_sbss
 8000844:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000848:	2000014c 	.word	0x2000014c

0800084c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800084c:	e7fe      	b.n	800084c <ADC1_2_IRQHandler>
	...

08000850 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_Init+0x28>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <HAL_Init+0x28>)
 800085a:	f043 0310 	orr.w	r3, r3, #16
 800085e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000860:	2003      	movs	r0, #3
 8000862:	f000 f94f 	bl	8000b04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000866:	2000      	movs	r0, #0
 8000868:	f000 f808 	bl	800087c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800086c:	f7ff fec6 	bl	80005fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40022000 	.word	0x40022000

0800087c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_InitTick+0x54>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <HAL_InitTick+0x58>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4619      	mov	r1, r3
 800088e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000892:	fbb3 f3f1 	udiv	r3, r3, r1
 8000896:	fbb2 f3f3 	udiv	r3, r2, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f967 	bl	8000b6e <HAL_SYSTICK_Config>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e00e      	b.n	80008c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d80a      	bhi.n	80008c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b0:	2200      	movs	r2, #0
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295
 80008b8:	f000 f92f 	bl	8000b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008bc:	4a06      	ldr	r2, [pc, #24]	; (80008d8 <HAL_InitTick+0x5c>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008c2:	2300      	movs	r3, #0
 80008c4:	e000      	b.n	80008c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000014 	.word	0x20000014
 80008d4:	2000001c 	.word	0x2000001c
 80008d8:	20000018 	.word	0x20000018

080008dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_IncTick+0x20>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_IncTick+0x24>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	4a04      	ldr	r2, [pc, #16]	; (8000900 <HAL_IncTick+0x24>)
 80008ee:	6013      	str	r3, [r2, #0]
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	2000001c 	.word	0x2000001c
 8000900:	20000138 	.word	0x20000138

08000904 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return uwTick;  
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <HAL_GetTick+0x14>)
 800090a:	681b      	ldr	r3, [r3, #0]
}
 800090c:	4618      	mov	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000138 	.word	0x20000138

0800091c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000924:	f7ff ffee 	bl	8000904 <HAL_GetTick>
 8000928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000934:	d005      	beq.n	8000942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <HAL_Delay+0x44>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000942:	bf00      	nop
 8000944:	f7ff ffde 	bl	8000904 <HAL_GetTick>
 8000948:	4602      	mov	r2, r0
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	429a      	cmp	r2, r3
 8000952:	d8f7      	bhi.n	8000944 <HAL_Delay+0x28>
  {
  }
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000001c 	.word	0x2000001c

08000964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800098c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000996:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	60d3      	str	r3, [r2, #12]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <__NVIC_GetPriorityGrouping+0x18>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	f003 0307 	and.w	r3, r3, #7
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	db0b      	blt.n	80009f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	f003 021f 	and.w	r2, r3, #31
 80009e0:	4907      	ldr	r1, [pc, #28]	; (8000a00 <__NVIC_EnableIRQ+0x38>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	095b      	lsrs	r3, r3, #5
 80009e8:	2001      	movs	r0, #1
 80009ea:	fa00 f202 	lsl.w	r2, r0, r2
 80009ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000e100 	.word	0xe000e100

08000a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	db0a      	blt.n	8000a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	490c      	ldr	r1, [pc, #48]	; (8000a50 <__NVIC_SetPriority+0x4c>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	0112      	lsls	r2, r2, #4
 8000a24:	b2d2      	uxtb	r2, r2
 8000a26:	440b      	add	r3, r1
 8000a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a2c:	e00a      	b.n	8000a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4908      	ldr	r1, [pc, #32]	; (8000a54 <__NVIC_SetPriority+0x50>)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	f003 030f 	and.w	r3, r3, #15
 8000a3a:	3b04      	subs	r3, #4
 8000a3c:	0112      	lsls	r2, r2, #4
 8000a3e:	b2d2      	uxtb	r2, r2
 8000a40:	440b      	add	r3, r1
 8000a42:	761a      	strb	r2, [r3, #24]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000e100 	.word	0xe000e100
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b089      	sub	sp, #36	; 0x24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	f1c3 0307 	rsb	r3, r3, #7
 8000a72:	2b04      	cmp	r3, #4
 8000a74:	bf28      	it	cs
 8000a76:	2304      	movcs	r3, #4
 8000a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	2b06      	cmp	r3, #6
 8000a80:	d902      	bls.n	8000a88 <NVIC_EncodePriority+0x30>
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3b03      	subs	r3, #3
 8000a86:	e000      	b.n	8000a8a <NVIC_EncodePriority+0x32>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43da      	mvns	r2, r3
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aaa:	43d9      	mvns	r1, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	4313      	orrs	r3, r2
         );
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3724      	adds	r7, #36	; 0x24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad0:	d301      	bcc.n	8000ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e00f      	b.n	8000af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <SysTick_Config+0x40>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ade:	210f      	movs	r1, #15
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	f7ff ff8e 	bl	8000a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <SysTick_Config+0x40>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <SysTick_Config+0x40>)
 8000af0:	2207      	movs	r2, #7
 8000af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	e000e010 	.word	0xe000e010

08000b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff ff29 	bl	8000964 <__NVIC_SetPriorityGrouping>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b086      	sub	sp, #24
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4603      	mov	r3, r0
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b2c:	f7ff ff3e 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8000b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	68b9      	ldr	r1, [r7, #8]
 8000b36:	6978      	ldr	r0, [r7, #20]
 8000b38:	f7ff ff8e 	bl	8000a58 <NVIC_EncodePriority>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b42:	4611      	mov	r1, r2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff5d 	bl	8000a04 <__NVIC_SetPriority>
}
 8000b4a:	bf00      	nop
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff31 	bl	80009c8 <__NVIC_EnableIRQ>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ffa2 	bl	8000ac0 <SysTick_Config>
 8000b7c:	4603      	mov	r3, r0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d008      	beq.n	8000baa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2204      	movs	r2, #4
 8000b9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e020      	b.n	8000bec <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f022 020e 	bic.w	r2, r2, #14
 8000bb8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 0201 	bic.w	r2, r2, #1
 8000bc8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c00:	2300      	movs	r3, #0
 8000c02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d005      	beq.n	8000c1a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2204      	movs	r2, #4
 8000c12:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
 8000c18:	e027      	b.n	8000c6a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f022 020e 	bic.w	r2, r2, #14
 8000c28:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f022 0201 	bic.w	r2, r2, #1
 8000c38:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c42:	2101      	movs	r1, #1
 8000c44:	fa01 f202 	lsl.w	r2, r1, r2
 8000c48:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	4798      	blx	r3
    } 
  }
  return status;
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c82:	e160      	b.n	8000f46 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	2101      	movs	r1, #1
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	4013      	ands	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 8152 	beq.w	8000f40 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d005      	beq.n	8000cb4 <HAL_GPIO_Init+0x40>
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d130      	bne.n	8000d16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cea:	2201      	movs	r2, #1
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	091b      	lsrs	r3, r3, #4
 8000d00:	f003 0201 	and.w	r2, r3, #1
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d017      	beq.n	8000d52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d123      	bne.n	8000da6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	08da      	lsrs	r2, r3, #3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3208      	adds	r2, #8
 8000d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	220f      	movs	r2, #15
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	691a      	ldr	r2, [r3, #16]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	f003 0307 	and.w	r3, r3, #7
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	08da      	lsrs	r2, r3, #3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3208      	adds	r2, #8
 8000da0:	6939      	ldr	r1, [r7, #16]
 8000da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	2203      	movs	r2, #3
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0203 	and.w	r2, r3, #3
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 80ac 	beq.w	8000f40 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de8:	4b5e      	ldr	r3, [pc, #376]	; (8000f64 <HAL_GPIO_Init+0x2f0>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a5d      	ldr	r2, [pc, #372]	; (8000f64 <HAL_GPIO_Init+0x2f0>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b5b      	ldr	r3, [pc, #364]	; (8000f64 <HAL_GPIO_Init+0x2f0>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e00:	4a59      	ldr	r2, [pc, #356]	; (8000f68 <HAL_GPIO_Init+0x2f4>)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e2a:	d025      	beq.n	8000e78 <HAL_GPIO_Init+0x204>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a4f      	ldr	r2, [pc, #316]	; (8000f6c <HAL_GPIO_Init+0x2f8>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d01f      	beq.n	8000e74 <HAL_GPIO_Init+0x200>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a4e      	ldr	r2, [pc, #312]	; (8000f70 <HAL_GPIO_Init+0x2fc>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d019      	beq.n	8000e70 <HAL_GPIO_Init+0x1fc>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a4d      	ldr	r2, [pc, #308]	; (8000f74 <HAL_GPIO_Init+0x300>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d013      	beq.n	8000e6c <HAL_GPIO_Init+0x1f8>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a4c      	ldr	r2, [pc, #304]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d00d      	beq.n	8000e68 <HAL_GPIO_Init+0x1f4>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a4b      	ldr	r2, [pc, #300]	; (8000f7c <HAL_GPIO_Init+0x308>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d007      	beq.n	8000e64 <HAL_GPIO_Init+0x1f0>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a4a      	ldr	r2, [pc, #296]	; (8000f80 <HAL_GPIO_Init+0x30c>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d101      	bne.n	8000e60 <HAL_GPIO_Init+0x1ec>
 8000e5c:	2306      	movs	r3, #6
 8000e5e:	e00c      	b.n	8000e7a <HAL_GPIO_Init+0x206>
 8000e60:	2307      	movs	r3, #7
 8000e62:	e00a      	b.n	8000e7a <HAL_GPIO_Init+0x206>
 8000e64:	2305      	movs	r3, #5
 8000e66:	e008      	b.n	8000e7a <HAL_GPIO_Init+0x206>
 8000e68:	2304      	movs	r3, #4
 8000e6a:	e006      	b.n	8000e7a <HAL_GPIO_Init+0x206>
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e004      	b.n	8000e7a <HAL_GPIO_Init+0x206>
 8000e70:	2302      	movs	r3, #2
 8000e72:	e002      	b.n	8000e7a <HAL_GPIO_Init+0x206>
 8000e74:	2301      	movs	r3, #1
 8000e76:	e000      	b.n	8000e7a <HAL_GPIO_Init+0x206>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	f002 0203 	and.w	r2, r2, #3
 8000e80:	0092      	lsls	r2, r2, #2
 8000e82:	4093      	lsls	r3, r2
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e8a:	4937      	ldr	r1, [pc, #220]	; (8000f68 <HAL_GPIO_Init+0x2f4>)
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	3302      	adds	r3, #2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e98:	4b3a      	ldr	r3, [pc, #232]	; (8000f84 <HAL_GPIO_Init+0x310>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ebc:	4a31      	ldr	r2, [pc, #196]	; (8000f84 <HAL_GPIO_Init+0x310>)
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ec2:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <HAL_GPIO_Init+0x310>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ee6:	4a27      	ldr	r2, [pc, #156]	; (8000f84 <HAL_GPIO_Init+0x310>)
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eec:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <HAL_GPIO_Init+0x310>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f10:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <HAL_GPIO_Init+0x310>)
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f16:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_GPIO_Init+0x310>)
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <HAL_GPIO_Init+0x310>)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3301      	adds	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f47f ae97 	bne.w	8000c84 <HAL_GPIO_Init+0x10>
  }
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	371c      	adds	r7, #28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010000 	.word	0x40010000
 8000f6c:	48000400 	.word	0x48000400
 8000f70:	48000800 	.word	0x48000800
 8000f74:	48000c00 	.word	0x48000c00
 8000f78:	48001000 	.word	0x48001000
 8000f7c:	48001400 	.word	0x48001400
 8000f80:	48001800 	.word	0x48001800
 8000f84:	40010400 	.word	0x40010400

08000f88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	691a      	ldr	r2, [r3, #16]
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e001      	b.n	8000faa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc8:	787b      	ldrb	r3, [r7, #1]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fce:	887a      	ldrh	r2, [r7, #2]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fd4:	e002      	b.n	8000fdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fd6:	887a      	ldrh	r2, [r7, #2]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ff4:	695a      	ldr	r2, [r3, #20]
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d006      	beq.n	800100c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f806 	bl	8001018 <HAL_GPIO_EXTI_Callback>
  }
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40010400 	.word	0x40010400

08001018 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001036:	af00      	add	r7, sp, #0
 8001038:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800103c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001040:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001042:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001046:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	f001 b83a 	b.w	80020ca <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001056:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800105a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 816f 	beq.w	800134a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800106c:	4bb5      	ldr	r3, [pc, #724]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 030c 	and.w	r3, r3, #12
 8001074:	2b04      	cmp	r3, #4
 8001076:	d00c      	beq.n	8001092 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001078:	4bb2      	ldr	r3, [pc, #712]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 030c 	and.w	r3, r3, #12
 8001080:	2b08      	cmp	r3, #8
 8001082:	d15c      	bne.n	800113e <HAL_RCC_OscConfig+0x10e>
 8001084:	4baf      	ldr	r3, [pc, #700]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800108c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001090:	d155      	bne.n	800113e <HAL_RCC_OscConfig+0x10e>
 8001092:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001096:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800109e:	fa93 f3a3 	rbit	r3, r3
 80010a2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010aa:	fab3 f383 	clz	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	095b      	lsrs	r3, r3, #5
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d102      	bne.n	80010c4 <HAL_RCC_OscConfig+0x94>
 80010be:	4ba1      	ldr	r3, [pc, #644]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	e015      	b.n	80010f0 <HAL_RCC_OscConfig+0xc0>
 80010c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80010d0:	fa93 f3a3 	rbit	r3, r3
 80010d4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80010d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010dc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010e0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80010e4:	fa93 f3a3 	rbit	r3, r3
 80010e8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80010ec:	4b95      	ldr	r3, [pc, #596]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010f4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80010f8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80010fc:	fa92 f2a2 	rbit	r2, r2
 8001100:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001104:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001108:	fab2 f282 	clz	r2, r2
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	f042 0220 	orr.w	r2, r2, #32
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	f002 021f 	and.w	r2, r2, #31
 8001118:	2101      	movs	r1, #1
 800111a:	fa01 f202 	lsl.w	r2, r1, r2
 800111e:	4013      	ands	r3, r2
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 8111 	beq.w	8001348 <HAL_RCC_OscConfig+0x318>
 8001126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800112a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f040 8108 	bne.w	8001348 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	f000 bfc6 	b.w	80020ca <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001142:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114e:	d106      	bne.n	800115e <HAL_RCC_OscConfig+0x12e>
 8001150:	4b7c      	ldr	r3, [pc, #496]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a7b      	ldr	r2, [pc, #492]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 8001156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	e036      	b.n	80011cc <HAL_RCC_OscConfig+0x19c>
 800115e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001162:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0x158>
 800116e:	4b75      	ldr	r3, [pc, #468]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a74      	ldr	r2, [pc, #464]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 8001174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	4b72      	ldr	r3, [pc, #456]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a71      	ldr	r2, [pc, #452]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 8001180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e021      	b.n	80011cc <HAL_RCC_OscConfig+0x19c>
 8001188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800118c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001198:	d10c      	bne.n	80011b4 <HAL_RCC_OscConfig+0x184>
 800119a:	4b6a      	ldr	r3, [pc, #424]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a69      	ldr	r2, [pc, #420]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 80011a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	4b67      	ldr	r3, [pc, #412]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a66      	ldr	r2, [pc, #408]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 80011ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e00b      	b.n	80011cc <HAL_RCC_OscConfig+0x19c>
 80011b4:	4b63      	ldr	r3, [pc, #396]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a62      	ldr	r2, [pc, #392]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 80011ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b60      	ldr	r3, [pc, #384]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a5f      	ldr	r2, [pc, #380]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 80011c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ca:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d059      	beq.n	8001290 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fb92 	bl	8000904 <HAL_GetTick>
 80011e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e4:	e00a      	b.n	80011fc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e6:	f7ff fb8d 	bl	8000904 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b64      	cmp	r3, #100	; 0x64
 80011f4:	d902      	bls.n	80011fc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	f000 bf67 	b.w	80020ca <HAL_RCC_OscConfig+0x109a>
 80011fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001200:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001204:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001208:	fa93 f3a3 	rbit	r3, r3
 800120c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001210:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001214:	fab3 f383 	clz	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b01      	cmp	r3, #1
 8001226:	d102      	bne.n	800122e <HAL_RCC_OscConfig+0x1fe>
 8001228:	4b46      	ldr	r3, [pc, #280]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	e015      	b.n	800125a <HAL_RCC_OscConfig+0x22a>
 800122e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001232:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001236:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800123a:	fa93 f3a3 	rbit	r3, r3
 800123e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001242:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001246:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800124a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800124e:	fa93 f3a3 	rbit	r3, r3
 8001252:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001256:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800125e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001262:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001266:	fa92 f2a2 	rbit	r2, r2
 800126a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800126e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001272:	fab2 f282 	clz	r2, r2
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	f042 0220 	orr.w	r2, r2, #32
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	f002 021f 	and.w	r2, r2, #31
 8001282:	2101      	movs	r1, #1
 8001284:	fa01 f202 	lsl.w	r2, r1, r2
 8001288:	4013      	ands	r3, r2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0ab      	beq.n	80011e6 <HAL_RCC_OscConfig+0x1b6>
 800128e:	e05c      	b.n	800134a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fb38 	bl	8000904 <HAL_GetTick>
 8001294:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001298:	e00a      	b.n	80012b0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129a:	f7ff fb33 	bl	8000904 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b64      	cmp	r3, #100	; 0x64
 80012a8:	d902      	bls.n	80012b0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	f000 bf0d 	b.w	80020ca <HAL_RCC_OscConfig+0x109a>
 80012b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012b4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80012bc:	fa93 f3a3 	rbit	r3, r3
 80012c0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80012c4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c8:	fab3 f383 	clz	r3, r3
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	095b      	lsrs	r3, r3, #5
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d102      	bne.n	80012e2 <HAL_RCC_OscConfig+0x2b2>
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	e015      	b.n	800130e <HAL_RCC_OscConfig+0x2de>
 80012e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80012ee:	fa93 f3a3 	rbit	r3, r3
 80012f2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80012f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001302:	fa93 f3a3 	rbit	r3, r3
 8001306:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_RCC_OscConfig+0x314>)
 800130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001312:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001316:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800131a:	fa92 f2a2 	rbit	r2, r2
 800131e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001322:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001326:	fab2 f282 	clz	r2, r2
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	f042 0220 	orr.w	r2, r2, #32
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	f002 021f 	and.w	r2, r2, #31
 8001336:	2101      	movs	r1, #1
 8001338:	fa01 f202 	lsl.w	r2, r1, r2
 800133c:	4013      	ands	r3, r2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1ab      	bne.n	800129a <HAL_RCC_OscConfig+0x26a>
 8001342:	e002      	b.n	800134a <HAL_RCC_OscConfig+0x31a>
 8001344:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800134e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 817f 	beq.w	800165e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001360:	4ba7      	ldr	r3, [pc, #668]	; (8001600 <HAL_RCC_OscConfig+0x5d0>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 030c 	and.w	r3, r3, #12
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00c      	beq.n	8001386 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800136c:	4ba4      	ldr	r3, [pc, #656]	; (8001600 <HAL_RCC_OscConfig+0x5d0>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 030c 	and.w	r3, r3, #12
 8001374:	2b08      	cmp	r3, #8
 8001376:	d173      	bne.n	8001460 <HAL_RCC_OscConfig+0x430>
 8001378:	4ba1      	ldr	r3, [pc, #644]	; (8001600 <HAL_RCC_OscConfig+0x5d0>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001384:	d16c      	bne.n	8001460 <HAL_RCC_OscConfig+0x430>
 8001386:	2302      	movs	r3, #2
 8001388:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001390:	fa93 f3a3 	rbit	r3, r3
 8001394:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001398:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139c:	fab3 f383 	clz	r3, r3
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d102      	bne.n	80013b6 <HAL_RCC_OscConfig+0x386>
 80013b0:	4b93      	ldr	r3, [pc, #588]	; (8001600 <HAL_RCC_OscConfig+0x5d0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	e013      	b.n	80013de <HAL_RCC_OscConfig+0x3ae>
 80013b6:	2302      	movs	r3, #2
 80013b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80013c0:	fa93 f3a3 	rbit	r3, r3
 80013c4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80013c8:	2302      	movs	r3, #2
 80013ca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80013ce:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80013d2:	fa93 f3a3 	rbit	r3, r3
 80013d6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80013da:	4b89      	ldr	r3, [pc, #548]	; (8001600 <HAL_RCC_OscConfig+0x5d0>)
 80013dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013de:	2202      	movs	r2, #2
 80013e0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80013e4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80013e8:	fa92 f2a2 	rbit	r2, r2
 80013ec:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80013f0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80013f4:	fab2 f282 	clz	r2, r2
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	f042 0220 	orr.w	r2, r2, #32
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	f002 021f 	and.w	r2, r2, #31
 8001404:	2101      	movs	r1, #1
 8001406:	fa01 f202 	lsl.w	r2, r1, r2
 800140a:	4013      	ands	r3, r2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00a      	beq.n	8001426 <HAL_RCC_OscConfig+0x3f6>
 8001410:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001414:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d002      	beq.n	8001426 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	f000 be52 	b.w	80020ca <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001426:	4b76      	ldr	r3, [pc, #472]	; (8001600 <HAL_RCC_OscConfig+0x5d0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800142e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001432:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	21f8      	movs	r1, #248	; 0xf8
 800143c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001440:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001444:	fa91 f1a1 	rbit	r1, r1
 8001448:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800144c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001450:	fab1 f181 	clz	r1, r1
 8001454:	b2c9      	uxtb	r1, r1
 8001456:	408b      	lsls	r3, r1
 8001458:	4969      	ldr	r1, [pc, #420]	; (8001600 <HAL_RCC_OscConfig+0x5d0>)
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145e:	e0fe      	b.n	800165e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001464:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 8088 	beq.w	8001582 <HAL_RCC_OscConfig+0x552>
 8001472:	2301      	movs	r3, #1
 8001474:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001478:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800147c:	fa93 f3a3 	rbit	r3, r3
 8001480:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001484:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001488:	fab3 f383 	clz	r3, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001492:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	461a      	mov	r2, r3
 800149a:	2301      	movs	r3, #1
 800149c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fa31 	bl	8000904 <HAL_GetTick>
 80014a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a6:	e00a      	b.n	80014be <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a8:	f7ff fa2c 	bl	8000904 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d902      	bls.n	80014be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	f000 be06 	b.w	80020ca <HAL_RCC_OscConfig+0x109a>
 80014be:	2302      	movs	r3, #2
 80014c0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80014c8:	fa93 f3a3 	rbit	r3, r3
 80014cc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80014d0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	fab3 f383 	clz	r3, r3
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d102      	bne.n	80014ee <HAL_RCC_OscConfig+0x4be>
 80014e8:	4b45      	ldr	r3, [pc, #276]	; (8001600 <HAL_RCC_OscConfig+0x5d0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	e013      	b.n	8001516 <HAL_RCC_OscConfig+0x4e6>
 80014ee:	2302      	movs	r3, #2
 80014f0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80014f8:	fa93 f3a3 	rbit	r3, r3
 80014fc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001500:	2302      	movs	r3, #2
 8001502:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001506:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800150a:	fa93 f3a3 	rbit	r3, r3
 800150e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <HAL_RCC_OscConfig+0x5d0>)
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	2202      	movs	r2, #2
 8001518:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800151c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001520:	fa92 f2a2 	rbit	r2, r2
 8001524:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001528:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800152c:	fab2 f282 	clz	r2, r2
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	f042 0220 	orr.w	r2, r2, #32
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	f002 021f 	and.w	r2, r2, #31
 800153c:	2101      	movs	r1, #1
 800153e:	fa01 f202 	lsl.w	r2, r1, r2
 8001542:	4013      	ands	r3, r2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0af      	beq.n	80014a8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <HAL_RCC_OscConfig+0x5d0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001550:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001554:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	21f8      	movs	r1, #248	; 0xf8
 800155e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001562:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001566:	fa91 f1a1 	rbit	r1, r1
 800156a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800156e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001572:	fab1 f181 	clz	r1, r1
 8001576:	b2c9      	uxtb	r1, r1
 8001578:	408b      	lsls	r3, r1
 800157a:	4921      	ldr	r1, [pc, #132]	; (8001600 <HAL_RCC_OscConfig+0x5d0>)
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
 8001580:	e06d      	b.n	800165e <HAL_RCC_OscConfig+0x62e>
 8001582:	2301      	movs	r3, #1
 8001584:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001588:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800158c:	fa93 f3a3 	rbit	r3, r3
 8001590:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001594:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001598:	fab3 f383 	clz	r3, r3
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	461a      	mov	r2, r3
 80015aa:	2300      	movs	r3, #0
 80015ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ae:	f7ff f9a9 	bl	8000904 <HAL_GetTick>
 80015b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b6:	e00a      	b.n	80015ce <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b8:	f7ff f9a4 	bl	8000904 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d902      	bls.n	80015ce <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	f000 bd7e 	b.w	80020ca <HAL_RCC_OscConfig+0x109a>
 80015ce:	2302      	movs	r3, #2
 80015d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80015d8:	fa93 f3a3 	rbit	r3, r3
 80015dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80015e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e4:	fab3 f383 	clz	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d105      	bne.n	8001604 <HAL_RCC_OscConfig+0x5d4>
 80015f8:	4b01      	ldr	r3, [pc, #4]	; (8001600 <HAL_RCC_OscConfig+0x5d0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	e016      	b.n	800162c <HAL_RCC_OscConfig+0x5fc>
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000
 8001604:	2302      	movs	r3, #2
 8001606:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800160e:	fa93 f3a3 	rbit	r3, r3
 8001612:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001616:	2302      	movs	r3, #2
 8001618:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800161c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001620:	fa93 f3a3 	rbit	r3, r3
 8001624:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001628:	4bbf      	ldr	r3, [pc, #764]	; (8001928 <HAL_RCC_OscConfig+0x8f8>)
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	2202      	movs	r2, #2
 800162e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001632:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001636:	fa92 f2a2 	rbit	r2, r2
 800163a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800163e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001642:	fab2 f282 	clz	r2, r2
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	f042 0220 	orr.w	r2, r2, #32
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	f002 021f 	and.w	r2, r2, #31
 8001652:	2101      	movs	r1, #1
 8001654:	fa01 f202 	lsl.w	r2, r1, r2
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1ac      	bne.n	80015b8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001662:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 8113 	beq.w	800189a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001674:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001678:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d07c      	beq.n	800177e <HAL_RCC_OscConfig+0x74e>
 8001684:	2301      	movs	r3, #1
 8001686:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800168e:	fa93 f3a3 	rbit	r3, r3
 8001692:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001696:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800169a:	fab3 f383 	clz	r3, r3
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	4ba2      	ldr	r3, [pc, #648]	; (800192c <HAL_RCC_OscConfig+0x8fc>)
 80016a4:	4413      	add	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	461a      	mov	r2, r3
 80016aa:	2301      	movs	r3, #1
 80016ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f7ff f929 	bl	8000904 <HAL_GetTick>
 80016b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b8:	f7ff f924 	bl	8000904 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d902      	bls.n	80016ce <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	f000 bcfe 	b.w	80020ca <HAL_RCC_OscConfig+0x109a>
 80016ce:	2302      	movs	r3, #2
 80016d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016d8:	fa93 f2a3 	rbit	r2, r3
 80016dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016ee:	2202      	movs	r2, #2
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	fa93 f2a3 	rbit	r2, r3
 8001700:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800170e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001712:	2202      	movs	r2, #2
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800171a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	fa93 f2a3 	rbit	r2, r3
 8001724:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001728:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800172c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172e:	4b7e      	ldr	r3, [pc, #504]	; (8001928 <HAL_RCC_OscConfig+0x8f8>)
 8001730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001732:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001736:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800173a:	2102      	movs	r1, #2
 800173c:	6019      	str	r1, [r3, #0]
 800173e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001742:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	fa93 f1a3 	rbit	r1, r3
 800174c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001750:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001754:	6019      	str	r1, [r3, #0]
  return result;
 8001756:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800175a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	fab3 f383 	clz	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800176a:	b2db      	uxtb	r3, r3
 800176c:	f003 031f 	and.w	r3, r3, #31
 8001770:	2101      	movs	r1, #1
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d09d      	beq.n	80016b8 <HAL_RCC_OscConfig+0x688>
 800177c:	e08d      	b.n	800189a <HAL_RCC_OscConfig+0x86a>
 800177e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001782:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800178e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	fa93 f2a3 	rbit	r2, r3
 8001798:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800179c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017a0:	601a      	str	r2, [r3, #0]
  return result;
 80017a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017aa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ac:	fab3 f383 	clz	r3, r3
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b5d      	ldr	r3, [pc, #372]	; (800192c <HAL_RCC_OscConfig+0x8fc>)
 80017b6:	4413      	add	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	461a      	mov	r2, r3
 80017bc:	2300      	movs	r3, #0
 80017be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c0:	f7ff f8a0 	bl	8000904 <HAL_GetTick>
 80017c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	e00a      	b.n	80017e0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ca:	f7ff f89b 	bl	8000904 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d902      	bls.n	80017e0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	f000 bc75 	b.w	80020ca <HAL_RCC_OscConfig+0x109a>
 80017e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017e8:	2202      	movs	r2, #2
 80017ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	fa93 f2a3 	rbit	r2, r3
 80017fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001808:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800180c:	2202      	movs	r2, #2
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001814:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	fa93 f2a3 	rbit	r2, r3
 800181e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800182c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001830:	2202      	movs	r2, #2
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001838:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	fa93 f2a3 	rbit	r2, r3
 8001842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001846:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800184a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184c:	4b36      	ldr	r3, [pc, #216]	; (8001928 <HAL_RCC_OscConfig+0x8f8>)
 800184e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001850:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001854:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001858:	2102      	movs	r1, #2
 800185a:	6019      	str	r1, [r3, #0]
 800185c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001860:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	fa93 f1a3 	rbit	r1, r3
 800186a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800186e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001872:	6019      	str	r1, [r3, #0]
  return result;
 8001874:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001878:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	fab3 f383 	clz	r3, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	2101      	movs	r1, #1
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	4013      	ands	r3, r2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d197      	bne.n	80017ca <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800189a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 81a5 	beq.w	8001bfa <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018b6:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <HAL_RCC_OscConfig+0x8f8>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d116      	bne.n	80018f0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_RCC_OscConfig+0x8f8>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a18      	ldr	r2, [pc, #96]	; (8001928 <HAL_RCC_OscConfig+0x8f8>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018cc:	61d3      	str	r3, [r2, #28]
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <HAL_RCC_OscConfig+0x8f8>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80018d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018e8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018ea:	2301      	movs	r3, #1
 80018ec:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_RCC_OscConfig+0x900>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d121      	bne.n	8001940 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_RCC_OscConfig+0x900>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <HAL_RCC_OscConfig+0x900>)
 8001902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001906:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001908:	f7fe fffc 	bl	8000904 <HAL_GetTick>
 800190c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001910:	e010      	b.n	8001934 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001912:	f7fe fff7 	bl	8000904 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	; 0x64
 8001920:	d908      	bls.n	8001934 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e3d1      	b.n	80020ca <HAL_RCC_OscConfig+0x109a>
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	10908120 	.word	0x10908120
 8001930:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	4b8d      	ldr	r3, [pc, #564]	; (8001b6c <HAL_RCC_OscConfig+0xb3c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0e8      	beq.n	8001912 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001944:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d106      	bne.n	800195e <HAL_RCC_OscConfig+0x92e>
 8001950:	4b87      	ldr	r3, [pc, #540]	; (8001b70 <HAL_RCC_OscConfig+0xb40>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4a86      	ldr	r2, [pc, #536]	; (8001b70 <HAL_RCC_OscConfig+0xb40>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6213      	str	r3, [r2, #32]
 800195c:	e035      	b.n	80019ca <HAL_RCC_OscConfig+0x99a>
 800195e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001962:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10c      	bne.n	8001988 <HAL_RCC_OscConfig+0x958>
 800196e:	4b80      	ldr	r3, [pc, #512]	; (8001b70 <HAL_RCC_OscConfig+0xb40>)
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	4a7f      	ldr	r2, [pc, #508]	; (8001b70 <HAL_RCC_OscConfig+0xb40>)
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	6213      	str	r3, [r2, #32]
 800197a:	4b7d      	ldr	r3, [pc, #500]	; (8001b70 <HAL_RCC_OscConfig+0xb40>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	4a7c      	ldr	r2, [pc, #496]	; (8001b70 <HAL_RCC_OscConfig+0xb40>)
 8001980:	f023 0304 	bic.w	r3, r3, #4
 8001984:	6213      	str	r3, [r2, #32]
 8001986:	e020      	b.n	80019ca <HAL_RCC_OscConfig+0x99a>
 8001988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b05      	cmp	r3, #5
 8001996:	d10c      	bne.n	80019b2 <HAL_RCC_OscConfig+0x982>
 8001998:	4b75      	ldr	r3, [pc, #468]	; (8001b70 <HAL_RCC_OscConfig+0xb40>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	4a74      	ldr	r2, [pc, #464]	; (8001b70 <HAL_RCC_OscConfig+0xb40>)
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	6213      	str	r3, [r2, #32]
 80019a4:	4b72      	ldr	r3, [pc, #456]	; (8001b70 <HAL_RCC_OscConfig+0xb40>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4a71      	ldr	r2, [pc, #452]	; (8001b70 <HAL_RCC_OscConfig+0xb40>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6213      	str	r3, [r2, #32]
 80019b0:	e00b      	b.n	80019ca <HAL_RCC_OscConfig+0x99a>
 80019b2:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <HAL_RCC_OscConfig+0xb40>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4a6e      	ldr	r2, [pc, #440]	; (8001b70 <HAL_RCC_OscConfig+0xb40>)
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	6213      	str	r3, [r2, #32]
 80019be:	4b6c      	ldr	r3, [pc, #432]	; (8001b70 <HAL_RCC_OscConfig+0xb40>)
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	4a6b      	ldr	r2, [pc, #428]	; (8001b70 <HAL_RCC_OscConfig+0xb40>)
 80019c4:	f023 0304 	bic.w	r3, r3, #4
 80019c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8081 	beq.w	8001ade <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019dc:	f7fe ff92 	bl	8000904 <HAL_GetTick>
 80019e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e4:	e00b      	b.n	80019fe <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e6:	f7fe ff8d 	bl	8000904 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e365      	b.n	80020ca <HAL_RCC_OscConfig+0x109a>
 80019fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a02:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001a06:	2202      	movs	r2, #2
 8001a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa93 f2a3 	rbit	r2, r3
 8001a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a26:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a32:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fa93 f2a3 	rbit	r2, r3
 8001a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a40:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a44:	601a      	str	r2, [r3, #0]
  return result;
 8001a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a50:	fab3 f383 	clz	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	095b      	lsrs	r3, r3, #5
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	f043 0302 	orr.w	r3, r3, #2
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d102      	bne.n	8001a6a <HAL_RCC_OscConfig+0xa3a>
 8001a64:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <HAL_RCC_OscConfig+0xb40>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	e013      	b.n	8001a92 <HAL_RCC_OscConfig+0xa62>
 8001a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a72:	2202      	movs	r2, #2
 8001a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	fa93 f2a3 	rbit	r2, r3
 8001a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a88:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	4b38      	ldr	r3, [pc, #224]	; (8001b70 <HAL_RCC_OscConfig+0xb40>)
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a96:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a9a:	2102      	movs	r1, #2
 8001a9c:	6011      	str	r1, [r2, #0]
 8001a9e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001aa2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	fa92 f1a2 	rbit	r1, r2
 8001aac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ab0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001ab4:	6011      	str	r1, [r2, #0]
  return result;
 8001ab6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001aba:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	fab2 f282 	clz	r2, r2
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	f002 021f 	and.w	r2, r2, #31
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d084      	beq.n	80019e6 <HAL_RCC_OscConfig+0x9b6>
 8001adc:	e083      	b.n	8001be6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ade:	f7fe ff11 	bl	8000904 <HAL_GetTick>
 8001ae2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae6:	e00b      	b.n	8001b00 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae8:	f7fe ff0c 	bl	8000904 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e2e4      	b.n	80020ca <HAL_RCC_OscConfig+0x109a>
 8001b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b04:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001b08:	2202      	movs	r2, #2
 8001b0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b10:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	fa93 f2a3 	rbit	r2, r3
 8001b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b28:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b34:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	fa93 f2a3 	rbit	r2, r3
 8001b3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b42:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b46:	601a      	str	r2, [r3, #0]
  return result;
 8001b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b52:	fab3 f383 	clz	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	095b      	lsrs	r3, r3, #5
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d106      	bne.n	8001b74 <HAL_RCC_OscConfig+0xb44>
 8001b66:	4b02      	ldr	r3, [pc, #8]	; (8001b70 <HAL_RCC_OscConfig+0xb40>)
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	e017      	b.n	8001b9c <HAL_RCC_OscConfig+0xb6c>
 8001b6c:	40007000 	.word	0x40007000
 8001b70:	40021000 	.word	0x40021000
 8001b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b78:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b84:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	fa93 f2a3 	rbit	r2, r3
 8001b8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b92:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	4bb3      	ldr	r3, [pc, #716]	; (8001e68 <HAL_RCC_OscConfig+0xe38>)
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ba0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ba4:	2102      	movs	r1, #2
 8001ba6:	6011      	str	r1, [r2, #0]
 8001ba8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	fa92 f1a2 	rbit	r1, r2
 8001bb6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bba:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001bbe:	6011      	str	r1, [r2, #0]
  return result;
 8001bc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bc4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	fab2 f282 	clz	r2, r2
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	f002 021f 	and.w	r2, r2, #31
 8001bda:	2101      	movs	r1, #1
 8001bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d180      	bne.n	8001ae8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001be6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d105      	bne.n	8001bfa <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bee:	4b9e      	ldr	r3, [pc, #632]	; (8001e68 <HAL_RCC_OscConfig+0xe38>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	4a9d      	ldr	r2, [pc, #628]	; (8001e68 <HAL_RCC_OscConfig+0xe38>)
 8001bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 825e 	beq.w	80020c8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c0c:	4b96      	ldr	r3, [pc, #600]	; (8001e68 <HAL_RCC_OscConfig+0xe38>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	f000 821f 	beq.w	8002058 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	f040 8170 	bne.w	8001f0c <HAL_RCC_OscConfig+0xedc>
 8001c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c30:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	fa93 f2a3 	rbit	r2, r3
 8001c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c4c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c50:	601a      	str	r2, [r3, #0]
  return result;
 8001c52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c56:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c5a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5c:	fab3 f383 	clz	r3, r3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2300      	movs	r3, #0
 8001c70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c72:	f7fe fe47 	bl	8000904 <HAL_GetTick>
 8001c76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7a:	e009      	b.n	8001c90 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7c:	f7fe fe42 	bl	8000904 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e21c      	b.n	80020ca <HAL_RCC_OscConfig+0x109a>
 8001c90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c94:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	fa93 f2a3 	rbit	r2, r3
 8001cac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001cb4:	601a      	str	r2, [r3, #0]
  return result;
 8001cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001cbe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d102      	bne.n	8001cda <HAL_RCC_OscConfig+0xcaa>
 8001cd4:	4b64      	ldr	r3, [pc, #400]	; (8001e68 <HAL_RCC_OscConfig+0xe38>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	e027      	b.n	8001d2a <HAL_RCC_OscConfig+0xcfa>
 8001cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cde:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ce2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cec:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	fa93 f2a3 	rbit	r2, r3
 8001cf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cfa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d04:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d12:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fa93 f2a3 	rbit	r2, r3
 8001d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d20:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	4b50      	ldr	r3, [pc, #320]	; (8001e68 <HAL_RCC_OscConfig+0xe38>)
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d2e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d36:	6011      	str	r1, [r2, #0]
 8001d38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d3c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	fa92 f1a2 	rbit	r1, r2
 8001d46:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d4a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001d4e:	6011      	str	r1, [r2, #0]
  return result;
 8001d50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d54:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	fab2 f282 	clz	r2, r2
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	f042 0220 	orr.w	r2, r2, #32
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	f002 021f 	and.w	r2, r2, #31
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d182      	bne.n	8001c7c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d76:	4b3c      	ldr	r3, [pc, #240]	; (8001e68 <HAL_RCC_OscConfig+0xe38>)
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	f023 020f 	bic.w	r2, r3, #15
 8001d7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	4937      	ldr	r1, [pc, #220]	; (8001e68 <HAL_RCC_OscConfig+0xe38>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001d90:	4b35      	ldr	r3, [pc, #212]	; (8001e68 <HAL_RCC_OscConfig+0xe38>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001d98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6a19      	ldr	r1, [r3, #32]
 8001da4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	430b      	orrs	r3, r1
 8001db2:	492d      	ldr	r1, [pc, #180]	; (8001e68 <HAL_RCC_OscConfig+0xe38>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
 8001db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dbc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001dc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dca:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	fa93 f2a3 	rbit	r2, r3
 8001dd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ddc:	601a      	str	r2, [r3, #0]
  return result;
 8001dde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001de6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de8:	fab3 f383 	clz	r3, r3
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001df2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7fe fd81 	bl	8000904 <HAL_GetTick>
 8001e02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e06:	e009      	b.n	8001e1c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e08:	f7fe fd7c 	bl	8000904 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e156      	b.n	80020ca <HAL_RCC_OscConfig+0x109a>
 8001e1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e20:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	fa93 f2a3 	rbit	r2, r3
 8001e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e40:	601a      	str	r2, [r3, #0]
  return result;
 8001e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e46:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d105      	bne.n	8001e6c <HAL_RCC_OscConfig+0xe3c>
 8001e60:	4b01      	ldr	r3, [pc, #4]	; (8001e68 <HAL_RCC_OscConfig+0xe38>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	e02a      	b.n	8001ebc <HAL_RCC_OscConfig+0xe8c>
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e70:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	fa93 f2a3 	rbit	r2, r3
 8001e88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e96:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	fa93 f2a3 	rbit	r2, r3
 8001eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	4b86      	ldr	r3, [pc, #536]	; (80020d4 <HAL_RCC_OscConfig+0x10a4>)
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ec0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ec4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ec8:	6011      	str	r1, [r2, #0]
 8001eca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ece:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	fa92 f1a2 	rbit	r1, r2
 8001ed8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001edc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001ee0:	6011      	str	r1, [r2, #0]
  return result;
 8001ee2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ee6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	fab2 f282 	clz	r2, r2
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	f042 0220 	orr.w	r2, r2, #32
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	f002 021f 	and.w	r2, r2, #31
 8001efc:	2101      	movs	r1, #1
 8001efe:	fa01 f202 	lsl.w	r2, r1, r2
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f43f af7f 	beq.w	8001e08 <HAL_RCC_OscConfig+0xdd8>
 8001f0a:	e0dd      	b.n	80020c8 <HAL_RCC_OscConfig+0x1098>
 8001f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f10:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	fa93 f2a3 	rbit	r2, r3
 8001f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f30:	601a      	str	r2, [r3, #0]
  return result;
 8001f32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f36:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f3a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f46:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	2300      	movs	r3, #0
 8001f50:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7fe fcd7 	bl	8000904 <HAL_GetTick>
 8001f56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5a:	e009      	b.n	8001f70 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7fe fcd2 	bl	8000904 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e0ac      	b.n	80020ca <HAL_RCC_OscConfig+0x109a>
 8001f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f74:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f82:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	fa93 f2a3 	rbit	r2, r3
 8001f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f90:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f94:	601a      	str	r2, [r3, #0]
  return result;
 8001f96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d102      	bne.n	8001fba <HAL_RCC_OscConfig+0xf8a>
 8001fb4:	4b47      	ldr	r3, [pc, #284]	; (80020d4 <HAL_RCC_OscConfig+0x10a4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	e027      	b.n	800200a <HAL_RCC_OscConfig+0xfda>
 8001fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fbe:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001fc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fcc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	fa93 f2a3 	rbit	r2, r3
 8001fd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fda:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001fe8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	fa93 f2a3 	rbit	r2, r3
 8001ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002000:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	4b33      	ldr	r3, [pc, #204]	; (80020d4 <HAL_RCC_OscConfig+0x10a4>)
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800200e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002012:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002016:	6011      	str	r1, [r2, #0]
 8002018:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800201c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	fa92 f1a2 	rbit	r1, r2
 8002026:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800202a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800202e:	6011      	str	r1, [r2, #0]
  return result;
 8002030:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002034:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	fab2 f282 	clz	r2, r2
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	f042 0220 	orr.w	r2, r2, #32
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	f002 021f 	and.w	r2, r2, #31
 800204a:	2101      	movs	r1, #1
 800204c:	fa01 f202 	lsl.w	r2, r1, r2
 8002050:	4013      	ands	r3, r2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d182      	bne.n	8001f5c <HAL_RCC_OscConfig+0xf2c>
 8002056:	e037      	b.n	80020c8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800205c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e02e      	b.n	80020ca <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_RCC_OscConfig+0x10a4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002074:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <HAL_RCC_OscConfig+0x10a4>)
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800207c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002080:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002084:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002088:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	429a      	cmp	r2, r3
 8002092:	d117      	bne.n	80020c4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002094:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002098:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800209c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d10b      	bne.n	80020c4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80020ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020b0:	f003 020f 	and.w	r2, r3, #15
 80020b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000

080020d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b09e      	sub	sp, #120	; 0x78
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e162      	b.n	80023b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f0:	4b90      	ldr	r3, [pc, #576]	; (8002334 <HAL_RCC_ClockConfig+0x25c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d910      	bls.n	8002120 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b8d      	ldr	r3, [pc, #564]	; (8002334 <HAL_RCC_ClockConfig+0x25c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 0207 	bic.w	r2, r3, #7
 8002106:	498b      	ldr	r1, [pc, #556]	; (8002334 <HAL_RCC_ClockConfig+0x25c>)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210e:	4b89      	ldr	r3, [pc, #548]	; (8002334 <HAL_RCC_ClockConfig+0x25c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e14a      	b.n	80023b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800212c:	4b82      	ldr	r3, [pc, #520]	; (8002338 <HAL_RCC_ClockConfig+0x260>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	497f      	ldr	r1, [pc, #508]	; (8002338 <HAL_RCC_ClockConfig+0x260>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 80dc 	beq.w	8002304 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d13c      	bne.n	80021ce <HAL_RCC_ClockConfig+0xf6>
 8002154:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002158:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800215c:	fa93 f3a3 	rbit	r3, r3
 8002160:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b01      	cmp	r3, #1
 8002176:	d102      	bne.n	800217e <HAL_RCC_ClockConfig+0xa6>
 8002178:	4b6f      	ldr	r3, [pc, #444]	; (8002338 <HAL_RCC_ClockConfig+0x260>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	e00f      	b.n	800219e <HAL_RCC_ClockConfig+0xc6>
 800217e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002182:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	667b      	str	r3, [r7, #100]	; 0x64
 800218c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002190:	663b      	str	r3, [r7, #96]	; 0x60
 8002192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	65fb      	str	r3, [r7, #92]	; 0x5c
 800219a:	4b67      	ldr	r3, [pc, #412]	; (8002338 <HAL_RCC_ClockConfig+0x260>)
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80021a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021a6:	fa92 f2a2 	rbit	r2, r2
 80021aa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80021ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021ae:	fab2 f282 	clz	r2, r2
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	f042 0220 	orr.w	r2, r2, #32
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	f002 021f 	and.w	r2, r2, #31
 80021be:	2101      	movs	r1, #1
 80021c0:	fa01 f202 	lsl.w	r2, r1, r2
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d17b      	bne.n	80022c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e0f3      	b.n	80023b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d13c      	bne.n	8002250 <HAL_RCC_ClockConfig+0x178>
 80021d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d102      	bne.n	8002200 <HAL_RCC_ClockConfig+0x128>
 80021fa:	4b4f      	ldr	r3, [pc, #316]	; (8002338 <HAL_RCC_ClockConfig+0x260>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	e00f      	b.n	8002220 <HAL_RCC_ClockConfig+0x148>
 8002200:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002204:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	647b      	str	r3, [r7, #68]	; 0x44
 800220e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002212:	643b      	str	r3, [r7, #64]	; 0x40
 8002214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800221c:	4b46      	ldr	r3, [pc, #280]	; (8002338 <HAL_RCC_ClockConfig+0x260>)
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002224:	63ba      	str	r2, [r7, #56]	; 0x38
 8002226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002228:	fa92 f2a2 	rbit	r2, r2
 800222c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800222e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002230:	fab2 f282 	clz	r2, r2
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	f042 0220 	orr.w	r2, r2, #32
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	f002 021f 	and.w	r2, r2, #31
 8002240:	2101      	movs	r1, #1
 8002242:	fa01 f202 	lsl.w	r2, r1, r2
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d13a      	bne.n	80022c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0b2      	b.n	80023b6 <HAL_RCC_ClockConfig+0x2de>
 8002250:	2302      	movs	r3, #2
 8002252:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800225c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	095b      	lsrs	r3, r3, #5
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d102      	bne.n	8002278 <HAL_RCC_ClockConfig+0x1a0>
 8002272:	4b31      	ldr	r3, [pc, #196]	; (8002338 <HAL_RCC_ClockConfig+0x260>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	e00d      	b.n	8002294 <HAL_RCC_ClockConfig+0x1bc>
 8002278:	2302      	movs	r3, #2
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
 8002284:	2302      	movs	r3, #2
 8002286:	623b      	str	r3, [r7, #32]
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	4b29      	ldr	r3, [pc, #164]	; (8002338 <HAL_RCC_ClockConfig+0x260>)
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	2202      	movs	r2, #2
 8002296:	61ba      	str	r2, [r7, #24]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	fa92 f2a2 	rbit	r2, r2
 800229e:	617a      	str	r2, [r7, #20]
  return result;
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	fab2 f282 	clz	r2, r2
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	f042 0220 	orr.w	r2, r2, #32
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	f002 021f 	and.w	r2, r2, #31
 80022b2:	2101      	movs	r1, #1
 80022b4:	fa01 f202 	lsl.w	r2, r1, r2
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e079      	b.n	80023b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_RCC_ClockConfig+0x260>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	491a      	ldr	r1, [pc, #104]	; (8002338 <HAL_RCC_ClockConfig+0x260>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d4:	f7fe fb16 	bl	8000904 <HAL_GetTick>
 80022d8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7fe fb12 	bl	8000904 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e061      	b.n	80023b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_RCC_ClockConfig+0x260>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_RCC_ClockConfig+0x25c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d214      	bcs.n	800233c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <HAL_RCC_ClockConfig+0x25c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 0207 	bic.w	r2, r3, #7
 800231a:	4906      	ldr	r1, [pc, #24]	; (8002334 <HAL_RCC_ClockConfig+0x25c>)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b04      	ldr	r3, [pc, #16]	; (8002334 <HAL_RCC_ClockConfig+0x25c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d005      	beq.n	800233c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e040      	b.n	80023b6 <HAL_RCC_ClockConfig+0x2de>
 8002334:	40022000 	.word	0x40022000
 8002338:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002348:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <HAL_RCC_ClockConfig+0x2e8>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	491a      	ldr	r1, [pc, #104]	; (80023c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002356:	4313      	orrs	r3, r2
 8002358:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d009      	beq.n	800237a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002366:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4912      	ldr	r1, [pc, #72]	; (80023c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002376:	4313      	orrs	r3, r2
 8002378:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800237a:	f000 f829 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 800237e:	4601      	mov	r1, r0
 8002380:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002388:	22f0      	movs	r2, #240	; 0xf0
 800238a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	fa92 f2a2 	rbit	r2, r2
 8002392:	60fa      	str	r2, [r7, #12]
  return result;
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	fab2 f282 	clz	r2, r2
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	40d3      	lsrs	r3, r2
 800239e:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <HAL_RCC_ClockConfig+0x2ec>)
 80023a0:	5cd3      	ldrb	r3, [r2, r3]
 80023a2:	fa21 f303 	lsr.w	r3, r1, r3
 80023a6:	4a08      	ldr	r2, [pc, #32]	; (80023c8 <HAL_RCC_ClockConfig+0x2f0>)
 80023a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_RCC_ClockConfig+0x2f4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fa64 	bl	800087c <HAL_InitTick>
  
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3778      	adds	r7, #120	; 0x78
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
 80023c4:	08004a1c 	.word	0x08004a1c
 80023c8:	20000014 	.word	0x20000014
 80023cc:	20000018 	.word	0x20000018

080023d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b08b      	sub	sp, #44	; 0x2c
 80023d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80023ea:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d002      	beq.n	8002400 <HAL_RCC_GetSysClockFreq+0x30>
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d003      	beq.n	8002406 <HAL_RCC_GetSysClockFreq+0x36>
 80023fe:	e03f      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002400:	4b25      	ldr	r3, [pc, #148]	; (8002498 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002402:	623b      	str	r3, [r7, #32]
      break;
 8002404:	e03f      	b.n	8002486 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800240c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002410:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	fa92 f2a2 	rbit	r2, r2
 8002418:	607a      	str	r2, [r7, #4]
  return result;
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	fab2 f282 	clz	r2, r2
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	40d3      	lsrs	r3, r2
 8002424:	4a1d      	ldr	r2, [pc, #116]	; (800249c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002426:	5cd3      	ldrb	r3, [r2, r3]
 8002428:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800242a:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <HAL_RCC_GetSysClockFreq+0xc4>)
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	220f      	movs	r2, #15
 8002434:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	fa92 f2a2 	rbit	r2, r2
 800243c:	60fa      	str	r2, [r7, #12]
  return result;
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	fab2 f282 	clz	r2, r2
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	40d3      	lsrs	r3, r2
 8002448:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002458:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <HAL_RCC_GetSysClockFreq+0xc8>)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	fb02 f303 	mul.w	r3, r2, r3
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
 8002468:	e007      	b.n	800247a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800246a:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <HAL_RCC_GetSysClockFreq+0xc8>)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	fb02 f303 	mul.w	r3, r2, r3
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	623b      	str	r3, [r7, #32]
      break;
 800247e:	e002      	b.n	8002486 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002482:	623b      	str	r3, [r7, #32]
      break;
 8002484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002486:	6a3b      	ldr	r3, [r7, #32]
}
 8002488:	4618      	mov	r0, r3
 800248a:	372c      	adds	r7, #44	; 0x2c
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	40021000 	.word	0x40021000
 8002498:	007a1200 	.word	0x007a1200
 800249c:	08004a34 	.word	0x08004a34
 80024a0:	08004a44 	.word	0x08004a44

080024a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000014 	.word	0x20000014

080024bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80024c2:	f7ff ffef 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024c6:	4601      	mov	r1, r0
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024d0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80024d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	fa92 f2a2 	rbit	r2, r2
 80024dc:	603a      	str	r2, [r7, #0]
  return result;
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	fab2 f282 	clz	r2, r2
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	40d3      	lsrs	r3, r2
 80024e8:	4a04      	ldr	r2, [pc, #16]	; (80024fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021000 	.word	0x40021000
 80024fc:	08004a2c 	.word	0x08004a2c

08002500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002506:	f7ff ffcd 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 800250a:	4601      	mov	r1, r0
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002514:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002518:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	fa92 f2a2 	rbit	r2, r2
 8002520:	603a      	str	r2, [r7, #0]
  return result;
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	fab2 f282 	clz	r2, r2
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	40d3      	lsrs	r3, r2
 800252c:	4a04      	ldr	r2, [pc, #16]	; (8002540 <HAL_RCC_GetPCLK2Freq+0x40>)
 800252e:	5cd3      	ldrb	r3, [r2, r3]
 8002530:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000
 8002540:	08004a2c 	.word	0x08004a2c

08002544 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b092      	sub	sp, #72	; 0x48
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002554:	2300      	movs	r3, #0
 8002556:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 80d4 	beq.w	8002710 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002568:	4b4e      	ldr	r3, [pc, #312]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10e      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002574:	4b4b      	ldr	r3, [pc, #300]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	4a4a      	ldr	r2, [pc, #296]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800257a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257e:	61d3      	str	r3, [r2, #28]
 8002580:	4b48      	ldr	r3, [pc, #288]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258c:	2301      	movs	r3, #1
 800258e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002592:	4b45      	ldr	r3, [pc, #276]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259a:	2b00      	cmp	r3, #0
 800259c:	d118      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800259e:	4b42      	ldr	r3, [pc, #264]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a41      	ldr	r2, [pc, #260]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025aa:	f7fe f9ab 	bl	8000904 <HAL_GetTick>
 80025ae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	e008      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b2:	f7fe f9a7 	bl	8000904 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b64      	cmp	r3, #100	; 0x64
 80025be:	d901      	bls.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1d6      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	4b38      	ldr	r3, [pc, #224]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025d0:	4b34      	ldr	r3, [pc, #208]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8084 	beq.w	80026ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d07c      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025f0:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	461a      	mov	r2, r3
 800261a:	2301      	movs	r3, #1
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002622:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800262c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	461a      	mov	r2, r3
 800263e:	2300      	movs	r3, #0
 8002640:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002642:	4a18      	ldr	r2, [pc, #96]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002646:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d04b      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002652:	f7fe f957 	bl	8000904 <HAL_GetTick>
 8002656:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002658:	e00a      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265a:	f7fe f953 	bl	8000904 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	f241 3288 	movw	r2, #5000	; 0x1388
 8002668:	4293      	cmp	r3, r2
 800266a:	d901      	bls.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e180      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002670:	2302      	movs	r3, #2
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
 800267c:	2302      	movs	r3, #2
 800267e:	623b      	str	r3, [r7, #32]
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	61fb      	str	r3, [r7, #28]
  return result;
 8002688:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f043 0302 	orr.w	r3, r3, #2
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d108      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800269e:	4b01      	ldr	r3, [pc, #4]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	e00d      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40007000 	.word	0x40007000
 80026ac:	10908100 	.word	0x10908100
 80026b0:	2302      	movs	r3, #2
 80026b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	4b9a      	ldr	r3, [pc, #616]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	2202      	movs	r2, #2
 80026c2:	613a      	str	r2, [r7, #16]
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	fa92 f2a2 	rbit	r2, r2
 80026ca:	60fa      	str	r2, [r7, #12]
  return result;
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	fab2 f282 	clz	r2, r2
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	f002 021f 	and.w	r2, r2, #31
 80026de:	2101      	movs	r1, #1
 80026e0:	fa01 f202 	lsl.w	r2, r1, r2
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0b7      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80026ea:	4b8f      	ldr	r3, [pc, #572]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	498c      	ldr	r1, [pc, #560]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002700:	2b01      	cmp	r3, #1
 8002702:	d105      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002704:	4b88      	ldr	r3, [pc, #544]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	4a87      	ldr	r2, [pc, #540]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800270a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800271c:	4b82      	ldr	r3, [pc, #520]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	f023 0203 	bic.w	r2, r3, #3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	497f      	ldr	r1, [pc, #508]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800273a:	4b7b      	ldr	r3, [pc, #492]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	4978      	ldr	r1, [pc, #480]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002758:	4b73      	ldr	r3, [pc, #460]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	4970      	ldr	r1, [pc, #448]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002776:	4b6c      	ldr	r3, [pc, #432]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f023 0210 	bic.w	r2, r3, #16
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4969      	ldr	r1, [pc, #420]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002784:	4313      	orrs	r3, r2
 8002786:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002794:	4b64      	ldr	r3, [pc, #400]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a0:	4961      	ldr	r1, [pc, #388]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d008      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027b2:	4b5d      	ldr	r3, [pc, #372]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f023 0220 	bic.w	r2, r3, #32
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	495a      	ldr	r1, [pc, #360]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027d0:	4b55      	ldr	r3, [pc, #340]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	4952      	ldr	r1, [pc, #328]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027ee:	4b4e      	ldr	r3, [pc, #312]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	494b      	ldr	r1, [pc, #300]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800280c:	4b46      	ldr	r3, [pc, #280]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	4943      	ldr	r1, [pc, #268]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002826:	2b00      	cmp	r3, #0
 8002828:	d008      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800282a:	4b3f      	ldr	r3, [pc, #252]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	493c      	ldr	r1, [pc, #240]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002848:	4b37      	ldr	r3, [pc, #220]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	4934      	ldr	r1, [pc, #208]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002856:	4313      	orrs	r3, r2
 8002858:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d008      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002866:	4b30      	ldr	r3, [pc, #192]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	492d      	ldr	r1, [pc, #180]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002874:	4313      	orrs	r3, r2
 8002876:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002884:	4b28      	ldr	r3, [pc, #160]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002890:	4925      	ldr	r1, [pc, #148]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80028a2:	4b21      	ldr	r3, [pc, #132]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	491e      	ldr	r1, [pc, #120]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	4916      	ldr	r1, [pc, #88]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80028de:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ea:	490f      	ldr	r1, [pc, #60]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002908:	4907      	ldr	r1, [pc, #28]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800290a:	4313      	orrs	r3, r2
 800290c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00c      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800291a:	4b03      	ldr	r3, [pc, #12]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	e002      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292e:	4913      	ldr	r1, [pc, #76]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002930:	4313      	orrs	r3, r2
 8002932:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294c:	490b      	ldr	r1, [pc, #44]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800294e:	4313      	orrs	r3, r2
 8002950:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d008      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800295e:	4b07      	ldr	r3, [pc, #28]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800296a:	4904      	ldr	r1, [pc, #16]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800296c:	4313      	orrs	r3, r2
 800296e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3748      	adds	r7, #72	; 0x48
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000

08002980 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e040      	b.n	8002a14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fd fe4e 	bl	8000644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2224      	movs	r2, #36	; 0x24
 80029ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0201 	bic.w	r2, r2, #1
 80029bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fc70 	bl	80032a4 <UART_SetConfig>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e022      	b.n	8002a14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fe3a 	bl	8003650 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fec1 	bl	8003794 <UART_CheckIdleState>
 8002a12:	4603      	mov	r3, r0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	; 0x28
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	f040 8082 	bne.w	8002b3a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <HAL_UART_Transmit+0x26>
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e07a      	b.n	8002b3c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_UART_Transmit+0x38>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e073      	b.n	8002b3c <HAL_UART_Transmit+0x120>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2221      	movs	r2, #33	; 0x21
 8002a68:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a6a:	f7fd ff4b 	bl	8000904 <HAL_GetTick>
 8002a6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	88fa      	ldrh	r2, [r7, #6]
 8002a74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	88fa      	ldrh	r2, [r7, #6]
 8002a7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a88:	d108      	bne.n	8002a9c <HAL_UART_Transmit+0x80>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d104      	bne.n	8002a9c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	e003      	b.n	8002aa4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002aac:	e02d      	b.n	8002b0a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2180      	movs	r1, #128	; 0x80
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 feb4 	bl	8003826 <UART_WaitOnFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e039      	b.n	8002b3c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10b      	bne.n	8002ae6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	881a      	ldrh	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ada:	b292      	uxth	r2, r2
 8002adc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	e008      	b.n	8002af8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	781a      	ldrb	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	b292      	uxth	r2, r2
 8002af0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3301      	adds	r3, #1
 8002af6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1cb      	bne.n	8002aae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2140      	movs	r1, #64	; 0x40
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 fe80 	bl	8003826 <UART_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e005      	b.n	8002b3c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002b3a:	2302      	movs	r3, #2
  }
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3720      	adds	r7, #32
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b08b      	sub	sp, #44	; 0x2c
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d156      	bne.n	8002c08 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <HAL_UART_Transmit_IT+0x22>
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e04f      	b.n	8002c0a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_UART_Transmit_IT+0x34>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e048      	b.n	8002c0a <HAL_UART_Transmit_IT+0xc6>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	88fa      	ldrh	r2, [r7, #6]
 8002b8a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	88fa      	ldrh	r2, [r7, #6]
 8002b92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2221      	movs	r2, #33	; 0x21
 8002ba8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb2:	d107      	bne.n	8002bc4 <HAL_UART_Transmit_IT+0x80>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d103      	bne.n	8002bc4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <HAL_UART_Transmit_IT+0xd4>)
 8002bc0:	669a      	str	r2, [r3, #104]	; 0x68
 8002bc2:	e002      	b.n	8002bca <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <HAL_UART_Transmit_IT+0xd8>)
 8002bc8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	e853 3f00 	ldrex	r3, [r3]
 8002bde:	613b      	str	r3, [r7, #16]
   return(result);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	623b      	str	r3, [r7, #32]
 8002bf2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf4:	69f9      	ldr	r1, [r7, #28]
 8002bf6:	6a3a      	ldr	r2, [r7, #32]
 8002bf8:	e841 2300 	strex	r3, r2, [r1]
 8002bfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1e6      	bne.n	8002bd2 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e000      	b.n	8002c0a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002c08:	2302      	movs	r3, #2
  }
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	372c      	adds	r7, #44	; 0x2c
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	08003cb3 	.word	0x08003cb3
 8002c1c:	08003bfb 	.word	0x08003bfb

08002c20 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	; 0x28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	d13d      	bne.n	8002cb2 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <HAL_UART_Receive_IT+0x22>
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e036      	b.n	8002cb4 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_UART_Receive_IT+0x34>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e02f      	b.n	8002cb4 <HAL_UART_Receive_IT+0x94>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d018      	beq.n	8002ca2 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	623b      	str	r3, [r7, #32]
 8002c90:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c92:	69f9      	ldr	r1, [r7, #28]
 8002c94:	6a3a      	ldr	r2, [r7, #32]
 8002c96:	e841 2300 	strex	r3, r2, [r1]
 8002c9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1e6      	bne.n	8002c70 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 fe81 	bl	80039b0 <UART_Start_Receive_IT>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	e000      	b.n	8002cb4 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002cb2:	2302      	movs	r3, #2
  }
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3728      	adds	r7, #40	; 0x28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b0ba      	sub	sp, #232	; 0xe8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ce2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002ce6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002cea:	4013      	ands	r3, r2
 8002cec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002cf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d115      	bne.n	8002d24 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00f      	beq.n	8002d24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d08:	f003 0320 	and.w	r3, r3, #32
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d009      	beq.n	8002d24 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 82a3 	beq.w	8003260 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	4798      	blx	r3
      }
      return;
 8002d22:	e29d      	b.n	8003260 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8117 	beq.w	8002f5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002d3e:	4b85      	ldr	r3, [pc, #532]	; (8002f54 <HAL_UART_IRQHandler+0x298>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 810a 	beq.w	8002f5c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d011      	beq.n	8002d78 <HAL_UART_IRQHandler+0xbc>
 8002d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00b      	beq.n	8002d78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2201      	movs	r2, #1
 8002d66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d6e:	f043 0201 	orr.w	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d011      	beq.n	8002da8 <HAL_UART_IRQHandler+0xec>
 8002d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00b      	beq.n	8002da8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2202      	movs	r2, #2
 8002d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d9e:	f043 0204 	orr.w	r2, r3, #4
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d011      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x11c>
 8002db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00b      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dce:	f043 0202 	orr.w	r2, r3, #2
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d017      	beq.n	8002e14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d105      	bne.n	8002dfc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002df4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00b      	beq.n	8002e14 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2208      	movs	r2, #8
 8002e02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e0a:	f043 0208 	orr.w	r2, r3, #8
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d012      	beq.n	8002e46 <HAL_UART_IRQHandler+0x18a>
 8002e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00c      	beq.n	8002e46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e3c:	f043 0220 	orr.w	r2, r3, #32
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8209 	beq.w	8003264 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00d      	beq.n	8002e7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8e:	2b40      	cmp	r3, #64	; 0x40
 8002e90:	d005      	beq.n	8002e9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d04f      	beq.n	8002f3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fe32 	bl	8003b08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eae:	2b40      	cmp	r3, #64	; 0x40
 8002eb0:	d141      	bne.n	8002f36 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3308      	adds	r3, #8
 8002eb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ec0:	e853 3f00 	ldrex	r3, [r3]
 8002ec4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3308      	adds	r3, #8
 8002eda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ede:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002eea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002eee:	e841 2300 	strex	r3, r2, [r1]
 8002ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1d9      	bne.n	8002eb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d013      	beq.n	8002f2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a13      	ldr	r2, [pc, #76]	; (8002f58 <HAL_UART_IRQHandler+0x29c>)
 8002f0c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd fe70 	bl	8000bf8 <HAL_DMA_Abort_IT>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d017      	beq.n	8002f4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f2c:	e00f      	b.n	8002f4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f9a2 	bl	8003278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f34:	e00b      	b.n	8002f4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f99e 	bl	8003278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f3c:	e007      	b.n	8002f4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f99a 	bl	8003278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002f4c:	e18a      	b.n	8003264 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f4e:	bf00      	nop
    return;
 8002f50:	e188      	b.n	8003264 <HAL_UART_IRQHandler+0x5a8>
 8002f52:	bf00      	nop
 8002f54:	04000120 	.word	0x04000120
 8002f58:	08003bcf 	.word	0x08003bcf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	f040 8143 	bne.w	80031ec <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 813c 	beq.w	80031ec <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8135 	beq.w	80031ec <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2210      	movs	r2, #16
 8002f88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f94:	2b40      	cmp	r3, #64	; 0x40
 8002f96:	f040 80b1 	bne.w	80030fc <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fa6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 815c 	beq.w	8003268 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002fb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	f080 8154 	bcs.w	8003268 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	f000 8085 	beq.w	80030e0 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fe2:	e853 3f00 	ldrex	r3, [r3]
 8002fe6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002fea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ff2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003000:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003004:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003008:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800300c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003010:	e841 2300 	strex	r3, r2, [r1]
 8003014:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003018:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1da      	bne.n	8002fd6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3308      	adds	r3, #8
 8003026:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800302a:	e853 3f00 	ldrex	r3, [r3]
 800302e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003030:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003032:	f023 0301 	bic.w	r3, r3, #1
 8003036:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3308      	adds	r3, #8
 8003040:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003044:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003048:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800304c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003050:	e841 2300 	strex	r3, r2, [r1]
 8003054:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e1      	bne.n	8003020 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3308      	adds	r3, #8
 8003062:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003064:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003066:	e853 3f00 	ldrex	r3, [r3]
 800306a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800306c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800306e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003072:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3308      	adds	r3, #8
 800307c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003080:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003082:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003084:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003086:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003088:	e841 2300 	strex	r3, r2, [r1]
 800308c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800308e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e3      	bne.n	800305c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a8:	e853 3f00 	ldrex	r3, [r3]
 80030ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030b0:	f023 0310 	bic.w	r3, r3, #16
 80030b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80030c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030ca:	e841 2300 	strex	r3, r2, [r1]
 80030ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1e4      	bne.n	80030a0 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fd53 	bl	8000b86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	4619      	mov	r1, r3
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f8c9 	bl	800328c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030fa:	e0b5      	b.n	8003268 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003108:	b29b      	uxth	r3, r3
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80a7 	beq.w	800326c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800311e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 80a2 	beq.w	800326c <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003130:	e853 3f00 	ldrex	r3, [r3]
 8003134:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003138:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800313c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800314a:	647b      	str	r3, [r7, #68]	; 0x44
 800314c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003152:	e841 2300 	strex	r3, r2, [r1]
 8003156:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1e4      	bne.n	8003128 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3308      	adds	r3, #8
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	e853 3f00 	ldrex	r3, [r3]
 800316c:	623b      	str	r3, [r7, #32]
   return(result);
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	f023 0301 	bic.w	r3, r3, #1
 8003174:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3308      	adds	r3, #8
 800317e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003182:	633a      	str	r2, [r7, #48]	; 0x30
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318a:	e841 2300 	strex	r3, r2, [r1]
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e3      	bne.n	800315e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2220      	movs	r2, #32
 800319a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f023 0310 	bic.w	r3, r3, #16
 80031bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ce:	69b9      	ldr	r1, [r7, #24]
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	e841 2300 	strex	r3, r2, [r1]
 80031d6:	617b      	str	r3, [r7, #20]
   return(result);
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1e4      	bne.n	80031a8 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031e2:	4619      	mov	r1, r3
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f851 	bl	800328c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031ea:	e03f      	b.n	800326c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80031ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00e      	beq.n	8003216 <HAL_UART_IRQHandler+0x55a>
 80031f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800320c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 ff35 	bl	800407e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003214:	e02d      	b.n	8003272 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800321a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00e      	beq.n	8003240 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322a:	2b00      	cmp	r3, #0
 800322c:	d008      	beq.n	8003240 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01c      	beq.n	8003270 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	4798      	blx	r3
    }
    return;
 800323e:	e017      	b.n	8003270 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	d012      	beq.n	8003272 <HAL_UART_IRQHandler+0x5b6>
 800324c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00c      	beq.n	8003272 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fd8a 	bl	8003d72 <UART_EndTransmit_IT>
    return;
 800325e:	e008      	b.n	8003272 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003260:	bf00      	nop
 8003262:	e006      	b.n	8003272 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003264:	bf00      	nop
 8003266:	e004      	b.n	8003272 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003268:	bf00      	nop
 800326a:	e002      	b.n	8003272 <HAL_UART_IRQHandler+0x5b6>
      return;
 800326c:	bf00      	nop
 800326e:	e000      	b.n	8003272 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003270:	bf00      	nop
  }

}
 8003272:	37e8      	adds	r7, #232	; 0xe8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	4b92      	ldr	r3, [pc, #584]	; (8003518 <UART_SetConfig+0x274>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	6979      	ldr	r1, [r7, #20]
 80032d8:	430b      	orrs	r3, r1
 80032da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	430a      	orrs	r2, r1
 8003314:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a80      	ldr	r2, [pc, #512]	; (800351c <UART_SetConfig+0x278>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d120      	bne.n	8003362 <UART_SetConfig+0xbe>
 8003320:	4b7f      	ldr	r3, [pc, #508]	; (8003520 <UART_SetConfig+0x27c>)
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	f003 0303 	and.w	r3, r3, #3
 8003328:	2b03      	cmp	r3, #3
 800332a:	d817      	bhi.n	800335c <UART_SetConfig+0xb8>
 800332c:	a201      	add	r2, pc, #4	; (adr r2, 8003334 <UART_SetConfig+0x90>)
 800332e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003332:	bf00      	nop
 8003334:	08003345 	.word	0x08003345
 8003338:	08003351 	.word	0x08003351
 800333c:	08003357 	.word	0x08003357
 8003340:	0800334b 	.word	0x0800334b
 8003344:	2301      	movs	r3, #1
 8003346:	77fb      	strb	r3, [r7, #31]
 8003348:	e0b5      	b.n	80034b6 <UART_SetConfig+0x212>
 800334a:	2302      	movs	r3, #2
 800334c:	77fb      	strb	r3, [r7, #31]
 800334e:	e0b2      	b.n	80034b6 <UART_SetConfig+0x212>
 8003350:	2304      	movs	r3, #4
 8003352:	77fb      	strb	r3, [r7, #31]
 8003354:	e0af      	b.n	80034b6 <UART_SetConfig+0x212>
 8003356:	2308      	movs	r3, #8
 8003358:	77fb      	strb	r3, [r7, #31]
 800335a:	e0ac      	b.n	80034b6 <UART_SetConfig+0x212>
 800335c:	2310      	movs	r3, #16
 800335e:	77fb      	strb	r3, [r7, #31]
 8003360:	e0a9      	b.n	80034b6 <UART_SetConfig+0x212>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a6f      	ldr	r2, [pc, #444]	; (8003524 <UART_SetConfig+0x280>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d124      	bne.n	80033b6 <UART_SetConfig+0x112>
 800336c:	4b6c      	ldr	r3, [pc, #432]	; (8003520 <UART_SetConfig+0x27c>)
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003374:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003378:	d011      	beq.n	800339e <UART_SetConfig+0xfa>
 800337a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800337e:	d817      	bhi.n	80033b0 <UART_SetConfig+0x10c>
 8003380:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003384:	d011      	beq.n	80033aa <UART_SetConfig+0x106>
 8003386:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800338a:	d811      	bhi.n	80033b0 <UART_SetConfig+0x10c>
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <UART_SetConfig+0xf4>
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003394:	d006      	beq.n	80033a4 <UART_SetConfig+0x100>
 8003396:	e00b      	b.n	80033b0 <UART_SetConfig+0x10c>
 8003398:	2300      	movs	r3, #0
 800339a:	77fb      	strb	r3, [r7, #31]
 800339c:	e08b      	b.n	80034b6 <UART_SetConfig+0x212>
 800339e:	2302      	movs	r3, #2
 80033a0:	77fb      	strb	r3, [r7, #31]
 80033a2:	e088      	b.n	80034b6 <UART_SetConfig+0x212>
 80033a4:	2304      	movs	r3, #4
 80033a6:	77fb      	strb	r3, [r7, #31]
 80033a8:	e085      	b.n	80034b6 <UART_SetConfig+0x212>
 80033aa:	2308      	movs	r3, #8
 80033ac:	77fb      	strb	r3, [r7, #31]
 80033ae:	e082      	b.n	80034b6 <UART_SetConfig+0x212>
 80033b0:	2310      	movs	r3, #16
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e07f      	b.n	80034b6 <UART_SetConfig+0x212>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a5b      	ldr	r2, [pc, #364]	; (8003528 <UART_SetConfig+0x284>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d124      	bne.n	800340a <UART_SetConfig+0x166>
 80033c0:	4b57      	ldr	r3, [pc, #348]	; (8003520 <UART_SetConfig+0x27c>)
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80033c8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033cc:	d011      	beq.n	80033f2 <UART_SetConfig+0x14e>
 80033ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033d2:	d817      	bhi.n	8003404 <UART_SetConfig+0x160>
 80033d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033d8:	d011      	beq.n	80033fe <UART_SetConfig+0x15a>
 80033da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033de:	d811      	bhi.n	8003404 <UART_SetConfig+0x160>
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <UART_SetConfig+0x148>
 80033e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033e8:	d006      	beq.n	80033f8 <UART_SetConfig+0x154>
 80033ea:	e00b      	b.n	8003404 <UART_SetConfig+0x160>
 80033ec:	2300      	movs	r3, #0
 80033ee:	77fb      	strb	r3, [r7, #31]
 80033f0:	e061      	b.n	80034b6 <UART_SetConfig+0x212>
 80033f2:	2302      	movs	r3, #2
 80033f4:	77fb      	strb	r3, [r7, #31]
 80033f6:	e05e      	b.n	80034b6 <UART_SetConfig+0x212>
 80033f8:	2304      	movs	r3, #4
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e05b      	b.n	80034b6 <UART_SetConfig+0x212>
 80033fe:	2308      	movs	r3, #8
 8003400:	77fb      	strb	r3, [r7, #31]
 8003402:	e058      	b.n	80034b6 <UART_SetConfig+0x212>
 8003404:	2310      	movs	r3, #16
 8003406:	77fb      	strb	r3, [r7, #31]
 8003408:	e055      	b.n	80034b6 <UART_SetConfig+0x212>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a47      	ldr	r2, [pc, #284]	; (800352c <UART_SetConfig+0x288>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d124      	bne.n	800345e <UART_SetConfig+0x1ba>
 8003414:	4b42      	ldr	r3, [pc, #264]	; (8003520 <UART_SetConfig+0x27c>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800341c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003420:	d011      	beq.n	8003446 <UART_SetConfig+0x1a2>
 8003422:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003426:	d817      	bhi.n	8003458 <UART_SetConfig+0x1b4>
 8003428:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800342c:	d011      	beq.n	8003452 <UART_SetConfig+0x1ae>
 800342e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003432:	d811      	bhi.n	8003458 <UART_SetConfig+0x1b4>
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <UART_SetConfig+0x19c>
 8003438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800343c:	d006      	beq.n	800344c <UART_SetConfig+0x1a8>
 800343e:	e00b      	b.n	8003458 <UART_SetConfig+0x1b4>
 8003440:	2300      	movs	r3, #0
 8003442:	77fb      	strb	r3, [r7, #31]
 8003444:	e037      	b.n	80034b6 <UART_SetConfig+0x212>
 8003446:	2302      	movs	r3, #2
 8003448:	77fb      	strb	r3, [r7, #31]
 800344a:	e034      	b.n	80034b6 <UART_SetConfig+0x212>
 800344c:	2304      	movs	r3, #4
 800344e:	77fb      	strb	r3, [r7, #31]
 8003450:	e031      	b.n	80034b6 <UART_SetConfig+0x212>
 8003452:	2308      	movs	r3, #8
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	e02e      	b.n	80034b6 <UART_SetConfig+0x212>
 8003458:	2310      	movs	r3, #16
 800345a:	77fb      	strb	r3, [r7, #31]
 800345c:	e02b      	b.n	80034b6 <UART_SetConfig+0x212>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a33      	ldr	r2, [pc, #204]	; (8003530 <UART_SetConfig+0x28c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d124      	bne.n	80034b2 <UART_SetConfig+0x20e>
 8003468:	4b2d      	ldr	r3, [pc, #180]	; (8003520 <UART_SetConfig+0x27c>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003470:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003474:	d011      	beq.n	800349a <UART_SetConfig+0x1f6>
 8003476:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800347a:	d817      	bhi.n	80034ac <UART_SetConfig+0x208>
 800347c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003480:	d011      	beq.n	80034a6 <UART_SetConfig+0x202>
 8003482:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003486:	d811      	bhi.n	80034ac <UART_SetConfig+0x208>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <UART_SetConfig+0x1f0>
 800348c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003490:	d006      	beq.n	80034a0 <UART_SetConfig+0x1fc>
 8003492:	e00b      	b.n	80034ac <UART_SetConfig+0x208>
 8003494:	2300      	movs	r3, #0
 8003496:	77fb      	strb	r3, [r7, #31]
 8003498:	e00d      	b.n	80034b6 <UART_SetConfig+0x212>
 800349a:	2302      	movs	r3, #2
 800349c:	77fb      	strb	r3, [r7, #31]
 800349e:	e00a      	b.n	80034b6 <UART_SetConfig+0x212>
 80034a0:	2304      	movs	r3, #4
 80034a2:	77fb      	strb	r3, [r7, #31]
 80034a4:	e007      	b.n	80034b6 <UART_SetConfig+0x212>
 80034a6:	2308      	movs	r3, #8
 80034a8:	77fb      	strb	r3, [r7, #31]
 80034aa:	e004      	b.n	80034b6 <UART_SetConfig+0x212>
 80034ac:	2310      	movs	r3, #16
 80034ae:	77fb      	strb	r3, [r7, #31]
 80034b0:	e001      	b.n	80034b6 <UART_SetConfig+0x212>
 80034b2:	2310      	movs	r3, #16
 80034b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034be:	d16c      	bne.n	800359a <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80034c0:	7ffb      	ldrb	r3, [r7, #31]
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d838      	bhi.n	8003538 <UART_SetConfig+0x294>
 80034c6:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <UART_SetConfig+0x228>)
 80034c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034cc:	080034f1 	.word	0x080034f1
 80034d0:	080034f9 	.word	0x080034f9
 80034d4:	08003501 	.word	0x08003501
 80034d8:	08003539 	.word	0x08003539
 80034dc:	08003507 	.word	0x08003507
 80034e0:	08003539 	.word	0x08003539
 80034e4:	08003539 	.word	0x08003539
 80034e8:	08003539 	.word	0x08003539
 80034ec:	0800350f 	.word	0x0800350f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f0:	f7fe ffe4 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 80034f4:	61b8      	str	r0, [r7, #24]
        break;
 80034f6:	e024      	b.n	8003542 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034f8:	f7ff f802 	bl	8002500 <HAL_RCC_GetPCLK2Freq>
 80034fc:	61b8      	str	r0, [r7, #24]
        break;
 80034fe:	e020      	b.n	8003542 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <UART_SetConfig+0x290>)
 8003502:	61bb      	str	r3, [r7, #24]
        break;
 8003504:	e01d      	b.n	8003542 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003506:	f7fe ff63 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 800350a:	61b8      	str	r0, [r7, #24]
        break;
 800350c:	e019      	b.n	8003542 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800350e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003512:	61bb      	str	r3, [r7, #24]
        break;
 8003514:	e015      	b.n	8003542 <UART_SetConfig+0x29e>
 8003516:	bf00      	nop
 8003518:	efff69f3 	.word	0xefff69f3
 800351c:	40013800 	.word	0x40013800
 8003520:	40021000 	.word	0x40021000
 8003524:	40004400 	.word	0x40004400
 8003528:	40004800 	.word	0x40004800
 800352c:	40004c00 	.word	0x40004c00
 8003530:	40005000 	.word	0x40005000
 8003534:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	77bb      	strb	r3, [r7, #30]
        break;
 8003540:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d075      	beq.n	8003634 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	005a      	lsls	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	085b      	lsrs	r3, r3, #1
 8003552:	441a      	add	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	fbb2 f3f3 	udiv	r3, r2, r3
 800355c:	b29b      	uxth	r3, r3
 800355e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	2b0f      	cmp	r3, #15
 8003564:	d916      	bls.n	8003594 <UART_SetConfig+0x2f0>
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356c:	d212      	bcs.n	8003594 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	b29b      	uxth	r3, r3
 8003572:	f023 030f 	bic.w	r3, r3, #15
 8003576:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	b29b      	uxth	r3, r3
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	b29a      	uxth	r2, r3
 8003584:	89fb      	ldrh	r3, [r7, #14]
 8003586:	4313      	orrs	r3, r2
 8003588:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	89fa      	ldrh	r2, [r7, #14]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	e04f      	b.n	8003634 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	77bb      	strb	r3, [r7, #30]
 8003598:	e04c      	b.n	8003634 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800359a:	7ffb      	ldrb	r3, [r7, #31]
 800359c:	2b08      	cmp	r3, #8
 800359e:	d828      	bhi.n	80035f2 <UART_SetConfig+0x34e>
 80035a0:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <UART_SetConfig+0x304>)
 80035a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a6:	bf00      	nop
 80035a8:	080035cd 	.word	0x080035cd
 80035ac:	080035d5 	.word	0x080035d5
 80035b0:	080035dd 	.word	0x080035dd
 80035b4:	080035f3 	.word	0x080035f3
 80035b8:	080035e3 	.word	0x080035e3
 80035bc:	080035f3 	.word	0x080035f3
 80035c0:	080035f3 	.word	0x080035f3
 80035c4:	080035f3 	.word	0x080035f3
 80035c8:	080035eb 	.word	0x080035eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035cc:	f7fe ff76 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 80035d0:	61b8      	str	r0, [r7, #24]
        break;
 80035d2:	e013      	b.n	80035fc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035d4:	f7fe ff94 	bl	8002500 <HAL_RCC_GetPCLK2Freq>
 80035d8:	61b8      	str	r0, [r7, #24]
        break;
 80035da:	e00f      	b.n	80035fc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035dc:	4b1b      	ldr	r3, [pc, #108]	; (800364c <UART_SetConfig+0x3a8>)
 80035de:	61bb      	str	r3, [r7, #24]
        break;
 80035e0:	e00c      	b.n	80035fc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035e2:	f7fe fef5 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 80035e6:	61b8      	str	r0, [r7, #24]
        break;
 80035e8:	e008      	b.n	80035fc <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ee:	61bb      	str	r3, [r7, #24]
        break;
 80035f0:	e004      	b.n	80035fc <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	77bb      	strb	r3, [r7, #30]
        break;
 80035fa:	bf00      	nop
    }

    if (pclk != 0U)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d018      	beq.n	8003634 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	085a      	lsrs	r2, r3, #1
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	441a      	add	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	fbb2 f3f3 	udiv	r3, r2, r3
 8003614:	b29b      	uxth	r3, r3
 8003616:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	2b0f      	cmp	r3, #15
 800361c:	d908      	bls.n	8003630 <UART_SetConfig+0x38c>
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003624:	d204      	bcs.n	8003630 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	e001      	b.n	8003634 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003640:	7fbb      	ldrb	r3, [r7, #30]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3720      	adds	r7, #32
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	007a1200 	.word	0x007a1200

08003650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01a      	beq.n	8003766 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800374e:	d10a      	bne.n	8003766 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	605a      	str	r2, [r3, #4]
  }
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af02      	add	r7, sp, #8
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037a4:	f7fd f8ae 	bl	8000904 <HAL_GetTick>
 80037a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d10e      	bne.n	80037d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f82d 	bl	8003826 <UART_WaitOnFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e023      	b.n	800381e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d10e      	bne.n	8003802 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f817 	bl	8003826 <UART_WaitOnFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e00d      	b.n	800381e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b09c      	sub	sp, #112	; 0x70
 800382a:	af00      	add	r7, sp, #0
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	603b      	str	r3, [r7, #0]
 8003832:	4613      	mov	r3, r2
 8003834:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003836:	e0a5      	b.n	8003984 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800383a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383e:	f000 80a1 	beq.w	8003984 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003842:	f7fd f85f 	bl	8000904 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800384e:	429a      	cmp	r2, r3
 8003850:	d302      	bcc.n	8003858 <UART_WaitOnFlagUntilTimeout+0x32>
 8003852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003854:	2b00      	cmp	r3, #0
 8003856:	d13e      	bne.n	80038d6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003868:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800386c:	667b      	str	r3, [r7, #100]	; 0x64
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003876:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003878:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800387c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e6      	bne.n	8003858 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3308      	adds	r3, #8
 8003890:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003894:	e853 3f00 	ldrex	r3, [r3]
 8003898:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800389a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	663b      	str	r3, [r7, #96]	; 0x60
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3308      	adds	r3, #8
 80038a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80038ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038b2:	e841 2300 	strex	r3, r2, [r1]
 80038b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1e5      	bne.n	800388a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e067      	b.n	80039a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d04f      	beq.n	8003984 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f2:	d147      	bne.n	8003984 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003906:	e853 3f00 	ldrex	r3, [r3]
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003912:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391c:	637b      	str	r3, [r7, #52]	; 0x34
 800391e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003920:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003924:	e841 2300 	strex	r3, r2, [r1]
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1e6      	bne.n	80038fe <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3308      	adds	r3, #8
 8003936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	e853 3f00 	ldrex	r3, [r3]
 800393e:	613b      	str	r3, [r7, #16]
   return(result);
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	66bb      	str	r3, [r7, #104]	; 0x68
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3308      	adds	r3, #8
 800394e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003950:	623a      	str	r2, [r7, #32]
 8003952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003954:	69f9      	ldr	r1, [r7, #28]
 8003956:	6a3a      	ldr	r2, [r7, #32]
 8003958:	e841 2300 	strex	r3, r2, [r1]
 800395c:	61bb      	str	r3, [r7, #24]
   return(result);
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1e5      	bne.n	8003930 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2220      	movs	r2, #32
 800396e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e010      	b.n	80039a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	69da      	ldr	r2, [r3, #28]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	4013      	ands	r3, r2
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	429a      	cmp	r2, r3
 8003992:	bf0c      	ite	eq
 8003994:	2301      	moveq	r3, #1
 8003996:	2300      	movne	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	429a      	cmp	r2, r3
 80039a0:	f43f af4a 	beq.w	8003838 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3770      	adds	r7, #112	; 0x70
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b091      	sub	sp, #68	; 0x44
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	4613      	mov	r3, r2
 80039bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	88fa      	ldrh	r2, [r7, #6]
 80039c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	88fa      	ldrh	r2, [r7, #6]
 80039d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e2:	d10e      	bne.n	8003a02 <UART_Start_Receive_IT+0x52>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d105      	bne.n	80039f8 <UART_Start_Receive_IT+0x48>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80039f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039f6:	e02d      	b.n	8003a54 <UART_Start_Receive_IT+0xa4>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	22ff      	movs	r2, #255	; 0xff
 80039fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a00:	e028      	b.n	8003a54 <UART_Start_Receive_IT+0xa4>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10d      	bne.n	8003a26 <UART_Start_Receive_IT+0x76>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d104      	bne.n	8003a1c <UART_Start_Receive_IT+0x6c>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	22ff      	movs	r2, #255	; 0xff
 8003a16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a1a:	e01b      	b.n	8003a54 <UART_Start_Receive_IT+0xa4>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	227f      	movs	r2, #127	; 0x7f
 8003a20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a24:	e016      	b.n	8003a54 <UART_Start_Receive_IT+0xa4>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a2e:	d10d      	bne.n	8003a4c <UART_Start_Receive_IT+0x9c>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d104      	bne.n	8003a42 <UART_Start_Receive_IT+0x92>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	227f      	movs	r2, #127	; 0x7f
 8003a3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a40:	e008      	b.n	8003a54 <UART_Start_Receive_IT+0xa4>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	223f      	movs	r2, #63	; 0x3f
 8003a46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a4a:	e003      	b.n	8003a54 <UART_Start_Receive_IT+0xa4>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2222      	movs	r2, #34	; 0x22
 8003a60:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3308      	adds	r3, #8
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3308      	adds	r3, #8
 8003a80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a82:	637a      	str	r2, [r7, #52]	; 0x34
 8003a84:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e5      	bne.n	8003a62 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9e:	d107      	bne.n	8003ab0 <UART_Start_Receive_IT+0x100>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d103      	bne.n	8003ab0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4a15      	ldr	r2, [pc, #84]	; (8003b00 <UART_Start_Receive_IT+0x150>)
 8003aac:	665a      	str	r2, [r3, #100]	; 0x64
 8003aae:	e002      	b.n	8003ab6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <UART_Start_Receive_IT+0x154>)
 8003ab4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	e853 3f00 	ldrex	r3, [r3]
 8003aca:	613b      	str	r3, [r7, #16]
   return(result);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003adc:	623b      	str	r3, [r7, #32]
 8003ade:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae0:	69f9      	ldr	r1, [r7, #28]
 8003ae2:	6a3a      	ldr	r2, [r7, #32]
 8003ae4:	e841 2300 	strex	r3, r2, [r1]
 8003ae8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e6      	bne.n	8003abe <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3744      	adds	r7, #68	; 0x44
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	08003f23 	.word	0x08003f23
 8003b04:	08003dc7 	.word	0x08003dc7

08003b08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b095      	sub	sp, #84	; 0x54
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b2e:	643b      	str	r3, [r7, #64]	; 0x40
 8003b30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1e6      	bne.n	8003b10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3308      	adds	r3, #8
 8003b48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	f023 0301 	bic.w	r3, r3, #1
 8003b58:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3308      	adds	r3, #8
 8003b60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e5      	bne.n	8003b42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d118      	bne.n	8003bb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	e853 3f00 	ldrex	r3, [r3]
 8003b8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f023 0310 	bic.w	r3, r3, #16
 8003b92:	647b      	str	r3, [r7, #68]	; 0x44
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	6979      	ldr	r1, [r7, #20]
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	e841 2300 	strex	r3, r2, [r1]
 8003ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e6      	bne.n	8003b7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003bc2:	bf00      	nop
 8003bc4:	3754      	adds	r7, #84	; 0x54
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f7ff fb43 	bl	8003278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b08f      	sub	sp, #60	; 0x3c
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c06:	2b21      	cmp	r3, #33	; 0x21
 8003c08:	d14d      	bne.n	8003ca6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d132      	bne.n	8003c7c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	e853 3f00 	ldrex	r3, [r3]
 8003c22:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c36:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c3c:	e841 2300 	strex	r3, r2, [r1]
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1e6      	bne.n	8003c16 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	61bb      	str	r3, [r7, #24]
 8003c68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6979      	ldr	r1, [r7, #20]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	613b      	str	r3, [r7, #16]
   return(result);
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e6      	bne.n	8003c48 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003c7a:	e014      	b.n	8003ca6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c80:	781a      	ldrb	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	b292      	uxth	r2, r2
 8003c88:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003ca6:	bf00      	nop
 8003ca8:	373c      	adds	r7, #60	; 0x3c
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b091      	sub	sp, #68	; 0x44
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cbe:	2b21      	cmp	r3, #33	; 0x21
 8003cc0:	d151      	bne.n	8003d66 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d132      	bne.n	8003d34 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	623b      	str	r3, [r7, #32]
   return(result);
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cec:	633b      	str	r3, [r7, #48]	; 0x30
 8003cee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e6      	bne.n	8003cce <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d14:	637b      	str	r3, [r7, #52]	; 0x34
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1e:	61fb      	str	r3, [r7, #28]
 8003d20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d22:	69b9      	ldr	r1, [r7, #24]
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	e841 2300 	strex	r3, r2, [r1]
 8003d2a:	617b      	str	r3, [r7, #20]
   return(result);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1e6      	bne.n	8003d00 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003d32:	e018      	b.n	8003d66 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d38:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3c:	881a      	ldrh	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d46:	b292      	uxth	r2, r2
 8003d48:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4e:	1c9a      	adds	r2, r3, #2
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003d66:	bf00      	nop
 8003d68:	3744      	adds	r7, #68	; 0x44
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b088      	sub	sp, #32
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	e853 3f00 	ldrex	r3, [r3]
 8003d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	6979      	ldr	r1, [r7, #20]
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	e841 2300 	strex	r3, r2, [r1]
 8003da4:	613b      	str	r3, [r7, #16]
   return(result);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1e6      	bne.n	8003d7a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7fc fa73 	bl	80002a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dbe:	bf00      	nop
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b096      	sub	sp, #88	; 0x58
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003dd4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ddc:	2b22      	cmp	r3, #34	; 0x22
 8003dde:	f040 8094 	bne.w	8003f0a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003de8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003dec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003df0:	b2d9      	uxtb	r1, r3
 8003df2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfc:	400a      	ands	r2, r1
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d177      	bne.n	8003f1a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e3e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e48:	647b      	str	r3, [r7, #68]	; 0x44
 8003e4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e6      	bne.n	8003e2a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3308      	adds	r3, #8
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	623b      	str	r3, [r7, #32]
   return(result);
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3308      	adds	r3, #8
 8003e7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e7c:	633a      	str	r2, [r7, #48]	; 0x30
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e5      	bne.n	8003e5c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d12e      	bne.n	8003f02 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	e853 3f00 	ldrex	r3, [r3]
 8003eb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0310 	bic.w	r3, r3, #16
 8003ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	69b9      	ldr	r1, [r7, #24]
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	e841 2300 	strex	r3, r2, [r1]
 8003ed4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e6      	bne.n	8003eaa <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	2b10      	cmp	r3, #16
 8003ee8:	d103      	bne.n	8003ef2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2210      	movs	r2, #16
 8003ef0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ef8:	4619      	mov	r1, r3
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff f9c6 	bl	800328c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f00:	e00b      	b.n	8003f1a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fc f9bc 	bl	8000280 <HAL_UART_RxCpltCallback>
}
 8003f08:	e007      	b.n	8003f1a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699a      	ldr	r2, [r3, #24]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0208 	orr.w	r2, r2, #8
 8003f18:	619a      	str	r2, [r3, #24]
}
 8003f1a:	bf00      	nop
 8003f1c:	3758      	adds	r7, #88	; 0x58
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b096      	sub	sp, #88	; 0x58
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f30:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f38:	2b22      	cmp	r3, #34	; 0x22
 8003f3a:	f040 8094 	bne.w	8004066 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f44:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f4e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003f52:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f56:	4013      	ands	r3, r2
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	1c9a      	adds	r2, r3, #2
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d177      	bne.n	8004076 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8003fa6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003faa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e6      	bne.n	8003f86 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	e853 3f00 	ldrex	r3, [r3]
 8003fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe0:	e841 2300 	strex	r3, r2, [r1]
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e5      	bne.n	8003fb8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d12e      	bne.n	800405e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	e853 3f00 	ldrex	r3, [r3]
 8004012:	60bb      	str	r3, [r7, #8]
   return(result);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f023 0310 	bic.w	r3, r3, #16
 800401a:	647b      	str	r3, [r7, #68]	; 0x44
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004024:	61bb      	str	r3, [r7, #24]
 8004026:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	6979      	ldr	r1, [r7, #20]
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	613b      	str	r3, [r7, #16]
   return(result);
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e6      	bne.n	8004006 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	2b10      	cmp	r3, #16
 8004044:	d103      	bne.n	800404e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2210      	movs	r2, #16
 800404c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004054:	4619      	mov	r1, r3
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff f918 	bl	800328c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800405c:	e00b      	b.n	8004076 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fc f90e 	bl	8000280 <HAL_UART_RxCpltCallback>
}
 8004064:	e007      	b.n	8004076 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699a      	ldr	r2, [r3, #24]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0208 	orr.w	r2, r2, #8
 8004074:	619a      	str	r2, [r3, #24]
}
 8004076:	bf00      	nop
 8004078:	3758      	adds	r7, #88	; 0x58
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
	...

08004094 <__errno>:
 8004094:	4b01      	ldr	r3, [pc, #4]	; (800409c <__errno+0x8>)
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	20000020 	.word	0x20000020

080040a0 <__libc_init_array>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	4d0d      	ldr	r5, [pc, #52]	; (80040d8 <__libc_init_array+0x38>)
 80040a4:	4c0d      	ldr	r4, [pc, #52]	; (80040dc <__libc_init_array+0x3c>)
 80040a6:	1b64      	subs	r4, r4, r5
 80040a8:	10a4      	asrs	r4, r4, #2
 80040aa:	2600      	movs	r6, #0
 80040ac:	42a6      	cmp	r6, r4
 80040ae:	d109      	bne.n	80040c4 <__libc_init_array+0x24>
 80040b0:	4d0b      	ldr	r5, [pc, #44]	; (80040e0 <__libc_init_array+0x40>)
 80040b2:	4c0c      	ldr	r4, [pc, #48]	; (80040e4 <__libc_init_array+0x44>)
 80040b4:	f000 fca2 	bl	80049fc <_init>
 80040b8:	1b64      	subs	r4, r4, r5
 80040ba:	10a4      	asrs	r4, r4, #2
 80040bc:	2600      	movs	r6, #0
 80040be:	42a6      	cmp	r6, r4
 80040c0:	d105      	bne.n	80040ce <__libc_init_array+0x2e>
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c8:	4798      	blx	r3
 80040ca:	3601      	adds	r6, #1
 80040cc:	e7ee      	b.n	80040ac <__libc_init_array+0xc>
 80040ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d2:	4798      	blx	r3
 80040d4:	3601      	adds	r6, #1
 80040d6:	e7f2      	b.n	80040be <__libc_init_array+0x1e>
 80040d8:	08004a88 	.word	0x08004a88
 80040dc:	08004a88 	.word	0x08004a88
 80040e0:	08004a88 	.word	0x08004a88
 80040e4:	08004a8c 	.word	0x08004a8c

080040e8 <memset>:
 80040e8:	4402      	add	r2, r0
 80040ea:	4603      	mov	r3, r0
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d100      	bne.n	80040f2 <memset+0xa>
 80040f0:	4770      	bx	lr
 80040f2:	f803 1b01 	strb.w	r1, [r3], #1
 80040f6:	e7f9      	b.n	80040ec <memset+0x4>

080040f8 <sniprintf>:
 80040f8:	b40c      	push	{r2, r3}
 80040fa:	b530      	push	{r4, r5, lr}
 80040fc:	4b17      	ldr	r3, [pc, #92]	; (800415c <sniprintf+0x64>)
 80040fe:	1e0c      	subs	r4, r1, #0
 8004100:	681d      	ldr	r5, [r3, #0]
 8004102:	b09d      	sub	sp, #116	; 0x74
 8004104:	da08      	bge.n	8004118 <sniprintf+0x20>
 8004106:	238b      	movs	r3, #139	; 0x8b
 8004108:	602b      	str	r3, [r5, #0]
 800410a:	f04f 30ff 	mov.w	r0, #4294967295
 800410e:	b01d      	add	sp, #116	; 0x74
 8004110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004114:	b002      	add	sp, #8
 8004116:	4770      	bx	lr
 8004118:	f44f 7302 	mov.w	r3, #520	; 0x208
 800411c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004120:	bf14      	ite	ne
 8004122:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004126:	4623      	moveq	r3, r4
 8004128:	9304      	str	r3, [sp, #16]
 800412a:	9307      	str	r3, [sp, #28]
 800412c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004130:	9002      	str	r0, [sp, #8]
 8004132:	9006      	str	r0, [sp, #24]
 8004134:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004138:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800413a:	ab21      	add	r3, sp, #132	; 0x84
 800413c:	a902      	add	r1, sp, #8
 800413e:	4628      	mov	r0, r5
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	f000 f869 	bl	8004218 <_svfiprintf_r>
 8004146:	1c43      	adds	r3, r0, #1
 8004148:	bfbc      	itt	lt
 800414a:	238b      	movlt	r3, #139	; 0x8b
 800414c:	602b      	strlt	r3, [r5, #0]
 800414e:	2c00      	cmp	r4, #0
 8004150:	d0dd      	beq.n	800410e <sniprintf+0x16>
 8004152:	9b02      	ldr	r3, [sp, #8]
 8004154:	2200      	movs	r2, #0
 8004156:	701a      	strb	r2, [r3, #0]
 8004158:	e7d9      	b.n	800410e <sniprintf+0x16>
 800415a:	bf00      	nop
 800415c:	20000020 	.word	0x20000020

08004160 <__ssputs_r>:
 8004160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004164:	688e      	ldr	r6, [r1, #8]
 8004166:	429e      	cmp	r6, r3
 8004168:	4682      	mov	sl, r0
 800416a:	460c      	mov	r4, r1
 800416c:	4690      	mov	r8, r2
 800416e:	461f      	mov	r7, r3
 8004170:	d838      	bhi.n	80041e4 <__ssputs_r+0x84>
 8004172:	898a      	ldrh	r2, [r1, #12]
 8004174:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004178:	d032      	beq.n	80041e0 <__ssputs_r+0x80>
 800417a:	6825      	ldr	r5, [r4, #0]
 800417c:	6909      	ldr	r1, [r1, #16]
 800417e:	eba5 0901 	sub.w	r9, r5, r1
 8004182:	6965      	ldr	r5, [r4, #20]
 8004184:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004188:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800418c:	3301      	adds	r3, #1
 800418e:	444b      	add	r3, r9
 8004190:	106d      	asrs	r5, r5, #1
 8004192:	429d      	cmp	r5, r3
 8004194:	bf38      	it	cc
 8004196:	461d      	movcc	r5, r3
 8004198:	0553      	lsls	r3, r2, #21
 800419a:	d531      	bpl.n	8004200 <__ssputs_r+0xa0>
 800419c:	4629      	mov	r1, r5
 800419e:	f000 fb63 	bl	8004868 <_malloc_r>
 80041a2:	4606      	mov	r6, r0
 80041a4:	b950      	cbnz	r0, 80041bc <__ssputs_r+0x5c>
 80041a6:	230c      	movs	r3, #12
 80041a8:	f8ca 3000 	str.w	r3, [sl]
 80041ac:	89a3      	ldrh	r3, [r4, #12]
 80041ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041b2:	81a3      	strh	r3, [r4, #12]
 80041b4:	f04f 30ff 	mov.w	r0, #4294967295
 80041b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041bc:	6921      	ldr	r1, [r4, #16]
 80041be:	464a      	mov	r2, r9
 80041c0:	f000 fabe 	bl	8004740 <memcpy>
 80041c4:	89a3      	ldrh	r3, [r4, #12]
 80041c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ce:	81a3      	strh	r3, [r4, #12]
 80041d0:	6126      	str	r6, [r4, #16]
 80041d2:	6165      	str	r5, [r4, #20]
 80041d4:	444e      	add	r6, r9
 80041d6:	eba5 0509 	sub.w	r5, r5, r9
 80041da:	6026      	str	r6, [r4, #0]
 80041dc:	60a5      	str	r5, [r4, #8]
 80041de:	463e      	mov	r6, r7
 80041e0:	42be      	cmp	r6, r7
 80041e2:	d900      	bls.n	80041e6 <__ssputs_r+0x86>
 80041e4:	463e      	mov	r6, r7
 80041e6:	6820      	ldr	r0, [r4, #0]
 80041e8:	4632      	mov	r2, r6
 80041ea:	4641      	mov	r1, r8
 80041ec:	f000 fab6 	bl	800475c <memmove>
 80041f0:	68a3      	ldr	r3, [r4, #8]
 80041f2:	1b9b      	subs	r3, r3, r6
 80041f4:	60a3      	str	r3, [r4, #8]
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	4433      	add	r3, r6
 80041fa:	6023      	str	r3, [r4, #0]
 80041fc:	2000      	movs	r0, #0
 80041fe:	e7db      	b.n	80041b8 <__ssputs_r+0x58>
 8004200:	462a      	mov	r2, r5
 8004202:	f000 fba5 	bl	8004950 <_realloc_r>
 8004206:	4606      	mov	r6, r0
 8004208:	2800      	cmp	r0, #0
 800420a:	d1e1      	bne.n	80041d0 <__ssputs_r+0x70>
 800420c:	6921      	ldr	r1, [r4, #16]
 800420e:	4650      	mov	r0, sl
 8004210:	f000 fabe 	bl	8004790 <_free_r>
 8004214:	e7c7      	b.n	80041a6 <__ssputs_r+0x46>
	...

08004218 <_svfiprintf_r>:
 8004218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800421c:	4698      	mov	r8, r3
 800421e:	898b      	ldrh	r3, [r1, #12]
 8004220:	061b      	lsls	r3, r3, #24
 8004222:	b09d      	sub	sp, #116	; 0x74
 8004224:	4607      	mov	r7, r0
 8004226:	460d      	mov	r5, r1
 8004228:	4614      	mov	r4, r2
 800422a:	d50e      	bpl.n	800424a <_svfiprintf_r+0x32>
 800422c:	690b      	ldr	r3, [r1, #16]
 800422e:	b963      	cbnz	r3, 800424a <_svfiprintf_r+0x32>
 8004230:	2140      	movs	r1, #64	; 0x40
 8004232:	f000 fb19 	bl	8004868 <_malloc_r>
 8004236:	6028      	str	r0, [r5, #0]
 8004238:	6128      	str	r0, [r5, #16]
 800423a:	b920      	cbnz	r0, 8004246 <_svfiprintf_r+0x2e>
 800423c:	230c      	movs	r3, #12
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	f04f 30ff 	mov.w	r0, #4294967295
 8004244:	e0d1      	b.n	80043ea <_svfiprintf_r+0x1d2>
 8004246:	2340      	movs	r3, #64	; 0x40
 8004248:	616b      	str	r3, [r5, #20]
 800424a:	2300      	movs	r3, #0
 800424c:	9309      	str	r3, [sp, #36]	; 0x24
 800424e:	2320      	movs	r3, #32
 8004250:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004254:	f8cd 800c 	str.w	r8, [sp, #12]
 8004258:	2330      	movs	r3, #48	; 0x30
 800425a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004404 <_svfiprintf_r+0x1ec>
 800425e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004262:	f04f 0901 	mov.w	r9, #1
 8004266:	4623      	mov	r3, r4
 8004268:	469a      	mov	sl, r3
 800426a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800426e:	b10a      	cbz	r2, 8004274 <_svfiprintf_r+0x5c>
 8004270:	2a25      	cmp	r2, #37	; 0x25
 8004272:	d1f9      	bne.n	8004268 <_svfiprintf_r+0x50>
 8004274:	ebba 0b04 	subs.w	fp, sl, r4
 8004278:	d00b      	beq.n	8004292 <_svfiprintf_r+0x7a>
 800427a:	465b      	mov	r3, fp
 800427c:	4622      	mov	r2, r4
 800427e:	4629      	mov	r1, r5
 8004280:	4638      	mov	r0, r7
 8004282:	f7ff ff6d 	bl	8004160 <__ssputs_r>
 8004286:	3001      	adds	r0, #1
 8004288:	f000 80aa 	beq.w	80043e0 <_svfiprintf_r+0x1c8>
 800428c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800428e:	445a      	add	r2, fp
 8004290:	9209      	str	r2, [sp, #36]	; 0x24
 8004292:	f89a 3000 	ldrb.w	r3, [sl]
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 80a2 	beq.w	80043e0 <_svfiprintf_r+0x1c8>
 800429c:	2300      	movs	r3, #0
 800429e:	f04f 32ff 	mov.w	r2, #4294967295
 80042a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042a6:	f10a 0a01 	add.w	sl, sl, #1
 80042aa:	9304      	str	r3, [sp, #16]
 80042ac:	9307      	str	r3, [sp, #28]
 80042ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042b2:	931a      	str	r3, [sp, #104]	; 0x68
 80042b4:	4654      	mov	r4, sl
 80042b6:	2205      	movs	r2, #5
 80042b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042bc:	4851      	ldr	r0, [pc, #324]	; (8004404 <_svfiprintf_r+0x1ec>)
 80042be:	f7fb ff8f 	bl	80001e0 <memchr>
 80042c2:	9a04      	ldr	r2, [sp, #16]
 80042c4:	b9d8      	cbnz	r0, 80042fe <_svfiprintf_r+0xe6>
 80042c6:	06d0      	lsls	r0, r2, #27
 80042c8:	bf44      	itt	mi
 80042ca:	2320      	movmi	r3, #32
 80042cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042d0:	0711      	lsls	r1, r2, #28
 80042d2:	bf44      	itt	mi
 80042d4:	232b      	movmi	r3, #43	; 0x2b
 80042d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042da:	f89a 3000 	ldrb.w	r3, [sl]
 80042de:	2b2a      	cmp	r3, #42	; 0x2a
 80042e0:	d015      	beq.n	800430e <_svfiprintf_r+0xf6>
 80042e2:	9a07      	ldr	r2, [sp, #28]
 80042e4:	4654      	mov	r4, sl
 80042e6:	2000      	movs	r0, #0
 80042e8:	f04f 0c0a 	mov.w	ip, #10
 80042ec:	4621      	mov	r1, r4
 80042ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042f2:	3b30      	subs	r3, #48	; 0x30
 80042f4:	2b09      	cmp	r3, #9
 80042f6:	d94e      	bls.n	8004396 <_svfiprintf_r+0x17e>
 80042f8:	b1b0      	cbz	r0, 8004328 <_svfiprintf_r+0x110>
 80042fa:	9207      	str	r2, [sp, #28]
 80042fc:	e014      	b.n	8004328 <_svfiprintf_r+0x110>
 80042fe:	eba0 0308 	sub.w	r3, r0, r8
 8004302:	fa09 f303 	lsl.w	r3, r9, r3
 8004306:	4313      	orrs	r3, r2
 8004308:	9304      	str	r3, [sp, #16]
 800430a:	46a2      	mov	sl, r4
 800430c:	e7d2      	b.n	80042b4 <_svfiprintf_r+0x9c>
 800430e:	9b03      	ldr	r3, [sp, #12]
 8004310:	1d19      	adds	r1, r3, #4
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	9103      	str	r1, [sp, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	bfbb      	ittet	lt
 800431a:	425b      	neglt	r3, r3
 800431c:	f042 0202 	orrlt.w	r2, r2, #2
 8004320:	9307      	strge	r3, [sp, #28]
 8004322:	9307      	strlt	r3, [sp, #28]
 8004324:	bfb8      	it	lt
 8004326:	9204      	strlt	r2, [sp, #16]
 8004328:	7823      	ldrb	r3, [r4, #0]
 800432a:	2b2e      	cmp	r3, #46	; 0x2e
 800432c:	d10c      	bne.n	8004348 <_svfiprintf_r+0x130>
 800432e:	7863      	ldrb	r3, [r4, #1]
 8004330:	2b2a      	cmp	r3, #42	; 0x2a
 8004332:	d135      	bne.n	80043a0 <_svfiprintf_r+0x188>
 8004334:	9b03      	ldr	r3, [sp, #12]
 8004336:	1d1a      	adds	r2, r3, #4
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	9203      	str	r2, [sp, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	bfb8      	it	lt
 8004340:	f04f 33ff 	movlt.w	r3, #4294967295
 8004344:	3402      	adds	r4, #2
 8004346:	9305      	str	r3, [sp, #20]
 8004348:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004414 <_svfiprintf_r+0x1fc>
 800434c:	7821      	ldrb	r1, [r4, #0]
 800434e:	2203      	movs	r2, #3
 8004350:	4650      	mov	r0, sl
 8004352:	f7fb ff45 	bl	80001e0 <memchr>
 8004356:	b140      	cbz	r0, 800436a <_svfiprintf_r+0x152>
 8004358:	2340      	movs	r3, #64	; 0x40
 800435a:	eba0 000a 	sub.w	r0, r0, sl
 800435e:	fa03 f000 	lsl.w	r0, r3, r0
 8004362:	9b04      	ldr	r3, [sp, #16]
 8004364:	4303      	orrs	r3, r0
 8004366:	3401      	adds	r4, #1
 8004368:	9304      	str	r3, [sp, #16]
 800436a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800436e:	4826      	ldr	r0, [pc, #152]	; (8004408 <_svfiprintf_r+0x1f0>)
 8004370:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004374:	2206      	movs	r2, #6
 8004376:	f7fb ff33 	bl	80001e0 <memchr>
 800437a:	2800      	cmp	r0, #0
 800437c:	d038      	beq.n	80043f0 <_svfiprintf_r+0x1d8>
 800437e:	4b23      	ldr	r3, [pc, #140]	; (800440c <_svfiprintf_r+0x1f4>)
 8004380:	bb1b      	cbnz	r3, 80043ca <_svfiprintf_r+0x1b2>
 8004382:	9b03      	ldr	r3, [sp, #12]
 8004384:	3307      	adds	r3, #7
 8004386:	f023 0307 	bic.w	r3, r3, #7
 800438a:	3308      	adds	r3, #8
 800438c:	9303      	str	r3, [sp, #12]
 800438e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004390:	4433      	add	r3, r6
 8004392:	9309      	str	r3, [sp, #36]	; 0x24
 8004394:	e767      	b.n	8004266 <_svfiprintf_r+0x4e>
 8004396:	fb0c 3202 	mla	r2, ip, r2, r3
 800439a:	460c      	mov	r4, r1
 800439c:	2001      	movs	r0, #1
 800439e:	e7a5      	b.n	80042ec <_svfiprintf_r+0xd4>
 80043a0:	2300      	movs	r3, #0
 80043a2:	3401      	adds	r4, #1
 80043a4:	9305      	str	r3, [sp, #20]
 80043a6:	4619      	mov	r1, r3
 80043a8:	f04f 0c0a 	mov.w	ip, #10
 80043ac:	4620      	mov	r0, r4
 80043ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043b2:	3a30      	subs	r2, #48	; 0x30
 80043b4:	2a09      	cmp	r2, #9
 80043b6:	d903      	bls.n	80043c0 <_svfiprintf_r+0x1a8>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0c5      	beq.n	8004348 <_svfiprintf_r+0x130>
 80043bc:	9105      	str	r1, [sp, #20]
 80043be:	e7c3      	b.n	8004348 <_svfiprintf_r+0x130>
 80043c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80043c4:	4604      	mov	r4, r0
 80043c6:	2301      	movs	r3, #1
 80043c8:	e7f0      	b.n	80043ac <_svfiprintf_r+0x194>
 80043ca:	ab03      	add	r3, sp, #12
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	462a      	mov	r2, r5
 80043d0:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <_svfiprintf_r+0x1f8>)
 80043d2:	a904      	add	r1, sp, #16
 80043d4:	4638      	mov	r0, r7
 80043d6:	f3af 8000 	nop.w
 80043da:	1c42      	adds	r2, r0, #1
 80043dc:	4606      	mov	r6, r0
 80043de:	d1d6      	bne.n	800438e <_svfiprintf_r+0x176>
 80043e0:	89ab      	ldrh	r3, [r5, #12]
 80043e2:	065b      	lsls	r3, r3, #25
 80043e4:	f53f af2c 	bmi.w	8004240 <_svfiprintf_r+0x28>
 80043e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043ea:	b01d      	add	sp, #116	; 0x74
 80043ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f0:	ab03      	add	r3, sp, #12
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	462a      	mov	r2, r5
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <_svfiprintf_r+0x1f8>)
 80043f8:	a904      	add	r1, sp, #16
 80043fa:	4638      	mov	r0, r7
 80043fc:	f000 f87a 	bl	80044f4 <_printf_i>
 8004400:	e7eb      	b.n	80043da <_svfiprintf_r+0x1c2>
 8004402:	bf00      	nop
 8004404:	08004a54 	.word	0x08004a54
 8004408:	08004a5e 	.word	0x08004a5e
 800440c:	00000000 	.word	0x00000000
 8004410:	08004161 	.word	0x08004161
 8004414:	08004a5a 	.word	0x08004a5a

08004418 <_printf_common>:
 8004418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800441c:	4616      	mov	r6, r2
 800441e:	4699      	mov	r9, r3
 8004420:	688a      	ldr	r2, [r1, #8]
 8004422:	690b      	ldr	r3, [r1, #16]
 8004424:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004428:	4293      	cmp	r3, r2
 800442a:	bfb8      	it	lt
 800442c:	4613      	movlt	r3, r2
 800442e:	6033      	str	r3, [r6, #0]
 8004430:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004434:	4607      	mov	r7, r0
 8004436:	460c      	mov	r4, r1
 8004438:	b10a      	cbz	r2, 800443e <_printf_common+0x26>
 800443a:	3301      	adds	r3, #1
 800443c:	6033      	str	r3, [r6, #0]
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	0699      	lsls	r1, r3, #26
 8004442:	bf42      	ittt	mi
 8004444:	6833      	ldrmi	r3, [r6, #0]
 8004446:	3302      	addmi	r3, #2
 8004448:	6033      	strmi	r3, [r6, #0]
 800444a:	6825      	ldr	r5, [r4, #0]
 800444c:	f015 0506 	ands.w	r5, r5, #6
 8004450:	d106      	bne.n	8004460 <_printf_common+0x48>
 8004452:	f104 0a19 	add.w	sl, r4, #25
 8004456:	68e3      	ldr	r3, [r4, #12]
 8004458:	6832      	ldr	r2, [r6, #0]
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	42ab      	cmp	r3, r5
 800445e:	dc26      	bgt.n	80044ae <_printf_common+0x96>
 8004460:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004464:	1e13      	subs	r3, r2, #0
 8004466:	6822      	ldr	r2, [r4, #0]
 8004468:	bf18      	it	ne
 800446a:	2301      	movne	r3, #1
 800446c:	0692      	lsls	r2, r2, #26
 800446e:	d42b      	bmi.n	80044c8 <_printf_common+0xb0>
 8004470:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004474:	4649      	mov	r1, r9
 8004476:	4638      	mov	r0, r7
 8004478:	47c0      	blx	r8
 800447a:	3001      	adds	r0, #1
 800447c:	d01e      	beq.n	80044bc <_printf_common+0xa4>
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	68e5      	ldr	r5, [r4, #12]
 8004482:	6832      	ldr	r2, [r6, #0]
 8004484:	f003 0306 	and.w	r3, r3, #6
 8004488:	2b04      	cmp	r3, #4
 800448a:	bf08      	it	eq
 800448c:	1aad      	subeq	r5, r5, r2
 800448e:	68a3      	ldr	r3, [r4, #8]
 8004490:	6922      	ldr	r2, [r4, #16]
 8004492:	bf0c      	ite	eq
 8004494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004498:	2500      	movne	r5, #0
 800449a:	4293      	cmp	r3, r2
 800449c:	bfc4      	itt	gt
 800449e:	1a9b      	subgt	r3, r3, r2
 80044a0:	18ed      	addgt	r5, r5, r3
 80044a2:	2600      	movs	r6, #0
 80044a4:	341a      	adds	r4, #26
 80044a6:	42b5      	cmp	r5, r6
 80044a8:	d11a      	bne.n	80044e0 <_printf_common+0xc8>
 80044aa:	2000      	movs	r0, #0
 80044ac:	e008      	b.n	80044c0 <_printf_common+0xa8>
 80044ae:	2301      	movs	r3, #1
 80044b0:	4652      	mov	r2, sl
 80044b2:	4649      	mov	r1, r9
 80044b4:	4638      	mov	r0, r7
 80044b6:	47c0      	blx	r8
 80044b8:	3001      	adds	r0, #1
 80044ba:	d103      	bne.n	80044c4 <_printf_common+0xac>
 80044bc:	f04f 30ff 	mov.w	r0, #4294967295
 80044c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044c4:	3501      	adds	r5, #1
 80044c6:	e7c6      	b.n	8004456 <_printf_common+0x3e>
 80044c8:	18e1      	adds	r1, r4, r3
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	2030      	movs	r0, #48	; 0x30
 80044ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044d2:	4422      	add	r2, r4
 80044d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044dc:	3302      	adds	r3, #2
 80044de:	e7c7      	b.n	8004470 <_printf_common+0x58>
 80044e0:	2301      	movs	r3, #1
 80044e2:	4622      	mov	r2, r4
 80044e4:	4649      	mov	r1, r9
 80044e6:	4638      	mov	r0, r7
 80044e8:	47c0      	blx	r8
 80044ea:	3001      	adds	r0, #1
 80044ec:	d0e6      	beq.n	80044bc <_printf_common+0xa4>
 80044ee:	3601      	adds	r6, #1
 80044f0:	e7d9      	b.n	80044a6 <_printf_common+0x8e>
	...

080044f4 <_printf_i>:
 80044f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044f8:	7e0f      	ldrb	r7, [r1, #24]
 80044fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044fc:	2f78      	cmp	r7, #120	; 0x78
 80044fe:	4691      	mov	r9, r2
 8004500:	4680      	mov	r8, r0
 8004502:	460c      	mov	r4, r1
 8004504:	469a      	mov	sl, r3
 8004506:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800450a:	d807      	bhi.n	800451c <_printf_i+0x28>
 800450c:	2f62      	cmp	r7, #98	; 0x62
 800450e:	d80a      	bhi.n	8004526 <_printf_i+0x32>
 8004510:	2f00      	cmp	r7, #0
 8004512:	f000 80d8 	beq.w	80046c6 <_printf_i+0x1d2>
 8004516:	2f58      	cmp	r7, #88	; 0x58
 8004518:	f000 80a3 	beq.w	8004662 <_printf_i+0x16e>
 800451c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004520:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004524:	e03a      	b.n	800459c <_printf_i+0xa8>
 8004526:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800452a:	2b15      	cmp	r3, #21
 800452c:	d8f6      	bhi.n	800451c <_printf_i+0x28>
 800452e:	a101      	add	r1, pc, #4	; (adr r1, 8004534 <_printf_i+0x40>)
 8004530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004534:	0800458d 	.word	0x0800458d
 8004538:	080045a1 	.word	0x080045a1
 800453c:	0800451d 	.word	0x0800451d
 8004540:	0800451d 	.word	0x0800451d
 8004544:	0800451d 	.word	0x0800451d
 8004548:	0800451d 	.word	0x0800451d
 800454c:	080045a1 	.word	0x080045a1
 8004550:	0800451d 	.word	0x0800451d
 8004554:	0800451d 	.word	0x0800451d
 8004558:	0800451d 	.word	0x0800451d
 800455c:	0800451d 	.word	0x0800451d
 8004560:	080046ad 	.word	0x080046ad
 8004564:	080045d1 	.word	0x080045d1
 8004568:	0800468f 	.word	0x0800468f
 800456c:	0800451d 	.word	0x0800451d
 8004570:	0800451d 	.word	0x0800451d
 8004574:	080046cf 	.word	0x080046cf
 8004578:	0800451d 	.word	0x0800451d
 800457c:	080045d1 	.word	0x080045d1
 8004580:	0800451d 	.word	0x0800451d
 8004584:	0800451d 	.word	0x0800451d
 8004588:	08004697 	.word	0x08004697
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	1d1a      	adds	r2, r3, #4
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	602a      	str	r2, [r5, #0]
 8004594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004598:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800459c:	2301      	movs	r3, #1
 800459e:	e0a3      	b.n	80046e8 <_printf_i+0x1f4>
 80045a0:	6820      	ldr	r0, [r4, #0]
 80045a2:	6829      	ldr	r1, [r5, #0]
 80045a4:	0606      	lsls	r6, r0, #24
 80045a6:	f101 0304 	add.w	r3, r1, #4
 80045aa:	d50a      	bpl.n	80045c2 <_printf_i+0xce>
 80045ac:	680e      	ldr	r6, [r1, #0]
 80045ae:	602b      	str	r3, [r5, #0]
 80045b0:	2e00      	cmp	r6, #0
 80045b2:	da03      	bge.n	80045bc <_printf_i+0xc8>
 80045b4:	232d      	movs	r3, #45	; 0x2d
 80045b6:	4276      	negs	r6, r6
 80045b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045bc:	485e      	ldr	r0, [pc, #376]	; (8004738 <_printf_i+0x244>)
 80045be:	230a      	movs	r3, #10
 80045c0:	e019      	b.n	80045f6 <_printf_i+0x102>
 80045c2:	680e      	ldr	r6, [r1, #0]
 80045c4:	602b      	str	r3, [r5, #0]
 80045c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045ca:	bf18      	it	ne
 80045cc:	b236      	sxthne	r6, r6
 80045ce:	e7ef      	b.n	80045b0 <_printf_i+0xbc>
 80045d0:	682b      	ldr	r3, [r5, #0]
 80045d2:	6820      	ldr	r0, [r4, #0]
 80045d4:	1d19      	adds	r1, r3, #4
 80045d6:	6029      	str	r1, [r5, #0]
 80045d8:	0601      	lsls	r1, r0, #24
 80045da:	d501      	bpl.n	80045e0 <_printf_i+0xec>
 80045dc:	681e      	ldr	r6, [r3, #0]
 80045de:	e002      	b.n	80045e6 <_printf_i+0xf2>
 80045e0:	0646      	lsls	r6, r0, #25
 80045e2:	d5fb      	bpl.n	80045dc <_printf_i+0xe8>
 80045e4:	881e      	ldrh	r6, [r3, #0]
 80045e6:	4854      	ldr	r0, [pc, #336]	; (8004738 <_printf_i+0x244>)
 80045e8:	2f6f      	cmp	r7, #111	; 0x6f
 80045ea:	bf0c      	ite	eq
 80045ec:	2308      	moveq	r3, #8
 80045ee:	230a      	movne	r3, #10
 80045f0:	2100      	movs	r1, #0
 80045f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045f6:	6865      	ldr	r5, [r4, #4]
 80045f8:	60a5      	str	r5, [r4, #8]
 80045fa:	2d00      	cmp	r5, #0
 80045fc:	bfa2      	ittt	ge
 80045fe:	6821      	ldrge	r1, [r4, #0]
 8004600:	f021 0104 	bicge.w	r1, r1, #4
 8004604:	6021      	strge	r1, [r4, #0]
 8004606:	b90e      	cbnz	r6, 800460c <_printf_i+0x118>
 8004608:	2d00      	cmp	r5, #0
 800460a:	d04d      	beq.n	80046a8 <_printf_i+0x1b4>
 800460c:	4615      	mov	r5, r2
 800460e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004612:	fb03 6711 	mls	r7, r3, r1, r6
 8004616:	5dc7      	ldrb	r7, [r0, r7]
 8004618:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800461c:	4637      	mov	r7, r6
 800461e:	42bb      	cmp	r3, r7
 8004620:	460e      	mov	r6, r1
 8004622:	d9f4      	bls.n	800460e <_printf_i+0x11a>
 8004624:	2b08      	cmp	r3, #8
 8004626:	d10b      	bne.n	8004640 <_printf_i+0x14c>
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	07de      	lsls	r6, r3, #31
 800462c:	d508      	bpl.n	8004640 <_printf_i+0x14c>
 800462e:	6923      	ldr	r3, [r4, #16]
 8004630:	6861      	ldr	r1, [r4, #4]
 8004632:	4299      	cmp	r1, r3
 8004634:	bfde      	ittt	le
 8004636:	2330      	movle	r3, #48	; 0x30
 8004638:	f805 3c01 	strble.w	r3, [r5, #-1]
 800463c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004640:	1b52      	subs	r2, r2, r5
 8004642:	6122      	str	r2, [r4, #16]
 8004644:	f8cd a000 	str.w	sl, [sp]
 8004648:	464b      	mov	r3, r9
 800464a:	aa03      	add	r2, sp, #12
 800464c:	4621      	mov	r1, r4
 800464e:	4640      	mov	r0, r8
 8004650:	f7ff fee2 	bl	8004418 <_printf_common>
 8004654:	3001      	adds	r0, #1
 8004656:	d14c      	bne.n	80046f2 <_printf_i+0x1fe>
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
 800465c:	b004      	add	sp, #16
 800465e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004662:	4835      	ldr	r0, [pc, #212]	; (8004738 <_printf_i+0x244>)
 8004664:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004668:	6829      	ldr	r1, [r5, #0]
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004670:	6029      	str	r1, [r5, #0]
 8004672:	061d      	lsls	r5, r3, #24
 8004674:	d514      	bpl.n	80046a0 <_printf_i+0x1ac>
 8004676:	07df      	lsls	r7, r3, #31
 8004678:	bf44      	itt	mi
 800467a:	f043 0320 	orrmi.w	r3, r3, #32
 800467e:	6023      	strmi	r3, [r4, #0]
 8004680:	b91e      	cbnz	r6, 800468a <_printf_i+0x196>
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	f023 0320 	bic.w	r3, r3, #32
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	2310      	movs	r3, #16
 800468c:	e7b0      	b.n	80045f0 <_printf_i+0xfc>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	f043 0320 	orr.w	r3, r3, #32
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	2378      	movs	r3, #120	; 0x78
 8004698:	4828      	ldr	r0, [pc, #160]	; (800473c <_printf_i+0x248>)
 800469a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800469e:	e7e3      	b.n	8004668 <_printf_i+0x174>
 80046a0:	0659      	lsls	r1, r3, #25
 80046a2:	bf48      	it	mi
 80046a4:	b2b6      	uxthmi	r6, r6
 80046a6:	e7e6      	b.n	8004676 <_printf_i+0x182>
 80046a8:	4615      	mov	r5, r2
 80046aa:	e7bb      	b.n	8004624 <_printf_i+0x130>
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	6826      	ldr	r6, [r4, #0]
 80046b0:	6961      	ldr	r1, [r4, #20]
 80046b2:	1d18      	adds	r0, r3, #4
 80046b4:	6028      	str	r0, [r5, #0]
 80046b6:	0635      	lsls	r5, r6, #24
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	d501      	bpl.n	80046c0 <_printf_i+0x1cc>
 80046bc:	6019      	str	r1, [r3, #0]
 80046be:	e002      	b.n	80046c6 <_printf_i+0x1d2>
 80046c0:	0670      	lsls	r0, r6, #25
 80046c2:	d5fb      	bpl.n	80046bc <_printf_i+0x1c8>
 80046c4:	8019      	strh	r1, [r3, #0]
 80046c6:	2300      	movs	r3, #0
 80046c8:	6123      	str	r3, [r4, #16]
 80046ca:	4615      	mov	r5, r2
 80046cc:	e7ba      	b.n	8004644 <_printf_i+0x150>
 80046ce:	682b      	ldr	r3, [r5, #0]
 80046d0:	1d1a      	adds	r2, r3, #4
 80046d2:	602a      	str	r2, [r5, #0]
 80046d4:	681d      	ldr	r5, [r3, #0]
 80046d6:	6862      	ldr	r2, [r4, #4]
 80046d8:	2100      	movs	r1, #0
 80046da:	4628      	mov	r0, r5
 80046dc:	f7fb fd80 	bl	80001e0 <memchr>
 80046e0:	b108      	cbz	r0, 80046e6 <_printf_i+0x1f2>
 80046e2:	1b40      	subs	r0, r0, r5
 80046e4:	6060      	str	r0, [r4, #4]
 80046e6:	6863      	ldr	r3, [r4, #4]
 80046e8:	6123      	str	r3, [r4, #16]
 80046ea:	2300      	movs	r3, #0
 80046ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046f0:	e7a8      	b.n	8004644 <_printf_i+0x150>
 80046f2:	6923      	ldr	r3, [r4, #16]
 80046f4:	462a      	mov	r2, r5
 80046f6:	4649      	mov	r1, r9
 80046f8:	4640      	mov	r0, r8
 80046fa:	47d0      	blx	sl
 80046fc:	3001      	adds	r0, #1
 80046fe:	d0ab      	beq.n	8004658 <_printf_i+0x164>
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	079b      	lsls	r3, r3, #30
 8004704:	d413      	bmi.n	800472e <_printf_i+0x23a>
 8004706:	68e0      	ldr	r0, [r4, #12]
 8004708:	9b03      	ldr	r3, [sp, #12]
 800470a:	4298      	cmp	r0, r3
 800470c:	bfb8      	it	lt
 800470e:	4618      	movlt	r0, r3
 8004710:	e7a4      	b.n	800465c <_printf_i+0x168>
 8004712:	2301      	movs	r3, #1
 8004714:	4632      	mov	r2, r6
 8004716:	4649      	mov	r1, r9
 8004718:	4640      	mov	r0, r8
 800471a:	47d0      	blx	sl
 800471c:	3001      	adds	r0, #1
 800471e:	d09b      	beq.n	8004658 <_printf_i+0x164>
 8004720:	3501      	adds	r5, #1
 8004722:	68e3      	ldr	r3, [r4, #12]
 8004724:	9903      	ldr	r1, [sp, #12]
 8004726:	1a5b      	subs	r3, r3, r1
 8004728:	42ab      	cmp	r3, r5
 800472a:	dcf2      	bgt.n	8004712 <_printf_i+0x21e>
 800472c:	e7eb      	b.n	8004706 <_printf_i+0x212>
 800472e:	2500      	movs	r5, #0
 8004730:	f104 0619 	add.w	r6, r4, #25
 8004734:	e7f5      	b.n	8004722 <_printf_i+0x22e>
 8004736:	bf00      	nop
 8004738:	08004a65 	.word	0x08004a65
 800473c:	08004a76 	.word	0x08004a76

08004740 <memcpy>:
 8004740:	440a      	add	r2, r1
 8004742:	4291      	cmp	r1, r2
 8004744:	f100 33ff 	add.w	r3, r0, #4294967295
 8004748:	d100      	bne.n	800474c <memcpy+0xc>
 800474a:	4770      	bx	lr
 800474c:	b510      	push	{r4, lr}
 800474e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004752:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004756:	4291      	cmp	r1, r2
 8004758:	d1f9      	bne.n	800474e <memcpy+0xe>
 800475a:	bd10      	pop	{r4, pc}

0800475c <memmove>:
 800475c:	4288      	cmp	r0, r1
 800475e:	b510      	push	{r4, lr}
 8004760:	eb01 0402 	add.w	r4, r1, r2
 8004764:	d902      	bls.n	800476c <memmove+0x10>
 8004766:	4284      	cmp	r4, r0
 8004768:	4623      	mov	r3, r4
 800476a:	d807      	bhi.n	800477c <memmove+0x20>
 800476c:	1e43      	subs	r3, r0, #1
 800476e:	42a1      	cmp	r1, r4
 8004770:	d008      	beq.n	8004784 <memmove+0x28>
 8004772:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004776:	f803 2f01 	strb.w	r2, [r3, #1]!
 800477a:	e7f8      	b.n	800476e <memmove+0x12>
 800477c:	4402      	add	r2, r0
 800477e:	4601      	mov	r1, r0
 8004780:	428a      	cmp	r2, r1
 8004782:	d100      	bne.n	8004786 <memmove+0x2a>
 8004784:	bd10      	pop	{r4, pc}
 8004786:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800478a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800478e:	e7f7      	b.n	8004780 <memmove+0x24>

08004790 <_free_r>:
 8004790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004792:	2900      	cmp	r1, #0
 8004794:	d044      	beq.n	8004820 <_free_r+0x90>
 8004796:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800479a:	9001      	str	r0, [sp, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	f1a1 0404 	sub.w	r4, r1, #4
 80047a2:	bfb8      	it	lt
 80047a4:	18e4      	addlt	r4, r4, r3
 80047a6:	f000 f913 	bl	80049d0 <__malloc_lock>
 80047aa:	4a1e      	ldr	r2, [pc, #120]	; (8004824 <_free_r+0x94>)
 80047ac:	9801      	ldr	r0, [sp, #4]
 80047ae:	6813      	ldr	r3, [r2, #0]
 80047b0:	b933      	cbnz	r3, 80047c0 <_free_r+0x30>
 80047b2:	6063      	str	r3, [r4, #4]
 80047b4:	6014      	str	r4, [r2, #0]
 80047b6:	b003      	add	sp, #12
 80047b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047bc:	f000 b90e 	b.w	80049dc <__malloc_unlock>
 80047c0:	42a3      	cmp	r3, r4
 80047c2:	d908      	bls.n	80047d6 <_free_r+0x46>
 80047c4:	6825      	ldr	r5, [r4, #0]
 80047c6:	1961      	adds	r1, r4, r5
 80047c8:	428b      	cmp	r3, r1
 80047ca:	bf01      	itttt	eq
 80047cc:	6819      	ldreq	r1, [r3, #0]
 80047ce:	685b      	ldreq	r3, [r3, #4]
 80047d0:	1949      	addeq	r1, r1, r5
 80047d2:	6021      	streq	r1, [r4, #0]
 80047d4:	e7ed      	b.n	80047b2 <_free_r+0x22>
 80047d6:	461a      	mov	r2, r3
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	b10b      	cbz	r3, 80047e0 <_free_r+0x50>
 80047dc:	42a3      	cmp	r3, r4
 80047de:	d9fa      	bls.n	80047d6 <_free_r+0x46>
 80047e0:	6811      	ldr	r1, [r2, #0]
 80047e2:	1855      	adds	r5, r2, r1
 80047e4:	42a5      	cmp	r5, r4
 80047e6:	d10b      	bne.n	8004800 <_free_r+0x70>
 80047e8:	6824      	ldr	r4, [r4, #0]
 80047ea:	4421      	add	r1, r4
 80047ec:	1854      	adds	r4, r2, r1
 80047ee:	42a3      	cmp	r3, r4
 80047f0:	6011      	str	r1, [r2, #0]
 80047f2:	d1e0      	bne.n	80047b6 <_free_r+0x26>
 80047f4:	681c      	ldr	r4, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	6053      	str	r3, [r2, #4]
 80047fa:	4421      	add	r1, r4
 80047fc:	6011      	str	r1, [r2, #0]
 80047fe:	e7da      	b.n	80047b6 <_free_r+0x26>
 8004800:	d902      	bls.n	8004808 <_free_r+0x78>
 8004802:	230c      	movs	r3, #12
 8004804:	6003      	str	r3, [r0, #0]
 8004806:	e7d6      	b.n	80047b6 <_free_r+0x26>
 8004808:	6825      	ldr	r5, [r4, #0]
 800480a:	1961      	adds	r1, r4, r5
 800480c:	428b      	cmp	r3, r1
 800480e:	bf04      	itt	eq
 8004810:	6819      	ldreq	r1, [r3, #0]
 8004812:	685b      	ldreq	r3, [r3, #4]
 8004814:	6063      	str	r3, [r4, #4]
 8004816:	bf04      	itt	eq
 8004818:	1949      	addeq	r1, r1, r5
 800481a:	6021      	streq	r1, [r4, #0]
 800481c:	6054      	str	r4, [r2, #4]
 800481e:	e7ca      	b.n	80047b6 <_free_r+0x26>
 8004820:	b003      	add	sp, #12
 8004822:	bd30      	pop	{r4, r5, pc}
 8004824:	2000013c 	.word	0x2000013c

08004828 <sbrk_aligned>:
 8004828:	b570      	push	{r4, r5, r6, lr}
 800482a:	4e0e      	ldr	r6, [pc, #56]	; (8004864 <sbrk_aligned+0x3c>)
 800482c:	460c      	mov	r4, r1
 800482e:	6831      	ldr	r1, [r6, #0]
 8004830:	4605      	mov	r5, r0
 8004832:	b911      	cbnz	r1, 800483a <sbrk_aligned+0x12>
 8004834:	f000 f8bc 	bl	80049b0 <_sbrk_r>
 8004838:	6030      	str	r0, [r6, #0]
 800483a:	4621      	mov	r1, r4
 800483c:	4628      	mov	r0, r5
 800483e:	f000 f8b7 	bl	80049b0 <_sbrk_r>
 8004842:	1c43      	adds	r3, r0, #1
 8004844:	d00a      	beq.n	800485c <sbrk_aligned+0x34>
 8004846:	1cc4      	adds	r4, r0, #3
 8004848:	f024 0403 	bic.w	r4, r4, #3
 800484c:	42a0      	cmp	r0, r4
 800484e:	d007      	beq.n	8004860 <sbrk_aligned+0x38>
 8004850:	1a21      	subs	r1, r4, r0
 8004852:	4628      	mov	r0, r5
 8004854:	f000 f8ac 	bl	80049b0 <_sbrk_r>
 8004858:	3001      	adds	r0, #1
 800485a:	d101      	bne.n	8004860 <sbrk_aligned+0x38>
 800485c:	f04f 34ff 	mov.w	r4, #4294967295
 8004860:	4620      	mov	r0, r4
 8004862:	bd70      	pop	{r4, r5, r6, pc}
 8004864:	20000140 	.word	0x20000140

08004868 <_malloc_r>:
 8004868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800486c:	1ccd      	adds	r5, r1, #3
 800486e:	f025 0503 	bic.w	r5, r5, #3
 8004872:	3508      	adds	r5, #8
 8004874:	2d0c      	cmp	r5, #12
 8004876:	bf38      	it	cc
 8004878:	250c      	movcc	r5, #12
 800487a:	2d00      	cmp	r5, #0
 800487c:	4607      	mov	r7, r0
 800487e:	db01      	blt.n	8004884 <_malloc_r+0x1c>
 8004880:	42a9      	cmp	r1, r5
 8004882:	d905      	bls.n	8004890 <_malloc_r+0x28>
 8004884:	230c      	movs	r3, #12
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	2600      	movs	r6, #0
 800488a:	4630      	mov	r0, r6
 800488c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004890:	4e2e      	ldr	r6, [pc, #184]	; (800494c <_malloc_r+0xe4>)
 8004892:	f000 f89d 	bl	80049d0 <__malloc_lock>
 8004896:	6833      	ldr	r3, [r6, #0]
 8004898:	461c      	mov	r4, r3
 800489a:	bb34      	cbnz	r4, 80048ea <_malloc_r+0x82>
 800489c:	4629      	mov	r1, r5
 800489e:	4638      	mov	r0, r7
 80048a0:	f7ff ffc2 	bl	8004828 <sbrk_aligned>
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	4604      	mov	r4, r0
 80048a8:	d14d      	bne.n	8004946 <_malloc_r+0xde>
 80048aa:	6834      	ldr	r4, [r6, #0]
 80048ac:	4626      	mov	r6, r4
 80048ae:	2e00      	cmp	r6, #0
 80048b0:	d140      	bne.n	8004934 <_malloc_r+0xcc>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	4631      	mov	r1, r6
 80048b6:	4638      	mov	r0, r7
 80048b8:	eb04 0803 	add.w	r8, r4, r3
 80048bc:	f000 f878 	bl	80049b0 <_sbrk_r>
 80048c0:	4580      	cmp	r8, r0
 80048c2:	d13a      	bne.n	800493a <_malloc_r+0xd2>
 80048c4:	6821      	ldr	r1, [r4, #0]
 80048c6:	3503      	adds	r5, #3
 80048c8:	1a6d      	subs	r5, r5, r1
 80048ca:	f025 0503 	bic.w	r5, r5, #3
 80048ce:	3508      	adds	r5, #8
 80048d0:	2d0c      	cmp	r5, #12
 80048d2:	bf38      	it	cc
 80048d4:	250c      	movcc	r5, #12
 80048d6:	4629      	mov	r1, r5
 80048d8:	4638      	mov	r0, r7
 80048da:	f7ff ffa5 	bl	8004828 <sbrk_aligned>
 80048de:	3001      	adds	r0, #1
 80048e0:	d02b      	beq.n	800493a <_malloc_r+0xd2>
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	442b      	add	r3, r5
 80048e6:	6023      	str	r3, [r4, #0]
 80048e8:	e00e      	b.n	8004908 <_malloc_r+0xa0>
 80048ea:	6822      	ldr	r2, [r4, #0]
 80048ec:	1b52      	subs	r2, r2, r5
 80048ee:	d41e      	bmi.n	800492e <_malloc_r+0xc6>
 80048f0:	2a0b      	cmp	r2, #11
 80048f2:	d916      	bls.n	8004922 <_malloc_r+0xba>
 80048f4:	1961      	adds	r1, r4, r5
 80048f6:	42a3      	cmp	r3, r4
 80048f8:	6025      	str	r5, [r4, #0]
 80048fa:	bf18      	it	ne
 80048fc:	6059      	strne	r1, [r3, #4]
 80048fe:	6863      	ldr	r3, [r4, #4]
 8004900:	bf08      	it	eq
 8004902:	6031      	streq	r1, [r6, #0]
 8004904:	5162      	str	r2, [r4, r5]
 8004906:	604b      	str	r3, [r1, #4]
 8004908:	4638      	mov	r0, r7
 800490a:	f104 060b 	add.w	r6, r4, #11
 800490e:	f000 f865 	bl	80049dc <__malloc_unlock>
 8004912:	f026 0607 	bic.w	r6, r6, #7
 8004916:	1d23      	adds	r3, r4, #4
 8004918:	1af2      	subs	r2, r6, r3
 800491a:	d0b6      	beq.n	800488a <_malloc_r+0x22>
 800491c:	1b9b      	subs	r3, r3, r6
 800491e:	50a3      	str	r3, [r4, r2]
 8004920:	e7b3      	b.n	800488a <_malloc_r+0x22>
 8004922:	6862      	ldr	r2, [r4, #4]
 8004924:	42a3      	cmp	r3, r4
 8004926:	bf0c      	ite	eq
 8004928:	6032      	streq	r2, [r6, #0]
 800492a:	605a      	strne	r2, [r3, #4]
 800492c:	e7ec      	b.n	8004908 <_malloc_r+0xa0>
 800492e:	4623      	mov	r3, r4
 8004930:	6864      	ldr	r4, [r4, #4]
 8004932:	e7b2      	b.n	800489a <_malloc_r+0x32>
 8004934:	4634      	mov	r4, r6
 8004936:	6876      	ldr	r6, [r6, #4]
 8004938:	e7b9      	b.n	80048ae <_malloc_r+0x46>
 800493a:	230c      	movs	r3, #12
 800493c:	603b      	str	r3, [r7, #0]
 800493e:	4638      	mov	r0, r7
 8004940:	f000 f84c 	bl	80049dc <__malloc_unlock>
 8004944:	e7a1      	b.n	800488a <_malloc_r+0x22>
 8004946:	6025      	str	r5, [r4, #0]
 8004948:	e7de      	b.n	8004908 <_malloc_r+0xa0>
 800494a:	bf00      	nop
 800494c:	2000013c 	.word	0x2000013c

08004950 <_realloc_r>:
 8004950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004954:	4680      	mov	r8, r0
 8004956:	4614      	mov	r4, r2
 8004958:	460e      	mov	r6, r1
 800495a:	b921      	cbnz	r1, 8004966 <_realloc_r+0x16>
 800495c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004960:	4611      	mov	r1, r2
 8004962:	f7ff bf81 	b.w	8004868 <_malloc_r>
 8004966:	b92a      	cbnz	r2, 8004974 <_realloc_r+0x24>
 8004968:	f7ff ff12 	bl	8004790 <_free_r>
 800496c:	4625      	mov	r5, r4
 800496e:	4628      	mov	r0, r5
 8004970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004974:	f000 f838 	bl	80049e8 <_malloc_usable_size_r>
 8004978:	4284      	cmp	r4, r0
 800497a:	4607      	mov	r7, r0
 800497c:	d802      	bhi.n	8004984 <_realloc_r+0x34>
 800497e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004982:	d812      	bhi.n	80049aa <_realloc_r+0x5a>
 8004984:	4621      	mov	r1, r4
 8004986:	4640      	mov	r0, r8
 8004988:	f7ff ff6e 	bl	8004868 <_malloc_r>
 800498c:	4605      	mov	r5, r0
 800498e:	2800      	cmp	r0, #0
 8004990:	d0ed      	beq.n	800496e <_realloc_r+0x1e>
 8004992:	42bc      	cmp	r4, r7
 8004994:	4622      	mov	r2, r4
 8004996:	4631      	mov	r1, r6
 8004998:	bf28      	it	cs
 800499a:	463a      	movcs	r2, r7
 800499c:	f7ff fed0 	bl	8004740 <memcpy>
 80049a0:	4631      	mov	r1, r6
 80049a2:	4640      	mov	r0, r8
 80049a4:	f7ff fef4 	bl	8004790 <_free_r>
 80049a8:	e7e1      	b.n	800496e <_realloc_r+0x1e>
 80049aa:	4635      	mov	r5, r6
 80049ac:	e7df      	b.n	800496e <_realloc_r+0x1e>
	...

080049b0 <_sbrk_r>:
 80049b0:	b538      	push	{r3, r4, r5, lr}
 80049b2:	4d06      	ldr	r5, [pc, #24]	; (80049cc <_sbrk_r+0x1c>)
 80049b4:	2300      	movs	r3, #0
 80049b6:	4604      	mov	r4, r0
 80049b8:	4608      	mov	r0, r1
 80049ba:	602b      	str	r3, [r5, #0]
 80049bc:	f7fb fed6 	bl	800076c <_sbrk>
 80049c0:	1c43      	adds	r3, r0, #1
 80049c2:	d102      	bne.n	80049ca <_sbrk_r+0x1a>
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	b103      	cbz	r3, 80049ca <_sbrk_r+0x1a>
 80049c8:	6023      	str	r3, [r4, #0]
 80049ca:	bd38      	pop	{r3, r4, r5, pc}
 80049cc:	20000144 	.word	0x20000144

080049d0 <__malloc_lock>:
 80049d0:	4801      	ldr	r0, [pc, #4]	; (80049d8 <__malloc_lock+0x8>)
 80049d2:	f000 b811 	b.w	80049f8 <__retarget_lock_acquire_recursive>
 80049d6:	bf00      	nop
 80049d8:	20000148 	.word	0x20000148

080049dc <__malloc_unlock>:
 80049dc:	4801      	ldr	r0, [pc, #4]	; (80049e4 <__malloc_unlock+0x8>)
 80049de:	f000 b80c 	b.w	80049fa <__retarget_lock_release_recursive>
 80049e2:	bf00      	nop
 80049e4:	20000148 	.word	0x20000148

080049e8 <_malloc_usable_size_r>:
 80049e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049ec:	1f18      	subs	r0, r3, #4
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	bfbc      	itt	lt
 80049f2:	580b      	ldrlt	r3, [r1, r0]
 80049f4:	18c0      	addlt	r0, r0, r3
 80049f6:	4770      	bx	lr

080049f8 <__retarget_lock_acquire_recursive>:
 80049f8:	4770      	bx	lr

080049fa <__retarget_lock_release_recursive>:
 80049fa:	4770      	bx	lr

080049fc <_init>:
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fe:	bf00      	nop
 8004a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a02:	bc08      	pop	{r3}
 8004a04:	469e      	mov	lr, r3
 8004a06:	4770      	bx	lr

08004a08 <_fini>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	bf00      	nop
 8004a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0e:	bc08      	pop	{r3}
 8004a10:	469e      	mov	lr, r3
 8004a12:	4770      	bx	lr
