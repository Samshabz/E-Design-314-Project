
E-Design.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800c860  0800c860  0001c860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd18  0800cd18  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800cd18  0800cd18  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cd18  0800cd18  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd18  0800cd18  0001cd18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd1c  0800cd1c  0001cd1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800cd20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000264  200001e8  200001e8  000201e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000044c  2000044c  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000157fb  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b6f  00000000  00000000  00035a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d0  00000000  00000000  00038580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010b8  00000000  00000000  00039750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230bc  00000000  00000000  0003a808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000166cf  00000000  00000000  0005d8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6636  00000000  00000000  00073f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a5c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060dc  00000000  00000000  0014a61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c844 	.word	0x0800c844

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800c844 	.word	0x0800c844

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <HAL_UARTEx_RxEventCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



	void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000c98:	b5b0      	push	{r4, r5, r7, lr}
 8000c9a:	b094      	sub	sp, #80	; 0x50
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]

		if (huart->Instance == USART2){
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a3a      	ldr	r2, [pc, #232]	; (8000d94 <HAL_UARTEx_RxEventCallback+0xfc>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d16e      	bne.n	8000d8c <HAL_UARTEx_RxEventCallback+0xf4>


			if (Size==7){
 8000cae:	887b      	ldrh	r3, [r7, #2]
 8000cb0:	2b07      	cmp	r3, #7
 8000cb2:	d11b      	bne.n	8000cec <HAL_UARTEx_RxEventCallback+0x54>
				memcpy(rxReqBuf,rxdata,Size);
 8000cb4:	887b      	ldrh	r3, [r7, #2]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4937      	ldr	r1, [pc, #220]	; (8000d98 <HAL_UARTEx_RxEventCallback+0x100>)
 8000cba:	4838      	ldr	r0, [pc, #224]	; (8000d9c <HAL_UARTEx_RxEventCallback+0x104>)
 8000cbc:	f007 fefa 	bl	8008ab4 <memcpy>
				uint8_t tBuf[21] = "AA7ecognized Command\n";
 8000cc0:	4b37      	ldr	r3, [pc, #220]	; (8000da0 <HAL_UARTEx_RxEventCallback+0x108>)
 8000cc2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000cc6:	461d      	mov	r5, r3
 8000cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ccc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cd0:	6020      	str	r0, [r4, #0]
 8000cd2:	3404      	adds	r4, #4
 8000cd4:	7021      	strb	r1, [r4, #0]
								HAL_UART_Transmit(&huart2, tBuf, 21, 5);
 8000cd6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000cda:	2305      	movs	r3, #5
 8000cdc:	2215      	movs	r2, #21
 8000cde:	4831      	ldr	r0, [pc, #196]	; (8000da4 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000ce0:	f006 fce0 	bl	80076a4 <HAL_UART_Transmit>
				uartmode=2;
 8000ce4:	4b30      	ldr	r3, [pc, #192]	; (8000da8 <HAL_UARTEx_RxEventCallback+0x110>)
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	701a      	strb	r2, [r3, #0]
 8000cea:	e042      	b.n	8000d72 <HAL_UARTEx_RxEventCallback+0xda>

			} else if (Size==19) {
 8000cec:	887b      	ldrh	r3, [r7, #2]
 8000cee:	2b13      	cmp	r3, #19
 8000cf0:	d126      	bne.n	8000d40 <HAL_UARTEx_RxEventCallback+0xa8>

				memcpy(rxSetBuf,rxdata,Size);
 8000cf2:	887b      	ldrh	r3, [r7, #2]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4928      	ldr	r1, [pc, #160]	; (8000d98 <HAL_UARTEx_RxEventCallback+0x100>)
 8000cf8:	482c      	ldr	r0, [pc, #176]	; (8000dac <HAL_UARTEx_RxEventCallback+0x114>)
 8000cfa:	f007 fedb 	bl	8008ab4 <memcpy>
				uint8_t tBuf[21] = "19recognized Command\n";
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x118>)
 8000d00:	f107 0420 	add.w	r4, r7, #32
 8000d04:	461d      	mov	r5, r3
 8000d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d0e:	6020      	str	r0, [r4, #0]
 8000d10:	3404      	adds	r4, #4
 8000d12:	7021      	strb	r1, [r4, #0]
								HAL_UART_Transmit(&huart2, tBuf, 21, 5);
 8000d14:	f107 0120 	add.w	r1, r7, #32
 8000d18:	2305      	movs	r3, #5
 8000d1a:	2215      	movs	r2, #21
 8000d1c:	4821      	ldr	r0, [pc, #132]	; (8000da4 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000d1e:	f006 fcc1 	bl	80076a4 <HAL_UART_Transmit>

				uartmode=1;
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <HAL_UARTEx_RxEventCallback+0x110>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
				sliderold = vinadj;
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2e:	4610      	mov	r0, r2
 8000d30:	4619      	mov	r1, r3
 8000d32:	f7ff ff41 	bl	8000bb8 <__aeabi_d2uiz>
 8000d36:	4603      	mov	r3, r0
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <HAL_UARTEx_RxEventCallback+0x120>)
 8000d3c:	701a      	strb	r2, [r3, #0]
 8000d3e:	e018      	b.n	8000d72 <HAL_UARTEx_RxEventCallback+0xda>
			} else {
				globalsize = Size;
 8000d40:	887b      	ldrh	r3, [r7, #2]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <HAL_UARTEx_RxEventCallback+0x124>)
 8000d46:	701a      	strb	r2, [r3, #0]
				uint8_t tBuf[21] = "Unrecognized Command\n";
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_UARTEx_RxEventCallback+0x128>)
 8000d4a:	f107 0408 	add.w	r4, r7, #8
 8000d4e:	461d      	mov	r5, r3
 8000d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d58:	6020      	str	r0, [r4, #0]
 8000d5a:	3404      	adds	r4, #4
 8000d5c:	7021      	strb	r1, [r4, #0]
				HAL_UART_Transmit(&huart2, tBuf, 21, 5);
 8000d5e:	f107 0108 	add.w	r1, r7, #8
 8000d62:	2305      	movs	r3, #5
 8000d64:	2215      	movs	r2, #21
 8000d66:	480f      	ldr	r0, [pc, #60]	; (8000da4 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000d68:	f006 fc9c 	bl	80076a4 <HAL_UART_Transmit>
				uartmode=0;
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_UARTEx_RxEventCallback+0x110>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
			}


		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f022 0204 	bic.w	r2, r2, #4
 8000d80:	601a      	str	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxdata, 50);
 8000d82:	2232      	movs	r2, #50	; 0x32
 8000d84:	4904      	ldr	r1, [pc, #16]	; (8000d98 <HAL_UARTEx_RxEventCallback+0x100>)
 8000d86:	4807      	ldr	r0, [pc, #28]	; (8000da4 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000d88:	f007 fe0a 	bl	80089a0 <HAL_UARTEx_ReceiveToIdle_DMA>

		}
	}
 8000d8c:	bf00      	nop
 8000d8e:	3750      	adds	r7, #80	; 0x50
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bdb0      	pop	{r4, r5, r7, pc}
 8000d94:	40004400 	.word	0x40004400
 8000d98:	2000037c 	.word	0x2000037c
 8000d9c:	20000414 	.word	0x20000414
 8000da0:	0800c860 	.word	0x0800c860
 8000da4:	200002b4 	.word	0x200002b4
 8000da8:	200003fc 	.word	0x200003fc
 8000dac:	2000041c 	.word	0x2000041c
 8000db0:	0800c878 	.word	0x0800c878
 8000db4:	200003d0 	.word	0x200003d0
 8000db8:	20000430 	.word	0x20000430
 8000dbc:	2000042f 	.word	0x2000042f
 8000dc0:	0800c890 	.word	0x0800c890
 8000dc4:	20000338 	.word	0x20000338

08000dc8 <buttonpressed>:




/////BUTTTONSSSSSS
void buttonpressed(){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

              if ((HAL_GetTick() - tickspr) >= 20){
 8000dcc:	f001 fbe4 	bl	8002598 <HAL_GetTick>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <buttonpressed+0x60>)
 8000dd4:	6812      	ldr	r2, [r2, #0]
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	2b13      	cmp	r3, #19
 8000dda:	f240 81c0 	bls.w	800115e <buttonpressed+0x396>




          //button A9 middle
            	  	  if(prevA9==1 || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1 ){
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <buttonpressed+0x64>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d008      	beq.n	8000df8 <buttonpressed+0x30>
 8000de6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f003 fd0d 	bl	800480c <HAL_GPIO_ReadPin>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d143      	bne.n	8000e80 <buttonpressed+0xb8>
                           if ((prevA9 == 1) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0)){
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <buttonpressed+0x64>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d122      	bne.n	8000e46 <buttonpressed+0x7e>
 8000e00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f003 fd00 	bl	800480c <HAL_GPIO_ReadPin>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d119      	bne.n	8000e46 <buttonpressed+0x7e>

                        	  if (power==1){
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <buttonpressed+0x68>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d10c      	bne.n	8000e34 <buttonpressed+0x6c>
                        		  power=0;
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <buttonpressed+0x68>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
                        		  resetall();
 8000e20:	f000 f9a8 	bl	8001174 <resetall>
 8000e24:	e009      	b.n	8000e3a <buttonpressed+0x72>
 8000e26:	bf00      	nop
 8000e28:	200003b8 	.word	0x200003b8
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000005 	.word	0x20000005
                        	  }
                        	  else {



                        		  power =1;
 8000e34:	4ba8      	ldr	r3, [pc, #672]	; (80010d8 <buttonpressed+0x310>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
                        	  }

                               tickspr = HAL_GetTick();
 8000e3a:	f001 fbad 	bl	8002598 <HAL_GetTick>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	4ba6      	ldr	r3, [pc, #664]	; (80010dc <buttonpressed+0x314>)
 8000e44:	601a      	str	r2, [r3, #0]
                           }

                           if ((prevA9 == 0) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1)){
 8000e46:	4ba6      	ldr	r3, [pc, #664]	; (80010e0 <buttonpressed+0x318>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10e      	bne.n	8000e6c <buttonpressed+0xa4>
 8000e4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e56:	f003 fcd9 	bl	800480c <HAL_GPIO_ReadPin>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d105      	bne.n	8000e6c <buttonpressed+0xa4>
                        	   tickspr = HAL_GetTick();
 8000e60:	f001 fb9a 	bl	8002598 <HAL_GetTick>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b9c      	ldr	r3, [pc, #624]	; (80010dc <buttonpressed+0x314>)
 8000e6a:	601a      	str	r2, [r3, #0]
                           }

              prevA9 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e74:	f003 fcca 	bl	800480c <HAL_GPIO_ReadPin>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b98      	ldr	r3, [pc, #608]	; (80010e0 <buttonpressed+0x318>)
 8000e7e:	701a      	strb	r2, [r3, #0]




            	  	//button A6 top
if((prevA6==1 || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) && power !=0){
 8000e80:	4b98      	ldr	r3, [pc, #608]	; (80010e4 <buttonpressed+0x31c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d007      	beq.n	8000e98 <buttonpressed+0xd0>
 8000e88:	2140      	movs	r1, #64	; 0x40
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f003 fcbd 	bl	800480c <HAL_GPIO_ReadPin>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d13e      	bne.n	8000f16 <buttonpressed+0x14e>
 8000e98:	4b8f      	ldr	r3, [pc, #572]	; (80010d8 <buttonpressed+0x310>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d03a      	beq.n	8000f16 <buttonpressed+0x14e>
     if ((prevA6 == 1) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0)){
 8000ea0:	4b90      	ldr	r3, [pc, #576]	; (80010e4 <buttonpressed+0x31c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d11b      	bne.n	8000ee0 <buttonpressed+0x118>
 8000ea8:	2140      	movs	r1, #64	; 0x40
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eae:	f003 fcad 	bl	800480c <HAL_GPIO_ReadPin>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d113      	bne.n	8000ee0 <buttonpressed+0x118>
      cntA6++;
 8000eb8:	4b8b      	ldr	r3, [pc, #556]	; (80010e8 <buttonpressed+0x320>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	4b89      	ldr	r3, [pc, #548]	; (80010e8 <buttonpressed+0x320>)
 8000ec2:	801a      	strh	r2, [r3, #0]


        if (cntA6==1000){
 8000ec4:	4b88      	ldr	r3, [pc, #544]	; (80010e8 <buttonpressed+0x320>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ecc:	d102      	bne.n	8000ed4 <buttonpressed+0x10c>
        cntA6=0;
 8000ece:	4b86      	ldr	r3, [pc, #536]	; (80010e8 <buttonpressed+0x320>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	801a      	strh	r2, [r3, #0]

        				}


        tickspr = HAL_GetTick();
 8000ed4:	f001 fb60 	bl	8002598 <HAL_GetTick>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b7f      	ldr	r3, [pc, #508]	; (80010dc <buttonpressed+0x314>)
 8000ede:	601a      	str	r2, [r3, #0]
            			}

        if ((prevA6 == 0) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) ){
 8000ee0:	4b80      	ldr	r3, [pc, #512]	; (80010e4 <buttonpressed+0x31c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10d      	bne.n	8000f04 <buttonpressed+0x13c>
 8000ee8:	2140      	movs	r1, #64	; 0x40
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f003 fc8d 	bl	800480c <HAL_GPIO_ReadPin>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d105      	bne.n	8000f04 <buttonpressed+0x13c>
        	tickspr = HAL_GetTick();
 8000ef8:	f001 fb4e 	bl	8002598 <HAL_GetTick>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b76      	ldr	r3, [pc, #472]	; (80010dc <buttonpressed+0x314>)
 8000f02:	601a      	str	r2, [r3, #0]
        																}

prevA6 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8000f04:	2140      	movs	r1, #64	; 0x40
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f003 fc7f 	bl	800480c <HAL_GPIO_ReadPin>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b74      	ldr	r3, [pc, #464]	; (80010e4 <buttonpressed+0x31c>)
 8000f14:	701a      	strb	r2, [r3, #0]




	//button B9 bottom
if((prevB9==1 || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 1) && power !=0){
 8000f16:	4b75      	ldr	r3, [pc, #468]	; (80010ec <buttonpressed+0x324>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d007      	beq.n	8000f2e <buttonpressed+0x166>
 8000f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f22:	4873      	ldr	r0, [pc, #460]	; (80010f0 <buttonpressed+0x328>)
 8000f24:	f003 fc72 	bl	800480c <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d13e      	bne.n	8000fac <buttonpressed+0x1e4>
 8000f2e:	4b6a      	ldr	r3, [pc, #424]	; (80010d8 <buttonpressed+0x310>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d03a      	beq.n	8000fac <buttonpressed+0x1e4>
 if ((prevB9 == 1) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0)){
 8000f36:	4b6d      	ldr	r3, [pc, #436]	; (80010ec <buttonpressed+0x324>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d11b      	bne.n	8000f76 <buttonpressed+0x1ae>
 8000f3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f42:	486b      	ldr	r0, [pc, #428]	; (80010f0 <buttonpressed+0x328>)
 8000f44:	f003 fc62 	bl	800480c <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d113      	bne.n	8000f76 <buttonpressed+0x1ae>
  cntB9++;
 8000f4e:	4b69      	ldr	r3, [pc, #420]	; (80010f4 <buttonpressed+0x32c>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	3301      	adds	r3, #1
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	4b67      	ldr	r3, [pc, #412]	; (80010f4 <buttonpressed+0x32c>)
 8000f58:	801a      	strh	r2, [r3, #0]


    if (cntB9==1000){
 8000f5a:	4b66      	ldr	r3, [pc, #408]	; (80010f4 <buttonpressed+0x32c>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f62:	d102      	bne.n	8000f6a <buttonpressed+0x1a2>
    cntB9=0;
 8000f64:	4b63      	ldr	r3, [pc, #396]	; (80010f4 <buttonpressed+0x32c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	801a      	strh	r2, [r3, #0]

    				}


    tickspr = HAL_GetTick();
 8000f6a:	f001 fb15 	bl	8002598 <HAL_GetTick>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b5a      	ldr	r3, [pc, #360]	; (80010dc <buttonpressed+0x314>)
 8000f74:	601a      	str	r2, [r3, #0]
        			}

    if ((prevB9 == 0) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 1)){
 8000f76:	4b5d      	ldr	r3, [pc, #372]	; (80010ec <buttonpressed+0x324>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10d      	bne.n	8000f9a <buttonpressed+0x1d2>
 8000f7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f82:	485b      	ldr	r0, [pc, #364]	; (80010f0 <buttonpressed+0x328>)
 8000f84:	f003 fc42 	bl	800480c <HAL_GPIO_ReadPin>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d105      	bne.n	8000f9a <buttonpressed+0x1d2>
    	tickspr = HAL_GetTick();
 8000f8e:	f001 fb03 	bl	8002598 <HAL_GetTick>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b51      	ldr	r3, [pc, #324]	; (80010dc <buttonpressed+0x314>)
 8000f98:	601a      	str	r2, [r3, #0]
    																}

prevB9 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 8000f9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f9e:	4854      	ldr	r0, [pc, #336]	; (80010f0 <buttonpressed+0x328>)
 8000fa0:	f003 fc34 	bl	800480c <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b50      	ldr	r3, [pc, #320]	; (80010ec <buttonpressed+0x324>)
 8000faa:	701a      	strb	r2, [r3, #0]



//button B8 left

   if((prevB8==1 || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 1 ) && power !=0){
 8000fac:	4b52      	ldr	r3, [pc, #328]	; (80010f8 <buttonpressed+0x330>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d007      	beq.n	8000fc4 <buttonpressed+0x1fc>
 8000fb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb8:	484d      	ldr	r0, [pc, #308]	; (80010f0 <buttonpressed+0x328>)
 8000fba:	f003 fc27 	bl	800480c <HAL_GPIO_ReadPin>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d149      	bne.n	8001058 <buttonpressed+0x290>
 8000fc4:	4b44      	ldr	r3, [pc, #272]	; (80010d8 <buttonpressed+0x310>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d045      	beq.n	8001058 <buttonpressed+0x290>
       if ((prevB8 == 1) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0)){
 8000fcc:	4b4a      	ldr	r3, [pc, #296]	; (80010f8 <buttonpressed+0x330>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d124      	bne.n	800101e <buttonpressed+0x256>
 8000fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd8:	4845      	ldr	r0, [pc, #276]	; (80010f0 <buttonpressed+0x328>)
 8000fda:	f003 fc17 	bl	800480c <HAL_GPIO_ReadPin>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d11c      	bne.n	800101e <buttonpressed+0x256>
    	   	   	 cntB8++;
 8000fe4:	4b45      	ldr	r3, [pc, #276]	; (80010fc <buttonpressed+0x334>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	4b43      	ldr	r3, [pc, #268]	; (80010fc <buttonpressed+0x334>)
 8000fee:	801a      	strh	r2, [r3, #0]
    	   	   	 emmode=0;
 8000ff0:	4b43      	ldr	r3, [pc, #268]	; (8001100 <buttonpressed+0x338>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
            	 MODE = cntB8%3;
 8000ff6:	4b41      	ldr	r3, [pc, #260]	; (80010fc <buttonpressed+0x334>)
 8000ff8:	881a      	ldrh	r2, [r3, #0]
 8000ffa:	4b42      	ldr	r3, [pc, #264]	; (8001104 <buttonpressed+0x33c>)
 8000ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8001000:	0859      	lsrs	r1, r3, #1
 8001002:	460b      	mov	r3, r1
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	440b      	add	r3, r1
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	b29b      	uxth	r3, r3
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4b3e      	ldr	r3, [pc, #248]	; (8001108 <buttonpressed+0x340>)
 8001010:	701a      	strb	r2, [r3, #0]



            	 //some stuff
            	 tickspr = HAL_GetTick();
 8001012:	f001 fac1 	bl	8002598 <HAL_GetTick>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	4b30      	ldr	r3, [pc, #192]	; (80010dc <buttonpressed+0x314>)
 800101c:	601a      	str	r2, [r3, #0]
            	  }

 if ((prevB8 == 0) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 1)){
 800101e:	4b36      	ldr	r3, [pc, #216]	; (80010f8 <buttonpressed+0x330>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10d      	bne.n	8001042 <buttonpressed+0x27a>
 8001026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102a:	4831      	ldr	r0, [pc, #196]	; (80010f0 <buttonpressed+0x328>)
 800102c:	f003 fbee 	bl	800480c <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b01      	cmp	r3, #1
 8001034:	d105      	bne.n	8001042 <buttonpressed+0x27a>
            tickspr = HAL_GetTick();
 8001036:	f001 faaf 	bl	8002598 <HAL_GetTick>
 800103a:	4603      	mov	r3, r0
 800103c:	461a      	mov	r2, r3
 800103e:	4b27      	ldr	r3, [pc, #156]	; (80010dc <buttonpressed+0x314>)
 8001040:	601a      	str	r2, [r3, #0]
           }

prevB8 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 8001042:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001046:	482a      	ldr	r0, [pc, #168]	; (80010f0 <buttonpressed+0x328>)
 8001048:	f003 fbe0 	bl	800480c <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <buttonpressed+0x330>)
 8001052:	701a      	strb	r2, [r3, #0]
modeset();
 8001054:	f000 fa32 	bl	80014bc <modeset>




   //button A7 right
if((prevA7==1 || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1 )&& power !=0){
 8001058:	4b2c      	ldr	r3, [pc, #176]	; (800110c <buttonpressed+0x344>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d007      	beq.n	8001070 <buttonpressed+0x2a8>
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f003 fbd1 	bl	800480c <HAL_GPIO_ReadPin>
 800106a:	4603      	mov	r3, r0
 800106c:	2b01      	cmp	r3, #1
 800106e:	d176      	bne.n	800115e <buttonpressed+0x396>
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <buttonpressed+0x310>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d072      	beq.n	800115e <buttonpressed+0x396>
if ((prevA7 == 1) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0)){
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <buttonpressed+0x344>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d151      	bne.n	8001124 <buttonpressed+0x35c>
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001086:	f003 fbc1 	bl	800480c <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d149      	bne.n	8001124 <buttonpressed+0x35c>

    	 cntA7++;
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <buttonpressed+0x348>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	b29a      	uxth	r2, r3
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <buttonpressed+0x348>)
 800109a:	801a      	strh	r2, [r3, #0]
    	 emmode++;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <buttonpressed+0x338>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <buttonpressed+0x338>)
 80010a6:	701a      	strb	r2, [r3, #0]
    	 	    		if(emmode==3){
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <buttonpressed+0x338>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d102      	bne.n	80010b6 <buttonpressed+0x2ee>
    	 	    			emmode=0;
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <buttonpressed+0x338>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
    	 	    		}
    	 tickspr = HAL_GetTick();
 80010b6:	f001 fa6f 	bl	8002598 <HAL_GetTick>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <buttonpressed+0x314>)
 80010c0:	601a      	str	r2, [r3, #0]
    	 snprintf(countarr, 5, "%03d\n", cntA7);
 80010c2:	4b13      	ldr	r3, [pc, #76]	; (8001110 <buttonpressed+0x348>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	4a13      	ldr	r2, [pc, #76]	; (8001114 <buttonpressed+0x34c>)
 80010c8:	2105      	movs	r1, #5
 80010ca:	4813      	ldr	r0, [pc, #76]	; (8001118 <buttonpressed+0x350>)
 80010cc:	f008 f972 	bl	80093b4 <sniprintf>
    	HAL_UART_Transmit(&huart2, countarr, 4, 1000);
 80010d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d4:	2204      	movs	r2, #4
 80010d6:	e021      	b.n	800111c <buttonpressed+0x354>
 80010d8:	20000005 	.word	0x20000005
 80010dc:	200003b8 	.word	0x200003b8
 80010e0:	20000000 	.word	0x20000000
 80010e4:	20000003 	.word	0x20000003
 80010e8:	200003c0 	.word	0x200003c0
 80010ec:	20000001 	.word	0x20000001
 80010f0:	48000400 	.word	0x48000400
 80010f4:	200003c4 	.word	0x200003c4
 80010f8:	20000002 	.word	0x20000002
 80010fc:	200003be 	.word	0x200003be
 8001100:	200003e5 	.word	0x200003e5
 8001104:	aaaaaaab 	.word	0xaaaaaaab
 8001108:	200003e4 	.word	0x200003e4
 800110c:	20000004 	.word	0x20000004
 8001110:	200003c2 	.word	0x200003c2
 8001114:	0800c8a8 	.word	0x0800c8a8
 8001118:	200003b0 	.word	0x200003b0
 800111c:	4911      	ldr	r1, [pc, #68]	; (8001164 <buttonpressed+0x39c>)
 800111e:	4812      	ldr	r0, [pc, #72]	; (8001168 <buttonpressed+0x3a0>)
 8001120:	f006 fac0 	bl	80076a4 <HAL_UART_Transmit>
    	  }

if ((prevA7 == 0) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1)){
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <buttonpressed+0x3a4>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10d      	bne.n	8001148 <buttonpressed+0x380>
 800112c:	2180      	movs	r1, #128	; 0x80
 800112e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001132:	f003 fb6b 	bl	800480c <HAL_GPIO_ReadPin>
 8001136:	4603      	mov	r3, r0
 8001138:	2b01      	cmp	r3, #1
 800113a:	d105      	bne.n	8001148 <buttonpressed+0x380>
    tickspr = HAL_GetTick();
 800113c:	f001 fa2c 	bl	8002598 <HAL_GetTick>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <buttonpressed+0x3a8>)
 8001146:	601a      	str	r2, [r3, #0]
   }

prevA7 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114e:	f003 fb5d 	bl	800480c <HAL_GPIO_ReadPin>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <buttonpressed+0x3a4>)
 8001158:	701a      	strb	r2, [r3, #0]
modeset();
 800115a:	f000 f9af 	bl	80014bc <modeset>
}

//end A7


}}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200003b0 	.word	0x200003b0
 8001168:	200002b4 	.word	0x200002b4
 800116c:	20000004 	.word	0x20000004
 8001170:	200003b8 	.word	0x200003b8

08001174 <resetall>:

//end button code



void resetall(){
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
//reset vars


	 tickspr = 0;
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <resetall+0x94>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]

	 cntA9=0;  //A9 is middle
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <resetall+0x98>)
 8001182:	2200      	movs	r2, #0
 8001184:	801a      	strh	r2, [r3, #0]
	 cntB8=0; //left B8
 8001186:	4b22      	ldr	r3, [pc, #136]	; (8001210 <resetall+0x9c>)
 8001188:	2200      	movs	r2, #0
 800118a:	801a      	strh	r2, [r3, #0]
	 cntA6=0;  //A6 is top
 800118c:	4b21      	ldr	r3, [pc, #132]	; (8001214 <resetall+0xa0>)
 800118e:	2200      	movs	r2, #0
 8001190:	801a      	strh	r2, [r3, #0]
	 cntA7=0;   //A7 right
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <resetall+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	801a      	strh	r2, [r3, #0]
	 cntB9=0;  //B9 is bottom
 8001198:	4b20      	ldr	r3, [pc, #128]	; (800121c <resetall+0xa8>)
 800119a:	2200      	movs	r2, #0
 800119c:	801a      	strh	r2, [r3, #0]

	 prevA9=1;
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <resetall+0xac>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
	 prevB9=1;
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <resetall+0xb0>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
	 prevB8=1;
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <resetall+0xb4>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
	 prevA6=1;
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <resetall+0xb8>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
	 prevA7=1;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <resetall+0xbc>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]


	//adc slider
	 val=0; // value of R (digital val 0 to around 4k)
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <resetall+0xc0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
	 vin=0;
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <resetall+0xc4>)
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
	 vinadj=0;
 80011ca:	491c      	ldr	r1, [pc, #112]	; (800123c <resetall+0xc8>)
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	e9c1 2300 	strd	r2, r3, [r1]


	//dac
	 dacout=0;
 80011d8:	4919      	ldr	r1, [pc, #100]	; (8001240 <resetall+0xcc>)
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	e9c1 2300 	strd	r2, r3, [r1]
	 output_voltage = 0;
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <resetall+0xd0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]


	//mode
	 MODE=0;
 80011ec:	4b16      	ldr	r3, [pc, #88]	; (8001248 <resetall+0xd4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
	 emmode=0;
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <resetall+0xd8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]


	//pwm
	 uint16_t pwmval = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	80fb      	strh	r3, [r7, #6]
//redo initializations




}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	200003b8 	.word	0x200003b8
 800120c:	200003bc 	.word	0x200003bc
 8001210:	200003be 	.word	0x200003be
 8001214:	200003c0 	.word	0x200003c0
 8001218:	200003c2 	.word	0x200003c2
 800121c:	200003c4 	.word	0x200003c4
 8001220:	20000000 	.word	0x20000000
 8001224:	20000001 	.word	0x20000001
 8001228:	20000002 	.word	0x20000002
 800122c:	20000003 	.word	0x20000003
 8001230:	20000004 	.word	0x20000004
 8001234:	200003c8 	.word	0x200003c8
 8001238:	200003cc 	.word	0x200003cc
 800123c:	200003d0 	.word	0x200003d0
 8001240:	200003d8 	.word	0x200003d8
 8001244:	200003e0 	.word	0x200003e0
 8001248:	200003e4 	.word	0x200003e4
 800124c:	200003e5 	.word	0x200003e5

08001250 <dacset>:





void dacset(){
 8001250:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001254:	af00      	add	r7, sp, #0


	//start
	  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001256:	2100      	movs	r1, #0
 8001258:	488f      	ldr	r0, [pc, #572]	; (8001498 <dacset+0x248>)
 800125a:	f002 fe27 	bl	8003eac <HAL_DAC_Start>
	  HAL_ADC_Start(&hadc1);
 800125e:	488f      	ldr	r0, [pc, #572]	; (800149c <dacset+0x24c>)
 8001260:	f001 fbbe 	bl	80029e0 <HAL_ADC_Start>
	//adc

	//HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);   //check if NEEDED
	//adc read
	 val = HAL_ADC_GetValue(&hadc1);
 8001264:	488d      	ldr	r0, [pc, #564]	; (800149c <dacset+0x24c>)
 8001266:	f001 fcd1 	bl	8002c0c <HAL_ADC_GetValue>
 800126a:	4603      	mov	r3, r0
 800126c:	4a8c      	ldr	r2, [pc, #560]	; (80014a0 <dacset+0x250>)
 800126e:	6013      	str	r3, [r2, #0]
	  vin = val * (3.3) / (pow(2,12)-1);
 8001270:	4b8b      	ldr	r3, [pc, #556]	; (80014a0 <dacset+0x250>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f94d 	bl	8000514 <__aeabi_ui2d>
 800127a:	a371      	add	r3, pc, #452	; (adr r3, 8001440 <dacset+0x1f0>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f7ff f9c2 	bl	8000608 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	a36e      	add	r3, pc, #440	; (adr r3, 8001448 <dacset+0x1f8>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	f7ff fae3 	bl	800085c <__aeabi_ddiv>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff fcab 	bl	8000bf8 <__aeabi_d2f>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4a7f      	ldr	r2, [pc, #508]	; (80014a4 <dacset+0x254>)
 80012a6:	6013      	str	r3, [r2, #0]
	  //scale ADC
	 vinadj = vin*(1.18 + -0.0436*vin + 1.72*(pow(vin,2))/1000);
 80012a8:	4b7e      	ldr	r3, [pc, #504]	; (80014a4 <dacset+0x254>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f953 	bl	8000558 <__aeabi_f2d>
 80012b2:	4604      	mov	r4, r0
 80012b4:	460d      	mov	r5, r1
 80012b6:	4b7b      	ldr	r3, [pc, #492]	; (80014a4 <dacset+0x254>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f94c 	bl	8000558 <__aeabi_f2d>
 80012c0:	a363      	add	r3, pc, #396	; (adr r3, 8001450 <dacset+0x200>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f99f 	bl	8000608 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	a361      	add	r3, pc, #388	; (adr r3, 8001458 <dacset+0x208>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7fe ffe0 	bl	800029c <__adddf3>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4690      	mov	r8, r2
 80012e2:	4699      	mov	r9, r3
 80012e4:	4b6f      	ldr	r3, [pc, #444]	; (80014a4 <dacset+0x254>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f935 	bl	8000558 <__aeabi_f2d>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 8001460 <dacset+0x210>
 80012f6:	ec43 2b10 	vmov	d0, r2, r3
 80012fa:	f00a fb87 	bl	800ba0c <pow>
 80012fe:	ec51 0b10 	vmov	r0, r1, d0
 8001302:	a359      	add	r3, pc, #356	; (adr r3, 8001468 <dacset+0x218>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	f7ff f97e 	bl	8000608 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b63      	ldr	r3, [pc, #396]	; (80014a8 <dacset+0x258>)
 800131a:	f7ff fa9f 	bl	800085c <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4640      	mov	r0, r8
 8001324:	4649      	mov	r1, r9
 8001326:	f7fe ffb9 	bl	800029c <__adddf3>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4620      	mov	r0, r4
 8001330:	4629      	mov	r1, r5
 8001332:	f7ff f969 	bl	8000608 <__aeabi_dmul>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	495c      	ldr	r1, [pc, #368]	; (80014ac <dacset+0x25c>)
 800133c:	e9c1 2300 	strd	r2, r3, [r1]
	 //truncate adc
	 if (vinadj>3.28){
 8001340:	4b5a      	ldr	r3, [pc, #360]	; (80014ac <dacset+0x25c>)
 8001342:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001346:	a34a      	add	r3, pc, #296	; (adr r3, 8001470 <dacset+0x220>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7ff fbec 	bl	8000b28 <__aeabi_dcmpgt>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d005      	beq.n	8001362 <dacset+0x112>
		 vinadj=3.30;
 8001356:	4955      	ldr	r1, [pc, #340]	; (80014ac <dacset+0x25c>)
 8001358:	a339      	add	r3, pc, #228	; (adr r3, 8001440 <dacset+0x1f0>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	e9c1 2300 	strd	r2, r3, [r1]


	  //DAC out:

	  //scale dac val
	  dacout = vinadj *( 1.01 + 0.0184*vinadj - 5.15*pow(vinadj,2)/1000);
 8001362:	4b52      	ldr	r3, [pc, #328]	; (80014ac <dacset+0x25c>)
 8001364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001368:	a343      	add	r3, pc, #268	; (adr r3, 8001478 <dacset+0x228>)
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	f7ff f94b 	bl	8000608 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	a341      	add	r3, pc, #260	; (adr r3, 8001480 <dacset+0x230>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7fe ff8c 	bl	800029c <__adddf3>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4614      	mov	r4, r2
 800138a:	461d      	mov	r5, r3
 800138c:	4b47      	ldr	r3, [pc, #284]	; (80014ac <dacset+0x25c>)
 800138e:	ed93 7b00 	vldr	d7, [r3]
 8001392:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8001460 <dacset+0x210>
 8001396:	eeb0 0a47 	vmov.f32	s0, s14
 800139a:	eef0 0a67 	vmov.f32	s1, s15
 800139e:	f00a fb35 	bl	800ba0c <pow>
 80013a2:	ec51 0b10 	vmov	r0, r1, d0
 80013a6:	a338      	add	r3, pc, #224	; (adr r3, 8001488 <dacset+0x238>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7ff f92c 	bl	8000608 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b3a      	ldr	r3, [pc, #232]	; (80014a8 <dacset+0x258>)
 80013be:	f7ff fa4d 	bl	800085c <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4620      	mov	r0, r4
 80013c8:	4629      	mov	r1, r5
 80013ca:	f7fe ff65 	bl	8000298 <__aeabi_dsub>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	4b35      	ldr	r3, [pc, #212]	; (80014ac <dacset+0x25c>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7ff f914 	bl	8000608 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4932      	ldr	r1, [pc, #200]	; (80014b0 <dacset+0x260>)
 80013e6:	e9c1 2300 	strd	r2, r3, [r1]

	  //dac to digital value
	  if (flagstat!=1){
 80013ea:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <dacset+0x264>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d010      	beq.n	8001414 <dacset+0x1c4>
	  output_voltage = (uint32_t)((4095.0/3.30)*dacout);
 80013f2:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <dacset+0x260>)
 80013f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f8:	a325      	add	r3, pc, #148	; (adr r3, 8001490 <dacset+0x240>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff f903 	bl	8000608 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fbd5 	bl	8000bb8 <__aeabi_d2uiz>
 800140e:	4603      	mov	r3, r0
 8001410:	4a29      	ldr	r2, [pc, #164]	; (80014b8 <dacset+0x268>)
 8001412:	6013      	str	r3, [r2, #0]
	  }
	  //truncate digital out
	  if (output_voltage > 4095){
 8001414:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <dacset+0x268>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800141c:	d303      	bcc.n	8001426 <dacset+0x1d6>
		  output_voltage =4095;
 800141e:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <dacset+0x268>)
 8001420:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001424:	601a      	str	r2, [r3, #0]
	  }


	  //output dac
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, output_voltage);
 8001426:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <dacset+0x268>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	481a      	ldr	r0, [pc, #104]	; (8001498 <dacset+0x248>)
 8001430:	f002 fd17 	bl	8003e62 <HAL_DAC_SetValue>



}
 8001434:	bf00      	nop
 8001436:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800143a:	bf00      	nop
 800143c:	f3af 8000 	nop.w
 8001440:	66666666 	.word	0x66666666
 8001444:	400a6666 	.word	0x400a6666
 8001448:	00000000 	.word	0x00000000
 800144c:	40affe00 	.word	0x40affe00
 8001450:	3c361134 	.word	0x3c361134
 8001454:	bfa652bd 	.word	0xbfa652bd
 8001458:	ae147ae1 	.word	0xae147ae1
 800145c:	3ff2e147 	.word	0x3ff2e147
 8001460:	00000000 	.word	0x00000000
 8001464:	40000000 	.word	0x40000000
 8001468:	b851eb85 	.word	0xb851eb85
 800146c:	3ffb851e 	.word	0x3ffb851e
 8001470:	a3d70a3d 	.word	0xa3d70a3d
 8001474:	400a3d70 	.word	0x400a3d70
 8001478:	18fc5048 	.word	0x18fc5048
 800147c:	3f92d773 	.word	0x3f92d773
 8001480:	c28f5c29 	.word	0xc28f5c29
 8001484:	3ff028f5 	.word	0x3ff028f5
 8001488:	9999999a 	.word	0x9999999a
 800148c:	40149999 	.word	0x40149999
 8001490:	e8ba2e8c 	.word	0xe8ba2e8c
 8001494:	409363a2 	.word	0x409363a2
 8001498:	20000254 	.word	0x20000254
 800149c:	20000204 	.word	0x20000204
 80014a0:	200003c8 	.word	0x200003c8
 80014a4:	200003cc 	.word	0x200003cc
 80014a8:	408f4000 	.word	0x408f4000
 80014ac:	200003d0 	.word	0x200003d0
 80014b0:	200003d8 	.word	0x200003d8
 80014b4:	200003fa 	.word	0x200003fa
 80014b8:	200003e0 	.word	0x200003e0

080014bc <modeset>:





void modeset(){
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0

	if (MODE ==0){
 80014c0:	4b27      	ldr	r3, [pc, #156]	; (8001560 <modeset+0xa4>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d116      	bne.n	80014f6 <modeset+0x3a>
		//PA10 position 1 from left
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f003 f9b3 	bl	800483c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014dc:	4821      	ldr	r0, [pc, #132]	; (8001564 <modeset+0xa8>)
 80014de:	f003 f9ad 	bl	800483c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2110      	movs	r1, #16
 80014e6:	481f      	ldr	r0, [pc, #124]	; (8001564 <modeset+0xa8>)
 80014e8:	f003 f9a8 	bl	800483c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2120      	movs	r1, #32
 80014f0:	481c      	ldr	r0, [pc, #112]	; (8001564 <modeset+0xa8>)
 80014f2:	f003 f9a3 	bl	800483c <HAL_GPIO_WritePin>

	}

	if (MODE ==1){
 80014f6:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <modeset+0xa4>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d113      	bne.n	8001526 <modeset+0x6a>
		//PB4 position 3 from left
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001508:	f003 f998 	bl	800483c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800150c:	2201      	movs	r2, #1
 800150e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001512:	4814      	ldr	r0, [pc, #80]	; (8001564 <modeset+0xa8>)
 8001514:	f003 f992 	bl	800483c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	2110      	movs	r1, #16
 800151c:	4811      	ldr	r0, [pc, #68]	; (8001564 <modeset+0xa8>)
 800151e:	f003 f98d 	bl	800483c <HAL_GPIO_WritePin>


	    emergencyset();  //if mode 2nd on else off
 8001522:	f000 f821 	bl	8001568 <emergencyset>


		}


	if (MODE ==2){
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <modeset+0xa4>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d116      	bne.n	800155c <modeset+0xa0>
		//PB10 position 2 from left
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001538:	f003 f980 	bl	800483c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001542:	4808      	ldr	r0, [pc, #32]	; (8001564 <modeset+0xa8>)
 8001544:	f003 f97a 	bl	800483c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	2110      	movs	r1, #16
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <modeset+0xa8>)
 800154e:	f003 f975 	bl	800483c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	2120      	movs	r1, #32
 8001556:	4803      	ldr	r0, [pc, #12]	; (8001564 <modeset+0xa8>)
 8001558:	f003 f970 	bl	800483c <HAL_GPIO_WritePin>

		}


}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200003e4 	.word	0x200003e4
 8001564:	48000400 	.word	0x48000400

08001568 <emergencyset>:


void emergencyset(){
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	if (emmode==2){
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <emergencyset+0x28>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d105      	bne.n	8001580 <emergencyset+0x18>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001574:	2201      	movs	r2, #1
 8001576:	2120      	movs	r1, #32
 8001578:	4806      	ldr	r0, [pc, #24]	; (8001594 <emergencyset+0x2c>)
 800157a:	f003 f95f 	bl	800483c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
	}



}
 800157e:	e004      	b.n	800158a <emergencyset+0x22>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2120      	movs	r1, #32
 8001584:	4803      	ldr	r0, [pc, #12]	; (8001594 <emergencyset+0x2c>)
 8001586:	f003 f959 	bl	800483c <HAL_GPIO_WritePin>
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200003e5 	.word	0x200003e5
 8001594:	48000400 	.word	0x48000400

08001598 <pwmset>:

void pwmset(){
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0

	  pwmval=(uint32_t)(((double)output_voltage)*1000/4095);
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <pwmset+0x58>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffb7 	bl	8000514 <__aeabi_ui2d>
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <pwmset+0x5c>)
 80015ac:	f7ff f82c 	bl	8000608 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	a30b      	add	r3, pc, #44	; (adr r3, 80015e8 <pwmset+0x50>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7ff f94d 	bl	800085c <__aeabi_ddiv>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff faf5 	bl	8000bb8 <__aeabi_d2uiz>
 80015ce:	4603      	mov	r3, r0
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <pwmset+0x60>)
 80015d4:	801a      	strh	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwmval);
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <pwmset+0x60>)
 80015d8:	881a      	ldrh	r2, [r3, #0]
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <pwmset+0x64>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	641a      	str	r2, [r3, #64]	; 0x40

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	f3af 8000 	nop.w
 80015e8:	00000000 	.word	0x00000000
 80015ec:	40affe00 	.word	0x40affe00
 80015f0:	200003e0 	.word	0x200003e0
 80015f4:	408f4000 	.word	0x408f4000
 80015f8:	200003e6 	.word	0x200003e6
 80015fc:	20000268 	.word	0x20000268

08001600 <uartdecode>:


void uartdecode(){
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0

	//param flags



	if (rxSetBuf[0] == '#' && rxSetBuf[17]=='$' && (rxSetBuf[18]=='\n' || rxSetBuf[18]==0b00001010 ) && rxSetBuf[2]=='M'){
 8001604:	4b56      	ldr	r3, [pc, #344]	; (8001760 <uartdecode+0x160>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b23      	cmp	r3, #35	; 0x23
 800160a:	d112      	bne.n	8001632 <uartdecode+0x32>
 800160c:	4b54      	ldr	r3, [pc, #336]	; (8001760 <uartdecode+0x160>)
 800160e:	7c5b      	ldrb	r3, [r3, #17]
 8001610:	2b24      	cmp	r3, #36	; 0x24
 8001612:	d10e      	bne.n	8001632 <uartdecode+0x32>
 8001614:	4b52      	ldr	r3, [pc, #328]	; (8001760 <uartdecode+0x160>)
 8001616:	7c9b      	ldrb	r3, [r3, #18]
 8001618:	2b0a      	cmp	r3, #10
 800161a:	d003      	beq.n	8001624 <uartdecode+0x24>
 800161c:	4b50      	ldr	r3, [pc, #320]	; (8001760 <uartdecode+0x160>)
 800161e:	7c9b      	ldrb	r3, [r3, #18]
 8001620:	2b0a      	cmp	r3, #10
 8001622:	d106      	bne.n	8001632 <uartdecode+0x32>
 8001624:	4b4e      	ldr	r3, [pc, #312]	; (8001760 <uartdecode+0x160>)
 8001626:	789b      	ldrb	r3, [r3, #2]
 8001628:	2b4d      	cmp	r3, #77	; 0x4d
 800162a:	d102      	bne.n	8001632 <uartdecode+0x32>
		flagstat=1;
 800162c:	4b4d      	ldr	r3, [pc, #308]	; (8001764 <uartdecode+0x164>)
 800162e:	2201      	movs	r2, #1
 8001630:	801a      	strh	r2, [r3, #0]
	}
	flagstat=1;
 8001632:	4b4c      	ldr	r3, [pc, #304]	; (8001764 <uartdecode+0x164>)
 8001634:	2201      	movs	r2, #1
 8001636:	801a      	strh	r2, [r3, #0]



	memcpy(statepara, &rxSetBuf[13], 3);
 8001638:	2203      	movs	r2, #3
 800163a:	494b      	ldr	r1, [pc, #300]	; (8001768 <uartdecode+0x168>)
 800163c:	484b      	ldr	r0, [pc, #300]	; (800176c <uartdecode+0x16c>)
 800163e:	f007 fa39 	bl	8008ab4 <memcpy>
	statepara[3] = '\0';
 8001642:	4b4a      	ldr	r3, [pc, #296]	; (800176c <uartdecode+0x16c>)
 8001644:	2200      	movs	r2, #0
 8001646:	70da      	strb	r2, [r3, #3]
	stateval = ((double)atoi(statepara));
 8001648:	4848      	ldr	r0, [pc, #288]	; (800176c <uartdecode+0x16c>)
 800164a:	f007 fa04 	bl	8008a56 <atoi>
 800164e:	4603      	mov	r3, r0
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff6f 	bl	8000534 <__aeabi_i2d>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f7ff faab 	bl	8000bb8 <__aeabi_d2uiz>
 8001662:	4603      	mov	r3, r0
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b42      	ldr	r3, [pc, #264]	; (8001770 <uartdecode+0x170>)
 8001668:	801a      	strh	r2, [r3, #0]


		memcpy(par1, &rxSetBuf[5], 3);
 800166a:	2203      	movs	r2, #3
 800166c:	4941      	ldr	r1, [pc, #260]	; (8001774 <uartdecode+0x174>)
 800166e:	4842      	ldr	r0, [pc, #264]	; (8001778 <uartdecode+0x178>)
 8001670:	f007 fa20 	bl	8008ab4 <memcpy>
		par1[3] = '\0';
 8001674:	4b40      	ldr	r3, [pc, #256]	; (8001778 <uartdecode+0x178>)
 8001676:	2200      	movs	r2, #0
 8001678:	70da      	strb	r2, [r3, #3]
		p1val = ((double)atoi(par1));
 800167a:	483f      	ldr	r0, [pc, #252]	; (8001778 <uartdecode+0x178>)
 800167c:	f007 f9eb 	bl	8008a56 <atoi>
 8001680:	4603      	mov	r3, r0
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff56 	bl	8000534 <__aeabi_i2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f7ff fa92 	bl	8000bb8 <__aeabi_d2uiz>
 8001694:	4603      	mov	r3, r0
 8001696:	b29a      	uxth	r2, r3
 8001698:	4b38      	ldr	r3, [pc, #224]	; (800177c <uartdecode+0x17c>)
 800169a:	801a      	strh	r2, [r3, #0]



		memcpy(par2, &rxSetBuf[9], 3);
 800169c:	2203      	movs	r2, #3
 800169e:	4938      	ldr	r1, [pc, #224]	; (8001780 <uartdecode+0x180>)
 80016a0:	4838      	ldr	r0, [pc, #224]	; (8001784 <uartdecode+0x184>)
 80016a2:	f007 fa07 	bl	8008ab4 <memcpy>
			par2[3] = '\0';
 80016a6:	4b37      	ldr	r3, [pc, #220]	; (8001784 <uartdecode+0x184>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	70da      	strb	r2, [r3, #3]
			p2val = ((double)atoi(par2));
 80016ac:	4835      	ldr	r0, [pc, #212]	; (8001784 <uartdecode+0x184>)
 80016ae:	f007 f9d2 	bl	8008a56 <atoi>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe ff3d 	bl	8000534 <__aeabi_i2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff fa79 	bl	8000bb8 <__aeabi_d2uiz>
 80016c6:	4603      	mov	r3, r0
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	4b2f      	ldr	r3, [pc, #188]	; (8001788 <uartdecode+0x188>)
 80016cc:	801a      	strh	r2, [r3, #0]



	//MODE 1

	if(rxSetBuf[3] == 'F' ){
 80016ce:	4b24      	ldr	r3, [pc, #144]	; (8001760 <uartdecode+0x160>)
 80016d0:	78db      	ldrb	r3, [r3, #3]
 80016d2:	2b46      	cmp	r3, #70	; 0x46
 80016d4:	d125      	bne.n	8001722 <uartdecode+0x122>
	MODE =0;
 80016d6:	4b2d      	ldr	r3, [pc, #180]	; (800178c <uartdecode+0x18c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]

	output_voltage =(uint32_t) (4095*(((double)atoi(par1))/512.0));
 80016dc:	4826      	ldr	r0, [pc, #152]	; (8001778 <uartdecode+0x178>)
 80016de:	f007 f9ba 	bl	8008a56 <atoi>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff25 	bl	8000534 <__aeabi_i2d>
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80016f2:	f7ff f8b3 	bl	800085c <__aeabi_ddiv>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	a316      	add	r3, pc, #88	; (adr r3, 8001758 <uartdecode+0x158>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe ff80 	bl	8000608 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff fa52 	bl	8000bb8 <__aeabi_d2uiz>
 8001714:	4603      	mov	r3, r0
 8001716:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <uartdecode+0x190>)
 8001718:	6013      	str	r3, [r2, #0]

	dacset();
 800171a:	f7ff fd99 	bl	8001250 <dacset>
	pwmset();
 800171e:	f7ff ff3b 	bl	8001598 <pwmset>


	}

	//MODE 2
	if(rxSetBuf[3] == 'E' ){
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <uartdecode+0x160>)
 8001724:	78db      	ldrb	r3, [r3, #3]
 8001726:	2b45      	cmp	r3, #69	; 0x45
 8001728:	d10b      	bne.n	8001742 <uartdecode+0x142>
	MODE =1;
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <uartdecode+0x18c>)
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]


		 output_voltage = p1val;
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <uartdecode+0x17c>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <uartdecode+0x190>)
 8001738:	601a      	str	r2, [r3, #0]
		dacset();
 800173a:	f7ff fd89 	bl	8001250 <dacset>
		pwmset();
 800173e:	f7ff ff2b 	bl	8001598 <pwmset>

	}


	//MODE 3
	if(rxSetBuf[3] == 'M' ){
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <uartdecode+0x160>)
 8001744:	78db      	ldrb	r3, [r3, #3]
 8001746:	2b4d      	cmp	r3, #77	; 0x4d
 8001748:	d102      	bne.n	8001750 <uartdecode+0x150>
	MODE =2;
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <uartdecode+0x18c>)
 800174c:	2202      	movs	r2, #2
 800174e:	701a      	strb	r2, [r3, #0]





}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	f3af 8000 	nop.w
 8001758:	00000000 	.word	0x00000000
 800175c:	40affe00 	.word	0x40affe00
 8001760:	2000041c 	.word	0x2000041c
 8001764:	200003fa 	.word	0x200003fa
 8001768:	20000429 	.word	0x20000429
 800176c:	200003e8 	.word	0x200003e8
 8001770:	200003f4 	.word	0x200003f4
 8001774:	20000421 	.word	0x20000421
 8001778:	200003ec 	.word	0x200003ec
 800177c:	200003f6 	.word	0x200003f6
 8001780:	20000425 	.word	0x20000425
 8001784:	200003f0 	.word	0x200003f0
 8001788:	200003f8 	.word	0x200003f8
 800178c:	200003e4 	.word	0x200003e4
 8001790:	200003e0 	.word	0x200003e0

08001794 <uartencode>:

void uartencode(){
 8001794:	b5b0      	push	{r4, r5, r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0

	 // Initialize to all zeros

	uint8_t tBuf[21] = "inarrognized Command\n";
 800179a:	4b32      	ldr	r3, [pc, #200]	; (8001864 <uartencode+0xd0>)
 800179c:	463c      	mov	r4, r7
 800179e:	461d      	mov	r5, r3
 80017a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017a8:	6020      	str	r0, [r4, #0]
 80017aa:	3404      	adds	r4, #4
 80017ac:	7021      	strb	r1, [r4, #0]
					HAL_UART_Transmit(&huart2, tBuf, 21, 5);
 80017ae:	4639      	mov	r1, r7
 80017b0:	2305      	movs	r3, #5
 80017b2:	2215      	movs	r2, #21
 80017b4:	482c      	ldr	r0, [pc, #176]	; (8001868 <uartencode+0xd4>)
 80017b6:	f005 ff75 	bl	80076a4 <HAL_UART_Transmit>
	// Use sprintf() to format the integer as a string and store it in the totransmit array
	sprintf(&statusarr[5], "%03d", p1val);
 80017ba:	4b2c      	ldr	r3, [pc, #176]	; (800186c <uartencode+0xd8>)
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	492b      	ldr	r1, [pc, #172]	; (8001870 <uartencode+0xdc>)
 80017c2:	482c      	ldr	r0, [pc, #176]	; (8001874 <uartencode+0xe0>)
 80017c4:	f007 fe2a 	bl	800941c <siprintf>
	sprintf(&statusarr[9], "%03d", p2val);
 80017c8:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <uartencode+0xe4>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4928      	ldr	r1, [pc, #160]	; (8001870 <uartencode+0xdc>)
 80017d0:	482a      	ldr	r0, [pc, #168]	; (800187c <uartencode+0xe8>)
 80017d2:	f007 fe23 	bl	800941c <siprintf>
	sprintf(&statusarr[13], "%03d", stateval);
 80017d6:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <uartencode+0xec>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	4924      	ldr	r1, [pc, #144]	; (8001870 <uartencode+0xdc>)
 80017de:	4829      	ldr	r0, [pc, #164]	; (8001884 <uartencode+0xf0>)
 80017e0:	f007 fe1c 	bl	800941c <siprintf>
	statusarr[0] = '#';
 80017e4:	4b28      	ldr	r3, [pc, #160]	; (8001888 <uartencode+0xf4>)
 80017e6:	2223      	movs	r2, #35	; 0x23
 80017e8:	701a      	strb	r2, [r3, #0]
	sprintf(&statusarr[1], "%03d", ':');
 80017ea:	223a      	movs	r2, #58	; 0x3a
 80017ec:	4920      	ldr	r1, [pc, #128]	; (8001870 <uartencode+0xdc>)
 80017ee:	4827      	ldr	r0, [pc, #156]	; (800188c <uartencode+0xf8>)
 80017f0:	f007 fe14 	bl	800941c <siprintf>
	statusarr[2] = 'M';
 80017f4:	4b24      	ldr	r3, [pc, #144]	; (8001888 <uartencode+0xf4>)
 80017f6:	224d      	movs	r2, #77	; 0x4d
 80017f8:	709a      	strb	r2, [r3, #2]
	statusarr[1] = ':';
 80017fa:	4b23      	ldr	r3, [pc, #140]	; (8001888 <uartencode+0xf4>)
 80017fc:	223a      	movs	r2, #58	; 0x3a
 80017fe:	705a      	strb	r2, [r3, #1]
	statusarr[4] = ':';
 8001800:	4b21      	ldr	r3, [pc, #132]	; (8001888 <uartencode+0xf4>)
 8001802:	223a      	movs	r2, #58	; 0x3a
 8001804:	711a      	strb	r2, [r3, #4]
	statusarr[8] = ':';
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <uartencode+0xf4>)
 8001808:	223a      	movs	r2, #58	; 0x3a
 800180a:	721a      	strb	r2, [r3, #8]
	statusarr[12] = ':';
 800180c:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <uartencode+0xf4>)
 800180e:	223a      	movs	r2, #58	; 0x3a
 8001810:	731a      	strb	r2, [r3, #12]
	statusarr[16] = ':';
 8001812:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <uartencode+0xf4>)
 8001814:	223a      	movs	r2, #58	; 0x3a
 8001816:	741a      	strb	r2, [r3, #16]
	statusarr[17] = '$';
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <uartencode+0xf4>)
 800181a:	2224      	movs	r2, #36	; 0x24
 800181c:	745a      	strb	r2, [r3, #17]
	statusarr[18] = 10;
 800181e:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <uartencode+0xf4>)
 8001820:	220a      	movs	r2, #10
 8001822:	749a      	strb	r2, [r3, #18]
	//sprintf(&statusarr[9], "%03d", p2val);

	if (MODE==0){
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <uartencode+0xfc>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <uartencode+0x9e>

		statusarr[3] = 'F';
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <uartencode+0xf4>)
 800182e:	2246      	movs	r2, #70	; 0x46
 8001830:	70da      	strb	r2, [r3, #3]
	}
	if (MODE==1){
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <uartencode+0xfc>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d102      	bne.n	8001840 <uartencode+0xac>

		statusarr[3] = 'E';
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <uartencode+0xf4>)
 800183c:	2245      	movs	r2, #69	; 0x45
 800183e:	70da      	strb	r2, [r3, #3]
	}
	if (MODE==2){
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <uartencode+0xfc>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d102      	bne.n	800184e <uartencode+0xba>

		statusarr[3] = 'M';
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <uartencode+0xf4>)
 800184a:	224d      	movs	r2, #77	; 0x4d
 800184c:	70da      	strb	r2, [r3, #3]
	}

	HAL_UART_Transmit(&huart2, statusarr, 19, 500);
 800184e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001852:	2213      	movs	r2, #19
 8001854:	490c      	ldr	r1, [pc, #48]	; (8001888 <uartencode+0xf4>)
 8001856:	4804      	ldr	r0, [pc, #16]	; (8001868 <uartencode+0xd4>)
 8001858:	f005 ff24 	bl	80076a4 <HAL_UART_Transmit>





}
 800185c:	bf00      	nop
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bdb0      	pop	{r4, r5, r7, pc}
 8001864:	0800c8b8 	.word	0x0800c8b8
 8001868:	200002b4 	.word	0x200002b4
 800186c:	200003f6 	.word	0x200003f6
 8001870:	0800c8b0 	.word	0x0800c8b0
 8001874:	20000405 	.word	0x20000405
 8001878:	200003f8 	.word	0x200003f8
 800187c:	20000409 	.word	0x20000409
 8001880:	200003f4 	.word	0x200003f4
 8001884:	2000040d 	.word	0x2000040d
 8001888:	20000400 	.word	0x20000400
 800188c:	20000401 	.word	0x20000401
 8001890:	200003e4 	.word	0x200003e4

08001894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001898:	f000 fe24 	bl	80024e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800189c:	f000 f8ae 	bl	80019fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a0:	f000 fa74 	bl	8001d8c <MX_GPIO_Init>
  MX_DMA_Init();
 80018a4:	f000 fa54 	bl	8001d50 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018a8:	f000 fa20 	bl	8001cec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80018ac:	f000 f90c 	bl	8001ac8 <MX_ADC1_Init>
  MX_DAC1_Init();
 80018b0:	f000 f97a 	bl	8001ba8 <MX_DAC1_Init>
  MX_TIM2_Init();
 80018b4:	f000 f9a2 	bl	8001bfc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart2, rxdata, sizeof(rxdata));
// HAL_Delay(250);
//  HAL_UART_Transmit_IT(&huart2, txData, 13);
  modeset();
 80018b8:	f7ff fe00 	bl	80014bc <modeset>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80018bc:	210c      	movs	r1, #12
 80018be:	4842      	ldr	r0, [pc, #264]	; (80019c8 <main+0x134>)
 80018c0:	f004 fd58 	bl	8006374 <HAL_TIM_PWM_Start>

 //HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 80018c4:	4b40      	ldr	r3, [pc, #256]	; (80019c8 <main+0x134>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018cc:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxdata, 50);
 80018ce:	2232      	movs	r2, #50	; 0x32
 80018d0:	493e      	ldr	r1, [pc, #248]	; (80019cc <main+0x138>)
 80018d2:	483f      	ldr	r0, [pc, #252]	; (80019d0 <main+0x13c>)
 80018d4:	f007 f864 	bl	80089a0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80018d8:	4b3e      	ldr	r3, [pc, #248]	; (80019d4 <main+0x140>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b3d      	ldr	r3, [pc, #244]	; (80019d4 <main+0x140>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0204 	bic.w	r2, r2, #4
 80018e6:	601a      	str	r2, [r3, #0]
  while (1)
  {

	  //continuous adc read outputted through dac - conditioned

	  if (power==1){
 80018e8:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <main+0x144>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d140      	bne.n	8001972 <main+0xde>
	  dacset();
 80018f0:	f7ff fcae 	bl	8001250 <dacset>
	  //uartencode();

	  pwmset();
 80018f4:	f7ff fe50 	bl	8001598 <pwmset>

		  if (uartmode==1){
 80018f8:	4b38      	ldr	r3, [pc, #224]	; (80019dc <main+0x148>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d104      	bne.n	800190a <main+0x76>
			  uartdecode();
 8001900:	f7ff fe7e 	bl	8001600 <uartdecode>
			  uartmode=0;
 8001904:	4b35      	ldr	r3, [pc, #212]	; (80019dc <main+0x148>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
		  }

		  if (uartmode==2){
 800190a:	4b34      	ldr	r3, [pc, #208]	; (80019dc <main+0x148>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d104      	bne.n	800191c <main+0x88>

			  uartencode();
 8001912:	f7ff ff3f 	bl	8001794 <uartencode>
			  uartmode=0;
 8001916:	4b31      	ldr	r3, [pc, #196]	; (80019dc <main+0x148>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
	  }

		  if (flagstat==1 && (  abs((uint32_t)(1000.0*(sliderold - vinadj)))>15  || state ==1)){
 800191c:	4b30      	ldr	r3, [pc, #192]	; (80019e0 <main+0x14c>)
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d147      	bne.n	80019b4 <main+0x120>
 8001924:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <main+0x150>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fe03 	bl	8000534 <__aeabi_i2d>
 800192e:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <main+0x154>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7fe fcb0 	bl	8000298 <__aeabi_dsub>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	4b29      	ldr	r3, [pc, #164]	; (80019ec <main+0x158>)
 8001946:	f7fe fe5f 	bl	8000608 <__aeabi_dmul>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f7ff f931 	bl	8000bb8 <__aeabi_d2uiz>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	bfb8      	it	lt
 800195c:	425b      	neglt	r3, r3
 800195e:	2b0f      	cmp	r3, #15
 8001960:	dc03      	bgt.n	800196a <main+0xd6>
 8001962:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <main+0x15c>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d124      	bne.n	80019b4 <main+0x120>

			  flagstat=0;
 800196a:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <main+0x14c>)
 800196c:	2200      	movs	r2, #0
 800196e:	801a      	strh	r2, [r3, #0]
 8001970:	e020      	b.n	80019b4 <main+0x120>

	  }

	  else{

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001972:	2200      	movs	r2, #0
 8001974:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197c:	f002 ff5e 	bl	800483c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001986:	481b      	ldr	r0, [pc, #108]	; (80019f4 <main+0x160>)
 8001988:	f002 ff58 	bl	800483c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	2110      	movs	r1, #16
 8001990:	4818      	ldr	r0, [pc, #96]	; (80019f4 <main+0x160>)
 8001992:	f002 ff53 	bl	800483c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	2120      	movs	r1, #32
 800199a:	4816      	ldr	r0, [pc, #88]	; (80019f4 <main+0x160>)
 800199c:	f002 ff4e 	bl	800483c <HAL_GPIO_WritePin>
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80019a0:	2300      	movs	r3, #0
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	4814      	ldr	r0, [pc, #80]	; (80019f8 <main+0x164>)
 80019a8:	f002 fa5b 	bl	8003e62 <HAL_DAC_SetValue>
				  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <main+0x134>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2200      	movs	r2, #0
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40

	  }

	  if (state==1){
 80019b4:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <main+0x15c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d195      	bne.n	80018e8 <main+0x54>
	 		  buttonpressed();
 80019bc:	f7ff fa04 	bl	8000dc8 <buttonpressed>
	 		  state=0;
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <main+0x15c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
	  if (power==1){
 80019c6:	e78f      	b.n	80018e8 <main+0x54>
 80019c8:	20000268 	.word	0x20000268
 80019cc:	2000037c 	.word	0x2000037c
 80019d0:	200002b4 	.word	0x200002b4
 80019d4:	20000338 	.word	0x20000338
 80019d8:	20000005 	.word	0x20000005
 80019dc:	200003fc 	.word	0x200003fc
 80019e0:	200003fa 	.word	0x200003fa
 80019e4:	20000430 	.word	0x20000430
 80019e8:	200003d0 	.word	0x200003d0
 80019ec:	408f4000 	.word	0x408f4000
 80019f0:	20000431 	.word	0x20000431
 80019f4:	48000400 	.word	0x48000400
 80019f8:	20000254 	.word	0x20000254

080019fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b0a6      	sub	sp, #152	; 0x98
 8001a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a06:	2228      	movs	r2, #40	; 0x28
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f007 f860 	bl	8008ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a10:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2258      	movs	r2, #88	; 0x58
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f007 f852 	bl	8008ad0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a30:	2301      	movs	r3, #1
 8001a32:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a34:	2310      	movs	r3, #16
 8001a36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a48:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a56:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 ff2a 	bl	80048b4 <HAL_RCC_OscConfig>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001a66:	f000 fa3d 	bl	8001ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a6a:	230f      	movs	r3, #15
 8001a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a7a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a80:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a84:	2102      	movs	r1, #2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 ff68 	bl	800595c <HAL_RCC_ClockConfig>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a92:	f000 fa27 	bl	8001ee4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <SystemClock_Config+0xc8>)
 8001a98:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f004 f98c 	bl	8005dc8 <HAL_RCCEx_PeriphCLKConfig>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001ab6:	f000 fa15 	bl	8001ee4 <Error_Handler>
  }
}
 8001aba:	bf00      	nop
 8001abc:	3798      	adds	r7, #152	; 0x98
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	00100082 	.word	0x00100082

08001ac8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
 8001ae8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001aea:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <MX_ADC1_Init+0xdc>)
 8001aec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001af0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001af2:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <MX_ADC1_Init+0xdc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001af8:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <MX_ADC1_Init+0xdc>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001afe:	4b29      	ldr	r3, [pc, #164]	; (8001ba4 <MX_ADC1_Init+0xdc>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b04:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <MX_ADC1_Init+0xdc>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b0a:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <MX_ADC1_Init+0xdc>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b12:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <MX_ADC1_Init+0xdc>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b18:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <MX_ADC1_Init+0xdc>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b1e:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <MX_ADC1_Init+0xdc>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b24:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <MX_ADC1_Init+0xdc>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <MX_ADC1_Init+0xdc>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b32:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <MX_ADC1_Init+0xdc>)
 8001b34:	2204      	movs	r2, #4
 8001b36:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b38:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <MX_ADC1_Init+0xdc>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <MX_ADC1_Init+0xdc>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b44:	4817      	ldr	r0, [pc, #92]	; (8001ba4 <MX_ADC1_Init+0xdc>)
 8001b46:	f000 fd51 	bl	80025ec <HAL_ADC_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001b50:	f000 f9c8 	bl	8001ee4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4811      	ldr	r0, [pc, #68]	; (8001ba4 <MX_ADC1_Init+0xdc>)
 8001b60:	f001 fe86 	bl	8003870 <HAL_ADCEx_MultiModeConfigChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001b6a:	f000 f9bb 	bl	8001ee4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <MX_ADC1_Init+0xdc>)
 8001b8c:	f001 fb84 	bl	8003298 <HAL_ADC_ConfigChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001b96:	f000 f9a5 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	; 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000204 	.word	0x20000204

08001ba8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <MX_DAC1_Init+0x4c>)
 8001bba:	4a0f      	ldr	r2, [pc, #60]	; (8001bf8 <MX_DAC1_Init+0x50>)
 8001bbc:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001bbe:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <MX_DAC1_Init+0x4c>)
 8001bc0:	f002 f923 	bl	8003e0a <HAL_DAC_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8001bca:	f000 f98b 	bl	8001ee4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	2200      	movs	r2, #0
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <MX_DAC1_Init+0x4c>)
 8001bde:	f002 fa0a 	bl	8003ff6 <HAL_DAC_ConfigChannel>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8001be8:	f000 f97c 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000254 	.word	0x20000254
 8001bf8:	40007400 	.word	0x40007400

08001bfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08e      	sub	sp, #56	; 0x38
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c10:	f107 031c 	add.w	r3, r7, #28
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c1c:	463b      	mov	r3, r7
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
 8001c28:	611a      	str	r2, [r3, #16]
 8001c2a:	615a      	str	r2, [r3, #20]
 8001c2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <MX_TIM2_Init+0xec>)
 8001c30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 8001c36:	4b2c      	ldr	r3, [pc, #176]	; (8001ce8 <MX_TIM2_Init+0xec>)
 8001c38:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001c3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <MX_TIM2_Init+0xec>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001c44:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <MX_TIM2_Init+0xec>)
 8001c46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4c:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <MX_TIM2_Init+0xec>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c52:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <MX_TIM2_Init+0xec>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c58:	4823      	ldr	r0, [pc, #140]	; (8001ce8 <MX_TIM2_Init+0xec>)
 8001c5a:	f004 fad3 	bl	8006204 <HAL_TIM_Base_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001c64:	f000 f93e 	bl	8001ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c72:	4619      	mov	r1, r3
 8001c74:	481c      	ldr	r0, [pc, #112]	; (8001ce8 <MX_TIM2_Init+0xec>)
 8001c76:	f004 febd 	bl	80069f4 <HAL_TIM_ConfigClockSource>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001c80:	f000 f930 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c84:	4818      	ldr	r0, [pc, #96]	; (8001ce8 <MX_TIM2_Init+0xec>)
 8001c86:	f004 fb14 	bl	80062b2 <HAL_TIM_PWM_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001c90:	f000 f928 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4811      	ldr	r0, [pc, #68]	; (8001ce8 <MX_TIM2_Init+0xec>)
 8001ca4:	f005 fc06 	bl	80074b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001cae:	f000 f919 	bl	8001ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb2:	2360      	movs	r3, #96	; 0x60
 8001cb4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001cb6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001cba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cc4:	463b      	mov	r3, r7
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4807      	ldr	r0, [pc, #28]	; (8001ce8 <MX_TIM2_Init+0xec>)
 8001ccc:	f004 fd7e 	bl	80067cc <HAL_TIM_PWM_ConfigChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8001cd6:	f000 f905 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cda:	4803      	ldr	r0, [pc, #12]	; (8001ce8 <MX_TIM2_Init+0xec>)
 8001cdc:	f000 f9da 	bl	8002094 <HAL_TIM_MspPostInit>

}
 8001ce0:	bf00      	nop
 8001ce2:	3738      	adds	r7, #56	; 0x38
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000268 	.word	0x20000268

08001cec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cf0:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <MX_USART2_UART_Init+0x5c>)
 8001cf2:	4a16      	ldr	r2, [pc, #88]	; (8001d4c <MX_USART2_UART_Init+0x60>)
 8001cf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <MX_USART2_UART_Init+0x5c>)
 8001cf8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001cfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <MX_USART2_UART_Init+0x5c>)
 8001d00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d04:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <MX_USART2_UART_Init+0x5c>)
 8001d08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <MX_USART2_UART_Init+0x5c>)
 8001d10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d14:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_USART2_UART_Init+0x5c>)
 8001d18:	220c      	movs	r2, #12
 8001d1a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <MX_USART2_UART_Init+0x5c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_USART2_UART_Init+0x5c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d28:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <MX_USART2_UART_Init+0x5c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_USART2_UART_Init+0x5c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d34:	4804      	ldr	r0, [pc, #16]	; (8001d48 <MX_USART2_UART_Init+0x5c>)
 8001d36:	f005 fc67 	bl	8007608 <HAL_UART_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d40:	f000 f8d0 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200002b4 	.word	0x200002b4
 8001d4c:	40004400 	.word	0x40004400

08001d50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d56:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <MX_DMA_Init+0x38>)
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <MX_DMA_Init+0x38>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6153      	str	r3, [r2, #20]
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <MX_DMA_Init+0x38>)
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	2010      	movs	r0, #16
 8001d74:	f002 f813 	bl	8003d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001d78:	2010      	movs	r0, #16
 8001d7a:	f002 f82c 	bl	8003dd6 <HAL_NVIC_EnableIRQ>

}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000

08001d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da2:	4b4d      	ldr	r3, [pc, #308]	; (8001ed8 <MX_GPIO_Init+0x14c>)
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	4a4c      	ldr	r2, [pc, #304]	; (8001ed8 <MX_GPIO_Init+0x14c>)
 8001da8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001dac:	6153      	str	r3, [r2, #20]
 8001dae:	4b4a      	ldr	r3, [pc, #296]	; (8001ed8 <MX_GPIO_Init+0x14c>)
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dba:	4b47      	ldr	r3, [pc, #284]	; (8001ed8 <MX_GPIO_Init+0x14c>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4a46      	ldr	r2, [pc, #280]	; (8001ed8 <MX_GPIO_Init+0x14c>)
 8001dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dc4:	6153      	str	r3, [r2, #20]
 8001dc6:	4b44      	ldr	r3, [pc, #272]	; (8001ed8 <MX_GPIO_Init+0x14c>)
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	4b41      	ldr	r3, [pc, #260]	; (8001ed8 <MX_GPIO_Init+0x14c>)
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	4a40      	ldr	r2, [pc, #256]	; (8001ed8 <MX_GPIO_Init+0x14c>)
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ddc:	6153      	str	r3, [r2, #20]
 8001dde:	4b3e      	ldr	r3, [pc, #248]	; (8001ed8 <MX_GPIO_Init+0x14c>)
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dea:	4b3b      	ldr	r3, [pc, #236]	; (8001ed8 <MX_GPIO_Init+0x14c>)
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	4a3a      	ldr	r2, [pc, #232]	; (8001ed8 <MX_GPIO_Init+0x14c>)
 8001df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df4:	6153      	str	r3, [r2, #20]
 8001df6:	4b38      	ldr	r3, [pc, #224]	; (8001ed8 <MX_GPIO_Init+0x14c>)
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001e02:	2200      	movs	r2, #0
 8001e04:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0c:	f002 fd16 	bl	800483c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001e10:	2200      	movs	r2, #0
 8001e12:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001e16:	4831      	ldr	r0, [pc, #196]	; (8001edc <MX_GPIO_Init+0x150>)
 8001e18:	f002 fd10 	bl	800483c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e22:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	482b      	ldr	r0, [pc, #172]	; (8001ee0 <MX_GPIO_Init+0x154>)
 8001e34:	f002 fb60 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8001e38:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e54:	f002 fb50 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8001e58:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001e5e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e64:	2301      	movs	r3, #1
 8001e66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e72:	f002 fb41 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8001e76:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4813      	ldr	r0, [pc, #76]	; (8001edc <MX_GPIO_Init+0x150>)
 8001e90:	f002 fb32 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001e9a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	480c      	ldr	r0, [pc, #48]	; (8001edc <MX_GPIO_Init+0x150>)
 8001eac:	f002 fb24 	bl	80044f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2017      	movs	r0, #23
 8001eb6:	f001 ff72 	bl	8003d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001eba:	2017      	movs	r0, #23
 8001ebc:	f001 ff8b 	bl	8003dd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2028      	movs	r0, #40	; 0x28
 8001ec6:	f001 ff6a 	bl	8003d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001eca:	2028      	movs	r0, #40	; 0x28
 8001ecc:	f001 ff83 	bl	8003dd6 <HAL_NVIC_EnableIRQ>

}
 8001ed0:	bf00      	nop
 8001ed2:	3728      	adds	r7, #40	; 0x28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	48000400 	.word	0x48000400
 8001ee0:	48000800 	.word	0x48000800

08001ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee8:	b672      	cpsid	i
}
 8001eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eec:	e7fe      	b.n	8001eec <Error_Handler+0x8>
	...

08001ef0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <HAL_MspInit+0x44>)
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	4a0e      	ldr	r2, [pc, #56]	; (8001f34 <HAL_MspInit+0x44>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6193      	str	r3, [r2, #24]
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <HAL_MspInit+0x44>)
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_MspInit+0x44>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a08      	ldr	r2, [pc, #32]	; (8001f34 <HAL_MspInit+0x44>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f18:	61d3      	str	r3, [r2, #28]
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_MspInit+0x44>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f26:	2007      	movs	r0, #7
 8001f28:	f001 ff2e 	bl	8003d88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000

08001f38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f58:	d12c      	bne.n	8001fb4 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_ADC_MspInit+0x84>)
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <HAL_ADC_MspInit+0x84>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f64:	6153      	str	r3, [r2, #20]
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_ADC_MspInit+0x84>)
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_ADC_MspInit+0x84>)
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <HAL_ADC_MspInit+0x84>)
 8001f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f7c:	6153      	str	r3, [r2, #20]
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <HAL_ADC_MspInit+0x84>)
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f96:	f107 0314 	add.w	r3, r7, #20
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa0:	f002 faaa 	bl	80044f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	2012      	movs	r0, #18
 8001faa:	f001 fef8 	bl	8003d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001fae:	2012      	movs	r0, #18
 8001fb0:	f001 ff11 	bl	8003dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fb4:	bf00      	nop
 8001fb6:	3728      	adds	r7, #40	; 0x28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_DAC_MspInit+0x84>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d12c      	bne.n	800203c <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001fe2:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_DAC_MspInit+0x88>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a18      	ldr	r2, [pc, #96]	; (8002048 <HAL_DAC_MspInit+0x88>)
 8001fe8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fec:	61d3      	str	r3, [r2, #28]
 8001fee:	4b16      	ldr	r3, [pc, #88]	; (8002048 <HAL_DAC_MspInit+0x88>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	4b13      	ldr	r3, [pc, #76]	; (8002048 <HAL_DAC_MspInit+0x88>)
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <HAL_DAC_MspInit+0x88>)
 8002000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002004:	6153      	str	r3, [r2, #20]
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <HAL_DAC_MspInit+0x88>)
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002012:	2310      	movs	r3, #16
 8002014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002016:	2303      	movs	r3, #3
 8002018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	4619      	mov	r1, r3
 8002024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002028:	f002 fa66 	bl	80044f8 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800202c:	2200      	movs	r2, #0
 800202e:	2100      	movs	r1, #0
 8002030:	2036      	movs	r0, #54	; 0x36
 8002032:	f001 feb4 	bl	8003d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002036:	2036      	movs	r0, #54	; 0x36
 8002038:	f001 fecd 	bl	8003dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800203c:	bf00      	nop
 800203e:	3728      	adds	r7, #40	; 0x28
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40007400 	.word	0x40007400
 8002048:	40021000 	.word	0x40021000

0800204c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205c:	d113      	bne.n	8002086 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <HAL_TIM_Base_MspInit+0x44>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <HAL_TIM_Base_MspInit+0x44>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	61d3      	str	r3, [r2, #28]
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_TIM_Base_MspInit+0x44>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	2100      	movs	r1, #0
 800207a:	201c      	movs	r0, #28
 800207c:	f001 fe8f 	bl	8003d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002080:	201c      	movs	r0, #28
 8002082:	f001 fea8 	bl	8003dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000

08002094 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 030c 	add.w	r3, r7, #12
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b4:	d11c      	bne.n	80020f0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <HAL_TIM_MspPostInit+0x64>)
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	4a0f      	ldr	r2, [pc, #60]	; (80020f8 <HAL_TIM_MspPostInit+0x64>)
 80020bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c0:	6153      	str	r3, [r2, #20]
 80020c2:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <HAL_TIM_MspPostInit+0x64>)
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020dc:	2300      	movs	r3, #0
 80020de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020e0:	2301      	movs	r3, #1
 80020e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	4619      	mov	r1, r3
 80020ea:	4804      	ldr	r0, [pc, #16]	; (80020fc <HAL_TIM_MspPostInit+0x68>)
 80020ec:	f002 fa04 	bl	80044f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020f0:	bf00      	nop
 80020f2:	3720      	adds	r7, #32
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021000 	.word	0x40021000
 80020fc:	48000400 	.word	0x48000400

08002100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	; 0x28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a2e      	ldr	r2, [pc, #184]	; (80021d8 <HAL_UART_MspInit+0xd8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d156      	bne.n	80021d0 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002122:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <HAL_UART_MspInit+0xdc>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a2d      	ldr	r2, [pc, #180]	; (80021dc <HAL_UART_MspInit+0xdc>)
 8002128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800212c:	61d3      	str	r3, [r2, #28]
 800212e:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_UART_MspInit+0xdc>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213a:	4b28      	ldr	r3, [pc, #160]	; (80021dc <HAL_UART_MspInit+0xdc>)
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	4a27      	ldr	r2, [pc, #156]	; (80021dc <HAL_UART_MspInit+0xdc>)
 8002140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002144:	6153      	str	r3, [r2, #20]
 8002146:	4b25      	ldr	r3, [pc, #148]	; (80021dc <HAL_UART_MspInit+0xdc>)
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002152:	230c      	movs	r3, #12
 8002154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002162:	2307      	movs	r3, #7
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	4619      	mov	r1, r3
 800216c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002170:	f002 f9c2 	bl	80044f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_UART_MspInit+0xe0>)
 8002176:	4a1b      	ldr	r2, [pc, #108]	; (80021e4 <HAL_UART_MspInit+0xe4>)
 8002178:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800217a:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <HAL_UART_MspInit+0xe0>)
 800217c:	2200      	movs	r2, #0
 800217e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <HAL_UART_MspInit+0xe0>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <HAL_UART_MspInit+0xe0>)
 8002188:	2280      	movs	r2, #128	; 0x80
 800218a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <HAL_UART_MspInit+0xe0>)
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_UART_MspInit+0xe0>)
 8002194:	2200      	movs	r2, #0
 8002196:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <HAL_UART_MspInit+0xe0>)
 800219a:	2200      	movs	r2, #0
 800219c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <HAL_UART_MspInit+0xe0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021a4:	480e      	ldr	r0, [pc, #56]	; (80021e0 <HAL_UART_MspInit+0xe0>)
 80021a6:	f001 ff7d 	bl	80040a4 <HAL_DMA_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80021b0:	f7ff fe98 	bl	8001ee4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <HAL_UART_MspInit+0xe0>)
 80021b8:	671a      	str	r2, [r3, #112]	; 0x70
 80021ba:	4a09      	ldr	r2, [pc, #36]	; (80021e0 <HAL_UART_MspInit+0xe0>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021c0:	2200      	movs	r2, #0
 80021c2:	2100      	movs	r1, #0
 80021c4:	2026      	movs	r0, #38	; 0x26
 80021c6:	f001 fdea 	bl	8003d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021ca:	2026      	movs	r0, #38	; 0x26
 80021cc:	f001 fe03 	bl	8003dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021d0:	bf00      	nop
 80021d2:	3728      	adds	r7, #40	; 0x28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40004400 	.word	0x40004400
 80021dc:	40021000 	.word	0x40021000
 80021e0:	20000338 	.word	0x20000338
 80021e4:	4002006c 	.word	0x4002006c

080021e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021ec:	e7fe      	b.n	80021ec <NMI_Handler+0x4>

080021ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f2:	e7fe      	b.n	80021f2 <HardFault_Handler+0x4>

080021f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <MemManage_Handler+0x4>

080021fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021fe:	e7fe      	b.n	80021fe <BusFault_Handler+0x4>

08002200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <UsageFault_Handler+0x4>

08002206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002234:	f000 f99c 	bl	8002570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}

0800223c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <DMA1_Channel6_IRQHandler+0x10>)
 8002242:	f002 f84c 	bl	80042de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000338 	.word	0x20000338

08002250 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <ADC1_2_IRQHandler+0x10>)
 8002256:	f000 fce7 	bl	8002c28 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000204 	.word	0x20000204

08002264 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
state =1;
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <EXTI9_5_IRQHandler+0x2c>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800226e:	2040      	movs	r0, #64	; 0x40
 8002270:	f002 fafc 	bl	800486c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002274:	2080      	movs	r0, #128	; 0x80
 8002276:	f002 faf9 	bl	800486c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800227a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800227e:	f002 faf5 	bl	800486c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002282:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002286:	f002 faf1 	bl	800486c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000431 	.word	0x20000431

08002294 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <TIM2_IRQHandler+0x10>)
 800229a:	f004 f977 	bl	800658c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000268 	.word	0x20000268

080022a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <USART2_IRQHandler+0x10>)
 80022ae:	f005 fa8d 	bl	80077cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200002b4 	.word	0x200002b4

080022bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80022c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022c4:	f002 fad2 	bl	800486c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}

080022cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80022d0:	4802      	ldr	r0, [pc, #8]	; (80022dc <TIM6_DAC_IRQHandler+0x10>)
 80022d2:	f001 fe36 	bl	8003f42 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000254 	.word	0x20000254

080022e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return 1;
 80022e4:	2301      	movs	r3, #1
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_kill>:

int _kill(int pid, int sig)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022fa:	f006 fbb1 	bl	8008a60 <__errno>
 80022fe:	4603      	mov	r3, r0
 8002300:	2216      	movs	r2, #22
 8002302:	601a      	str	r2, [r3, #0]
  return -1;
 8002304:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <_exit>:

void _exit (int status)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002318:	f04f 31ff 	mov.w	r1, #4294967295
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ffe7 	bl	80022f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002322:	e7fe      	b.n	8002322 <_exit+0x12>

08002324 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	e00a      	b.n	800234c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002336:	f3af 8000 	nop.w
 800233a:	4601      	mov	r1, r0
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	60ba      	str	r2, [r7, #8]
 8002342:	b2ca      	uxtb	r2, r1
 8002344:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3301      	adds	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	429a      	cmp	r2, r3
 8002352:	dbf0      	blt.n	8002336 <_read+0x12>
  }

  return len;
 8002354:	687b      	ldr	r3, [r7, #4]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e009      	b.n	8002384 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	60ba      	str	r2, [r7, #8]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	3301      	adds	r3, #1
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	429a      	cmp	r2, r3
 800238a:	dbf1      	blt.n	8002370 <_write+0x12>
  }
  return len;
 800238c:	687b      	ldr	r3, [r7, #4]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <_close>:

int _close(int file)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023be:	605a      	str	r2, [r3, #4]
  return 0;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <_isatty>:

int _isatty(int file)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023d6:	2301      	movs	r3, #1
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002408:	4a14      	ldr	r2, [pc, #80]	; (800245c <_sbrk+0x5c>)
 800240a:	4b15      	ldr	r3, [pc, #84]	; (8002460 <_sbrk+0x60>)
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <_sbrk+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <_sbrk+0x64>)
 800241e:	4a12      	ldr	r2, [pc, #72]	; (8002468 <_sbrk+0x68>)
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	429a      	cmp	r2, r3
 800242e:	d207      	bcs.n	8002440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002430:	f006 fb16 	bl	8008a60 <__errno>
 8002434:	4603      	mov	r3, r0
 8002436:	220c      	movs	r2, #12
 8002438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	e009      	b.n	8002454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <_sbrk+0x64>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <_sbrk+0x64>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <_sbrk+0x64>)
 8002450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20010000 	.word	0x20010000
 8002460:	00000400 	.word	0x00000400
 8002464:	20000434 	.word	0x20000434
 8002468:	20000450 	.word	0x20000450

0800246c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <SystemInit+0x20>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <SystemInit+0x20>)
 8002478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800247c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002494:	480d      	ldr	r0, [pc, #52]	; (80024cc <LoopForever+0x6>)
  ldr r1, =_edata
 8002496:	490e      	ldr	r1, [pc, #56]	; (80024d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002498:	4a0e      	ldr	r2, [pc, #56]	; (80024d4 <LoopForever+0xe>)
  movs r3, #0
 800249a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800249c:	e002      	b.n	80024a4 <LoopCopyDataInit>

0800249e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800249e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024a2:	3304      	adds	r3, #4

080024a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024a8:	d3f9      	bcc.n	800249e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024aa:	4a0b      	ldr	r2, [pc, #44]	; (80024d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024ac:	4c0b      	ldr	r4, [pc, #44]	; (80024dc <LoopForever+0x16>)
  movs r3, #0
 80024ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b0:	e001      	b.n	80024b6 <LoopFillZerobss>

080024b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b4:	3204      	adds	r2, #4

080024b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024b8:	d3fb      	bcc.n	80024b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024ba:	f7ff ffd7 	bl	800246c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024be:	f006 fad5 	bl	8008a6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024c2:	f7ff f9e7 	bl	8001894 <main>

080024c6 <LoopForever>:

LoopForever:
    b LoopForever
 80024c6:	e7fe      	b.n	80024c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80024cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80024d4:	0800cd20 	.word	0x0800cd20
  ldr r2, =_sbss
 80024d8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80024dc:	2000044c 	.word	0x2000044c

080024e0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024e0:	e7fe      	b.n	80024e0 <ADC3_IRQHandler>
	...

080024e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <HAL_Init+0x28>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a07      	ldr	r2, [pc, #28]	; (800250c <HAL_Init+0x28>)
 80024ee:	f043 0310 	orr.w	r3, r3, #16
 80024f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f4:	2003      	movs	r0, #3
 80024f6:	f001 fc47 	bl	8003d88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024fa:	2000      	movs	r0, #0
 80024fc:	f000 f808 	bl	8002510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002500:	f7ff fcf6 	bl	8001ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40022000 	.word	0x40022000

08002510 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_InitTick+0x54>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_InitTick+0x58>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4619      	mov	r1, r3
 8002522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002526:	fbb3 f3f1 	udiv	r3, r3, r1
 800252a:	fbb2 f3f3 	udiv	r3, r2, r3
 800252e:	4618      	mov	r0, r3
 8002530:	f001 fc5f 	bl	8003df2 <HAL_SYSTICK_Config>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e00e      	b.n	800255c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b0f      	cmp	r3, #15
 8002542:	d80a      	bhi.n	800255a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002544:	2200      	movs	r2, #0
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	f04f 30ff 	mov.w	r0, #4294967295
 800254c:	f001 fc27 	bl	8003d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002550:	4a06      	ldr	r2, [pc, #24]	; (800256c <HAL_InitTick+0x5c>)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e000      	b.n	800255c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000008 	.word	0x20000008
 8002568:	20000010 	.word	0x20000010
 800256c:	2000000c 	.word	0x2000000c

08002570 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_IncTick+0x20>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_IncTick+0x24>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4413      	add	r3, r2
 8002580:	4a04      	ldr	r2, [pc, #16]	; (8002594 <HAL_IncTick+0x24>)
 8002582:	6013      	str	r3, [r2, #0]
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000010 	.word	0x20000010
 8002594:	20000438 	.word	0x20000438

08002598 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return uwTick;  
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <HAL_GetTick+0x14>)
 800259e:	681b      	ldr	r3, [r3, #0]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20000438 	.word	0x20000438

080025b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b09a      	sub	sp, #104	; 0x68
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e1e3      	b.n	80029d4 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	d176      	bne.n	800270c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d152      	bne.n	80026cc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff fc79 	bl	8001f38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d13b      	bne.n	80026cc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f001 fa61 	bl	8003b1c <ADC_Disable>
 800265a:	4603      	mov	r3, r0
 800265c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	d12f      	bne.n	80026cc <HAL_ADC_Init+0xe0>
 800266c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002670:	2b00      	cmp	r3, #0
 8002672:	d12b      	bne.n	80026cc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800267c:	f023 0302 	bic.w	r3, r3, #2
 8002680:	f043 0202 	orr.w	r2, r3, #2
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002696:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026a6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026a8:	4b92      	ldr	r3, [pc, #584]	; (80028f4 <HAL_ADC_Init+0x308>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a92      	ldr	r2, [pc, #584]	; (80028f8 <HAL_ADC_Init+0x30c>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	0c9a      	lsrs	r2, r3, #18
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026be:	e002      	b.n	80026c6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f9      	bne.n	80026c0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d007      	beq.n	80026ea <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026e8:	d110      	bne.n	800270c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f023 0312 	bic.w	r3, r3, #18
 80026f2:	f043 0210 	orr.w	r2, r3, #16
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	f043 0201 	orr.w	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	2b00      	cmp	r3, #0
 8002716:	f040 8150 	bne.w	80029ba <HAL_ADC_Init+0x3ce>
 800271a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800271e:	2b00      	cmp	r3, #0
 8002720:	f040 814b 	bne.w	80029ba <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800272e:	2b00      	cmp	r3, #0
 8002730:	f040 8143 	bne.w	80029ba <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800273c:	f043 0202 	orr.w	r2, r3, #2
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800274c:	d004      	beq.n	8002758 <HAL_ADC_Init+0x16c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6a      	ldr	r2, [pc, #424]	; (80028fc <HAL_ADC_Init+0x310>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_ADC_Init+0x170>
 8002758:	4b69      	ldr	r3, [pc, #420]	; (8002900 <HAL_ADC_Init+0x314>)
 800275a:	e000      	b.n	800275e <HAL_ADC_Init+0x172>
 800275c:	4b69      	ldr	r3, [pc, #420]	; (8002904 <HAL_ADC_Init+0x318>)
 800275e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002768:	d102      	bne.n	8002770 <HAL_ADC_Init+0x184>
 800276a:	4b64      	ldr	r3, [pc, #400]	; (80028fc <HAL_ADC_Init+0x310>)
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	e01a      	b.n	80027a6 <HAL_ADC_Init+0x1ba>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a61      	ldr	r2, [pc, #388]	; (80028fc <HAL_ADC_Init+0x310>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d103      	bne.n	8002782 <HAL_ADC_Init+0x196>
 800277a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e011      	b.n	80027a6 <HAL_ADC_Init+0x1ba>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a60      	ldr	r2, [pc, #384]	; (8002908 <HAL_ADC_Init+0x31c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d102      	bne.n	8002792 <HAL_ADC_Init+0x1a6>
 800278c:	4b5f      	ldr	r3, [pc, #380]	; (800290c <HAL_ADC_Init+0x320>)
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	e009      	b.n	80027a6 <HAL_ADC_Init+0x1ba>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a5d      	ldr	r2, [pc, #372]	; (800290c <HAL_ADC_Init+0x320>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d102      	bne.n	80027a2 <HAL_ADC_Init+0x1b6>
 800279c:	4b5a      	ldr	r3, [pc, #360]	; (8002908 <HAL_ADC_Init+0x31c>)
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	e001      	b.n	80027a6 <HAL_ADC_Init+0x1ba>
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d108      	bne.n	80027c6 <HAL_ADC_Init+0x1da>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_Init+0x1da>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_ADC_Init+0x1dc>
 80027c6:	2300      	movs	r3, #0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d11c      	bne.n	8002806 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027cc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d010      	beq.n	80027f4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d107      	bne.n	80027ee <HAL_ADC_Init+0x202>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_ADC_Init+0x202>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_ADC_Init+0x204>
 80027ee:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d108      	bne.n	8002806 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80027f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	431a      	orrs	r2, r3
 8002802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002804:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	7e5b      	ldrb	r3, [r3, #25]
 800280a:	035b      	lsls	r3, r3, #13
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002810:	2a01      	cmp	r2, #1
 8002812:	d002      	beq.n	800281a <HAL_ADC_Init+0x22e>
 8002814:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002818:	e000      	b.n	800281c <HAL_ADC_Init+0x230>
 800281a:	2200      	movs	r2, #0
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4313      	orrs	r3, r2
 800282a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800282c:	4313      	orrs	r3, r2
 800282e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d11b      	bne.n	8002872 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	7e5b      	ldrb	r3, [r3, #25]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	3b01      	subs	r3, #1
 8002848:	045a      	lsls	r2, r3, #17
 800284a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800284c:	4313      	orrs	r3, r2
 800284e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002852:	663b      	str	r3, [r7, #96]	; 0x60
 8002854:	e00d      	b.n	8002872 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800285e:	f043 0220 	orr.w	r2, r3, #32
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	f043 0201 	orr.w	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	2b01      	cmp	r3, #1
 8002878:	d054      	beq.n	8002924 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a22      	ldr	r2, [pc, #136]	; (8002908 <HAL_ADC_Init+0x31c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d004      	beq.n	800288e <HAL_ADC_Init+0x2a2>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a20      	ldr	r2, [pc, #128]	; (800290c <HAL_ADC_Init+0x320>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d140      	bne.n	8002910 <HAL_ADC_Init+0x324>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002896:	d02a      	beq.n	80028ee <HAL_ADC_Init+0x302>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a0:	d022      	beq.n	80028e8 <HAL_ADC_Init+0x2fc>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80028aa:	d01a      	beq.n	80028e2 <HAL_ADC_Init+0x2f6>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80028b4:	d012      	beq.n	80028dc <HAL_ADC_Init+0x2f0>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80028be:	d00a      	beq.n	80028d6 <HAL_ADC_Init+0x2ea>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80028c8:	d002      	beq.n	80028d0 <HAL_ADC_Init+0x2e4>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	e023      	b.n	8002918 <HAL_ADC_Init+0x32c>
 80028d0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80028d4:	e020      	b.n	8002918 <HAL_ADC_Init+0x32c>
 80028d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80028da:	e01d      	b.n	8002918 <HAL_ADC_Init+0x32c>
 80028dc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80028e0:	e01a      	b.n	8002918 <HAL_ADC_Init+0x32c>
 80028e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e6:	e017      	b.n	8002918 <HAL_ADC_Init+0x32c>
 80028e8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80028ec:	e014      	b.n	8002918 <HAL_ADC_Init+0x32c>
 80028ee:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80028f2:	e011      	b.n	8002918 <HAL_ADC_Init+0x32c>
 80028f4:	20000008 	.word	0x20000008
 80028f8:	431bde83 	.word	0x431bde83
 80028fc:	50000100 	.word	0x50000100
 8002900:	50000300 	.word	0x50000300
 8002904:	50000700 	.word	0x50000700
 8002908:	50000400 	.word	0x50000400
 800290c:	50000500 	.word	0x50000500
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800291c:	4313      	orrs	r3, r2
 800291e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002920:	4313      	orrs	r3, r2
 8002922:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b00      	cmp	r3, #0
 8002930:	d114      	bne.n	800295c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002940:	f023 0302 	bic.w	r3, r3, #2
 8002944:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	7e1b      	ldrb	r3, [r3, #24]
 800294a:	039a      	lsls	r2, r3, #14
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4313      	orrs	r3, r2
 8002956:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002958:	4313      	orrs	r3, r2
 800295a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <HAL_ADC_Init+0x3f0>)
 8002964:	4013      	ands	r3, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800296c:	430b      	orrs	r3, r1
 800296e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d10c      	bne.n	8002992 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f023 010f 	bic.w	r1, r3, #15
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	1e5a      	subs	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
 8002990:	e007      	b.n	80029a2 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 020f 	bic.w	r2, r2, #15
 80029a0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f023 0303 	bic.w	r3, r3, #3
 80029b0:	f043 0201 	orr.w	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40
 80029b8:	e00a      	b.n	80029d0 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f023 0312 	bic.w	r3, r3, #18
 80029c2:	f043 0210 	orr.w	r2, r3, #16
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80029d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3768      	adds	r7, #104	; 0x68
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	fff0c007 	.word	0xfff0c007

080029e0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f040 80f9 	bne.w	8002bee <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_Start+0x2a>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e0f4      	b.n	8002bf4 <HAL_ADC_Start+0x214>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f001 f81e 	bl	8003a54 <ADC_Enable>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f040 80e0 	bne.w	8002be4 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a2c:	f023 0301 	bic.w	r3, r3, #1
 8002a30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a40:	d004      	beq.n	8002a4c <HAL_ADC_Start+0x6c>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a6d      	ldr	r2, [pc, #436]	; (8002bfc <HAL_ADC_Start+0x21c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d106      	bne.n	8002a5a <HAL_ADC_Start+0x7a>
 8002a4c:	4b6c      	ldr	r3, [pc, #432]	; (8002c00 <HAL_ADC_Start+0x220>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d010      	beq.n	8002a7a <HAL_ADC_Start+0x9a>
 8002a58:	e005      	b.n	8002a66 <HAL_ADC_Start+0x86>
 8002a5a:	4b6a      	ldr	r3, [pc, #424]	; (8002c04 <HAL_ADC_Start+0x224>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <HAL_ADC_Start+0x9a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a6e:	d004      	beq.n	8002a7a <HAL_ADC_Start+0x9a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a64      	ldr	r2, [pc, #400]	; (8002c08 <HAL_ADC_Start+0x228>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d115      	bne.n	8002aa6 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d036      	beq.n	8002b02 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002aa4:	e02d      	b.n	8002b02 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aba:	d004      	beq.n	8002ac6 <HAL_ADC_Start+0xe6>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a4e      	ldr	r2, [pc, #312]	; (8002bfc <HAL_ADC_Start+0x21c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d10a      	bne.n	8002adc <HAL_ADC_Start+0xfc>
 8002ac6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf14      	ite	ne
 8002ad4:	2301      	movne	r3, #1
 8002ad6:	2300      	moveq	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	e008      	b.n	8002aee <HAL_ADC_Start+0x10e>
 8002adc:	4b4a      	ldr	r3, [pc, #296]	; (8002c08 <HAL_ADC_Start+0x228>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf14      	ite	ne
 8002ae8:	2301      	movne	r3, #1
 8002aea:	2300      	moveq	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d007      	beq.n	8002b02 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002afa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0e:	d106      	bne.n	8002b1e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b14:	f023 0206 	bic.w	r2, r3, #6
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	645a      	str	r2, [r3, #68]	; 0x44
 8002b1c:	e002      	b.n	8002b24 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	221c      	movs	r2, #28
 8002b32:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b3c:	d004      	beq.n	8002b48 <HAL_ADC_Start+0x168>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a2e      	ldr	r2, [pc, #184]	; (8002bfc <HAL_ADC_Start+0x21c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d106      	bne.n	8002b56 <HAL_ADC_Start+0x176>
 8002b48:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <HAL_ADC_Start+0x220>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d03e      	beq.n	8002bd2 <HAL_ADC_Start+0x1f2>
 8002b54:	e005      	b.n	8002b62 <HAL_ADC_Start+0x182>
 8002b56:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_ADC_Start+0x224>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d037      	beq.n	8002bd2 <HAL_ADC_Start+0x1f2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b6a:	d004      	beq.n	8002b76 <HAL_ADC_Start+0x196>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a22      	ldr	r2, [pc, #136]	; (8002bfc <HAL_ADC_Start+0x21c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d106      	bne.n	8002b84 <HAL_ADC_Start+0x1a4>
 8002b76:	4b22      	ldr	r3, [pc, #136]	; (8002c00 <HAL_ADC_Start+0x220>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	2b05      	cmp	r3, #5
 8002b80:	d027      	beq.n	8002bd2 <HAL_ADC_Start+0x1f2>
 8002b82:	e005      	b.n	8002b90 <HAL_ADC_Start+0x1b0>
 8002b84:	4b1f      	ldr	r3, [pc, #124]	; (8002c04 <HAL_ADC_Start+0x224>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	2b05      	cmp	r3, #5
 8002b8e:	d020      	beq.n	8002bd2 <HAL_ADC_Start+0x1f2>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b98:	d004      	beq.n	8002ba4 <HAL_ADC_Start+0x1c4>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a17      	ldr	r2, [pc, #92]	; (8002bfc <HAL_ADC_Start+0x21c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d106      	bne.n	8002bb2 <HAL_ADC_Start+0x1d2>
 8002ba4:	4b16      	ldr	r3, [pc, #88]	; (8002c00 <HAL_ADC_Start+0x220>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	2b09      	cmp	r3, #9
 8002bae:	d010      	beq.n	8002bd2 <HAL_ADC_Start+0x1f2>
 8002bb0:	e005      	b.n	8002bbe <HAL_ADC_Start+0x1de>
 8002bb2:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <HAL_ADC_Start+0x224>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 031f 	and.w	r3, r3, #31
 8002bba:	2b09      	cmp	r3, #9
 8002bbc:	d009      	beq.n	8002bd2 <HAL_ADC_Start+0x1f2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc6:	d004      	beq.n	8002bd2 <HAL_ADC_Start+0x1f2>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a0e      	ldr	r2, [pc, #56]	; (8002c08 <HAL_ADC_Start+0x228>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d10f      	bne.n	8002bf2 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0204 	orr.w	r2, r2, #4
 8002be0:	609a      	str	r2, [r3, #8]
 8002be2:	e006      	b.n	8002bf2 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002bec:	e001      	b.n	8002bf2 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	50000100 	.word	0x50000100
 8002c00:	50000300 	.word	0x50000300
 8002c04:	50000700 	.word	0x50000700
 8002c08:	50000400 	.word	0x50000400

08002c0c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d106      	bne.n	8002c58 <HAL_ADC_IRQHandler+0x30>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d00f      	beq.n	8002c78 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	f040 80c0 	bne.w	8002de8 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	f040 80b8 	bne.w	8002de8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c98:	d004      	beq.n	8002ca4 <HAL_ADC_IRQHandler+0x7c>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a8e      	ldr	r2, [pc, #568]	; (8002ed8 <HAL_ADC_IRQHandler+0x2b0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d106      	bne.n	8002cb2 <HAL_ADC_IRQHandler+0x8a>
 8002ca4:	4b8d      	ldr	r3, [pc, #564]	; (8002edc <HAL_ADC_IRQHandler+0x2b4>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d03e      	beq.n	8002d2e <HAL_ADC_IRQHandler+0x106>
 8002cb0:	e005      	b.n	8002cbe <HAL_ADC_IRQHandler+0x96>
 8002cb2:	4b8b      	ldr	r3, [pc, #556]	; (8002ee0 <HAL_ADC_IRQHandler+0x2b8>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d037      	beq.n	8002d2e <HAL_ADC_IRQHandler+0x106>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cc6:	d004      	beq.n	8002cd2 <HAL_ADC_IRQHandler+0xaa>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a82      	ldr	r2, [pc, #520]	; (8002ed8 <HAL_ADC_IRQHandler+0x2b0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d106      	bne.n	8002ce0 <HAL_ADC_IRQHandler+0xb8>
 8002cd2:	4b82      	ldr	r3, [pc, #520]	; (8002edc <HAL_ADC_IRQHandler+0x2b4>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 031f 	and.w	r3, r3, #31
 8002cda:	2b05      	cmp	r3, #5
 8002cdc:	d027      	beq.n	8002d2e <HAL_ADC_IRQHandler+0x106>
 8002cde:	e005      	b.n	8002cec <HAL_ADC_IRQHandler+0xc4>
 8002ce0:	4b7f      	ldr	r3, [pc, #508]	; (8002ee0 <HAL_ADC_IRQHandler+0x2b8>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	2b05      	cmp	r3, #5
 8002cea:	d020      	beq.n	8002d2e <HAL_ADC_IRQHandler+0x106>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf4:	d004      	beq.n	8002d00 <HAL_ADC_IRQHandler+0xd8>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a77      	ldr	r2, [pc, #476]	; (8002ed8 <HAL_ADC_IRQHandler+0x2b0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d106      	bne.n	8002d0e <HAL_ADC_IRQHandler+0xe6>
 8002d00:	4b76      	ldr	r3, [pc, #472]	; (8002edc <HAL_ADC_IRQHandler+0x2b4>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	2b09      	cmp	r3, #9
 8002d0a:	d010      	beq.n	8002d2e <HAL_ADC_IRQHandler+0x106>
 8002d0c:	e005      	b.n	8002d1a <HAL_ADC_IRQHandler+0xf2>
 8002d0e:	4b74      	ldr	r3, [pc, #464]	; (8002ee0 <HAL_ADC_IRQHandler+0x2b8>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	2b09      	cmp	r3, #9
 8002d18:	d009      	beq.n	8002d2e <HAL_ADC_IRQHandler+0x106>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d22:	d004      	beq.n	8002d2e <HAL_ADC_IRQHandler+0x106>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a6e      	ldr	r2, [pc, #440]	; (8002ee4 <HAL_ADC_IRQHandler+0x2bc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d104      	bne.n	8002d38 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	e00f      	b.n	8002d58 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d40:	d004      	beq.n	8002d4c <HAL_ADC_IRQHandler+0x124>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a64      	ldr	r2, [pc, #400]	; (8002ed8 <HAL_ADC_IRQHandler+0x2b0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d102      	bne.n	8002d52 <HAL_ADC_IRQHandler+0x12a>
 8002d4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d50:	e000      	b.n	8002d54 <HAL_ADC_IRQHandler+0x12c>
 8002d52:	4b64      	ldr	r3, [pc, #400]	; (8002ee4 <HAL_ADC_IRQHandler+0x2bc>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d139      	bne.n	8002dda <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d134      	bne.n	8002dda <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d12d      	bne.n	8002dda <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d11a      	bne.n	8002dc2 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 020c 	bic.w	r2, r2, #12
 8002d9a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d112      	bne.n	8002dda <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	f043 0201 	orr.w	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40
 8002dc0:	e00b      	b.n	8002dda <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f043 0210 	orr.w	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	f043 0201 	orr.w	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff fbe8 	bl	80025b0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	220c      	movs	r2, #12
 8002de6:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	2b20      	cmp	r3, #32
 8002df4:	d106      	bne.n	8002e04 <HAL_ADC_IRQHandler+0x1dc>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d00f      	beq.n	8002e24 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002e0e:	2b40      	cmp	r3, #64	; 0x40
 8002e10:	f040 8143 	bne.w	800309a <HAL_ADC_IRQHandler+0x472>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1e:	2b40      	cmp	r3, #64	; 0x40
 8002e20:	f040 813b 	bne.w	800309a <HAL_ADC_IRQHandler+0x472>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e38:	d004      	beq.n	8002e44 <HAL_ADC_IRQHandler+0x21c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a26      	ldr	r2, [pc, #152]	; (8002ed8 <HAL_ADC_IRQHandler+0x2b0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d106      	bne.n	8002e52 <HAL_ADC_IRQHandler+0x22a>
 8002e44:	4b25      	ldr	r3, [pc, #148]	; (8002edc <HAL_ADC_IRQHandler+0x2b4>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d03e      	beq.n	8002ece <HAL_ADC_IRQHandler+0x2a6>
 8002e50:	e005      	b.n	8002e5e <HAL_ADC_IRQHandler+0x236>
 8002e52:	4b23      	ldr	r3, [pc, #140]	; (8002ee0 <HAL_ADC_IRQHandler+0x2b8>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d037      	beq.n	8002ece <HAL_ADC_IRQHandler+0x2a6>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e66:	d004      	beq.n	8002e72 <HAL_ADC_IRQHandler+0x24a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a1a      	ldr	r2, [pc, #104]	; (8002ed8 <HAL_ADC_IRQHandler+0x2b0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d106      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x258>
 8002e72:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <HAL_ADC_IRQHandler+0x2b4>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 031f 	and.w	r3, r3, #31
 8002e7a:	2b05      	cmp	r3, #5
 8002e7c:	d027      	beq.n	8002ece <HAL_ADC_IRQHandler+0x2a6>
 8002e7e:	e005      	b.n	8002e8c <HAL_ADC_IRQHandler+0x264>
 8002e80:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <HAL_ADC_IRQHandler+0x2b8>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	2b05      	cmp	r3, #5
 8002e8a:	d020      	beq.n	8002ece <HAL_ADC_IRQHandler+0x2a6>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e94:	d004      	beq.n	8002ea0 <HAL_ADC_IRQHandler+0x278>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a0f      	ldr	r2, [pc, #60]	; (8002ed8 <HAL_ADC_IRQHandler+0x2b0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d106      	bne.n	8002eae <HAL_ADC_IRQHandler+0x286>
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <HAL_ADC_IRQHandler+0x2b4>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	2b09      	cmp	r3, #9
 8002eaa:	d010      	beq.n	8002ece <HAL_ADC_IRQHandler+0x2a6>
 8002eac:	e005      	b.n	8002eba <HAL_ADC_IRQHandler+0x292>
 8002eae:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <HAL_ADC_IRQHandler+0x2b8>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	2b09      	cmp	r3, #9
 8002eb8:	d009      	beq.n	8002ece <HAL_ADC_IRQHandler+0x2a6>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ec2:	d004      	beq.n	8002ece <HAL_ADC_IRQHandler+0x2a6>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a06      	ldr	r2, [pc, #24]	; (8002ee4 <HAL_ADC_IRQHandler+0x2bc>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_ADC_IRQHandler+0x2c0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	e017      	b.n	8002f08 <HAL_ADC_IRQHandler+0x2e0>
 8002ed8:	50000100 	.word	0x50000100
 8002edc:	50000300 	.word	0x50000300
 8002ee0:	50000700 	.word	0x50000700
 8002ee4:	50000400 	.word	0x50000400
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ef0:	d004      	beq.n	8002efc <HAL_ADC_IRQHandler+0x2d4>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a5b      	ldr	r2, [pc, #364]	; (8003064 <HAL_ADC_IRQHandler+0x43c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d102      	bne.n	8002f02 <HAL_ADC_IRQHandler+0x2da>
 8002efc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f00:	e000      	b.n	8002f04 <HAL_ADC_IRQHandler+0x2dc>
 8002f02:	4b59      	ldr	r3, [pc, #356]	; (8003068 <HAL_ADC_IRQHandler+0x440>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f040 80ba 	bne.w	800308c <HAL_ADC_IRQHandler+0x464>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00d      	beq.n	8002f3e <HAL_ADC_IRQHandler+0x316>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f040 80ad 	bne.w	800308c <HAL_ADC_IRQHandler+0x464>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f040 80a7 	bne.w	800308c <HAL_ADC_IRQHandler+0x464>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f48:	2b40      	cmp	r3, #64	; 0x40
 8002f4a:	f040 809f 	bne.w	800308c <HAL_ADC_IRQHandler+0x464>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f56:	d004      	beq.n	8002f62 <HAL_ADC_IRQHandler+0x33a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a41      	ldr	r2, [pc, #260]	; (8003064 <HAL_ADC_IRQHandler+0x43c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d106      	bne.n	8002f70 <HAL_ADC_IRQHandler+0x348>
 8002f62:	4b42      	ldr	r3, [pc, #264]	; (800306c <HAL_ADC_IRQHandler+0x444>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d03e      	beq.n	8002fec <HAL_ADC_IRQHandler+0x3c4>
 8002f6e:	e005      	b.n	8002f7c <HAL_ADC_IRQHandler+0x354>
 8002f70:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <HAL_ADC_IRQHandler+0x448>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d037      	beq.n	8002fec <HAL_ADC_IRQHandler+0x3c4>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f84:	d004      	beq.n	8002f90 <HAL_ADC_IRQHandler+0x368>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a36      	ldr	r2, [pc, #216]	; (8003064 <HAL_ADC_IRQHandler+0x43c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d106      	bne.n	8002f9e <HAL_ADC_IRQHandler+0x376>
 8002f90:	4b36      	ldr	r3, [pc, #216]	; (800306c <HAL_ADC_IRQHandler+0x444>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	2b06      	cmp	r3, #6
 8002f9a:	d027      	beq.n	8002fec <HAL_ADC_IRQHandler+0x3c4>
 8002f9c:	e005      	b.n	8002faa <HAL_ADC_IRQHandler+0x382>
 8002f9e:	4b34      	ldr	r3, [pc, #208]	; (8003070 <HAL_ADC_IRQHandler+0x448>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 031f 	and.w	r3, r3, #31
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d020      	beq.n	8002fec <HAL_ADC_IRQHandler+0x3c4>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fb2:	d004      	beq.n	8002fbe <HAL_ADC_IRQHandler+0x396>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a2a      	ldr	r2, [pc, #168]	; (8003064 <HAL_ADC_IRQHandler+0x43c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d106      	bne.n	8002fcc <HAL_ADC_IRQHandler+0x3a4>
 8002fbe:	4b2b      	ldr	r3, [pc, #172]	; (800306c <HAL_ADC_IRQHandler+0x444>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 031f 	and.w	r3, r3, #31
 8002fc6:	2b07      	cmp	r3, #7
 8002fc8:	d010      	beq.n	8002fec <HAL_ADC_IRQHandler+0x3c4>
 8002fca:	e005      	b.n	8002fd8 <HAL_ADC_IRQHandler+0x3b0>
 8002fcc:	4b28      	ldr	r3, [pc, #160]	; (8003070 <HAL_ADC_IRQHandler+0x448>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	2b07      	cmp	r3, #7
 8002fd6:	d009      	beq.n	8002fec <HAL_ADC_IRQHandler+0x3c4>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe0:	d004      	beq.n	8002fec <HAL_ADC_IRQHandler+0x3c4>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a20      	ldr	r2, [pc, #128]	; (8003068 <HAL_ADC_IRQHandler+0x440>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d104      	bne.n	8002ff6 <HAL_ADC_IRQHandler+0x3ce>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	e00f      	b.n	8003016 <HAL_ADC_IRQHandler+0x3ee>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ffe:	d004      	beq.n	800300a <HAL_ADC_IRQHandler+0x3e2>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a17      	ldr	r2, [pc, #92]	; (8003064 <HAL_ADC_IRQHandler+0x43c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d102      	bne.n	8003010 <HAL_ADC_IRQHandler+0x3e8>
 800300a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800300e:	e000      	b.n	8003012 <HAL_ADC_IRQHandler+0x3ea>
 8003010:	4b15      	ldr	r3, [pc, #84]	; (8003068 <HAL_ADC_IRQHandler+0x440>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d135      	bne.n	800308c <HAL_ADC_IRQHandler+0x464>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d122      	bne.n	8003074 <HAL_ADC_IRQHandler+0x44c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800303c:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003052:	2b00      	cmp	r3, #0
 8003054:	d11a      	bne.n	800308c <HAL_ADC_IRQHandler+0x464>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
 8003062:	e013      	b.n	800308c <HAL_ADC_IRQHandler+0x464>
 8003064:	50000100 	.word	0x50000100
 8003068:	50000400 	.word	0x50000400
 800306c:	50000300 	.word	0x50000300
 8003070:	50000700 	.word	0x50000700
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	f043 0210 	orr.w	r2, r3, #16
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003084:	f043 0201 	orr.w	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f8db 	bl	8003248 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2260      	movs	r2, #96	; 0x60
 8003098:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a4:	2b80      	cmp	r3, #128	; 0x80
 80030a6:	d113      	bne.n	80030d0 <HAL_ADC_IRQHandler+0x4a8>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b2:	2b80      	cmp	r3, #128	; 0x80
 80030b4:	d10c      	bne.n	80030d0 <HAL_ADC_IRQHandler+0x4a8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff fa7e 	bl	80025c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2280      	movs	r2, #128	; 0x80
 80030ce:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030de:	d115      	bne.n	800310c <HAL_ADC_IRQHandler+0x4e4>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ee:	d10d      	bne.n	800310c <HAL_ADC_IRQHandler+0x4e4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f8b7 	bl	8003270 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f44f 7280 	mov.w	r2, #256	; 0x100
 800310a:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800311a:	d115      	bne.n	8003148 <HAL_ADC_IRQHandler+0x520>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800312a:	d10d      	bne.n	8003148 <HAL_ADC_IRQHandler+0x520>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f8a3 	bl	8003284 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003146:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	2b10      	cmp	r3, #16
 8003154:	d149      	bne.n	80031ea <HAL_ADC_IRQHandler+0x5c2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	2b10      	cmp	r3, #16
 8003162:	d142      	bne.n	80031ea <HAL_ADC_IRQHandler+0x5c2>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003168:	2b01      	cmp	r3, #1
 800316a:	d102      	bne.n	8003172 <HAL_ADC_IRQHandler+0x54a>
    {
      overrun_error = 1U;
 800316c:	2301      	movs	r3, #1
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	e025      	b.n	80031be <HAL_ADC_IRQHandler+0x596>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800317a:	d004      	beq.n	8003186 <HAL_ADC_IRQHandler+0x55e>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a2e      	ldr	r2, [pc, #184]	; (800323c <HAL_ADC_IRQHandler+0x614>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d101      	bne.n	800318a <HAL_ADC_IRQHandler+0x562>
 8003186:	4b2e      	ldr	r3, [pc, #184]	; (8003240 <HAL_ADC_IRQHandler+0x618>)
 8003188:	e000      	b.n	800318c <HAL_ADC_IRQHandler+0x564>
 800318a:	4b2e      	ldr	r3, [pc, #184]	; (8003244 <HAL_ADC_IRQHandler+0x61c>)
 800318c:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_ADC_IRQHandler+0x586>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d10a      	bne.n	80031be <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 80031a8:	2301      	movs	r3, #1
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	e007      	b.n	80031be <HAL_ADC_IRQHandler+0x596>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 80031ba:	2301      	movs	r3, #1
 80031bc:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d10e      	bne.n	80031e2 <HAL_ADC_IRQHandler+0x5ba>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d4:	f043 0202 	orr.w	r2, r3, #2
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff f9fb 	bl	80025d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2210      	movs	r2, #16
 80031e8:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f8:	d11b      	bne.n	8003232 <HAL_ADC_IRQHandler+0x60a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003208:	d113      	bne.n	8003232 <HAL_ADC_IRQHandler+0x60a>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	f043 0208 	orr.w	r2, r3, #8
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800322a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f815 	bl	800325c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003232:	bf00      	nop
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	50000100 	.word	0x50000100
 8003240:	50000300 	.word	0x50000300
 8003244:	50000700 	.word	0x50000700

08003248 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003298:	b480      	push	{r7}
 800329a:	b09b      	sub	sp, #108	; 0x6c
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x22>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e2ca      	b.n	8003850 <HAL_ADC_ConfigChannel+0x5b8>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f040 82ae 	bne.w	800382e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d81c      	bhi.n	8003314 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	461a      	mov	r2, r3
 80032ee:	231f      	movs	r3, #31
 80032f0:	4093      	lsls	r3, r2
 80032f2:	43db      	mvns	r3, r3
 80032f4:	4019      	ands	r1, r3
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	4413      	add	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fa00 f203 	lsl.w	r2, r0, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
 8003312:	e063      	b.n	80033dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b09      	cmp	r3, #9
 800331a:	d81e      	bhi.n	800335a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4413      	add	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	3b1e      	subs	r3, #30
 8003330:	221f      	movs	r2, #31
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43db      	mvns	r3, r3
 8003338:	4019      	ands	r1, r3
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4413      	add	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	3b1e      	subs	r3, #30
 800334c:	fa00 f203 	lsl.w	r2, r0, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	635a      	str	r2, [r3, #52]	; 0x34
 8003358:	e040      	b.n	80033dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b0e      	cmp	r3, #14
 8003360:	d81e      	bhi.n	80033a0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	4413      	add	r3, r2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	3b3c      	subs	r3, #60	; 0x3c
 8003376:	221f      	movs	r2, #31
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	4019      	ands	r1, r3
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	6818      	ldr	r0, [r3, #0]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	4413      	add	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	3b3c      	subs	r3, #60	; 0x3c
 8003392:	fa00 f203 	lsl.w	r2, r0, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	639a      	str	r2, [r3, #56]	; 0x38
 800339e:	e01d      	b.n	80033dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	3b5a      	subs	r3, #90	; 0x5a
 80033b4:	221f      	movs	r2, #31
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	4019      	ands	r1, r3
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	4413      	add	r3, r2
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	3b5a      	subs	r3, #90	; 0x5a
 80033d0:	fa00 f203 	lsl.w	r2, r0, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f040 80e5 	bne.w	80035b6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b09      	cmp	r3, #9
 80033f2:	d91c      	bls.n	800342e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6999      	ldr	r1, [r3, #24]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4613      	mov	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4413      	add	r3, r2
 8003404:	3b1e      	subs	r3, #30
 8003406:	2207      	movs	r2, #7
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	4019      	ands	r1, r3
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	6898      	ldr	r0, [r3, #8]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	3b1e      	subs	r3, #30
 8003420:	fa00 f203 	lsl.w	r2, r0, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	619a      	str	r2, [r3, #24]
 800342c:	e019      	b.n	8003462 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6959      	ldr	r1, [r3, #20]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	4413      	add	r3, r2
 800343e:	2207      	movs	r2, #7
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	4019      	ands	r1, r3
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	6898      	ldr	r0, [r3, #8]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4613      	mov	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	4413      	add	r3, r2
 8003456:	fa00 f203 	lsl.w	r2, r0, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	695a      	ldr	r2, [r3, #20]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	08db      	lsrs	r3, r3, #3
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	3b01      	subs	r3, #1
 8003480:	2b03      	cmp	r3, #3
 8003482:	d84f      	bhi.n	8003524 <HAL_ADC_ConfigChannel+0x28c>
 8003484:	a201      	add	r2, pc, #4	; (adr r2, 800348c <HAL_ADC_ConfigChannel+0x1f4>)
 8003486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348a:	bf00      	nop
 800348c:	0800349d 	.word	0x0800349d
 8003490:	080034bf 	.word	0x080034bf
 8003494:	080034e1 	.word	0x080034e1
 8003498:	08003503 	.word	0x08003503
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034a2:	4b9a      	ldr	r3, [pc, #616]	; (800370c <HAL_ADC_ConfigChannel+0x474>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	0691      	lsls	r1, r2, #26
 80034ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034ae:	430a      	orrs	r2, r1
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034ba:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80034bc:	e07e      	b.n	80035bc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034c4:	4b91      	ldr	r3, [pc, #580]	; (800370c <HAL_ADC_ConfigChannel+0x474>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	0691      	lsls	r1, r2, #26
 80034ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034d0:	430a      	orrs	r2, r1
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034dc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80034de:	e06d      	b.n	80035bc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80034e6:	4b89      	ldr	r3, [pc, #548]	; (800370c <HAL_ADC_ConfigChannel+0x474>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	0691      	lsls	r1, r2, #26
 80034f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034f2:	430a      	orrs	r2, r1
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034fe:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003500:	e05c      	b.n	80035bc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003508:	4b80      	ldr	r3, [pc, #512]	; (800370c <HAL_ADC_ConfigChannel+0x474>)
 800350a:	4013      	ands	r3, r2
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	6812      	ldr	r2, [r2, #0]
 8003510:	0691      	lsls	r1, r2, #26
 8003512:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003514:	430a      	orrs	r2, r1
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003520:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003522:	e04b      	b.n	80035bc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	069b      	lsls	r3, r3, #26
 8003534:	429a      	cmp	r2, r3
 8003536:	d107      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003546:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800354e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	069b      	lsls	r3, r3, #26
 8003558:	429a      	cmp	r2, r3
 800355a:	d107      	bne.n	800356c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800356a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003572:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	069b      	lsls	r3, r3, #26
 800357c:	429a      	cmp	r2, r3
 800357e:	d107      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800358e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003596:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	069b      	lsls	r3, r3, #26
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d10a      	bne.n	80035ba <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035b2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80035b4:	e001      	b.n	80035ba <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80035b6:	bf00      	nop
 80035b8:	e000      	b.n	80035bc <HAL_ADC_ConfigChannel+0x324>
      break;
 80035ba:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d108      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x344>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x344>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <HAL_ADC_ConfigChannel+0x346>
 80035dc:	2300      	movs	r3, #0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f040 8130 	bne.w	8003844 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d00f      	beq.n	800360c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2201      	movs	r2, #1
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43da      	mvns	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	400a      	ands	r2, r1
 8003606:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800360a:	e049      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2201      	movs	r2, #1
 800361a:	409a      	lsls	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b09      	cmp	r3, #9
 800362c:	d91c      	bls.n	8003668 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6999      	ldr	r1, [r3, #24]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	3b1b      	subs	r3, #27
 8003640:	2207      	movs	r2, #7
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	4019      	ands	r1, r3
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6898      	ldr	r0, [r3, #8]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	4613      	mov	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4413      	add	r3, r2
 8003658:	3b1b      	subs	r3, #27
 800365a:	fa00 f203 	lsl.w	r2, r0, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	619a      	str	r2, [r3, #24]
 8003666:	e01b      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6959      	ldr	r1, [r3, #20]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	4613      	mov	r3, r2
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	4413      	add	r3, r2
 800367a:	2207      	movs	r2, #7
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	4019      	ands	r1, r3
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	6898      	ldr	r0, [r3, #8]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	fa00 f203 	lsl.w	r2, r0, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036a8:	d004      	beq.n	80036b4 <HAL_ADC_ConfigChannel+0x41c>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a18      	ldr	r2, [pc, #96]	; (8003710 <HAL_ADC_ConfigChannel+0x478>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x420>
 80036b4:	4b17      	ldr	r3, [pc, #92]	; (8003714 <HAL_ADC_ConfigChannel+0x47c>)
 80036b6:	e000      	b.n	80036ba <HAL_ADC_ConfigChannel+0x422>
 80036b8:	4b17      	ldr	r3, [pc, #92]	; (8003718 <HAL_ADC_ConfigChannel+0x480>)
 80036ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b10      	cmp	r3, #16
 80036c2:	d105      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80036c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d015      	beq.n	80036fc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80036d4:	2b11      	cmp	r3, #17
 80036d6:	d105      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80036d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00b      	beq.n	80036fc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80036e8:	2b12      	cmp	r3, #18
 80036ea:	f040 80ab 	bne.w	8003844 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80036ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f040 80a4 	bne.w	8003844 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003704:	d10a      	bne.n	800371c <HAL_ADC_ConfigChannel+0x484>
 8003706:	4b02      	ldr	r3, [pc, #8]	; (8003710 <HAL_ADC_ConfigChannel+0x478>)
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	e022      	b.n	8003752 <HAL_ADC_ConfigChannel+0x4ba>
 800370c:	83fff000 	.word	0x83fff000
 8003710:	50000100 	.word	0x50000100
 8003714:	50000300 	.word	0x50000300
 8003718:	50000700 	.word	0x50000700
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a4e      	ldr	r2, [pc, #312]	; (800385c <HAL_ADC_ConfigChannel+0x5c4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d103      	bne.n	800372e <HAL_ADC_ConfigChannel+0x496>
 8003726:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	e011      	b.n	8003752 <HAL_ADC_ConfigChannel+0x4ba>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a4b      	ldr	r2, [pc, #300]	; (8003860 <HAL_ADC_ConfigChannel+0x5c8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d102      	bne.n	800373e <HAL_ADC_ConfigChannel+0x4a6>
 8003738:	4b4a      	ldr	r3, [pc, #296]	; (8003864 <HAL_ADC_ConfigChannel+0x5cc>)
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	e009      	b.n	8003752 <HAL_ADC_ConfigChannel+0x4ba>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a48      	ldr	r2, [pc, #288]	; (8003864 <HAL_ADC_ConfigChannel+0x5cc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d102      	bne.n	800374e <HAL_ADC_ConfigChannel+0x4b6>
 8003748:	4b45      	ldr	r3, [pc, #276]	; (8003860 <HAL_ADC_ConfigChannel+0x5c8>)
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	e001      	b.n	8003752 <HAL_ADC_ConfigChannel+0x4ba>
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	2b01      	cmp	r3, #1
 800375e:	d108      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x4da>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x4da>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <HAL_ADC_ConfigChannel+0x4dc>
 8003772:	2300      	movs	r3, #0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d150      	bne.n	800381a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003778:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800377a:	2b00      	cmp	r3, #0
 800377c:	d010      	beq.n	80037a0 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	2b01      	cmp	r3, #1
 8003788:	d107      	bne.n	800379a <HAL_ADC_ConfigChannel+0x502>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_ADC_ConfigChannel+0x502>
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <HAL_ADC_ConfigChannel+0x504>
 800379a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800379c:	2b00      	cmp	r3, #0
 800379e:	d13c      	bne.n	800381a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b10      	cmp	r3, #16
 80037a6:	d11d      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x54c>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037b0:	d118      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80037b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80037ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037bc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037be:	4b2a      	ldr	r3, [pc, #168]	; (8003868 <HAL_ADC_ConfigChannel+0x5d0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a2a      	ldr	r2, [pc, #168]	; (800386c <HAL_ADC_ConfigChannel+0x5d4>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	0c9a      	lsrs	r2, r3, #18
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037d4:	e002      	b.n	80037dc <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	3b01      	subs	r3, #1
 80037da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f9      	bne.n	80037d6 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80037e2:	e02e      	b.n	8003842 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b11      	cmp	r3, #17
 80037ea:	d10b      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x56c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037f4:	d106      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80037f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80037fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003800:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003802:	e01e      	b.n	8003842 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b12      	cmp	r3, #18
 800380a:	d11a      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800380c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003816:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003818:	e013      	b.n	8003842 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	f043 0220 	orr.w	r2, r3, #32
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800382c:	e00a      	b.n	8003844 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f043 0220 	orr.w	r2, r3, #32
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003840:	e000      	b.n	8003844 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003842:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800384c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003850:	4618      	mov	r0, r3
 8003852:	376c      	adds	r7, #108	; 0x6c
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	50000100 	.word	0x50000100
 8003860:	50000400 	.word	0x50000400
 8003864:	50000500 	.word	0x50000500
 8003868:	20000008 	.word	0x20000008
 800386c:	431bde83 	.word	0x431bde83

08003870 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003870:	b480      	push	{r7}
 8003872:	b099      	sub	sp, #100	; 0x64
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003888:	d102      	bne.n	8003890 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800388a:	4b6d      	ldr	r3, [pc, #436]	; (8003a40 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	e01a      	b.n	80038c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a6a      	ldr	r2, [pc, #424]	; (8003a40 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d103      	bne.n	80038a2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800389a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	e011      	b.n	80038c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a67      	ldr	r2, [pc, #412]	; (8003a44 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d102      	bne.n	80038b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80038ac:	4b66      	ldr	r3, [pc, #408]	; (8003a48 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	e009      	b.n	80038c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a64      	ldr	r2, [pc, #400]	; (8003a48 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d102      	bne.n	80038c2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80038bc:	4b61      	ldr	r3, [pc, #388]	; (8003a44 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	e001      	b.n	80038c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0b0      	b.n	8003a32 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80038da:	2302      	movs	r3, #2
 80038dc:	e0a9      	b.n	8003a32 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f040 808d 	bne.w	8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f040 8086 	bne.w	8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800390c:	d004      	beq.n	8003918 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a4b      	ldr	r2, [pc, #300]	; (8003a40 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003918:	4b4c      	ldr	r3, [pc, #304]	; (8003a4c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800391a:	e000      	b.n	800391e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800391c:	4b4c      	ldr	r3, [pc, #304]	; (8003a50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800391e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d040      	beq.n	80039aa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	6859      	ldr	r1, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800393a:	035b      	lsls	r3, r3, #13
 800393c:	430b      	orrs	r3, r1
 800393e:	431a      	orrs	r2, r3
 8003940:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003942:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	2b01      	cmp	r3, #1
 8003950:	d108      	bne.n	8003964 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003964:	2300      	movs	r3, #0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d15c      	bne.n	8003a24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	2b01      	cmp	r3, #1
 8003974:	d107      	bne.n	8003986 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003986:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003988:	2b00      	cmp	r3, #0
 800398a:	d14b      	bne.n	8003a24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800398c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003994:	f023 030f 	bic.w	r3, r3, #15
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	6811      	ldr	r1, [r2, #0]
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	6892      	ldr	r2, [r2, #8]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	431a      	orrs	r2, r3
 80039a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039a6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80039a8:	e03c      	b.n	8003a24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80039aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039b4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d108      	bne.n	80039d6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80039d6:	2300      	movs	r3, #0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d123      	bne.n	8003a24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d107      	bne.n	80039f8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80039f8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d112      	bne.n	8003a24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80039fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a06:	f023 030f 	bic.w	r3, r3, #15
 8003a0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a0c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a0e:	e009      	b.n	8003a24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	f043 0220 	orr.w	r2, r3, #32
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003a22:	e000      	b.n	8003a26 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a24:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003a2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003a32:	4618      	mov	r0, r3
 8003a34:	3764      	adds	r7, #100	; 0x64
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	50000100 	.word	0x50000100
 8003a44:	50000400 	.word	0x50000400
 8003a48:	50000500 	.word	0x50000500
 8003a4c:	50000300 	.word	0x50000300
 8003a50:	50000700 	.word	0x50000700

08003a54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d108      	bne.n	8003a80 <ADC_Enable+0x2c>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <ADC_Enable+0x2c>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <ADC_Enable+0x2e>
 8003a80:	2300      	movs	r3, #0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d143      	bne.n	8003b0e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	4b22      	ldr	r3, [pc, #136]	; (8003b18 <ADC_Enable+0xc4>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00d      	beq.n	8003ab0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f043 0210 	orr.w	r2, r3, #16
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa4:	f043 0201 	orr.w	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e02f      	b.n	8003b10 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003ac0:	f7fe fd6a 	bl	8002598 <HAL_GetTick>
 8003ac4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ac6:	e01b      	b.n	8003b00 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ac8:	f7fe fd66 	bl	8002598 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d914      	bls.n	8003b00 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d00d      	beq.n	8003b00 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	f043 0210 	orr.w	r2, r3, #16
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af4:	f043 0201 	orr.w	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e007      	b.n	8003b10 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d1dc      	bne.n	8003ac8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	8000003f 	.word	0x8000003f

08003b1c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d108      	bne.n	8003b48 <ADC_Disable+0x2c>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <ADC_Disable+0x2c>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <ADC_Disable+0x2e>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d047      	beq.n	8003bde <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 030d 	and.w	r3, r3, #13
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d10f      	bne.n	8003b7c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0202 	orr.w	r2, r2, #2
 8003b6a:	609a      	str	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2203      	movs	r2, #3
 8003b72:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003b74:	f7fe fd10 	bl	8002598 <HAL_GetTick>
 8003b78:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b7a:	e029      	b.n	8003bd0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	f043 0210 	orr.w	r2, r3, #16
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e023      	b.n	8003be0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b98:	f7fe fcfe 	bl	8002598 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d914      	bls.n	8003bd0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d10d      	bne.n	8003bd0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	f043 0210 	orr.w	r2, r3, #16
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc4:	f043 0201 	orr.w	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e007      	b.n	8003be0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d0dc      	beq.n	8003b98 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <__NVIC_SetPriorityGrouping+0x44>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c04:	4013      	ands	r3, r2
 8003c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c1a:	4a04      	ldr	r2, [pc, #16]	; (8003c2c <__NVIC_SetPriorityGrouping+0x44>)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	60d3      	str	r3, [r2, #12]
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	e000ed00 	.word	0xe000ed00

08003c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <__NVIC_GetPriorityGrouping+0x18>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	0a1b      	lsrs	r3, r3, #8
 8003c3a:	f003 0307 	and.w	r3, r3, #7
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	db0b      	blt.n	8003c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	f003 021f 	and.w	r2, r3, #31
 8003c64:	4907      	ldr	r1, [pc, #28]	; (8003c84 <__NVIC_EnableIRQ+0x38>)
 8003c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	e000e100 	.word	0xe000e100

08003c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	6039      	str	r1, [r7, #0]
 8003c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	db0a      	blt.n	8003cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	490c      	ldr	r1, [pc, #48]	; (8003cd4 <__NVIC_SetPriority+0x4c>)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	0112      	lsls	r2, r2, #4
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	440b      	add	r3, r1
 8003cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cb0:	e00a      	b.n	8003cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	4908      	ldr	r1, [pc, #32]	; (8003cd8 <__NVIC_SetPriority+0x50>)
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	3b04      	subs	r3, #4
 8003cc0:	0112      	lsls	r2, r2, #4
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	761a      	strb	r2, [r3, #24]
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	e000e100 	.word	0xe000e100
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b089      	sub	sp, #36	; 0x24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f1c3 0307 	rsb	r3, r3, #7
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	bf28      	it	cs
 8003cfa:	2304      	movcs	r3, #4
 8003cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	3304      	adds	r3, #4
 8003d02:	2b06      	cmp	r3, #6
 8003d04:	d902      	bls.n	8003d0c <NVIC_EncodePriority+0x30>
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	3b03      	subs	r3, #3
 8003d0a:	e000      	b.n	8003d0e <NVIC_EncodePriority+0x32>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d10:	f04f 32ff 	mov.w	r2, #4294967295
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43da      	mvns	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	401a      	ands	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d24:	f04f 31ff 	mov.w	r1, #4294967295
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2e:	43d9      	mvns	r1, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d34:	4313      	orrs	r3, r2
         );
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3724      	adds	r7, #36	; 0x24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d54:	d301      	bcc.n	8003d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d56:	2301      	movs	r3, #1
 8003d58:	e00f      	b.n	8003d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d5a:	4a0a      	ldr	r2, [pc, #40]	; (8003d84 <SysTick_Config+0x40>)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d62:	210f      	movs	r1, #15
 8003d64:	f04f 30ff 	mov.w	r0, #4294967295
 8003d68:	f7ff ff8e 	bl	8003c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <SysTick_Config+0x40>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d72:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <SysTick_Config+0x40>)
 8003d74:	2207      	movs	r2, #7
 8003d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	e000e010 	.word	0xe000e010

08003d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff ff29 	bl	8003be8 <__NVIC_SetPriorityGrouping>
}
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b086      	sub	sp, #24
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	4603      	mov	r3, r0
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
 8003daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003db0:	f7ff ff3e 	bl	8003c30 <__NVIC_GetPriorityGrouping>
 8003db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	6978      	ldr	r0, [r7, #20]
 8003dbc:	f7ff ff8e 	bl	8003cdc <NVIC_EncodePriority>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff ff5d 	bl	8003c88 <__NVIC_SetPriority>
}
 8003dce:	bf00      	nop
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	4603      	mov	r3, r0
 8003dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff ff31 	bl	8003c4c <__NVIC_EnableIRQ>
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff ffa2 	bl	8003d44 <SysTick_Config>
 8003e00:	4603      	mov	r3, r0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e014      	b.n	8003e46 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	791b      	ldrb	r3, [r3, #4]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d105      	bne.n	8003e32 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7fe f8c7 	bl	8001fc0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2202      	movs	r2, #2
 8003e36:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8003e62:	b480      	push	{r7}
 8003e64:	b087      	sub	sp, #28
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
 8003e6e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4413      	add	r3, r2
 8003e86:	3308      	adds	r3, #8
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	e004      	b.n	8003e96 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4413      	add	r3, r2
 8003e92:	3314      	adds	r3, #20
 8003e94:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	795b      	ldrb	r3, [r3, #5]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <HAL_DAC_Start+0x16>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e039      	b.n	8003f36 <HAL_DAC_Start+0x8a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6819      	ldr	r1, [r3, #0]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10f      	bne.n	8003f08 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003ef2:	2b3c      	cmp	r3, #60	; 0x3c
 8003ef4:	d118      	bne.n	8003f28 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	e00f      	b.n	8003f28 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f12:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8003f16:	d107      	bne.n	8003f28 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0202 	orr.w	r2, r2, #2
 8003f26:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f58:	d120      	bne.n	8003f9c <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f68:	d118      	bne.n	8003f9c <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f043 0201 	orr.w	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f84:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f94:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7ff ff59 	bl	8003e4e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003faa:	d120      	bne.n	8003fee <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fba:	d118      	bne.n	8003fee <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f043 0202 	orr.w	r2, r3, #2
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003fd6:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003fe6:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f851 	bl	8004090 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b087      	sub	sp, #28
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	2300      	movs	r3, #0
 8004008:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	795b      	ldrb	r3, [r3, #5]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_DAC_ConfigChannel+0x20>
 8004012:	2302      	movs	r3, #2
 8004014:	e036      	b.n	8004084 <HAL_DAC_ConfigChannel+0x8e>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2202      	movs	r2, #2
 8004020:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800402a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4013      	ands	r3, r2
 800403a:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6819      	ldr	r1, [r3, #0]
 8004064:	22c0      	movs	r2, #192	; 0xc0
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	43da      	mvns	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	400a      	ands	r2, r1
 8004074:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e037      	b.n	800412a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2202      	movs	r2, #2
 80040be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80040d0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80040d4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80040de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4313      	orrs	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f9b7 	bl	8004480 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}  
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b086      	sub	sp, #24
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	607a      	str	r2, [r7, #4]
 800413e:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 3020 	ldrb.w	r3, [r3, #32]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_DMA_Start_IT+0x20>
 800414e:	2302      	movs	r3, #2
 8004150:	e04a      	b.n	80041e8 <HAL_DMA_Start_IT+0xb6>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004160:	2b01      	cmp	r3, #1
 8004162:	d13a      	bne.n	80041da <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0201 	bic.w	r2, r2, #1
 8004180:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 f94b 	bl	8004424 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d008      	beq.n	80041a8 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 020e 	orr.w	r2, r2, #14
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	e00f      	b.n	80041c8 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 020a 	orr.w	r2, r2, #10
 80041b6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0204 	bic.w	r2, r2, #4
 80041c6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	e005      	b.n	80041e6 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80041e2:	2302      	movs	r3, #2
 80041e4:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80041e6:	7dfb      	ldrb	r3, [r7, #23]
} 
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d008      	beq.n	8004214 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2204      	movs	r2, #4
 8004206:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e020      	b.n	8004256 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 020e 	bic.w	r2, r2, #14
 8004222:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0201 	bic.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423c:	2101      	movs	r1, #1
 800423e:	fa01 f202 	lsl.w	r2, r1, r2
 8004242:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004274:	2b02      	cmp	r3, #2
 8004276:	d005      	beq.n	8004284 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2204      	movs	r2, #4
 800427c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	73fb      	strb	r3, [r7, #15]
 8004282:	e027      	b.n	80042d4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 020e 	bic.w	r2, r2, #14
 8004292:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0201 	bic.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ac:	2101      	movs	r1, #1
 80042ae:	fa01 f202 	lsl.w	r2, r1, r2
 80042b2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	4798      	blx	r3
    } 
  }
  return status;
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	2204      	movs	r2, #4
 80042fc:	409a      	lsls	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4013      	ands	r3, r2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d024      	beq.n	8004350 <HAL_DMA_IRQHandler+0x72>
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01f      	beq.n	8004350 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b00      	cmp	r3, #0
 800431c:	d107      	bne.n	800432e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0204 	bic.w	r2, r2, #4
 800432c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004336:	2104      	movs	r1, #4
 8004338:	fa01 f202 	lsl.w	r2, r1, r2
 800433c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d06a      	beq.n	800441c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800434e:	e065      	b.n	800441c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	2202      	movs	r2, #2
 8004356:	409a      	lsls	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4013      	ands	r3, r2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d02c      	beq.n	80043ba <HAL_DMA_IRQHandler+0xdc>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d027      	beq.n	80043ba <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0320 	and.w	r3, r3, #32
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10b      	bne.n	8004390 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 020a 	bic.w	r2, r2, #10
 8004386:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004398:	2102      	movs	r1, #2
 800439a:	fa01 f202 	lsl.w	r2, r1, r2
 800439e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d035      	beq.n	800441c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80043b8:	e030      	b.n	800441c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	2208      	movs	r2, #8
 80043c0:	409a      	lsls	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d028      	beq.n	800441c <HAL_DMA_IRQHandler+0x13e>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d023      	beq.n	800441c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 020e 	bic.w	r2, r2, #14
 80043e2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ec:	2101      	movs	r1, #1
 80043ee:	fa01 f202 	lsl.w	r2, r1, r2
 80043f2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	2b00      	cmp	r3, #0
 8004410:	d004      	beq.n	800441c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	4798      	blx	r3
    }
  }
}  
 800441a:	e7ff      	b.n	800441c <HAL_DMA_IRQHandler+0x13e>
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
 8004430:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443a:	2101      	movs	r1, #1
 800443c:	fa01 f202 	lsl.w	r2, r1, r2
 8004440:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b10      	cmp	r3, #16
 8004450:	d108      	bne.n	8004464 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004462:	e007      	b.n	8004474 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	60da      	str	r2, [r3, #12]
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	461a      	mov	r2, r3
 800448e:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <DMA_CalcBaseAndBitshift+0x60>)
 8004490:	429a      	cmp	r2, r3
 8004492:	d80f      	bhi.n	80044b4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <DMA_CalcBaseAndBitshift+0x64>)
 800449c:	4413      	add	r3, r2
 800449e:	4a12      	ldr	r2, [pc, #72]	; (80044e8 <DMA_CalcBaseAndBitshift+0x68>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	091b      	lsrs	r3, r3, #4
 80044a6:	009a      	lsls	r2, r3, #2
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a0f      	ldr	r2, [pc, #60]	; (80044ec <DMA_CalcBaseAndBitshift+0x6c>)
 80044b0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80044b2:	e00e      	b.n	80044d2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <DMA_CalcBaseAndBitshift+0x70>)
 80044bc:	4413      	add	r3, r2
 80044be:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <DMA_CalcBaseAndBitshift+0x68>)
 80044c0:	fba2 2303 	umull	r2, r3, r2, r3
 80044c4:	091b      	lsrs	r3, r3, #4
 80044c6:	009a      	lsls	r2, r3, #2
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a09      	ldr	r2, [pc, #36]	; (80044f4 <DMA_CalcBaseAndBitshift+0x74>)
 80044d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40020407 	.word	0x40020407
 80044e4:	bffdfff8 	.word	0xbffdfff8
 80044e8:	cccccccd 	.word	0xcccccccd
 80044ec:	40020000 	.word	0x40020000
 80044f0:	bffdfbf8 	.word	0xbffdfbf8
 80044f4:	40020400 	.word	0x40020400

080044f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004506:	e160      	b.n	80047ca <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	2101      	movs	r1, #1
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	fa01 f303 	lsl.w	r3, r1, r3
 8004514:	4013      	ands	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 8152 	beq.w	80047c4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	2b01      	cmp	r3, #1
 800452a:	d005      	beq.n	8004538 <HAL_GPIO_Init+0x40>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f003 0303 	and.w	r3, r3, #3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d130      	bne.n	800459a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	2203      	movs	r2, #3
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	43db      	mvns	r3, r3
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4013      	ands	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800456e:	2201      	movs	r2, #1
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	43db      	mvns	r3, r3
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4013      	ands	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	091b      	lsrs	r3, r3, #4
 8004584:	f003 0201 	and.w	r2, r3, #1
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d017      	beq.n	80045d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	2203      	movs	r2, #3
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43db      	mvns	r3, r3
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4013      	ands	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d123      	bne.n	800462a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	08da      	lsrs	r2, r3, #3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3208      	adds	r2, #8
 80045ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	220f      	movs	r2, #15
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43db      	mvns	r3, r3
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4013      	ands	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	08da      	lsrs	r2, r3, #3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3208      	adds	r2, #8
 8004624:	6939      	ldr	r1, [r7, #16]
 8004626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	2203      	movs	r2, #3
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43db      	mvns	r3, r3
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	4013      	ands	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f003 0203 	and.w	r2, r3, #3
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 80ac 	beq.w	80047c4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800466c:	4b5e      	ldr	r3, [pc, #376]	; (80047e8 <HAL_GPIO_Init+0x2f0>)
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	4a5d      	ldr	r2, [pc, #372]	; (80047e8 <HAL_GPIO_Init+0x2f0>)
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	6193      	str	r3, [r2, #24]
 8004678:	4b5b      	ldr	r3, [pc, #364]	; (80047e8 <HAL_GPIO_Init+0x2f0>)
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004684:	4a59      	ldr	r2, [pc, #356]	; (80047ec <HAL_GPIO_Init+0x2f4>)
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	089b      	lsrs	r3, r3, #2
 800468a:	3302      	adds	r3, #2
 800468c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004690:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	220f      	movs	r2, #15
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4013      	ands	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046ae:	d025      	beq.n	80046fc <HAL_GPIO_Init+0x204>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a4f      	ldr	r2, [pc, #316]	; (80047f0 <HAL_GPIO_Init+0x2f8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d01f      	beq.n	80046f8 <HAL_GPIO_Init+0x200>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a4e      	ldr	r2, [pc, #312]	; (80047f4 <HAL_GPIO_Init+0x2fc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d019      	beq.n	80046f4 <HAL_GPIO_Init+0x1fc>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a4d      	ldr	r2, [pc, #308]	; (80047f8 <HAL_GPIO_Init+0x300>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d013      	beq.n	80046f0 <HAL_GPIO_Init+0x1f8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a4c      	ldr	r2, [pc, #304]	; (80047fc <HAL_GPIO_Init+0x304>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00d      	beq.n	80046ec <HAL_GPIO_Init+0x1f4>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a4b      	ldr	r2, [pc, #300]	; (8004800 <HAL_GPIO_Init+0x308>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d007      	beq.n	80046e8 <HAL_GPIO_Init+0x1f0>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a4a      	ldr	r2, [pc, #296]	; (8004804 <HAL_GPIO_Init+0x30c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d101      	bne.n	80046e4 <HAL_GPIO_Init+0x1ec>
 80046e0:	2306      	movs	r3, #6
 80046e2:	e00c      	b.n	80046fe <HAL_GPIO_Init+0x206>
 80046e4:	2307      	movs	r3, #7
 80046e6:	e00a      	b.n	80046fe <HAL_GPIO_Init+0x206>
 80046e8:	2305      	movs	r3, #5
 80046ea:	e008      	b.n	80046fe <HAL_GPIO_Init+0x206>
 80046ec:	2304      	movs	r3, #4
 80046ee:	e006      	b.n	80046fe <HAL_GPIO_Init+0x206>
 80046f0:	2303      	movs	r3, #3
 80046f2:	e004      	b.n	80046fe <HAL_GPIO_Init+0x206>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e002      	b.n	80046fe <HAL_GPIO_Init+0x206>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <HAL_GPIO_Init+0x206>
 80046fc:	2300      	movs	r3, #0
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	f002 0203 	and.w	r2, r2, #3
 8004704:	0092      	lsls	r2, r2, #2
 8004706:	4093      	lsls	r3, r2
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800470e:	4937      	ldr	r1, [pc, #220]	; (80047ec <HAL_GPIO_Init+0x2f4>)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	089b      	lsrs	r3, r3, #2
 8004714:	3302      	adds	r3, #2
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800471c:	4b3a      	ldr	r3, [pc, #232]	; (8004808 <HAL_GPIO_Init+0x310>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	43db      	mvns	r3, r3
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4013      	ands	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4313      	orrs	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004740:	4a31      	ldr	r2, [pc, #196]	; (8004808 <HAL_GPIO_Init+0x310>)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004746:	4b30      	ldr	r3, [pc, #192]	; (8004808 <HAL_GPIO_Init+0x310>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	43db      	mvns	r3, r3
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4013      	ands	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800476a:	4a27      	ldr	r2, [pc, #156]	; (8004808 <HAL_GPIO_Init+0x310>)
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004770:	4b25      	ldr	r3, [pc, #148]	; (8004808 <HAL_GPIO_Init+0x310>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	43db      	mvns	r3, r3
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4013      	ands	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004794:	4a1c      	ldr	r2, [pc, #112]	; (8004808 <HAL_GPIO_Init+0x310>)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800479a:	4b1b      	ldr	r3, [pc, #108]	; (8004808 <HAL_GPIO_Init+0x310>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	43db      	mvns	r3, r3
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4013      	ands	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80047be:	4a12      	ldr	r2, [pc, #72]	; (8004808 <HAL_GPIO_Init+0x310>)
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	3301      	adds	r3, #1
 80047c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	fa22 f303 	lsr.w	r3, r2, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f47f ae97 	bne.w	8004508 <HAL_GPIO_Init+0x10>
  }
}
 80047da:	bf00      	nop
 80047dc:	bf00      	nop
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	40021000 	.word	0x40021000
 80047ec:	40010000 	.word	0x40010000
 80047f0:	48000400 	.word	0x48000400
 80047f4:	48000800 	.word	0x48000800
 80047f8:	48000c00 	.word	0x48000c00
 80047fc:	48001000 	.word	0x48001000
 8004800:	48001400 	.word	0x48001400
 8004804:	48001800 	.word	0x48001800
 8004808:	40010400 	.word	0x40010400

0800480c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	887b      	ldrh	r3, [r7, #2]
 800481e:	4013      	ands	r3, r2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004824:	2301      	movs	r3, #1
 8004826:	73fb      	strb	r3, [r7, #15]
 8004828:	e001      	b.n	800482e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800482a:	2300      	movs	r3, #0
 800482c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800482e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	460b      	mov	r3, r1
 8004846:	807b      	strh	r3, [r7, #2]
 8004848:	4613      	mov	r3, r2
 800484a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800484c:	787b      	ldrb	r3, [r7, #1]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004852:	887a      	ldrh	r2, [r7, #2]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004858:	e002      	b.n	8004860 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800485a:	887a      	ldrh	r2, [r7, #2]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004876:	4b08      	ldr	r3, [pc, #32]	; (8004898 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004878:	695a      	ldr	r2, [r3, #20]
 800487a:	88fb      	ldrh	r3, [r7, #6]
 800487c:	4013      	ands	r3, r2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d006      	beq.n	8004890 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004882:	4a05      	ldr	r2, [pc, #20]	; (8004898 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004884:	88fb      	ldrh	r3, [r7, #6]
 8004886:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004888:	88fb      	ldrh	r3, [r7, #6]
 800488a:	4618      	mov	r0, r3
 800488c:	f000 f806 	bl	800489c <HAL_GPIO_EXTI_Callback>
  }
}
 8004890:	bf00      	nop
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40010400 	.word	0x40010400

0800489c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80048c4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d102      	bne.n	80048da <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f001 b83a 	b.w	800594e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 816f 	beq.w	8004bce <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80048f0:	4bb5      	ldr	r3, [pc, #724]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 030c 	and.w	r3, r3, #12
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d00c      	beq.n	8004916 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048fc:	4bb2      	ldr	r3, [pc, #712]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 030c 	and.w	r3, r3, #12
 8004904:	2b08      	cmp	r3, #8
 8004906:	d15c      	bne.n	80049c2 <HAL_RCC_OscConfig+0x10e>
 8004908:	4baf      	ldr	r3, [pc, #700]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004914:	d155      	bne.n	80049c2 <HAL_RCC_OscConfig+0x10e>
 8004916:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800491a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004922:	fa93 f3a3 	rbit	r3, r3
 8004926:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800492a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800492e:	fab3 f383 	clz	r3, r3
 8004932:	b2db      	uxtb	r3, r3
 8004934:	095b      	lsrs	r3, r3, #5
 8004936:	b2db      	uxtb	r3, r3
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b01      	cmp	r3, #1
 8004940:	d102      	bne.n	8004948 <HAL_RCC_OscConfig+0x94>
 8004942:	4ba1      	ldr	r3, [pc, #644]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	e015      	b.n	8004974 <HAL_RCC_OscConfig+0xc0>
 8004948:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800494c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004950:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004954:	fa93 f3a3 	rbit	r3, r3
 8004958:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800495c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004960:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004964:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004968:	fa93 f3a3 	rbit	r3, r3
 800496c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004970:	4b95      	ldr	r3, [pc, #596]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004978:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800497c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004980:	fa92 f2a2 	rbit	r2, r2
 8004984:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004988:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800498c:	fab2 f282 	clz	r2, r2
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	f042 0220 	orr.w	r2, r2, #32
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	f002 021f 	and.w	r2, r2, #31
 800499c:	2101      	movs	r1, #1
 800499e:	fa01 f202 	lsl.w	r2, r1, r2
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 8111 	beq.w	8004bcc <HAL_RCC_OscConfig+0x318>
 80049aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f040 8108 	bne.w	8004bcc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	f000 bfc6 	b.w	800594e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d2:	d106      	bne.n	80049e2 <HAL_RCC_OscConfig+0x12e>
 80049d4:	4b7c      	ldr	r3, [pc, #496]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a7b      	ldr	r2, [pc, #492]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 80049da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	e036      	b.n	8004a50 <HAL_RCC_OscConfig+0x19c>
 80049e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x158>
 80049f2:	4b75      	ldr	r3, [pc, #468]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a74      	ldr	r2, [pc, #464]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 80049f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	4b72      	ldr	r3, [pc, #456]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a71      	ldr	r2, [pc, #452]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 8004a04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e021      	b.n	8004a50 <HAL_RCC_OscConfig+0x19c>
 8004a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a1c:	d10c      	bne.n	8004a38 <HAL_RCC_OscConfig+0x184>
 8004a1e:	4b6a      	ldr	r3, [pc, #424]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a69      	ldr	r2, [pc, #420]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 8004a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	4b67      	ldr	r3, [pc, #412]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a66      	ldr	r2, [pc, #408]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 8004a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	e00b      	b.n	8004a50 <HAL_RCC_OscConfig+0x19c>
 8004a38:	4b63      	ldr	r3, [pc, #396]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a62      	ldr	r2, [pc, #392]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 8004a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	4b60      	ldr	r3, [pc, #384]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a5f      	ldr	r2, [pc, #380]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 8004a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a4e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d059      	beq.n	8004b14 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a60:	f7fd fd9a 	bl	8002598 <HAL_GetTick>
 8004a64:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a68:	e00a      	b.n	8004a80 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a6a:	f7fd fd95 	bl	8002598 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b64      	cmp	r3, #100	; 0x64
 8004a78:	d902      	bls.n	8004a80 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	f000 bf67 	b.w	800594e <HAL_RCC_OscConfig+0x109a>
 8004a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a84:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a88:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004a8c:	fa93 f3a3 	rbit	r3, r3
 8004a90:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004a94:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a98:	fab3 f383 	clz	r3, r3
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d102      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x1fe>
 8004aac:	4b46      	ldr	r3, [pc, #280]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	e015      	b.n	8004ade <HAL_RCC_OscConfig+0x22a>
 8004ab2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ab6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004abe:	fa93 f3a3 	rbit	r3, r3
 8004ac2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004ac6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004aca:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004ace:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004ad2:	fa93 f3a3 	rbit	r3, r3
 8004ad6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004ada:	4b3b      	ldr	r3, [pc, #236]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ae2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004ae6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004aea:	fa92 f2a2 	rbit	r2, r2
 8004aee:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004af2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004af6:	fab2 f282 	clz	r2, r2
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	f042 0220 	orr.w	r2, r2, #32
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	f002 021f 	and.w	r2, r2, #31
 8004b06:	2101      	movs	r1, #1
 8004b08:	fa01 f202 	lsl.w	r2, r1, r2
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0ab      	beq.n	8004a6a <HAL_RCC_OscConfig+0x1b6>
 8004b12:	e05c      	b.n	8004bce <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b14:	f7fd fd40 	bl	8002598 <HAL_GetTick>
 8004b18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1c:	e00a      	b.n	8004b34 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b1e:	f7fd fd3b 	bl	8002598 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b64      	cmp	r3, #100	; 0x64
 8004b2c:	d902      	bls.n	8004b34 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	f000 bf0d 	b.w	800594e <HAL_RCC_OscConfig+0x109a>
 8004b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b38:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004b40:	fa93 f3a3 	rbit	r3, r3
 8004b44:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004b48:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4c:	fab3 f383 	clz	r3, r3
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	f043 0301 	orr.w	r3, r3, #1
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d102      	bne.n	8004b66 <HAL_RCC_OscConfig+0x2b2>
 8004b60:	4b19      	ldr	r3, [pc, #100]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	e015      	b.n	8004b92 <HAL_RCC_OscConfig+0x2de>
 8004b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b6a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004b72:	fa93 f3a3 	rbit	r3, r3
 8004b76:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b7e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004b82:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004b86:	fa93 f3a3 	rbit	r3, r3
 8004b8a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004b8e:	4b0e      	ldr	r3, [pc, #56]	; (8004bc8 <HAL_RCC_OscConfig+0x314>)
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b96:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004b9a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004b9e:	fa92 f2a2 	rbit	r2, r2
 8004ba2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004ba6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004baa:	fab2 f282 	clz	r2, r2
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	f042 0220 	orr.w	r2, r2, #32
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	f002 021f 	and.w	r2, r2, #31
 8004bba:	2101      	movs	r1, #1
 8004bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1ab      	bne.n	8004b1e <HAL_RCC_OscConfig+0x26a>
 8004bc6:	e002      	b.n	8004bce <HAL_RCC_OscConfig+0x31a>
 8004bc8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 817f 	beq.w	8004ee2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004be4:	4ba7      	ldr	r3, [pc, #668]	; (8004e84 <HAL_RCC_OscConfig+0x5d0>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f003 030c 	and.w	r3, r3, #12
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00c      	beq.n	8004c0a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004bf0:	4ba4      	ldr	r3, [pc, #656]	; (8004e84 <HAL_RCC_OscConfig+0x5d0>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f003 030c 	and.w	r3, r3, #12
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d173      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x430>
 8004bfc:	4ba1      	ldr	r3, [pc, #644]	; (8004e84 <HAL_RCC_OscConfig+0x5d0>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c08:	d16c      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x430>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c10:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004c14:	fa93 f3a3 	rbit	r3, r3
 8004c18:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004c1c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c20:	fab3 f383 	clz	r3, r3
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d102      	bne.n	8004c3a <HAL_RCC_OscConfig+0x386>
 8004c34:	4b93      	ldr	r3, [pc, #588]	; (8004e84 <HAL_RCC_OscConfig+0x5d0>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	e013      	b.n	8004c62 <HAL_RCC_OscConfig+0x3ae>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c40:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004c44:	fa93 f3a3 	rbit	r3, r3
 8004c48:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004c52:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004c56:	fa93 f3a3 	rbit	r3, r3
 8004c5a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004c5e:	4b89      	ldr	r3, [pc, #548]	; (8004e84 <HAL_RCC_OscConfig+0x5d0>)
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	2202      	movs	r2, #2
 8004c64:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004c68:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004c6c:	fa92 f2a2 	rbit	r2, r2
 8004c70:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004c74:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004c78:	fab2 f282 	clz	r2, r2
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	f042 0220 	orr.w	r2, r2, #32
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	f002 021f 	and.w	r2, r2, #31
 8004c88:	2101      	movs	r1, #1
 8004c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <HAL_RCC_OscConfig+0x3f6>
 8004c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d002      	beq.n	8004caa <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	f000 be52 	b.w	800594e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004caa:	4b76      	ldr	r3, [pc, #472]	; (8004e84 <HAL_RCC_OscConfig+0x5d0>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cb6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	21f8      	movs	r1, #248	; 0xf8
 8004cc0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004cc8:	fa91 f1a1 	rbit	r1, r1
 8004ccc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004cd0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004cd4:	fab1 f181 	clz	r1, r1
 8004cd8:	b2c9      	uxtb	r1, r1
 8004cda:	408b      	lsls	r3, r1
 8004cdc:	4969      	ldr	r1, [pc, #420]	; (8004e84 <HAL_RCC_OscConfig+0x5d0>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce2:	e0fe      	b.n	8004ee2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ce8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8088 	beq.w	8004e06 <HAL_RCC_OscConfig+0x552>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004d00:	fa93 f3a3 	rbit	r3, r3
 8004d04:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004d08:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d0c:	fab3 f383 	clz	r3, r3
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2301      	movs	r3, #1
 8004d20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d22:	f7fd fc39 	bl	8002598 <HAL_GetTick>
 8004d26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2a:	e00a      	b.n	8004d42 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d2c:	f7fd fc34 	bl	8002598 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d902      	bls.n	8004d42 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	f000 be06 	b.w	800594e <HAL_RCC_OscConfig+0x109a>
 8004d42:	2302      	movs	r3, #2
 8004d44:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d48:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004d4c:	fa93 f3a3 	rbit	r3, r3
 8004d50:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004d54:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d58:	fab3 f383 	clz	r3, r3
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	f043 0301 	orr.w	r3, r3, #1
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d102      	bne.n	8004d72 <HAL_RCC_OscConfig+0x4be>
 8004d6c:	4b45      	ldr	r3, [pc, #276]	; (8004e84 <HAL_RCC_OscConfig+0x5d0>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	e013      	b.n	8004d9a <HAL_RCC_OscConfig+0x4e6>
 8004d72:	2302      	movs	r3, #2
 8004d74:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d78:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004d7c:	fa93 f3a3 	rbit	r3, r3
 8004d80:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004d84:	2302      	movs	r3, #2
 8004d86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004d8a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004d8e:	fa93 f3a3 	rbit	r3, r3
 8004d92:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004d96:	4b3b      	ldr	r3, [pc, #236]	; (8004e84 <HAL_RCC_OscConfig+0x5d0>)
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004da0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004da4:	fa92 f2a2 	rbit	r2, r2
 8004da8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004dac:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004db0:	fab2 f282 	clz	r2, r2
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	f042 0220 	orr.w	r2, r2, #32
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	f002 021f 	and.w	r2, r2, #31
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0af      	beq.n	8004d2c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dcc:	4b2d      	ldr	r3, [pc, #180]	; (8004e84 <HAL_RCC_OscConfig+0x5d0>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	21f8      	movs	r1, #248	; 0xf8
 8004de2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004dea:	fa91 f1a1 	rbit	r1, r1
 8004dee:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004df2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004df6:	fab1 f181 	clz	r1, r1
 8004dfa:	b2c9      	uxtb	r1, r1
 8004dfc:	408b      	lsls	r3, r1
 8004dfe:	4921      	ldr	r1, [pc, #132]	; (8004e84 <HAL_RCC_OscConfig+0x5d0>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	600b      	str	r3, [r1, #0]
 8004e04:	e06d      	b.n	8004ee2 <HAL_RCC_OscConfig+0x62e>
 8004e06:	2301      	movs	r3, #1
 8004e08:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004e10:	fa93 f3a3 	rbit	r3, r3
 8004e14:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004e18:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e1c:	fab3 f383 	clz	r3, r3
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	2300      	movs	r3, #0
 8004e30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e32:	f7fd fbb1 	bl	8002598 <HAL_GetTick>
 8004e36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e3a:	e00a      	b.n	8004e52 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e3c:	f7fd fbac 	bl	8002598 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d902      	bls.n	8004e52 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	f000 bd7e 	b.w	800594e <HAL_RCC_OscConfig+0x109a>
 8004e52:	2302      	movs	r3, #2
 8004e54:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e5c:	fa93 f3a3 	rbit	r3, r3
 8004e60:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004e64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e68:	fab3 f383 	clz	r3, r3
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	095b      	lsrs	r3, r3, #5
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	f043 0301 	orr.w	r3, r3, #1
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d105      	bne.n	8004e88 <HAL_RCC_OscConfig+0x5d4>
 8004e7c:	4b01      	ldr	r3, [pc, #4]	; (8004e84 <HAL_RCC_OscConfig+0x5d0>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	e016      	b.n	8004eb0 <HAL_RCC_OscConfig+0x5fc>
 8004e82:	bf00      	nop
 8004e84:	40021000 	.word	0x40021000
 8004e88:	2302      	movs	r3, #2
 8004e8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e92:	fa93 f3a3 	rbit	r3, r3
 8004e96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004ea0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ea4:	fa93 f3a3 	rbit	r3, r3
 8004ea8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004eac:	4bbf      	ldr	r3, [pc, #764]	; (80051ac <HAL_RCC_OscConfig+0x8f8>)
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004eb6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004eba:	fa92 f2a2 	rbit	r2, r2
 8004ebe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004ec2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004ec6:	fab2 f282 	clz	r2, r2
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	f042 0220 	orr.w	r2, r2, #32
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	f002 021f 	and.w	r2, r2, #31
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1ac      	bne.n	8004e3c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ee6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 8113 	beq.w	800511e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004efc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d07c      	beq.n	8005002 <HAL_RCC_OscConfig+0x74e>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f12:	fa93 f3a3 	rbit	r3, r3
 8004f16:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004f1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f1e:	fab3 f383 	clz	r3, r3
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	4ba2      	ldr	r3, [pc, #648]	; (80051b0 <HAL_RCC_OscConfig+0x8fc>)
 8004f28:	4413      	add	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	2301      	movs	r3, #1
 8004f30:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f32:	f7fd fb31 	bl	8002598 <HAL_GetTick>
 8004f36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3a:	e00a      	b.n	8004f52 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f3c:	f7fd fb2c 	bl	8002598 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d902      	bls.n	8004f52 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	f000 bcfe 	b.w	800594e <HAL_RCC_OscConfig+0x109a>
 8004f52:	2302      	movs	r3, #2
 8004f54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f5c:	fa93 f2a3 	rbit	r2, r3
 8004f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f72:	2202      	movs	r2, #2
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	fa93 f2a3 	rbit	r2, r3
 8004f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f96:	2202      	movs	r2, #2
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	fa93 f2a3 	rbit	r2, r3
 8004fa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004fb0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fb2:	4b7e      	ldr	r3, [pc, #504]	; (80051ac <HAL_RCC_OscConfig+0x8f8>)
 8004fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004fbe:	2102      	movs	r1, #2
 8004fc0:	6019      	str	r1, [r3, #0]
 8004fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fc6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	fa93 f1a3 	rbit	r1, r3
 8004fd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fd4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004fd8:	6019      	str	r1, [r3, #0]
  return result;
 8004fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fde:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	fab3 f383 	clz	r3, r3
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d09d      	beq.n	8004f3c <HAL_RCC_OscConfig+0x688>
 8005000:	e08d      	b.n	800511e <HAL_RCC_OscConfig+0x86a>
 8005002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005006:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800500a:	2201      	movs	r2, #1
 800500c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005012:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	fa93 f2a3 	rbit	r2, r3
 800501c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005020:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005024:	601a      	str	r2, [r3, #0]
  return result;
 8005026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800502a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800502e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005030:	fab3 f383 	clz	r3, r3
 8005034:	b2db      	uxtb	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	4b5d      	ldr	r3, [pc, #372]	; (80051b0 <HAL_RCC_OscConfig+0x8fc>)
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	461a      	mov	r2, r3
 8005040:	2300      	movs	r3, #0
 8005042:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005044:	f7fd faa8 	bl	8002598 <HAL_GetTick>
 8005048:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800504c:	e00a      	b.n	8005064 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800504e:	f7fd faa3 	bl	8002598 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d902      	bls.n	8005064 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	f000 bc75 	b.w	800594e <HAL_RCC_OscConfig+0x109a>
 8005064:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005068:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800506c:	2202      	movs	r2, #2
 800506e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005074:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	fa93 f2a3 	rbit	r2, r3
 800507e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005082:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800508c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005090:	2202      	movs	r2, #2
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005098:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	fa93 f2a3 	rbit	r2, r3
 80050a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80050b4:	2202      	movs	r2, #2
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	fa93 f2a3 	rbit	r2, r3
 80050c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80050ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d0:	4b36      	ldr	r3, [pc, #216]	; (80051ac <HAL_RCC_OscConfig+0x8f8>)
 80050d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80050dc:	2102      	movs	r1, #2
 80050de:	6019      	str	r1, [r3, #0]
 80050e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	fa93 f1a3 	rbit	r1, r3
 80050ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050f2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80050f6:	6019      	str	r1, [r3, #0]
  return result;
 80050f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	fab3 f383 	clz	r3, r3
 8005106:	b2db      	uxtb	r3, r3
 8005108:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800510c:	b2db      	uxtb	r3, r3
 800510e:	f003 031f 	and.w	r3, r3, #31
 8005112:	2101      	movs	r1, #1
 8005114:	fa01 f303 	lsl.w	r3, r1, r3
 8005118:	4013      	ands	r3, r2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d197      	bne.n	800504e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800511e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005122:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b00      	cmp	r3, #0
 8005130:	f000 81a5 	beq.w	800547e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005134:	2300      	movs	r3, #0
 8005136:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800513a:	4b1c      	ldr	r3, [pc, #112]	; (80051ac <HAL_RCC_OscConfig+0x8f8>)
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d116      	bne.n	8005174 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005146:	4b19      	ldr	r3, [pc, #100]	; (80051ac <HAL_RCC_OscConfig+0x8f8>)
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	4a18      	ldr	r2, [pc, #96]	; (80051ac <HAL_RCC_OscConfig+0x8f8>)
 800514c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005150:	61d3      	str	r3, [r2, #28]
 8005152:	4b16      	ldr	r3, [pc, #88]	; (80051ac <HAL_RCC_OscConfig+0x8f8>)
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800515a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800515e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005168:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800516c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005174:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <HAL_RCC_OscConfig+0x900>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517c:	2b00      	cmp	r3, #0
 800517e:	d121      	bne.n	80051c4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005180:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <HAL_RCC_OscConfig+0x900>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a0b      	ldr	r2, [pc, #44]	; (80051b4 <HAL_RCC_OscConfig+0x900>)
 8005186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800518a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800518c:	f7fd fa04 	bl	8002598 <HAL_GetTick>
 8005190:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005194:	e010      	b.n	80051b8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005196:	f7fd f9ff 	bl	8002598 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b64      	cmp	r3, #100	; 0x64
 80051a4:	d908      	bls.n	80051b8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e3d1      	b.n	800594e <HAL_RCC_OscConfig+0x109a>
 80051aa:	bf00      	nop
 80051ac:	40021000 	.word	0x40021000
 80051b0:	10908120 	.word	0x10908120
 80051b4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b8:	4b8d      	ldr	r3, [pc, #564]	; (80053f0 <HAL_RCC_OscConfig+0xb3c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0e8      	beq.n	8005196 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d106      	bne.n	80051e2 <HAL_RCC_OscConfig+0x92e>
 80051d4:	4b87      	ldr	r3, [pc, #540]	; (80053f4 <HAL_RCC_OscConfig+0xb40>)
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	4a86      	ldr	r2, [pc, #536]	; (80053f4 <HAL_RCC_OscConfig+0xb40>)
 80051da:	f043 0301 	orr.w	r3, r3, #1
 80051de:	6213      	str	r3, [r2, #32]
 80051e0:	e035      	b.n	800524e <HAL_RCC_OscConfig+0x99a>
 80051e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10c      	bne.n	800520c <HAL_RCC_OscConfig+0x958>
 80051f2:	4b80      	ldr	r3, [pc, #512]	; (80053f4 <HAL_RCC_OscConfig+0xb40>)
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	4a7f      	ldr	r2, [pc, #508]	; (80053f4 <HAL_RCC_OscConfig+0xb40>)
 80051f8:	f023 0301 	bic.w	r3, r3, #1
 80051fc:	6213      	str	r3, [r2, #32]
 80051fe:	4b7d      	ldr	r3, [pc, #500]	; (80053f4 <HAL_RCC_OscConfig+0xb40>)
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	4a7c      	ldr	r2, [pc, #496]	; (80053f4 <HAL_RCC_OscConfig+0xb40>)
 8005204:	f023 0304 	bic.w	r3, r3, #4
 8005208:	6213      	str	r3, [r2, #32]
 800520a:	e020      	b.n	800524e <HAL_RCC_OscConfig+0x99a>
 800520c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005210:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	2b05      	cmp	r3, #5
 800521a:	d10c      	bne.n	8005236 <HAL_RCC_OscConfig+0x982>
 800521c:	4b75      	ldr	r3, [pc, #468]	; (80053f4 <HAL_RCC_OscConfig+0xb40>)
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	4a74      	ldr	r2, [pc, #464]	; (80053f4 <HAL_RCC_OscConfig+0xb40>)
 8005222:	f043 0304 	orr.w	r3, r3, #4
 8005226:	6213      	str	r3, [r2, #32]
 8005228:	4b72      	ldr	r3, [pc, #456]	; (80053f4 <HAL_RCC_OscConfig+0xb40>)
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	4a71      	ldr	r2, [pc, #452]	; (80053f4 <HAL_RCC_OscConfig+0xb40>)
 800522e:	f043 0301 	orr.w	r3, r3, #1
 8005232:	6213      	str	r3, [r2, #32]
 8005234:	e00b      	b.n	800524e <HAL_RCC_OscConfig+0x99a>
 8005236:	4b6f      	ldr	r3, [pc, #444]	; (80053f4 <HAL_RCC_OscConfig+0xb40>)
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	4a6e      	ldr	r2, [pc, #440]	; (80053f4 <HAL_RCC_OscConfig+0xb40>)
 800523c:	f023 0301 	bic.w	r3, r3, #1
 8005240:	6213      	str	r3, [r2, #32]
 8005242:	4b6c      	ldr	r3, [pc, #432]	; (80053f4 <HAL_RCC_OscConfig+0xb40>)
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	4a6b      	ldr	r2, [pc, #428]	; (80053f4 <HAL_RCC_OscConfig+0xb40>)
 8005248:	f023 0304 	bic.w	r3, r3, #4
 800524c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800524e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005252:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 8081 	beq.w	8005362 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005260:	f7fd f99a 	bl	8002598 <HAL_GetTick>
 8005264:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005268:	e00b      	b.n	8005282 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800526a:	f7fd f995 	bl	8002598 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	f241 3288 	movw	r2, #5000	; 0x1388
 800527a:	4293      	cmp	r3, r2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e365      	b.n	800594e <HAL_RCC_OscConfig+0x109a>
 8005282:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005286:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800528a:	2202      	movs	r2, #2
 800528c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005292:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	fa93 f2a3 	rbit	r2, r3
 800529c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80052ae:	2202      	movs	r2, #2
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	fa93 f2a3 	rbit	r2, r3
 80052c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80052c8:	601a      	str	r2, [r3, #0]
  return result;
 80052ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052ce:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80052d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d4:	fab3 f383 	clz	r3, r3
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	f043 0302 	orr.w	r3, r3, #2
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d102      	bne.n	80052ee <HAL_RCC_OscConfig+0xa3a>
 80052e8:	4b42      	ldr	r3, [pc, #264]	; (80053f4 <HAL_RCC_OscConfig+0xb40>)
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	e013      	b.n	8005316 <HAL_RCC_OscConfig+0xa62>
 80052ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052f2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80052f6:	2202      	movs	r2, #2
 80052f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	fa93 f2a3 	rbit	r2, r3
 8005308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800530c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	4b38      	ldr	r3, [pc, #224]	; (80053f4 <HAL_RCC_OscConfig+0xb40>)
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800531a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800531e:	2102      	movs	r1, #2
 8005320:	6011      	str	r1, [r2, #0]
 8005322:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005326:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	fa92 f1a2 	rbit	r1, r2
 8005330:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005334:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005338:	6011      	str	r1, [r2, #0]
  return result;
 800533a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800533e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005342:	6812      	ldr	r2, [r2, #0]
 8005344:	fab2 f282 	clz	r2, r2
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	f002 021f 	and.w	r2, r2, #31
 8005354:	2101      	movs	r1, #1
 8005356:	fa01 f202 	lsl.w	r2, r1, r2
 800535a:	4013      	ands	r3, r2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d084      	beq.n	800526a <HAL_RCC_OscConfig+0x9b6>
 8005360:	e083      	b.n	800546a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005362:	f7fd f919 	bl	8002598 <HAL_GetTick>
 8005366:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800536a:	e00b      	b.n	8005384 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800536c:	f7fd f914 	bl	8002598 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	f241 3288 	movw	r2, #5000	; 0x1388
 800537c:	4293      	cmp	r3, r2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e2e4      	b.n	800594e <HAL_RCC_OscConfig+0x109a>
 8005384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005388:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800538c:	2202      	movs	r2, #2
 800538e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005394:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	fa93 f2a3 	rbit	r2, r3
 800539e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053ac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80053b0:	2202      	movs	r2, #2
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	fa93 f2a3 	rbit	r2, r3
 80053c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80053ca:	601a      	str	r2, [r3, #0]
  return result;
 80053cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053d0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80053d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053d6:	fab3 f383 	clz	r3, r3
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f043 0302 	orr.w	r3, r3, #2
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d106      	bne.n	80053f8 <HAL_RCC_OscConfig+0xb44>
 80053ea:	4b02      	ldr	r3, [pc, #8]	; (80053f4 <HAL_RCC_OscConfig+0xb40>)
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	e017      	b.n	8005420 <HAL_RCC_OscConfig+0xb6c>
 80053f0:	40007000 	.word	0x40007000
 80053f4:	40021000 	.word	0x40021000
 80053f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005400:	2202      	movs	r2, #2
 8005402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005404:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005408:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	fa93 f2a3 	rbit	r2, r3
 8005412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005416:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	4bb3      	ldr	r3, [pc, #716]	; (80056ec <HAL_RCC_OscConfig+0xe38>)
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005424:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005428:	2102      	movs	r1, #2
 800542a:	6011      	str	r1, [r2, #0]
 800542c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005430:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	fa92 f1a2 	rbit	r1, r2
 800543a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800543e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8005442:	6011      	str	r1, [r2, #0]
  return result;
 8005444:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005448:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800544c:	6812      	ldr	r2, [r2, #0]
 800544e:	fab2 f282 	clz	r2, r2
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	f002 021f 	and.w	r2, r2, #31
 800545e:	2101      	movs	r1, #1
 8005460:	fa01 f202 	lsl.w	r2, r1, r2
 8005464:	4013      	ands	r3, r2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d180      	bne.n	800536c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800546a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800546e:	2b01      	cmp	r3, #1
 8005470:	d105      	bne.n	800547e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005472:	4b9e      	ldr	r3, [pc, #632]	; (80056ec <HAL_RCC_OscConfig+0xe38>)
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	4a9d      	ldr	r2, [pc, #628]	; (80056ec <HAL_RCC_OscConfig+0xe38>)
 8005478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800547c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800547e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005482:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 825e 	beq.w	800594c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005490:	4b96      	ldr	r3, [pc, #600]	; (80056ec <HAL_RCC_OscConfig+0xe38>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f003 030c 	and.w	r3, r3, #12
 8005498:	2b08      	cmp	r3, #8
 800549a:	f000 821f 	beq.w	80058dc <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800549e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	f040 8170 	bne.w	8005790 <HAL_RCC_OscConfig+0xedc>
 80054b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80054b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054c2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	fa93 f2a3 	rbit	r2, r3
 80054cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054d0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80054d4:	601a      	str	r2, [r3, #0]
  return result;
 80054d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054da:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80054de:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e0:	fab3 f383 	clz	r3, r3
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	461a      	mov	r2, r3
 80054f2:	2300      	movs	r3, #0
 80054f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f6:	f7fd f84f 	bl	8002598 <HAL_GetTick>
 80054fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054fe:	e009      	b.n	8005514 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005500:	f7fd f84a 	bl	8002598 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e21c      	b.n	800594e <HAL_RCC_OscConfig+0x109a>
 8005514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005518:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800551c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005526:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	fa93 f2a3 	rbit	r2, r3
 8005530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005534:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005538:	601a      	str	r2, [r3, #0]
  return result;
 800553a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800553e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005542:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005544:	fab3 f383 	clz	r3, r3
 8005548:	b2db      	uxtb	r3, r3
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	b2db      	uxtb	r3, r3
 800554e:	f043 0301 	orr.w	r3, r3, #1
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b01      	cmp	r3, #1
 8005556:	d102      	bne.n	800555e <HAL_RCC_OscConfig+0xcaa>
 8005558:	4b64      	ldr	r3, [pc, #400]	; (80056ec <HAL_RCC_OscConfig+0xe38>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	e027      	b.n	80055ae <HAL_RCC_OscConfig+0xcfa>
 800555e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005562:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005566:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800556a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005570:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	fa93 f2a3 	rbit	r2, r3
 800557a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800557e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005588:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800558c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005596:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	fa93 f2a3 	rbit	r2, r3
 80055a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055a4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	4b50      	ldr	r3, [pc, #320]	; (80056ec <HAL_RCC_OscConfig+0xe38>)
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80055b2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80055b6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80055ba:	6011      	str	r1, [r2, #0]
 80055bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80055c0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80055c4:	6812      	ldr	r2, [r2, #0]
 80055c6:	fa92 f1a2 	rbit	r1, r2
 80055ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80055ce:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80055d2:	6011      	str	r1, [r2, #0]
  return result;
 80055d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80055d8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80055dc:	6812      	ldr	r2, [r2, #0]
 80055de:	fab2 f282 	clz	r2, r2
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	f042 0220 	orr.w	r2, r2, #32
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	f002 021f 	and.w	r2, r2, #31
 80055ee:	2101      	movs	r1, #1
 80055f0:	fa01 f202 	lsl.w	r2, r1, r2
 80055f4:	4013      	ands	r3, r2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d182      	bne.n	8005500 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055fa:	4b3c      	ldr	r3, [pc, #240]	; (80056ec <HAL_RCC_OscConfig+0xe38>)
 80055fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fe:	f023 020f 	bic.w	r2, r3, #15
 8005602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005606:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	4937      	ldr	r1, [pc, #220]	; (80056ec <HAL_RCC_OscConfig+0xe38>)
 8005610:	4313      	orrs	r3, r2
 8005612:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005614:	4b35      	ldr	r3, [pc, #212]	; (80056ec <HAL_RCC_OscConfig+0xe38>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800561c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005620:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6a19      	ldr	r1, [r3, #32]
 8005628:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800562c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	430b      	orrs	r3, r1
 8005636:	492d      	ldr	r1, [pc, #180]	; (80056ec <HAL_RCC_OscConfig+0xe38>)
 8005638:	4313      	orrs	r3, r2
 800563a:	604b      	str	r3, [r1, #4]
 800563c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005640:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005644:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005648:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800564a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800564e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	fa93 f2a3 	rbit	r2, r3
 8005658:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800565c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005660:	601a      	str	r2, [r3, #0]
  return result;
 8005662:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005666:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800566a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800566c:	fab3 f383 	clz	r3, r3
 8005670:	b2db      	uxtb	r3, r3
 8005672:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005676:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	461a      	mov	r2, r3
 800567e:	2301      	movs	r3, #1
 8005680:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005682:	f7fc ff89 	bl	8002598 <HAL_GetTick>
 8005686:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800568a:	e009      	b.n	80056a0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800568c:	f7fc ff84 	bl	8002598 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e156      	b.n	800594e <HAL_RCC_OscConfig+0x109a>
 80056a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056a4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80056a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056b2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	fa93 f2a3 	rbit	r2, r3
 80056bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056c0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80056c4:	601a      	str	r2, [r3, #0]
  return result;
 80056c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056ca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80056ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056d0:	fab3 f383 	clz	r3, r3
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	095b      	lsrs	r3, r3, #5
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d105      	bne.n	80056f0 <HAL_RCC_OscConfig+0xe3c>
 80056e4:	4b01      	ldr	r3, [pc, #4]	; (80056ec <HAL_RCC_OscConfig+0xe38>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	e02a      	b.n	8005740 <HAL_RCC_OscConfig+0xe8c>
 80056ea:	bf00      	nop
 80056ec:	40021000 	.word	0x40021000
 80056f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056f4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80056f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005702:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	fa93 f2a3 	rbit	r2, r3
 800570c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005710:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800571a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800571e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005728:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	fa93 f2a3 	rbit	r2, r3
 8005732:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005736:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	4b86      	ldr	r3, [pc, #536]	; (8005958 <HAL_RCC_OscConfig+0x10a4>)
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005744:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005748:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800574c:	6011      	str	r1, [r2, #0]
 800574e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005752:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005756:	6812      	ldr	r2, [r2, #0]
 8005758:	fa92 f1a2 	rbit	r1, r2
 800575c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005760:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005764:	6011      	str	r1, [r2, #0]
  return result;
 8005766:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800576a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	fab2 f282 	clz	r2, r2
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	f042 0220 	orr.w	r2, r2, #32
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	f002 021f 	and.w	r2, r2, #31
 8005780:	2101      	movs	r1, #1
 8005782:	fa01 f202 	lsl.w	r2, r1, r2
 8005786:	4013      	ands	r3, r2
 8005788:	2b00      	cmp	r3, #0
 800578a:	f43f af7f 	beq.w	800568c <HAL_RCC_OscConfig+0xdd8>
 800578e:	e0dd      	b.n	800594c <HAL_RCC_OscConfig+0x1098>
 8005790:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005794:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005798:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800579c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057a2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	fa93 f2a3 	rbit	r2, r3
 80057ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057b0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80057b4:	601a      	str	r2, [r3, #0]
  return result;
 80057b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057ba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80057be:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c0:	fab3 f383 	clz	r3, r3
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80057ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	461a      	mov	r2, r3
 80057d2:	2300      	movs	r3, #0
 80057d4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d6:	f7fc fedf 	bl	8002598 <HAL_GetTick>
 80057da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057de:	e009      	b.n	80057f4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e0:	f7fc feda 	bl	8002598 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e0ac      	b.n	800594e <HAL_RCC_OscConfig+0x109a>
 80057f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057f8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80057fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005800:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005806:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	fa93 f2a3 	rbit	r2, r3
 8005810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005814:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005818:	601a      	str	r2, [r3, #0]
  return result;
 800581a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800581e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005822:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005824:	fab3 f383 	clz	r3, r3
 8005828:	b2db      	uxtb	r3, r3
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b01      	cmp	r3, #1
 8005836:	d102      	bne.n	800583e <HAL_RCC_OscConfig+0xf8a>
 8005838:	4b47      	ldr	r3, [pc, #284]	; (8005958 <HAL_RCC_OscConfig+0x10a4>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	e027      	b.n	800588e <HAL_RCC_OscConfig+0xfda>
 800583e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005842:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005846:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800584a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800584c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005850:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	fa93 f2a3 	rbit	r2, r3
 800585a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800585e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005868:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800586c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005876:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	fa93 f2a3 	rbit	r2, r3
 8005880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005884:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	4b33      	ldr	r3, [pc, #204]	; (8005958 <HAL_RCC_OscConfig+0x10a4>)
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005892:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005896:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800589a:	6011      	str	r1, [r2, #0]
 800589c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80058a0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80058a4:	6812      	ldr	r2, [r2, #0]
 80058a6:	fa92 f1a2 	rbit	r1, r2
 80058aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80058ae:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80058b2:	6011      	str	r1, [r2, #0]
  return result;
 80058b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80058b8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80058bc:	6812      	ldr	r2, [r2, #0]
 80058be:	fab2 f282 	clz	r2, r2
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	f042 0220 	orr.w	r2, r2, #32
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	f002 021f 	and.w	r2, r2, #31
 80058ce:	2101      	movs	r1, #1
 80058d0:	fa01 f202 	lsl.w	r2, r1, r2
 80058d4:	4013      	ands	r3, r2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d182      	bne.n	80057e0 <HAL_RCC_OscConfig+0xf2c>
 80058da:	e037      	b.n	800594c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e02e      	b.n	800594e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80058f0:	4b19      	ldr	r3, [pc, #100]	; (8005958 <HAL_RCC_OscConfig+0x10a4>)
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80058f8:	4b17      	ldr	r3, [pc, #92]	; (8005958 <HAL_RCC_OscConfig+0x10a4>)
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005900:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005904:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005908:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800590c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	429a      	cmp	r2, r3
 8005916:	d117      	bne.n	8005948 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005918:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800591c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005920:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005924:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800592c:	429a      	cmp	r2, r3
 800592e:	d10b      	bne.n	8005948 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005930:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005934:	f003 020f 	and.w	r2, r3, #15
 8005938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800593c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005944:	429a      	cmp	r2, r3
 8005946:	d001      	beq.n	800594c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e000      	b.n	800594e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40021000 	.word	0x40021000

0800595c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b09e      	sub	sp, #120	; 0x78
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e162      	b.n	8005c3a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005974:	4b90      	ldr	r3, [pc, #576]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d910      	bls.n	80059a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005982:	4b8d      	ldr	r3, [pc, #564]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f023 0207 	bic.w	r2, r3, #7
 800598a:	498b      	ldr	r1, [pc, #556]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	4313      	orrs	r3, r2
 8005990:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005992:	4b89      	ldr	r3, [pc, #548]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	429a      	cmp	r2, r3
 800599e:	d001      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e14a      	b.n	8005c3a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059b0:	4b82      	ldr	r3, [pc, #520]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	497f      	ldr	r1, [pc, #508]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 80dc 	beq.w	8005b88 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d13c      	bne.n	8005a52 <HAL_RCC_ClockConfig+0xf6>
 80059d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059e0:	fa93 f3a3 	rbit	r3, r3
 80059e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80059e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e8:	fab3 f383 	clz	r3, r3
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d102      	bne.n	8005a02 <HAL_RCC_ClockConfig+0xa6>
 80059fc:	4b6f      	ldr	r3, [pc, #444]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	e00f      	b.n	8005a22 <HAL_RCC_ClockConfig+0xc6>
 8005a02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a0a:	fa93 f3a3 	rbit	r3, r3
 8005a0e:	667b      	str	r3, [r7, #100]	; 0x64
 8005a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a14:	663b      	str	r3, [r7, #96]	; 0x60
 8005a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a18:	fa93 f3a3 	rbit	r3, r3
 8005a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a1e:	4b67      	ldr	r3, [pc, #412]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a26:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a2a:	fa92 f2a2 	rbit	r2, r2
 8005a2e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005a30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a32:	fab2 f282 	clz	r2, r2
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	f042 0220 	orr.w	r2, r2, #32
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	f002 021f 	and.w	r2, r2, #31
 8005a42:	2101      	movs	r1, #1
 8005a44:	fa01 f202 	lsl.w	r2, r1, r2
 8005a48:	4013      	ands	r3, r2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d17b      	bne.n	8005b46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e0f3      	b.n	8005c3a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d13c      	bne.n	8005ad4 <HAL_RCC_ClockConfig+0x178>
 8005a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a62:	fa93 f3a3 	rbit	r3, r3
 8005a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a6a:	fab3 f383 	clz	r3, r3
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	095b      	lsrs	r3, r3, #5
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	f043 0301 	orr.w	r3, r3, #1
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d102      	bne.n	8005a84 <HAL_RCC_ClockConfig+0x128>
 8005a7e:	4b4f      	ldr	r3, [pc, #316]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	e00f      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x148>
 8005a84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a8c:	fa93 f3a3 	rbit	r3, r3
 8005a90:	647b      	str	r3, [r7, #68]	; 0x44
 8005a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a96:	643b      	str	r3, [r7, #64]	; 0x40
 8005a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9a:	fa93 f3a3 	rbit	r3, r3
 8005a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aa0:	4b46      	ldr	r3, [pc, #280]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005aa8:	63ba      	str	r2, [r7, #56]	; 0x38
 8005aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aac:	fa92 f2a2 	rbit	r2, r2
 8005ab0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ab4:	fab2 f282 	clz	r2, r2
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	f042 0220 	orr.w	r2, r2, #32
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	f002 021f 	and.w	r2, r2, #31
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8005aca:	4013      	ands	r3, r2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d13a      	bne.n	8005b46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e0b2      	b.n	8005c3a <HAL_RCC_ClockConfig+0x2de>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	fa93 f3a3 	rbit	r3, r3
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ae2:	fab3 f383 	clz	r3, r3
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	095b      	lsrs	r3, r3, #5
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	f043 0301 	orr.w	r3, r3, #1
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d102      	bne.n	8005afc <HAL_RCC_ClockConfig+0x1a0>
 8005af6:	4b31      	ldr	r3, [pc, #196]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	e00d      	b.n	8005b18 <HAL_RCC_ClockConfig+0x1bc>
 8005afc:	2302      	movs	r3, #2
 8005afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b02:	fa93 f3a3 	rbit	r3, r3
 8005b06:	627b      	str	r3, [r7, #36]	; 0x24
 8005b08:	2302      	movs	r3, #2
 8005b0a:	623b      	str	r3, [r7, #32]
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	fa93 f3a3 	rbit	r3, r3
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	4b29      	ldr	r3, [pc, #164]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	2202      	movs	r2, #2
 8005b1a:	61ba      	str	r2, [r7, #24]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	fa92 f2a2 	rbit	r2, r2
 8005b22:	617a      	str	r2, [r7, #20]
  return result;
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	fab2 f282 	clz	r2, r2
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	f042 0220 	orr.w	r2, r2, #32
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	f002 021f 	and.w	r2, r2, #31
 8005b36:	2101      	movs	r1, #1
 8005b38:	fa01 f202 	lsl.w	r2, r1, r2
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e079      	b.n	8005c3a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b46:	4b1d      	ldr	r3, [pc, #116]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f023 0203 	bic.w	r2, r3, #3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	491a      	ldr	r1, [pc, #104]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b58:	f7fc fd1e 	bl	8002598 <HAL_GetTick>
 8005b5c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b5e:	e00a      	b.n	8005b76 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b60:	f7fc fd1a 	bl	8002598 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e061      	b.n	8005c3a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b76:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <HAL_RCC_ClockConfig+0x260>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f003 020c 	and.w	r2, r3, #12
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d1eb      	bne.n	8005b60 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b88:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0307 	and.w	r3, r3, #7
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d214      	bcs.n	8005bc0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b96:	4b08      	ldr	r3, [pc, #32]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f023 0207 	bic.w	r2, r3, #7
 8005b9e:	4906      	ldr	r1, [pc, #24]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba6:	4b04      	ldr	r3, [pc, #16]	; (8005bb8 <HAL_RCC_ClockConfig+0x25c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d005      	beq.n	8005bc0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e040      	b.n	8005c3a <HAL_RCC_ClockConfig+0x2de>
 8005bb8:	40022000 	.word	0x40022000
 8005bbc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d008      	beq.n	8005bde <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bcc:	4b1d      	ldr	r3, [pc, #116]	; (8005c44 <HAL_RCC_ClockConfig+0x2e8>)
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	491a      	ldr	r1, [pc, #104]	; (8005c44 <HAL_RCC_ClockConfig+0x2e8>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0308 	and.w	r3, r3, #8
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d009      	beq.n	8005bfe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bea:	4b16      	ldr	r3, [pc, #88]	; (8005c44 <HAL_RCC_ClockConfig+0x2e8>)
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	4912      	ldr	r1, [pc, #72]	; (8005c44 <HAL_RCC_ClockConfig+0x2e8>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005bfe:	f000 f829 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 8005c02:	4601      	mov	r1, r0
 8005c04:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <HAL_RCC_ClockConfig+0x2e8>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c0c:	22f0      	movs	r2, #240	; 0xf0
 8005c0e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	fa92 f2a2 	rbit	r2, r2
 8005c16:	60fa      	str	r2, [r7, #12]
  return result;
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	fab2 f282 	clz	r2, r2
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	40d3      	lsrs	r3, r2
 8005c22:	4a09      	ldr	r2, [pc, #36]	; (8005c48 <HAL_RCC_ClockConfig+0x2ec>)
 8005c24:	5cd3      	ldrb	r3, [r2, r3]
 8005c26:	fa21 f303 	lsr.w	r3, r1, r3
 8005c2a:	4a08      	ldr	r2, [pc, #32]	; (8005c4c <HAL_RCC_ClockConfig+0x2f0>)
 8005c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005c2e:	4b08      	ldr	r3, [pc, #32]	; (8005c50 <HAL_RCC_ClockConfig+0x2f4>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fc fc6c 	bl	8002510 <HAL_InitTick>
  
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3778      	adds	r7, #120	; 0x78
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	40021000 	.word	0x40021000
 8005c48:	0800c8d0 	.word	0x0800c8d0
 8005c4c:	20000008 	.word	0x20000008
 8005c50:	2000000c 	.word	0x2000000c

08005c54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b08b      	sub	sp, #44	; 0x2c
 8005c58:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61fb      	str	r3, [r7, #28]
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61bb      	str	r3, [r7, #24]
 8005c62:	2300      	movs	r3, #0
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
 8005c66:	2300      	movs	r3, #0
 8005c68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005c6e:	4b2a      	ldr	r3, [pc, #168]	; (8005d18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	f003 030c 	and.w	r3, r3, #12
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	d002      	beq.n	8005c84 <HAL_RCC_GetSysClockFreq+0x30>
 8005c7e:	2b08      	cmp	r3, #8
 8005c80:	d003      	beq.n	8005c8a <HAL_RCC_GetSysClockFreq+0x36>
 8005c82:	e03f      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c84:	4b25      	ldr	r3, [pc, #148]	; (8005d1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005c86:	623b      	str	r3, [r7, #32]
      break;
 8005c88:	e03f      	b.n	8005d0a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005c90:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005c94:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	fa92 f2a2 	rbit	r2, r2
 8005c9c:	607a      	str	r2, [r7, #4]
  return result;
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	fab2 f282 	clz	r2, r2
 8005ca4:	b2d2      	uxtb	r2, r2
 8005ca6:	40d3      	lsrs	r3, r2
 8005ca8:	4a1d      	ldr	r2, [pc, #116]	; (8005d20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005caa:	5cd3      	ldrb	r3, [r2, r3]
 8005cac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005cae:	4b1a      	ldr	r3, [pc, #104]	; (8005d18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	220f      	movs	r2, #15
 8005cb8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	fa92 f2a2 	rbit	r2, r2
 8005cc0:	60fa      	str	r2, [r7, #12]
  return result;
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	fab2 f282 	clz	r2, r2
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	40d3      	lsrs	r3, r2
 8005ccc:	4a15      	ldr	r2, [pc, #84]	; (8005d24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005cce:	5cd3      	ldrb	r3, [r2, r3]
 8005cd0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d008      	beq.n	8005cee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005cdc:	4a0f      	ldr	r2, [pc, #60]	; (8005d1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	fb02 f303 	mul.w	r3, r2, r3
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
 8005cec:	e007      	b.n	8005cfe <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005cee:	4a0b      	ldr	r2, [pc, #44]	; (8005d1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	fb02 f303 	mul.w	r3, r2, r3
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	623b      	str	r3, [r7, #32]
      break;
 8005d02:	e002      	b.n	8005d0a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d04:	4b05      	ldr	r3, [pc, #20]	; (8005d1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005d06:	623b      	str	r3, [r7, #32]
      break;
 8005d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	372c      	adds	r7, #44	; 0x2c
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	007a1200 	.word	0x007a1200
 8005d20:	0800c8e8 	.word	0x0800c8e8
 8005d24:	0800c8f8 	.word	0x0800c8f8

08005d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d2c:	4b03      	ldr	r3, [pc, #12]	; (8005d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000008 	.word	0x20000008

08005d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005d46:	f7ff ffef 	bl	8005d28 <HAL_RCC_GetHCLKFreq>
 8005d4a:	4601      	mov	r1, r0
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d54:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005d58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	fa92 f2a2 	rbit	r2, r2
 8005d60:	603a      	str	r2, [r7, #0]
  return result;
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	fab2 f282 	clz	r2, r2
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	40d3      	lsrs	r3, r2
 8005d6c:	4a04      	ldr	r2, [pc, #16]	; (8005d80 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005d6e:	5cd3      	ldrb	r3, [r2, r3]
 8005d70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	0800c8e0 	.word	0x0800c8e0

08005d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005d8a:	f7ff ffcd 	bl	8005d28 <HAL_RCC_GetHCLKFreq>
 8005d8e:	4601      	mov	r1, r0
 8005d90:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005d98:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005d9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	fa92 f2a2 	rbit	r2, r2
 8005da4:	603a      	str	r2, [r7, #0]
  return result;
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	fab2 f282 	clz	r2, r2
 8005dac:	b2d2      	uxtb	r2, r2
 8005dae:	40d3      	lsrs	r3, r2
 8005db0:	4a04      	ldr	r2, [pc, #16]	; (8005dc4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005db2:	5cd3      	ldrb	r3, [r2, r3]
 8005db4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005db8:	4618      	mov	r0, r3
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	0800c8e0 	.word	0x0800c8e0

08005dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b092      	sub	sp, #72	; 0x48
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 80d4 	beq.w	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dec:	4b4e      	ldr	r3, [pc, #312]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10e      	bne.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005df8:	4b4b      	ldr	r3, [pc, #300]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	4a4a      	ldr	r2, [pc, #296]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e02:	61d3      	str	r3, [r2, #28]
 8005e04:	4b48      	ldr	r3, [pc, #288]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e0c:	60bb      	str	r3, [r7, #8]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e10:	2301      	movs	r3, #1
 8005e12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e16:	4b45      	ldr	r3, [pc, #276]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d118      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e22:	4b42      	ldr	r3, [pc, #264]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a41      	ldr	r2, [pc, #260]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e2e:	f7fc fbb3 	bl	8002598 <HAL_GetTick>
 8005e32:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e34:	e008      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e36:	f7fc fbaf 	bl	8002598 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b64      	cmp	r3, #100	; 0x64
 8005e42:	d901      	bls.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e1d6      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e48:	4b38      	ldr	r3, [pc, #224]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0f0      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e54:	4b34      	ldr	r3, [pc, #208]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 8084 	beq.w	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d07c      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e74:	4b2c      	ldr	r3, [pc, #176]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	fa93 f3a3 	rbit	r3, r3
 8005e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e8e:	fab3 f383 	clz	r3, r3
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	4b26      	ldr	r3, [pc, #152]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e98:	4413      	add	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ea6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eaa:	fa93 f3a3 	rbit	r3, r3
 8005eae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005eb2:	fab3 f383 	clz	r3, r3
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4b1d      	ldr	r3, [pc, #116]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ec6:	4a18      	ldr	r2, [pc, #96]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d04b      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed6:	f7fc fb5f 	bl	8002598 <HAL_GetTick>
 8005eda:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005edc:	e00a      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ede:	f7fc fb5b 	bl	8002598 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e180      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efa:	fa93 f3a3 	rbit	r3, r3
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
 8005f00:	2302      	movs	r3, #2
 8005f02:	623b      	str	r3, [r7, #32]
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	fa93 f3a3 	rbit	r3, r3
 8005f0a:	61fb      	str	r3, [r7, #28]
  return result;
 8005f0c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f0e:	fab3 f383 	clz	r3, r3
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	f043 0302 	orr.w	r3, r3, #2
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d108      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005f22:	4b01      	ldr	r3, [pc, #4]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	e00d      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	40007000 	.word	0x40007000
 8005f30:	10908100 	.word	0x10908100
 8005f34:	2302      	movs	r3, #2
 8005f36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	fa93 f3a3 	rbit	r3, r3
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	4b9a      	ldr	r3, [pc, #616]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	2202      	movs	r2, #2
 8005f46:	613a      	str	r2, [r7, #16]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	fa92 f2a2 	rbit	r2, r2
 8005f4e:	60fa      	str	r2, [r7, #12]
  return result;
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	fab2 f282 	clz	r2, r2
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	f002 021f 	and.w	r2, r2, #31
 8005f62:	2101      	movs	r1, #1
 8005f64:	fa01 f202 	lsl.w	r2, r1, r2
 8005f68:	4013      	ands	r3, r2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0b7      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005f6e:	4b8f      	ldr	r3, [pc, #572]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	498c      	ldr	r1, [pc, #560]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d105      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f88:	4b88      	ldr	r3, [pc, #544]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	4a87      	ldr	r2, [pc, #540]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d008      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fa0:	4b82      	ldr	r3, [pc, #520]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa4:	f023 0203 	bic.w	r2, r3, #3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	497f      	ldr	r1, [pc, #508]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d008      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fbe:	4b7b      	ldr	r3, [pc, #492]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	4978      	ldr	r1, [pc, #480]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d008      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fdc:	4b73      	ldr	r3, [pc, #460]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	4970      	ldr	r1, [pc, #448]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d008      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ffa:	4b6c      	ldr	r3, [pc, #432]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffe:	f023 0210 	bic.w	r2, r3, #16
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	4969      	ldr	r1, [pc, #420]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006008:	4313      	orrs	r3, r2
 800600a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d008      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006018:	4b64      	ldr	r3, [pc, #400]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006024:	4961      	ldr	r1, [pc, #388]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006026:	4313      	orrs	r3, r2
 8006028:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	d008      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006036:	4b5d      	ldr	r3, [pc, #372]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	f023 0220 	bic.w	r2, r3, #32
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	495a      	ldr	r1, [pc, #360]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006044:	4313      	orrs	r3, r2
 8006046:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d008      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006054:	4b55      	ldr	r3, [pc, #340]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006058:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	4952      	ldr	r1, [pc, #328]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006062:	4313      	orrs	r3, r2
 8006064:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0308 	and.w	r3, r3, #8
 800606e:	2b00      	cmp	r3, #0
 8006070:	d008      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006072:	4b4e      	ldr	r3, [pc, #312]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006076:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	494b      	ldr	r1, [pc, #300]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006080:	4313      	orrs	r3, r2
 8006082:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0310 	and.w	r3, r3, #16
 800608c:	2b00      	cmp	r3, #0
 800608e:	d008      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006090:	4b46      	ldr	r3, [pc, #280]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	4943      	ldr	r1, [pc, #268]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d008      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060ae:	4b3f      	ldr	r3, [pc, #252]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ba:	493c      	ldr	r1, [pc, #240]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d008      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80060cc:	4b37      	ldr	r3, [pc, #220]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d8:	4934      	ldr	r1, [pc, #208]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d008      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80060ea:	4b30      	ldr	r3, [pc, #192]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ee:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f6:	492d      	ldr	r1, [pc, #180]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d008      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006108:	4b28      	ldr	r3, [pc, #160]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006114:	4925      	ldr	r1, [pc, #148]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006116:	4313      	orrs	r3, r2
 8006118:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d008      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006126:	4b21      	ldr	r3, [pc, #132]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	491e      	ldr	r1, [pc, #120]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006134:	4313      	orrs	r3, r2
 8006136:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d008      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006144:	4b19      	ldr	r3, [pc, #100]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006148:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006150:	4916      	ldr	r1, [pc, #88]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006152:	4313      	orrs	r3, r2
 8006154:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d008      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006162:	4b12      	ldr	r3, [pc, #72]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006166:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616e:	490f      	ldr	r1, [pc, #60]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006170:	4313      	orrs	r3, r2
 8006172:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d008      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006180:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006184:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618c:	4907      	ldr	r1, [pc, #28]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800618e:	4313      	orrs	r3, r2
 8006190:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00c      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800619e:	4b03      	ldr	r3, [pc, #12]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	e002      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80061aa:	bf00      	nop
 80061ac:	40021000 	.word	0x40021000
 80061b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b2:	4913      	ldr	r1, [pc, #76]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d008      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80061c4:	4b0e      	ldr	r3, [pc, #56]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80061c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d0:	490b      	ldr	r1, [pc, #44]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d008      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80061e2:	4b07      	ldr	r3, [pc, #28]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ee:	4904      	ldr	r1, [pc, #16]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3748      	adds	r7, #72	; 0x48
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	40021000 	.word	0x40021000

08006204 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e049      	b.n	80062aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d106      	bne.n	8006230 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fb ff0e 	bl	800204c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3304      	adds	r3, #4
 8006240:	4619      	mov	r1, r3
 8006242:	4610      	mov	r0, r2
 8006244:	f000 fcd2 	bl	8006bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e049      	b.n	8006358 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d106      	bne.n	80062de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f841 	bl	8006360 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2202      	movs	r2, #2
 80062e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f000 fc7b 	bl	8006bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d109      	bne.n	8006398 <HAL_TIM_PWM_Start+0x24>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	bf14      	ite	ne
 8006390:	2301      	movne	r3, #1
 8006392:	2300      	moveq	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	e03c      	b.n	8006412 <HAL_TIM_PWM_Start+0x9e>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b04      	cmp	r3, #4
 800639c:	d109      	bne.n	80063b2 <HAL_TIM_PWM_Start+0x3e>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	bf14      	ite	ne
 80063aa:	2301      	movne	r3, #1
 80063ac:	2300      	moveq	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	e02f      	b.n	8006412 <HAL_TIM_PWM_Start+0x9e>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d109      	bne.n	80063cc <HAL_TIM_PWM_Start+0x58>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	bf14      	ite	ne
 80063c4:	2301      	movne	r3, #1
 80063c6:	2300      	moveq	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	e022      	b.n	8006412 <HAL_TIM_PWM_Start+0x9e>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b0c      	cmp	r3, #12
 80063d0:	d109      	bne.n	80063e6 <HAL_TIM_PWM_Start+0x72>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b01      	cmp	r3, #1
 80063dc:	bf14      	ite	ne
 80063de:	2301      	movne	r3, #1
 80063e0:	2300      	moveq	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	e015      	b.n	8006412 <HAL_TIM_PWM_Start+0x9e>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b10      	cmp	r3, #16
 80063ea:	d109      	bne.n	8006400 <HAL_TIM_PWM_Start+0x8c>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	bf14      	ite	ne
 80063f8:	2301      	movne	r3, #1
 80063fa:	2300      	moveq	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	e008      	b.n	8006412 <HAL_TIM_PWM_Start+0x9e>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b01      	cmp	r3, #1
 800640a:	bf14      	ite	ne
 800640c:	2301      	movne	r3, #1
 800640e:	2300      	moveq	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e0a1      	b.n	800655e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d104      	bne.n	800642a <HAL_TIM_PWM_Start+0xb6>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006428:	e023      	b.n	8006472 <HAL_TIM_PWM_Start+0xfe>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b04      	cmp	r3, #4
 800642e:	d104      	bne.n	800643a <HAL_TIM_PWM_Start+0xc6>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006438:	e01b      	b.n	8006472 <HAL_TIM_PWM_Start+0xfe>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b08      	cmp	r3, #8
 800643e:	d104      	bne.n	800644a <HAL_TIM_PWM_Start+0xd6>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006448:	e013      	b.n	8006472 <HAL_TIM_PWM_Start+0xfe>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b0c      	cmp	r3, #12
 800644e:	d104      	bne.n	800645a <HAL_TIM_PWM_Start+0xe6>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006458:	e00b      	b.n	8006472 <HAL_TIM_PWM_Start+0xfe>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b10      	cmp	r3, #16
 800645e:	d104      	bne.n	800646a <HAL_TIM_PWM_Start+0xf6>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006468:	e003      	b.n	8006472 <HAL_TIM_PWM_Start+0xfe>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2202      	movs	r2, #2
 800646e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2201      	movs	r2, #1
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	4618      	mov	r0, r3
 800647c:	f000 fff4 	bl	8007468 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a38      	ldr	r2, [pc, #224]	; (8006568 <HAL_TIM_PWM_Start+0x1f4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d018      	beq.n	80064bc <HAL_TIM_PWM_Start+0x148>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a37      	ldr	r2, [pc, #220]	; (800656c <HAL_TIM_PWM_Start+0x1f8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d013      	beq.n	80064bc <HAL_TIM_PWM_Start+0x148>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a35      	ldr	r2, [pc, #212]	; (8006570 <HAL_TIM_PWM_Start+0x1fc>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00e      	beq.n	80064bc <HAL_TIM_PWM_Start+0x148>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a34      	ldr	r2, [pc, #208]	; (8006574 <HAL_TIM_PWM_Start+0x200>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d009      	beq.n	80064bc <HAL_TIM_PWM_Start+0x148>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a32      	ldr	r2, [pc, #200]	; (8006578 <HAL_TIM_PWM_Start+0x204>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d004      	beq.n	80064bc <HAL_TIM_PWM_Start+0x148>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a31      	ldr	r2, [pc, #196]	; (800657c <HAL_TIM_PWM_Start+0x208>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d101      	bne.n	80064c0 <HAL_TIM_PWM_Start+0x14c>
 80064bc:	2301      	movs	r3, #1
 80064be:	e000      	b.n	80064c2 <HAL_TIM_PWM_Start+0x14e>
 80064c0:	2300      	movs	r3, #0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d007      	beq.n	80064d6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a23      	ldr	r2, [pc, #140]	; (8006568 <HAL_TIM_PWM_Start+0x1f4>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d01d      	beq.n	800651c <HAL_TIM_PWM_Start+0x1a8>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e8:	d018      	beq.n	800651c <HAL_TIM_PWM_Start+0x1a8>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a24      	ldr	r2, [pc, #144]	; (8006580 <HAL_TIM_PWM_Start+0x20c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d013      	beq.n	800651c <HAL_TIM_PWM_Start+0x1a8>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a22      	ldr	r2, [pc, #136]	; (8006584 <HAL_TIM_PWM_Start+0x210>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00e      	beq.n	800651c <HAL_TIM_PWM_Start+0x1a8>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1a      	ldr	r2, [pc, #104]	; (800656c <HAL_TIM_PWM_Start+0x1f8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d009      	beq.n	800651c <HAL_TIM_PWM_Start+0x1a8>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a18      	ldr	r2, [pc, #96]	; (8006570 <HAL_TIM_PWM_Start+0x1fc>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d004      	beq.n	800651c <HAL_TIM_PWM_Start+0x1a8>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a19      	ldr	r2, [pc, #100]	; (800657c <HAL_TIM_PWM_Start+0x208>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d115      	bne.n	8006548 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	4b19      	ldr	r3, [pc, #100]	; (8006588 <HAL_TIM_PWM_Start+0x214>)
 8006524:	4013      	ands	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b06      	cmp	r3, #6
 800652c:	d015      	beq.n	800655a <HAL_TIM_PWM_Start+0x1e6>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006534:	d011      	beq.n	800655a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 0201 	orr.w	r2, r2, #1
 8006544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006546:	e008      	b.n	800655a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0201 	orr.w	r2, r2, #1
 8006556:	601a      	str	r2, [r3, #0]
 8006558:	e000      	b.n	800655c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800655a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	40012c00 	.word	0x40012c00
 800656c:	40013400 	.word	0x40013400
 8006570:	40014000 	.word	0x40014000
 8006574:	40014400 	.word	0x40014400
 8006578:	40014800 	.word	0x40014800
 800657c:	40015000 	.word	0x40015000
 8006580:	40000400 	.word	0x40000400
 8006584:	40000800 	.word	0x40000800
 8006588:	00010007 	.word	0x00010007

0800658c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d122      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d11b      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f06f 0202 	mvn.w	r2, #2
 80065b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 faed 	bl	8006bae <HAL_TIM_IC_CaptureCallback>
 80065d4:	e005      	b.n	80065e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fadf 	bl	8006b9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 faf0 	bl	8006bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f003 0304 	and.w	r3, r3, #4
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	d122      	bne.n	800663c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b04      	cmp	r3, #4
 8006602:	d11b      	bne.n	800663c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f06f 0204 	mvn.w	r2, #4
 800660c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2202      	movs	r2, #2
 8006612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fac3 	bl	8006bae <HAL_TIM_IC_CaptureCallback>
 8006628:	e005      	b.n	8006636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fab5 	bl	8006b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fac6 	bl	8006bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b08      	cmp	r3, #8
 8006648:	d122      	bne.n	8006690 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f003 0308 	and.w	r3, r3, #8
 8006654:	2b08      	cmp	r3, #8
 8006656:	d11b      	bne.n	8006690 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f06f 0208 	mvn.w	r2, #8
 8006660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2204      	movs	r2, #4
 8006666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fa99 	bl	8006bae <HAL_TIM_IC_CaptureCallback>
 800667c:	e005      	b.n	800668a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fa8b 	bl	8006b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fa9c 	bl	8006bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	2b10      	cmp	r3, #16
 800669c:	d122      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f003 0310 	and.w	r3, r3, #16
 80066a8:	2b10      	cmp	r3, #16
 80066aa:	d11b      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f06f 0210 	mvn.w	r2, #16
 80066b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2208      	movs	r2, #8
 80066ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fa6f 	bl	8006bae <HAL_TIM_IC_CaptureCallback>
 80066d0:	e005      	b.n	80066de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fa61 	bl	8006b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fa72 	bl	8006bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d10e      	bne.n	8006710 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d107      	bne.n	8006710 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f06f 0201 	mvn.w	r2, #1
 8006708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fa3b 	bl	8006b86 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800671a:	2b80      	cmp	r3, #128	; 0x80
 800671c:	d10e      	bne.n	800673c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006728:	2b80      	cmp	r3, #128	; 0x80
 800672a:	d107      	bne.n	800673c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 ff52 	bl	80075e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800674a:	d10e      	bne.n	800676a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006756:	2b80      	cmp	r3, #128	; 0x80
 8006758:	d107      	bne.n	800676a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 ff45 	bl	80075f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006774:	2b40      	cmp	r3, #64	; 0x40
 8006776:	d10e      	bne.n	8006796 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006782:	2b40      	cmp	r3, #64	; 0x40
 8006784:	d107      	bne.n	8006796 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800678e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fa20 	bl	8006bd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	f003 0320 	and.w	r3, r3, #32
 80067a0:	2b20      	cmp	r3, #32
 80067a2:	d10e      	bne.n	80067c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	f003 0320 	and.w	r3, r3, #32
 80067ae:	2b20      	cmp	r3, #32
 80067b0:	d107      	bne.n	80067c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f06f 0220 	mvn.w	r2, #32
 80067ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 ff05 	bl	80075cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067c2:	bf00      	nop
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067d8:	2300      	movs	r3, #0
 80067da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d101      	bne.n	80067ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067e6:	2302      	movs	r3, #2
 80067e8:	e0ff      	b.n	80069ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b14      	cmp	r3, #20
 80067f6:	f200 80f0 	bhi.w	80069da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80067fa:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006800:	08006855 	.word	0x08006855
 8006804:	080069db 	.word	0x080069db
 8006808:	080069db 	.word	0x080069db
 800680c:	080069db 	.word	0x080069db
 8006810:	08006895 	.word	0x08006895
 8006814:	080069db 	.word	0x080069db
 8006818:	080069db 	.word	0x080069db
 800681c:	080069db 	.word	0x080069db
 8006820:	080068d7 	.word	0x080068d7
 8006824:	080069db 	.word	0x080069db
 8006828:	080069db 	.word	0x080069db
 800682c:	080069db 	.word	0x080069db
 8006830:	08006917 	.word	0x08006917
 8006834:	080069db 	.word	0x080069db
 8006838:	080069db 	.word	0x080069db
 800683c:	080069db 	.word	0x080069db
 8006840:	08006959 	.word	0x08006959
 8006844:	080069db 	.word	0x080069db
 8006848:	080069db 	.word	0x080069db
 800684c:	080069db 	.word	0x080069db
 8006850:	08006999 	.word	0x08006999
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fa64 	bl	8006d28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0208 	orr.w	r2, r2, #8
 800686e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0204 	bic.w	r2, r2, #4
 800687e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6999      	ldr	r1, [r3, #24]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	691a      	ldr	r2, [r3, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	619a      	str	r2, [r3, #24]
      break;
 8006892:	e0a5      	b.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fade 	bl	8006e5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	699a      	ldr	r2, [r3, #24]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6999      	ldr	r1, [r3, #24]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	021a      	lsls	r2, r3, #8
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	619a      	str	r2, [r3, #24]
      break;
 80068d4:	e084      	b.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68b9      	ldr	r1, [r7, #8]
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 fb51 	bl	8006f84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69da      	ldr	r2, [r3, #28]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0208 	orr.w	r2, r2, #8
 80068f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69da      	ldr	r2, [r3, #28]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0204 	bic.w	r2, r2, #4
 8006900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69d9      	ldr	r1, [r3, #28]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	61da      	str	r2, [r3, #28]
      break;
 8006914:	e064      	b.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68b9      	ldr	r1, [r7, #8]
 800691c:	4618      	mov	r0, r3
 800691e:	f000 fbc3 	bl	80070a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69da      	ldr	r2, [r3, #28]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69da      	ldr	r2, [r3, #28]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69d9      	ldr	r1, [r3, #28]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	021a      	lsls	r2, r3, #8
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	61da      	str	r2, [r3, #28]
      break;
 8006956:	e043      	b.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68b9      	ldr	r1, [r7, #8]
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fc12 	bl	8007188 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0208 	orr.w	r2, r2, #8
 8006972:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0204 	bic.w	r2, r2, #4
 8006982:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	691a      	ldr	r2, [r3, #16]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006996:	e023      	b.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68b9      	ldr	r1, [r7, #8]
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fc5c 	bl	800725c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	021a      	lsls	r2, r3, #8
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069d8:	e002      	b.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	75fb      	strb	r3, [r7, #23]
      break;
 80069de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop

080069f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d101      	bne.n	8006a10 <HAL_TIM_ConfigClockSource+0x1c>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e0b6      	b.n	8006b7e <HAL_TIM_ConfigClockSource+0x18a>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a4c:	d03e      	beq.n	8006acc <HAL_TIM_ConfigClockSource+0xd8>
 8006a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a52:	f200 8087 	bhi.w	8006b64 <HAL_TIM_ConfigClockSource+0x170>
 8006a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a5a:	f000 8086 	beq.w	8006b6a <HAL_TIM_ConfigClockSource+0x176>
 8006a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a62:	d87f      	bhi.n	8006b64 <HAL_TIM_ConfigClockSource+0x170>
 8006a64:	2b70      	cmp	r3, #112	; 0x70
 8006a66:	d01a      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0xaa>
 8006a68:	2b70      	cmp	r3, #112	; 0x70
 8006a6a:	d87b      	bhi.n	8006b64 <HAL_TIM_ConfigClockSource+0x170>
 8006a6c:	2b60      	cmp	r3, #96	; 0x60
 8006a6e:	d050      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0x11e>
 8006a70:	2b60      	cmp	r3, #96	; 0x60
 8006a72:	d877      	bhi.n	8006b64 <HAL_TIM_ConfigClockSource+0x170>
 8006a74:	2b50      	cmp	r3, #80	; 0x50
 8006a76:	d03c      	beq.n	8006af2 <HAL_TIM_ConfigClockSource+0xfe>
 8006a78:	2b50      	cmp	r3, #80	; 0x50
 8006a7a:	d873      	bhi.n	8006b64 <HAL_TIM_ConfigClockSource+0x170>
 8006a7c:	2b40      	cmp	r3, #64	; 0x40
 8006a7e:	d058      	beq.n	8006b32 <HAL_TIM_ConfigClockSource+0x13e>
 8006a80:	2b40      	cmp	r3, #64	; 0x40
 8006a82:	d86f      	bhi.n	8006b64 <HAL_TIM_ConfigClockSource+0x170>
 8006a84:	2b30      	cmp	r3, #48	; 0x30
 8006a86:	d064      	beq.n	8006b52 <HAL_TIM_ConfigClockSource+0x15e>
 8006a88:	2b30      	cmp	r3, #48	; 0x30
 8006a8a:	d86b      	bhi.n	8006b64 <HAL_TIM_ConfigClockSource+0x170>
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	d060      	beq.n	8006b52 <HAL_TIM_ConfigClockSource+0x15e>
 8006a90:	2b20      	cmp	r3, #32
 8006a92:	d867      	bhi.n	8006b64 <HAL_TIM_ConfigClockSource+0x170>
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d05c      	beq.n	8006b52 <HAL_TIM_ConfigClockSource+0x15e>
 8006a98:	2b10      	cmp	r3, #16
 8006a9a:	d05a      	beq.n	8006b52 <HAL_TIM_ConfigClockSource+0x15e>
 8006a9c:	e062      	b.n	8006b64 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6818      	ldr	r0, [r3, #0]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	6899      	ldr	r1, [r3, #8]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f000 fcbb 	bl	8007428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ac0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	609a      	str	r2, [r3, #8]
      break;
 8006aca:	e04f      	b.n	8006b6c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6818      	ldr	r0, [r3, #0]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	6899      	ldr	r1, [r3, #8]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f000 fca4 	bl	8007428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689a      	ldr	r2, [r3, #8]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006aee:	609a      	str	r2, [r3, #8]
      break;
 8006af0:	e03c      	b.n	8006b6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6818      	ldr	r0, [r3, #0]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	6859      	ldr	r1, [r3, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	461a      	mov	r2, r3
 8006b00:	f000 fc18 	bl	8007334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2150      	movs	r1, #80	; 0x50
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fc71 	bl	80073f2 <TIM_ITRx_SetConfig>
      break;
 8006b10:	e02c      	b.n	8006b6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	6859      	ldr	r1, [r3, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f000 fc37 	bl	8007392 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2160      	movs	r1, #96	; 0x60
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fc61 	bl	80073f2 <TIM_ITRx_SetConfig>
      break;
 8006b30:	e01c      	b.n	8006b6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6818      	ldr	r0, [r3, #0]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	6859      	ldr	r1, [r3, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f000 fbf8 	bl	8007334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2140      	movs	r1, #64	; 0x40
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fc51 	bl	80073f2 <TIM_ITRx_SetConfig>
      break;
 8006b50:	e00c      	b.n	8006b6c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	f000 fc48 	bl	80073f2 <TIM_ITRx_SetConfig>
      break;
 8006b62:	e003      	b.n	8006b6c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	73fb      	strb	r3, [r7, #15]
      break;
 8006b68:	e000      	b.n	8006b6c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006b6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b8e:	bf00      	nop
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ba2:	bf00      	nop
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bb6:	bf00      	nop
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b083      	sub	sp, #12
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bde:	bf00      	nop
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
	...

08006bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a42      	ldr	r2, [pc, #264]	; (8006d08 <TIM_Base_SetConfig+0x11c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d013      	beq.n	8006c2c <TIM_Base_SetConfig+0x40>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0a:	d00f      	beq.n	8006c2c <TIM_Base_SetConfig+0x40>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a3f      	ldr	r2, [pc, #252]	; (8006d0c <TIM_Base_SetConfig+0x120>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d00b      	beq.n	8006c2c <TIM_Base_SetConfig+0x40>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a3e      	ldr	r2, [pc, #248]	; (8006d10 <TIM_Base_SetConfig+0x124>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d007      	beq.n	8006c2c <TIM_Base_SetConfig+0x40>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a3d      	ldr	r2, [pc, #244]	; (8006d14 <TIM_Base_SetConfig+0x128>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d003      	beq.n	8006c2c <TIM_Base_SetConfig+0x40>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a3c      	ldr	r2, [pc, #240]	; (8006d18 <TIM_Base_SetConfig+0x12c>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d108      	bne.n	8006c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a31      	ldr	r2, [pc, #196]	; (8006d08 <TIM_Base_SetConfig+0x11c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d01f      	beq.n	8006c86 <TIM_Base_SetConfig+0x9a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c4c:	d01b      	beq.n	8006c86 <TIM_Base_SetConfig+0x9a>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a2e      	ldr	r2, [pc, #184]	; (8006d0c <TIM_Base_SetConfig+0x120>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d017      	beq.n	8006c86 <TIM_Base_SetConfig+0x9a>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a2d      	ldr	r2, [pc, #180]	; (8006d10 <TIM_Base_SetConfig+0x124>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d013      	beq.n	8006c86 <TIM_Base_SetConfig+0x9a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a2c      	ldr	r2, [pc, #176]	; (8006d14 <TIM_Base_SetConfig+0x128>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d00f      	beq.n	8006c86 <TIM_Base_SetConfig+0x9a>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a2c      	ldr	r2, [pc, #176]	; (8006d1c <TIM_Base_SetConfig+0x130>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d00b      	beq.n	8006c86 <TIM_Base_SetConfig+0x9a>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a2b      	ldr	r2, [pc, #172]	; (8006d20 <TIM_Base_SetConfig+0x134>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d007      	beq.n	8006c86 <TIM_Base_SetConfig+0x9a>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a2a      	ldr	r2, [pc, #168]	; (8006d24 <TIM_Base_SetConfig+0x138>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d003      	beq.n	8006c86 <TIM_Base_SetConfig+0x9a>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a25      	ldr	r2, [pc, #148]	; (8006d18 <TIM_Base_SetConfig+0x12c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d108      	bne.n	8006c98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	689a      	ldr	r2, [r3, #8]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a12      	ldr	r2, [pc, #72]	; (8006d08 <TIM_Base_SetConfig+0x11c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d013      	beq.n	8006cec <TIM_Base_SetConfig+0x100>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a13      	ldr	r2, [pc, #76]	; (8006d14 <TIM_Base_SetConfig+0x128>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00f      	beq.n	8006cec <TIM_Base_SetConfig+0x100>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a13      	ldr	r2, [pc, #76]	; (8006d1c <TIM_Base_SetConfig+0x130>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d00b      	beq.n	8006cec <TIM_Base_SetConfig+0x100>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a12      	ldr	r2, [pc, #72]	; (8006d20 <TIM_Base_SetConfig+0x134>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d007      	beq.n	8006cec <TIM_Base_SetConfig+0x100>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a11      	ldr	r2, [pc, #68]	; (8006d24 <TIM_Base_SetConfig+0x138>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d003      	beq.n	8006cec <TIM_Base_SetConfig+0x100>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a0c      	ldr	r2, [pc, #48]	; (8006d18 <TIM_Base_SetConfig+0x12c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d103      	bne.n	8006cf4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	691a      	ldr	r2, [r3, #16]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	615a      	str	r2, [r3, #20]
}
 8006cfa:	bf00      	nop
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	40012c00 	.word	0x40012c00
 8006d0c:	40000400 	.word	0x40000400
 8006d10:	40000800 	.word	0x40000800
 8006d14:	40013400 	.word	0x40013400
 8006d18:	40015000 	.word	0x40015000
 8006d1c:	40014000 	.word	0x40014000
 8006d20:	40014400 	.word	0x40014400
 8006d24:	40014800 	.word	0x40014800

08006d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	f023 0201 	bic.w	r2, r3, #1
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f023 0303 	bic.w	r3, r3, #3
 8006d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f023 0302 	bic.w	r3, r3, #2
 8006d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a30      	ldr	r2, [pc, #192]	; (8006e44 <TIM_OC1_SetConfig+0x11c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d013      	beq.n	8006db0 <TIM_OC1_SetConfig+0x88>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a2f      	ldr	r2, [pc, #188]	; (8006e48 <TIM_OC1_SetConfig+0x120>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d00f      	beq.n	8006db0 <TIM_OC1_SetConfig+0x88>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a2e      	ldr	r2, [pc, #184]	; (8006e4c <TIM_OC1_SetConfig+0x124>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d00b      	beq.n	8006db0 <TIM_OC1_SetConfig+0x88>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a2d      	ldr	r2, [pc, #180]	; (8006e50 <TIM_OC1_SetConfig+0x128>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d007      	beq.n	8006db0 <TIM_OC1_SetConfig+0x88>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a2c      	ldr	r2, [pc, #176]	; (8006e54 <TIM_OC1_SetConfig+0x12c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d003      	beq.n	8006db0 <TIM_OC1_SetConfig+0x88>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a2b      	ldr	r2, [pc, #172]	; (8006e58 <TIM_OC1_SetConfig+0x130>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d10c      	bne.n	8006dca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f023 0308 	bic.w	r3, r3, #8
 8006db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f023 0304 	bic.w	r3, r3, #4
 8006dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a1d      	ldr	r2, [pc, #116]	; (8006e44 <TIM_OC1_SetConfig+0x11c>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d013      	beq.n	8006dfa <TIM_OC1_SetConfig+0xd2>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a1c      	ldr	r2, [pc, #112]	; (8006e48 <TIM_OC1_SetConfig+0x120>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d00f      	beq.n	8006dfa <TIM_OC1_SetConfig+0xd2>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a1b      	ldr	r2, [pc, #108]	; (8006e4c <TIM_OC1_SetConfig+0x124>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d00b      	beq.n	8006dfa <TIM_OC1_SetConfig+0xd2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a1a      	ldr	r2, [pc, #104]	; (8006e50 <TIM_OC1_SetConfig+0x128>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d007      	beq.n	8006dfa <TIM_OC1_SetConfig+0xd2>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a19      	ldr	r2, [pc, #100]	; (8006e54 <TIM_OC1_SetConfig+0x12c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d003      	beq.n	8006dfa <TIM_OC1_SetConfig+0xd2>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a18      	ldr	r2, [pc, #96]	; (8006e58 <TIM_OC1_SetConfig+0x130>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d111      	bne.n	8006e1e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	621a      	str	r2, [r3, #32]
}
 8006e38:	bf00      	nop
 8006e3a:	371c      	adds	r7, #28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	40012c00 	.word	0x40012c00
 8006e48:	40013400 	.word	0x40013400
 8006e4c:	40014000 	.word	0x40014000
 8006e50:	40014400 	.word	0x40014400
 8006e54:	40014800 	.word	0x40014800
 8006e58:	40015000 	.word	0x40015000

08006e5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	f023 0210 	bic.w	r2, r3, #16
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	021b      	lsls	r3, r3, #8
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f023 0320 	bic.w	r3, r3, #32
 8006eaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	011b      	lsls	r3, r3, #4
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a2c      	ldr	r2, [pc, #176]	; (8006f6c <TIM_OC2_SetConfig+0x110>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d007      	beq.n	8006ed0 <TIM_OC2_SetConfig+0x74>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a2b      	ldr	r2, [pc, #172]	; (8006f70 <TIM_OC2_SetConfig+0x114>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d003      	beq.n	8006ed0 <TIM_OC2_SetConfig+0x74>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a2a      	ldr	r2, [pc, #168]	; (8006f74 <TIM_OC2_SetConfig+0x118>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d10d      	bne.n	8006eec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	011b      	lsls	r3, r3, #4
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a1f      	ldr	r2, [pc, #124]	; (8006f6c <TIM_OC2_SetConfig+0x110>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d013      	beq.n	8006f1c <TIM_OC2_SetConfig+0xc0>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a1e      	ldr	r2, [pc, #120]	; (8006f70 <TIM_OC2_SetConfig+0x114>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00f      	beq.n	8006f1c <TIM_OC2_SetConfig+0xc0>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a1e      	ldr	r2, [pc, #120]	; (8006f78 <TIM_OC2_SetConfig+0x11c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d00b      	beq.n	8006f1c <TIM_OC2_SetConfig+0xc0>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a1d      	ldr	r2, [pc, #116]	; (8006f7c <TIM_OC2_SetConfig+0x120>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d007      	beq.n	8006f1c <TIM_OC2_SetConfig+0xc0>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a1c      	ldr	r2, [pc, #112]	; (8006f80 <TIM_OC2_SetConfig+0x124>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d003      	beq.n	8006f1c <TIM_OC2_SetConfig+0xc0>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a17      	ldr	r2, [pc, #92]	; (8006f74 <TIM_OC2_SetConfig+0x118>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d113      	bne.n	8006f44 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f22:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f2a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	621a      	str	r2, [r3, #32]
}
 8006f5e:	bf00      	nop
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40012c00 	.word	0x40012c00
 8006f70:	40013400 	.word	0x40013400
 8006f74:	40015000 	.word	0x40015000
 8006f78:	40014000 	.word	0x40014000
 8006f7c:	40014400 	.word	0x40014400
 8006f80:	40014800 	.word	0x40014800

08006f84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 0303 	bic.w	r3, r3, #3
 8006fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	021b      	lsls	r3, r3, #8
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a2b      	ldr	r2, [pc, #172]	; (8007090 <TIM_OC3_SetConfig+0x10c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d007      	beq.n	8006ff6 <TIM_OC3_SetConfig+0x72>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a2a      	ldr	r2, [pc, #168]	; (8007094 <TIM_OC3_SetConfig+0x110>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d003      	beq.n	8006ff6 <TIM_OC3_SetConfig+0x72>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a29      	ldr	r2, [pc, #164]	; (8007098 <TIM_OC3_SetConfig+0x114>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d10d      	bne.n	8007012 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	021b      	lsls	r3, r3, #8
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	4313      	orrs	r3, r2
 8007008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007010:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a1e      	ldr	r2, [pc, #120]	; (8007090 <TIM_OC3_SetConfig+0x10c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d013      	beq.n	8007042 <TIM_OC3_SetConfig+0xbe>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a1d      	ldr	r2, [pc, #116]	; (8007094 <TIM_OC3_SetConfig+0x110>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d00f      	beq.n	8007042 <TIM_OC3_SetConfig+0xbe>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a1d      	ldr	r2, [pc, #116]	; (800709c <TIM_OC3_SetConfig+0x118>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00b      	beq.n	8007042 <TIM_OC3_SetConfig+0xbe>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a1c      	ldr	r2, [pc, #112]	; (80070a0 <TIM_OC3_SetConfig+0x11c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d007      	beq.n	8007042 <TIM_OC3_SetConfig+0xbe>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a1b      	ldr	r2, [pc, #108]	; (80070a4 <TIM_OC3_SetConfig+0x120>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d003      	beq.n	8007042 <TIM_OC3_SetConfig+0xbe>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a16      	ldr	r2, [pc, #88]	; (8007098 <TIM_OC3_SetConfig+0x114>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d113      	bne.n	800706a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	011b      	lsls	r3, r3, #4
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	4313      	orrs	r3, r2
 800705c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	011b      	lsls	r3, r3, #4
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	4313      	orrs	r3, r2
 8007068:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	621a      	str	r2, [r3, #32]
}
 8007084:	bf00      	nop
 8007086:	371c      	adds	r7, #28
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	40012c00 	.word	0x40012c00
 8007094:	40013400 	.word	0x40013400
 8007098:	40015000 	.word	0x40015000
 800709c:	40014000 	.word	0x40014000
 80070a0:	40014400 	.word	0x40014400
 80070a4:	40014800 	.word	0x40014800

080070a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	021b      	lsls	r3, r3, #8
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	031b      	lsls	r3, r3, #12
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	4313      	orrs	r3, r2
 8007102:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a1a      	ldr	r2, [pc, #104]	; (8007170 <TIM_OC4_SetConfig+0xc8>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d013      	beq.n	8007134 <TIM_OC4_SetConfig+0x8c>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a19      	ldr	r2, [pc, #100]	; (8007174 <TIM_OC4_SetConfig+0xcc>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00f      	beq.n	8007134 <TIM_OC4_SetConfig+0x8c>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a18      	ldr	r2, [pc, #96]	; (8007178 <TIM_OC4_SetConfig+0xd0>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00b      	beq.n	8007134 <TIM_OC4_SetConfig+0x8c>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a17      	ldr	r2, [pc, #92]	; (800717c <TIM_OC4_SetConfig+0xd4>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d007      	beq.n	8007134 <TIM_OC4_SetConfig+0x8c>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a16      	ldr	r2, [pc, #88]	; (8007180 <TIM_OC4_SetConfig+0xd8>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d003      	beq.n	8007134 <TIM_OC4_SetConfig+0x8c>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a15      	ldr	r2, [pc, #84]	; (8007184 <TIM_OC4_SetConfig+0xdc>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d109      	bne.n	8007148 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800713a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	019b      	lsls	r3, r3, #6
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	4313      	orrs	r3, r2
 8007146:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	621a      	str	r2, [r3, #32]
}
 8007162:	bf00      	nop
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	40012c00 	.word	0x40012c00
 8007174:	40013400 	.word	0x40013400
 8007178:	40014000 	.word	0x40014000
 800717c:	40014400 	.word	0x40014400
 8007180:	40014800 	.word	0x40014800
 8007184:	40015000 	.word	0x40015000

08007188 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80071cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	041b      	lsls	r3, r3, #16
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a19      	ldr	r2, [pc, #100]	; (8007244 <TIM_OC5_SetConfig+0xbc>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d013      	beq.n	800720a <TIM_OC5_SetConfig+0x82>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a18      	ldr	r2, [pc, #96]	; (8007248 <TIM_OC5_SetConfig+0xc0>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00f      	beq.n	800720a <TIM_OC5_SetConfig+0x82>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a17      	ldr	r2, [pc, #92]	; (800724c <TIM_OC5_SetConfig+0xc4>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d00b      	beq.n	800720a <TIM_OC5_SetConfig+0x82>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a16      	ldr	r2, [pc, #88]	; (8007250 <TIM_OC5_SetConfig+0xc8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d007      	beq.n	800720a <TIM_OC5_SetConfig+0x82>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a15      	ldr	r2, [pc, #84]	; (8007254 <TIM_OC5_SetConfig+0xcc>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d003      	beq.n	800720a <TIM_OC5_SetConfig+0x82>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a14      	ldr	r2, [pc, #80]	; (8007258 <TIM_OC5_SetConfig+0xd0>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d109      	bne.n	800721e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007210:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	021b      	lsls	r3, r3, #8
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	4313      	orrs	r3, r2
 800721c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	621a      	str	r2, [r3, #32]
}
 8007238:	bf00      	nop
 800723a:	371c      	adds	r7, #28
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	40012c00 	.word	0x40012c00
 8007248:	40013400 	.word	0x40013400
 800724c:	40014000 	.word	0x40014000
 8007250:	40014400 	.word	0x40014400
 8007254:	40014800 	.word	0x40014800
 8007258:	40015000 	.word	0x40015000

0800725c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800728a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800728e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	021b      	lsls	r3, r3, #8
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4313      	orrs	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	051b      	lsls	r3, r3, #20
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a1a      	ldr	r2, [pc, #104]	; (800731c <TIM_OC6_SetConfig+0xc0>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d013      	beq.n	80072e0 <TIM_OC6_SetConfig+0x84>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a19      	ldr	r2, [pc, #100]	; (8007320 <TIM_OC6_SetConfig+0xc4>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00f      	beq.n	80072e0 <TIM_OC6_SetConfig+0x84>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a18      	ldr	r2, [pc, #96]	; (8007324 <TIM_OC6_SetConfig+0xc8>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d00b      	beq.n	80072e0 <TIM_OC6_SetConfig+0x84>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a17      	ldr	r2, [pc, #92]	; (8007328 <TIM_OC6_SetConfig+0xcc>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d007      	beq.n	80072e0 <TIM_OC6_SetConfig+0x84>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a16      	ldr	r2, [pc, #88]	; (800732c <TIM_OC6_SetConfig+0xd0>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_OC6_SetConfig+0x84>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a15      	ldr	r2, [pc, #84]	; (8007330 <TIM_OC6_SetConfig+0xd4>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d109      	bne.n	80072f4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	029b      	lsls	r3, r3, #10
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	621a      	str	r2, [r3, #32]
}
 800730e:	bf00      	nop
 8007310:	371c      	adds	r7, #28
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	40012c00 	.word	0x40012c00
 8007320:	40013400 	.word	0x40013400
 8007324:	40014000 	.word	0x40014000
 8007328:	40014400 	.word	0x40014400
 800732c:	40014800 	.word	0x40014800
 8007330:	40015000 	.word	0x40015000

08007334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	f023 0201 	bic.w	r2, r3, #1
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800735e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	4313      	orrs	r3, r2
 8007368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f023 030a 	bic.w	r3, r3, #10
 8007370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	4313      	orrs	r3, r2
 8007378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	621a      	str	r2, [r3, #32]
}
 8007386:	bf00      	nop
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007392:	b480      	push	{r7}
 8007394:	b087      	sub	sp, #28
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	f023 0210 	bic.w	r2, r3, #16
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	031b      	lsls	r3, r3, #12
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	011b      	lsls	r3, r3, #4
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	621a      	str	r2, [r3, #32]
}
 80073e6:	bf00      	nop
 80073e8:	371c      	adds	r7, #28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b085      	sub	sp, #20
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4313      	orrs	r3, r2
 8007410:	f043 0307 	orr.w	r3, r3, #7
 8007414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	609a      	str	r2, [r3, #8]
}
 800741c:	bf00      	nop
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007428:	b480      	push	{r7}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007442:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	021a      	lsls	r2, r3, #8
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	431a      	orrs	r2, r3
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	4313      	orrs	r3, r2
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	4313      	orrs	r3, r2
 8007454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	609a      	str	r2, [r3, #8]
}
 800745c:	bf00      	nop
 800745e:	371c      	adds	r7, #28
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f003 031f 	and.w	r3, r3, #31
 800747a:	2201      	movs	r2, #1
 800747c:	fa02 f303 	lsl.w	r3, r2, r3
 8007480:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6a1a      	ldr	r2, [r3, #32]
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	43db      	mvns	r3, r3
 800748a:	401a      	ands	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6a1a      	ldr	r2, [r3, #32]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f003 031f 	and.w	r3, r3, #31
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	fa01 f303 	lsl.w	r3, r1, r3
 80074a0:	431a      	orrs	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	621a      	str	r2, [r3, #32]
}
 80074a6:	bf00      	nop
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
	...

080074b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d101      	bne.n	80074cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074c8:	2302      	movs	r3, #2
 80074ca:	e06d      	b.n	80075a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2202      	movs	r2, #2
 80074d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a30      	ldr	r2, [pc, #192]	; (80075b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d009      	beq.n	800750a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a2f      	ldr	r2, [pc, #188]	; (80075b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d004      	beq.n	800750a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a2d      	ldr	r2, [pc, #180]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d108      	bne.n	800751c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007510:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	4313      	orrs	r3, r2
 800751a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a1e      	ldr	r2, [pc, #120]	; (80075b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d01d      	beq.n	800757c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007548:	d018      	beq.n	800757c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a1c      	ldr	r2, [pc, #112]	; (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d013      	beq.n	800757c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a1a      	ldr	r2, [pc, #104]	; (80075c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d00e      	beq.n	800757c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a15      	ldr	r2, [pc, #84]	; (80075b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d009      	beq.n	800757c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a16      	ldr	r2, [pc, #88]	; (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d004      	beq.n	800757c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a11      	ldr	r2, [pc, #68]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d10c      	bne.n	8007596 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007582:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	4313      	orrs	r3, r2
 800758c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	40012c00 	.word	0x40012c00
 80075b8:	40013400 	.word	0x40013400
 80075bc:	40015000 	.word	0x40015000
 80075c0:	40000400 	.word	0x40000400
 80075c4:	40000800 	.word	0x40000800
 80075c8:	40014000 	.word	0x40014000

080075cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e040      	b.n	800769c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800761e:	2b00      	cmp	r3, #0
 8007620:	d106      	bne.n	8007630 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7fa fd68 	bl	8002100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2224      	movs	r2, #36	; 0x24
 8007634:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f022 0201 	bic.w	r2, r2, #1
 8007644:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fbc6 	bl	8007dd8 <UART_SetConfig>
 800764c:	4603      	mov	r3, r0
 800764e:	2b01      	cmp	r3, #1
 8007650:	d101      	bne.n	8007656 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e022      	b.n	800769c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fd90 	bl	8008184 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007672:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689a      	ldr	r2, [r3, #8]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007682:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f042 0201 	orr.w	r2, r2, #1
 8007692:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fe17 	bl	80082c8 <UART_CheckIdleState>
 800769a:	4603      	mov	r3, r0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08a      	sub	sp, #40	; 0x28
 80076a8:	af02      	add	r7, sp, #8
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	603b      	str	r3, [r7, #0]
 80076b0:	4613      	mov	r3, r2
 80076b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076b8:	2b20      	cmp	r3, #32
 80076ba:	f040 8082 	bne.w	80077c2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d002      	beq.n	80076ca <HAL_UART_Transmit+0x26>
 80076c4:	88fb      	ldrh	r3, [r7, #6]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e07a      	b.n	80077c4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_UART_Transmit+0x38>
 80076d8:	2302      	movs	r3, #2
 80076da:	e073      	b.n	80077c4 <HAL_UART_Transmit+0x120>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2221      	movs	r2, #33	; 0x21
 80076f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076f2:	f7fa ff51 	bl	8002598 <HAL_GetTick>
 80076f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	88fa      	ldrh	r2, [r7, #6]
 80076fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	88fa      	ldrh	r2, [r7, #6]
 8007704:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007710:	d108      	bne.n	8007724 <HAL_UART_Transmit+0x80>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d104      	bne.n	8007724 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800771a:	2300      	movs	r3, #0
 800771c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	61bb      	str	r3, [r7, #24]
 8007722:	e003      	b.n	800772c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007728:	2300      	movs	r3, #0
 800772a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007734:	e02d      	b.n	8007792 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2200      	movs	r2, #0
 800773e:	2180      	movs	r1, #128	; 0x80
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 fe0a 	bl	800835a <UART_WaitOnFlagUntilTimeout>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e039      	b.n	80077c4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10b      	bne.n	800776e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	881a      	ldrh	r2, [r3, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007762:	b292      	uxth	r2, r2
 8007764:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	3302      	adds	r3, #2
 800776a:	61bb      	str	r3, [r7, #24]
 800776c:	e008      	b.n	8007780 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	781a      	ldrb	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	b292      	uxth	r2, r2
 8007778:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	3301      	adds	r3, #1
 800777e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007786:	b29b      	uxth	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1cb      	bne.n	8007736 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	2200      	movs	r2, #0
 80077a6:	2140      	movs	r1, #64	; 0x40
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 fdd6 	bl	800835a <UART_WaitOnFlagUntilTimeout>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e005      	b.n	80077c4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2220      	movs	r2, #32
 80077bc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	e000      	b.n	80077c4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80077c2:	2302      	movs	r3, #2
  }
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3720      	adds	r7, #32
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b0ba      	sub	sp, #232	; 0xe8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80077f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80077f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80077fa:	4013      	ands	r3, r2
 80077fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007804:	2b00      	cmp	r3, #0
 8007806:	d115      	bne.n	8007834 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800780c:	f003 0320 	and.w	r3, r3, #32
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00f      	beq.n	8007834 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007818:	f003 0320 	and.w	r3, r3, #32
 800781c:	2b00      	cmp	r3, #0
 800781e:	d009      	beq.n	8007834 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 82a3 	beq.w	8007d70 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	4798      	blx	r3
      }
      return;
 8007832:	e29d      	b.n	8007d70 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 8117 	beq.w	8007a6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800783e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b00      	cmp	r3, #0
 8007848:	d106      	bne.n	8007858 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800784a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800784e:	4b85      	ldr	r3, [pc, #532]	; (8007a64 <HAL_UART_IRQHandler+0x298>)
 8007850:	4013      	ands	r3, r2
 8007852:	2b00      	cmp	r3, #0
 8007854:	f000 810a 	beq.w	8007a6c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b00      	cmp	r3, #0
 8007862:	d011      	beq.n	8007888 <HAL_UART_IRQHandler+0xbc>
 8007864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00b      	beq.n	8007888 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2201      	movs	r2, #1
 8007876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800787e:	f043 0201 	orr.w	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800788c:	f003 0302 	and.w	r3, r3, #2
 8007890:	2b00      	cmp	r3, #0
 8007892:	d011      	beq.n	80078b8 <HAL_UART_IRQHandler+0xec>
 8007894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00b      	beq.n	80078b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2202      	movs	r2, #2
 80078a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ae:	f043 0204 	orr.w	r2, r3, #4
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d011      	beq.n	80078e8 <HAL_UART_IRQHandler+0x11c>
 80078c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00b      	beq.n	80078e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2204      	movs	r2, #4
 80078d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078de:	f043 0202 	orr.w	r2, r3, #2
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ec:	f003 0308 	and.w	r3, r3, #8
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d017      	beq.n	8007924 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078f8:	f003 0320 	and.w	r3, r3, #32
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d105      	bne.n	800790c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007904:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00b      	beq.n	8007924 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2208      	movs	r2, #8
 8007912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800791a:	f043 0208 	orr.w	r2, r3, #8
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800792c:	2b00      	cmp	r3, #0
 800792e:	d012      	beq.n	8007956 <HAL_UART_IRQHandler+0x18a>
 8007930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007934:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00c      	beq.n	8007956 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800794c:	f043 0220 	orr.w	r2, r3, #32
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 8209 	beq.w	8007d74 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007966:	f003 0320 	and.w	r3, r3, #32
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00d      	beq.n	800798a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800796e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007972:	f003 0320 	and.w	r3, r3, #32
 8007976:	2b00      	cmp	r3, #0
 8007978:	d007      	beq.n	800798a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007990:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799e:	2b40      	cmp	r3, #64	; 0x40
 80079a0:	d005      	beq.n	80079ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80079a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d04f      	beq.n	8007a4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fe60 	bl	8008674 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079be:	2b40      	cmp	r3, #64	; 0x40
 80079c0:	d141      	bne.n	8007a46 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3308      	adds	r3, #8
 80079c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3308      	adds	r3, #8
 80079ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80079ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80079f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1d9      	bne.n	80079c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d013      	beq.n	8007a3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1a:	4a13      	ldr	r2, [pc, #76]	; (8007a68 <HAL_UART_IRQHandler+0x29c>)
 8007a1c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fc fc1d 	bl	8004262 <HAL_DMA_Abort_IT>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d017      	beq.n	8007a5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007a38:	4610      	mov	r0, r2
 8007a3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a3c:	e00f      	b.n	8007a5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f9c0 	bl	8007dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a44:	e00b      	b.n	8007a5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f9bc 	bl	8007dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a4c:	e007      	b.n	8007a5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f9b8 	bl	8007dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007a5c:	e18a      	b.n	8007d74 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a5e:	bf00      	nop
    return;
 8007a60:	e188      	b.n	8007d74 <HAL_UART_IRQHandler+0x5a8>
 8007a62:	bf00      	nop
 8007a64:	04000120 	.word	0x04000120
 8007a68:	0800890d 	.word	0x0800890d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	f040 8143 	bne.w	8007cfc <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a7a:	f003 0310 	and.w	r3, r3, #16
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 813c 	beq.w	8007cfc <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a88:	f003 0310 	and.w	r3, r3, #16
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 8135 	beq.w	8007cfc <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2210      	movs	r2, #16
 8007a98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa4:	2b40      	cmp	r3, #64	; 0x40
 8007aa6:	f040 80b1 	bne.w	8007c0c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ab6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 815c 	beq.w	8007d78 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007aca:	429a      	cmp	r2, r3
 8007acc:	f080 8154 	bcs.w	8007d78 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ad6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	2b20      	cmp	r3, #32
 8007ae2:	f000 8085 	beq.w	8007bf0 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007af2:	e853 3f00 	ldrex	r3, [r3]
 8007af6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007afa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007afe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b14:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b18:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b20:	e841 2300 	strex	r3, r2, [r1]
 8007b24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1da      	bne.n	8007ae6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3308      	adds	r3, #8
 8007b36:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b3a:	e853 3f00 	ldrex	r3, [r3]
 8007b3e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b42:	f023 0301 	bic.w	r3, r3, #1
 8007b46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	3308      	adds	r3, #8
 8007b50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b54:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b58:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b60:	e841 2300 	strex	r3, r2, [r1]
 8007b64:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1e1      	bne.n	8007b30 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3308      	adds	r3, #8
 8007b72:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b76:	e853 3f00 	ldrex	r3, [r3]
 8007b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b90:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b98:	e841 2300 	strex	r3, r2, [r1]
 8007b9c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e3      	bne.n	8007b6c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bc0:	f023 0310 	bic.w	r3, r3, #16
 8007bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bd4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e4      	bne.n	8007bb0 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fc fb00 	bl	80041f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	4619      	mov	r1, r3
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7f9 f847 	bl	8000c98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c0a:	e0b5      	b.n	8007d78 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 80a7 	beq.w	8007d7c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8007c2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 80a2 	beq.w	8007d7c <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c40:	e853 3f00 	ldrex	r3, [r3]
 8007c44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	461a      	mov	r2, r3
 8007c56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8007c5c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c62:	e841 2300 	strex	r3, r2, [r1]
 8007c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1e4      	bne.n	8007c38 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3308      	adds	r3, #8
 8007c74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c78:	e853 3f00 	ldrex	r3, [r3]
 8007c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	f023 0301 	bic.w	r3, r3, #1
 8007c84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c92:	633a      	str	r2, [r7, #48]	; 0x30
 8007c94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c9a:	e841 2300 	strex	r3, r2, [r1]
 8007c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1e3      	bne.n	8007c6e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2220      	movs	r2, #32
 8007caa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f023 0310 	bic.w	r3, r3, #16
 8007ccc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007cda:	61fb      	str	r3, [r7, #28]
 8007cdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	69b9      	ldr	r1, [r7, #24]
 8007ce0:	69fa      	ldr	r2, [r7, #28]
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e4      	bne.n	8007cb8 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7f8 ffcf 	bl	8000c98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cfa:	e03f      	b.n	8007d7c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00e      	beq.n	8007d26 <HAL_UART_IRQHandler+0x55a>
 8007d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d008      	beq.n	8007d26 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fe34 	bl	800898c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d24:	e02d      	b.n	8007d82 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00e      	beq.n	8007d50 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d008      	beq.n	8007d50 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d01c      	beq.n	8007d80 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	4798      	blx	r3
    }
    return;
 8007d4e:	e017      	b.n	8007d80 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d012      	beq.n	8007d82 <HAL_UART_IRQHandler+0x5b6>
 8007d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00c      	beq.n	8007d82 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fde5 	bl	8008938 <UART_EndTransmit_IT>
    return;
 8007d6e:	e008      	b.n	8007d82 <HAL_UART_IRQHandler+0x5b6>
      return;
 8007d70:	bf00      	nop
 8007d72:	e006      	b.n	8007d82 <HAL_UART_IRQHandler+0x5b6>
    return;
 8007d74:	bf00      	nop
 8007d76:	e004      	b.n	8007d82 <HAL_UART_IRQHandler+0x5b6>
      return;
 8007d78:	bf00      	nop
 8007d7a:	e002      	b.n	8007d82 <HAL_UART_IRQHandler+0x5b6>
      return;
 8007d7c:	bf00      	nop
 8007d7e:	e000      	b.n	8007d82 <HAL_UART_IRQHandler+0x5b6>
    return;
 8007d80:	bf00      	nop
  }

}
 8007d82:	37e8      	adds	r7, #232	; 0xe8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b088      	sub	sp, #32
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689a      	ldr	r2, [r3, #8]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	431a      	orrs	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	431a      	orrs	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	69db      	ldr	r3, [r3, #28]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	4b92      	ldr	r3, [pc, #584]	; (800804c <UART_SetConfig+0x274>)
 8007e04:	4013      	ands	r3, r2
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	6812      	ldr	r2, [r2, #0]
 8007e0a:	6979      	ldr	r1, [r7, #20]
 8007e0c:	430b      	orrs	r3, r1
 8007e0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	430a      	orrs	r2, r1
 8007e24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a80      	ldr	r2, [pc, #512]	; (8008050 <UART_SetConfig+0x278>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d120      	bne.n	8007e96 <UART_SetConfig+0xbe>
 8007e54:	4b7f      	ldr	r3, [pc, #508]	; (8008054 <UART_SetConfig+0x27c>)
 8007e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e58:	f003 0303 	and.w	r3, r3, #3
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d817      	bhi.n	8007e90 <UART_SetConfig+0xb8>
 8007e60:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <UART_SetConfig+0x90>)
 8007e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e66:	bf00      	nop
 8007e68:	08007e79 	.word	0x08007e79
 8007e6c:	08007e85 	.word	0x08007e85
 8007e70:	08007e8b 	.word	0x08007e8b
 8007e74:	08007e7f 	.word	0x08007e7f
 8007e78:	2301      	movs	r3, #1
 8007e7a:	77fb      	strb	r3, [r7, #31]
 8007e7c:	e0b5      	b.n	8007fea <UART_SetConfig+0x212>
 8007e7e:	2302      	movs	r3, #2
 8007e80:	77fb      	strb	r3, [r7, #31]
 8007e82:	e0b2      	b.n	8007fea <UART_SetConfig+0x212>
 8007e84:	2304      	movs	r3, #4
 8007e86:	77fb      	strb	r3, [r7, #31]
 8007e88:	e0af      	b.n	8007fea <UART_SetConfig+0x212>
 8007e8a:	2308      	movs	r3, #8
 8007e8c:	77fb      	strb	r3, [r7, #31]
 8007e8e:	e0ac      	b.n	8007fea <UART_SetConfig+0x212>
 8007e90:	2310      	movs	r3, #16
 8007e92:	77fb      	strb	r3, [r7, #31]
 8007e94:	e0a9      	b.n	8007fea <UART_SetConfig+0x212>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a6f      	ldr	r2, [pc, #444]	; (8008058 <UART_SetConfig+0x280>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d124      	bne.n	8007eea <UART_SetConfig+0x112>
 8007ea0:	4b6c      	ldr	r3, [pc, #432]	; (8008054 <UART_SetConfig+0x27c>)
 8007ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ea8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007eac:	d011      	beq.n	8007ed2 <UART_SetConfig+0xfa>
 8007eae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007eb2:	d817      	bhi.n	8007ee4 <UART_SetConfig+0x10c>
 8007eb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eb8:	d011      	beq.n	8007ede <UART_SetConfig+0x106>
 8007eba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ebe:	d811      	bhi.n	8007ee4 <UART_SetConfig+0x10c>
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d003      	beq.n	8007ecc <UART_SetConfig+0xf4>
 8007ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ec8:	d006      	beq.n	8007ed8 <UART_SetConfig+0x100>
 8007eca:	e00b      	b.n	8007ee4 <UART_SetConfig+0x10c>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	77fb      	strb	r3, [r7, #31]
 8007ed0:	e08b      	b.n	8007fea <UART_SetConfig+0x212>
 8007ed2:	2302      	movs	r3, #2
 8007ed4:	77fb      	strb	r3, [r7, #31]
 8007ed6:	e088      	b.n	8007fea <UART_SetConfig+0x212>
 8007ed8:	2304      	movs	r3, #4
 8007eda:	77fb      	strb	r3, [r7, #31]
 8007edc:	e085      	b.n	8007fea <UART_SetConfig+0x212>
 8007ede:	2308      	movs	r3, #8
 8007ee0:	77fb      	strb	r3, [r7, #31]
 8007ee2:	e082      	b.n	8007fea <UART_SetConfig+0x212>
 8007ee4:	2310      	movs	r3, #16
 8007ee6:	77fb      	strb	r3, [r7, #31]
 8007ee8:	e07f      	b.n	8007fea <UART_SetConfig+0x212>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a5b      	ldr	r2, [pc, #364]	; (800805c <UART_SetConfig+0x284>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d124      	bne.n	8007f3e <UART_SetConfig+0x166>
 8007ef4:	4b57      	ldr	r3, [pc, #348]	; (8008054 <UART_SetConfig+0x27c>)
 8007ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007efc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007f00:	d011      	beq.n	8007f26 <UART_SetConfig+0x14e>
 8007f02:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007f06:	d817      	bhi.n	8007f38 <UART_SetConfig+0x160>
 8007f08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f0c:	d011      	beq.n	8007f32 <UART_SetConfig+0x15a>
 8007f0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f12:	d811      	bhi.n	8007f38 <UART_SetConfig+0x160>
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <UART_SetConfig+0x148>
 8007f18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f1c:	d006      	beq.n	8007f2c <UART_SetConfig+0x154>
 8007f1e:	e00b      	b.n	8007f38 <UART_SetConfig+0x160>
 8007f20:	2300      	movs	r3, #0
 8007f22:	77fb      	strb	r3, [r7, #31]
 8007f24:	e061      	b.n	8007fea <UART_SetConfig+0x212>
 8007f26:	2302      	movs	r3, #2
 8007f28:	77fb      	strb	r3, [r7, #31]
 8007f2a:	e05e      	b.n	8007fea <UART_SetConfig+0x212>
 8007f2c:	2304      	movs	r3, #4
 8007f2e:	77fb      	strb	r3, [r7, #31]
 8007f30:	e05b      	b.n	8007fea <UART_SetConfig+0x212>
 8007f32:	2308      	movs	r3, #8
 8007f34:	77fb      	strb	r3, [r7, #31]
 8007f36:	e058      	b.n	8007fea <UART_SetConfig+0x212>
 8007f38:	2310      	movs	r3, #16
 8007f3a:	77fb      	strb	r3, [r7, #31]
 8007f3c:	e055      	b.n	8007fea <UART_SetConfig+0x212>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a47      	ldr	r2, [pc, #284]	; (8008060 <UART_SetConfig+0x288>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d124      	bne.n	8007f92 <UART_SetConfig+0x1ba>
 8007f48:	4b42      	ldr	r3, [pc, #264]	; (8008054 <UART_SetConfig+0x27c>)
 8007f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007f50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f54:	d011      	beq.n	8007f7a <UART_SetConfig+0x1a2>
 8007f56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f5a:	d817      	bhi.n	8007f8c <UART_SetConfig+0x1b4>
 8007f5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f60:	d011      	beq.n	8007f86 <UART_SetConfig+0x1ae>
 8007f62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f66:	d811      	bhi.n	8007f8c <UART_SetConfig+0x1b4>
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d003      	beq.n	8007f74 <UART_SetConfig+0x19c>
 8007f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f70:	d006      	beq.n	8007f80 <UART_SetConfig+0x1a8>
 8007f72:	e00b      	b.n	8007f8c <UART_SetConfig+0x1b4>
 8007f74:	2300      	movs	r3, #0
 8007f76:	77fb      	strb	r3, [r7, #31]
 8007f78:	e037      	b.n	8007fea <UART_SetConfig+0x212>
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	77fb      	strb	r3, [r7, #31]
 8007f7e:	e034      	b.n	8007fea <UART_SetConfig+0x212>
 8007f80:	2304      	movs	r3, #4
 8007f82:	77fb      	strb	r3, [r7, #31]
 8007f84:	e031      	b.n	8007fea <UART_SetConfig+0x212>
 8007f86:	2308      	movs	r3, #8
 8007f88:	77fb      	strb	r3, [r7, #31]
 8007f8a:	e02e      	b.n	8007fea <UART_SetConfig+0x212>
 8007f8c:	2310      	movs	r3, #16
 8007f8e:	77fb      	strb	r3, [r7, #31]
 8007f90:	e02b      	b.n	8007fea <UART_SetConfig+0x212>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a33      	ldr	r2, [pc, #204]	; (8008064 <UART_SetConfig+0x28c>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d124      	bne.n	8007fe6 <UART_SetConfig+0x20e>
 8007f9c:	4b2d      	ldr	r3, [pc, #180]	; (8008054 <UART_SetConfig+0x27c>)
 8007f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007fa4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007fa8:	d011      	beq.n	8007fce <UART_SetConfig+0x1f6>
 8007faa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007fae:	d817      	bhi.n	8007fe0 <UART_SetConfig+0x208>
 8007fb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fb4:	d011      	beq.n	8007fda <UART_SetConfig+0x202>
 8007fb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fba:	d811      	bhi.n	8007fe0 <UART_SetConfig+0x208>
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d003      	beq.n	8007fc8 <UART_SetConfig+0x1f0>
 8007fc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fc4:	d006      	beq.n	8007fd4 <UART_SetConfig+0x1fc>
 8007fc6:	e00b      	b.n	8007fe0 <UART_SetConfig+0x208>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	77fb      	strb	r3, [r7, #31]
 8007fcc:	e00d      	b.n	8007fea <UART_SetConfig+0x212>
 8007fce:	2302      	movs	r3, #2
 8007fd0:	77fb      	strb	r3, [r7, #31]
 8007fd2:	e00a      	b.n	8007fea <UART_SetConfig+0x212>
 8007fd4:	2304      	movs	r3, #4
 8007fd6:	77fb      	strb	r3, [r7, #31]
 8007fd8:	e007      	b.n	8007fea <UART_SetConfig+0x212>
 8007fda:	2308      	movs	r3, #8
 8007fdc:	77fb      	strb	r3, [r7, #31]
 8007fde:	e004      	b.n	8007fea <UART_SetConfig+0x212>
 8007fe0:	2310      	movs	r3, #16
 8007fe2:	77fb      	strb	r3, [r7, #31]
 8007fe4:	e001      	b.n	8007fea <UART_SetConfig+0x212>
 8007fe6:	2310      	movs	r3, #16
 8007fe8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ff2:	d16c      	bne.n	80080ce <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8007ff4:	7ffb      	ldrb	r3, [r7, #31]
 8007ff6:	2b08      	cmp	r3, #8
 8007ff8:	d838      	bhi.n	800806c <UART_SetConfig+0x294>
 8007ffa:	a201      	add	r2, pc, #4	; (adr r2, 8008000 <UART_SetConfig+0x228>)
 8007ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008000:	08008025 	.word	0x08008025
 8008004:	0800802d 	.word	0x0800802d
 8008008:	08008035 	.word	0x08008035
 800800c:	0800806d 	.word	0x0800806d
 8008010:	0800803b 	.word	0x0800803b
 8008014:	0800806d 	.word	0x0800806d
 8008018:	0800806d 	.word	0x0800806d
 800801c:	0800806d 	.word	0x0800806d
 8008020:	08008043 	.word	0x08008043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008024:	f7fd fe8c 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 8008028:	61b8      	str	r0, [r7, #24]
        break;
 800802a:	e024      	b.n	8008076 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800802c:	f7fd feaa 	bl	8005d84 <HAL_RCC_GetPCLK2Freq>
 8008030:	61b8      	str	r0, [r7, #24]
        break;
 8008032:	e020      	b.n	8008076 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008034:	4b0c      	ldr	r3, [pc, #48]	; (8008068 <UART_SetConfig+0x290>)
 8008036:	61bb      	str	r3, [r7, #24]
        break;
 8008038:	e01d      	b.n	8008076 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800803a:	f7fd fe0b 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 800803e:	61b8      	str	r0, [r7, #24]
        break;
 8008040:	e019      	b.n	8008076 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008046:	61bb      	str	r3, [r7, #24]
        break;
 8008048:	e015      	b.n	8008076 <UART_SetConfig+0x29e>
 800804a:	bf00      	nop
 800804c:	efff69f3 	.word	0xefff69f3
 8008050:	40013800 	.word	0x40013800
 8008054:	40021000 	.word	0x40021000
 8008058:	40004400 	.word	0x40004400
 800805c:	40004800 	.word	0x40004800
 8008060:	40004c00 	.word	0x40004c00
 8008064:	40005000 	.word	0x40005000
 8008068:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	77bb      	strb	r3, [r7, #30]
        break;
 8008074:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d075      	beq.n	8008168 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	005a      	lsls	r2, r3, #1
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	085b      	lsrs	r3, r3, #1
 8008086:	441a      	add	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008090:	b29b      	uxth	r3, r3
 8008092:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	2b0f      	cmp	r3, #15
 8008098:	d916      	bls.n	80080c8 <UART_SetConfig+0x2f0>
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a0:	d212      	bcs.n	80080c8 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	f023 030f 	bic.w	r3, r3, #15
 80080aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	085b      	lsrs	r3, r3, #1
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	f003 0307 	and.w	r3, r3, #7
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	89fb      	ldrh	r3, [r7, #14]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	89fa      	ldrh	r2, [r7, #14]
 80080c4:	60da      	str	r2, [r3, #12]
 80080c6:	e04f      	b.n	8008168 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	77bb      	strb	r3, [r7, #30]
 80080cc:	e04c      	b.n	8008168 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080ce:	7ffb      	ldrb	r3, [r7, #31]
 80080d0:	2b08      	cmp	r3, #8
 80080d2:	d828      	bhi.n	8008126 <UART_SetConfig+0x34e>
 80080d4:	a201      	add	r2, pc, #4	; (adr r2, 80080dc <UART_SetConfig+0x304>)
 80080d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080da:	bf00      	nop
 80080dc:	08008101 	.word	0x08008101
 80080e0:	08008109 	.word	0x08008109
 80080e4:	08008111 	.word	0x08008111
 80080e8:	08008127 	.word	0x08008127
 80080ec:	08008117 	.word	0x08008117
 80080f0:	08008127 	.word	0x08008127
 80080f4:	08008127 	.word	0x08008127
 80080f8:	08008127 	.word	0x08008127
 80080fc:	0800811f 	.word	0x0800811f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008100:	f7fd fe1e 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 8008104:	61b8      	str	r0, [r7, #24]
        break;
 8008106:	e013      	b.n	8008130 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008108:	f7fd fe3c 	bl	8005d84 <HAL_RCC_GetPCLK2Freq>
 800810c:	61b8      	str	r0, [r7, #24]
        break;
 800810e:	e00f      	b.n	8008130 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008110:	4b1b      	ldr	r3, [pc, #108]	; (8008180 <UART_SetConfig+0x3a8>)
 8008112:	61bb      	str	r3, [r7, #24]
        break;
 8008114:	e00c      	b.n	8008130 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008116:	f7fd fd9d 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 800811a:	61b8      	str	r0, [r7, #24]
        break;
 800811c:	e008      	b.n	8008130 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800811e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008122:	61bb      	str	r3, [r7, #24]
        break;
 8008124:	e004      	b.n	8008130 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	77bb      	strb	r3, [r7, #30]
        break;
 800812e:	bf00      	nop
    }

    if (pclk != 0U)
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d018      	beq.n	8008168 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	085a      	lsrs	r2, r3, #1
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	441a      	add	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	fbb2 f3f3 	udiv	r3, r2, r3
 8008148:	b29b      	uxth	r3, r3
 800814a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	2b0f      	cmp	r3, #15
 8008150:	d908      	bls.n	8008164 <UART_SetConfig+0x38c>
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008158:	d204      	bcs.n	8008164 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	60da      	str	r2, [r3, #12]
 8008162:	e001      	b.n	8008168 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008174:	7fbb      	ldrb	r3, [r7, #30]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3720      	adds	r7, #32
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	007a1200 	.word	0x007a1200

08008184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00a      	beq.n	80081ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	f003 0302 	and.w	r3, r3, #2
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	430a      	orrs	r2, r1
 80081ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00a      	beq.n	80081f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f6:	f003 0308 	and.w	r3, r3, #8
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00a      	beq.n	8008214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	430a      	orrs	r2, r1
 8008212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	f003 0310 	and.w	r3, r3, #16
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00a      	beq.n	8008236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823a:	f003 0320 	and.w	r3, r3, #32
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	430a      	orrs	r2, r1
 8008256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008260:	2b00      	cmp	r3, #0
 8008262:	d01a      	beq.n	800829a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008282:	d10a      	bne.n	800829a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00a      	beq.n	80082bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	605a      	str	r2, [r3, #4]
  }
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af02      	add	r7, sp, #8
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082d8:	f7fa f95e 	bl	8002598 <HAL_GetTick>
 80082dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0308 	and.w	r3, r3, #8
 80082e8:	2b08      	cmp	r3, #8
 80082ea:	d10e      	bne.n	800830a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f82d 	bl	800835a <UART_WaitOnFlagUntilTimeout>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e023      	b.n	8008352 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b04      	cmp	r3, #4
 8008316:	d10e      	bne.n	8008336 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008318:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f817 	bl	800835a <UART_WaitOnFlagUntilTimeout>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e00d      	b.n	8008352 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2220      	movs	r2, #32
 800833a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2220      	movs	r2, #32
 8008340:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b09c      	sub	sp, #112	; 0x70
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	603b      	str	r3, [r7, #0]
 8008366:	4613      	mov	r3, r2
 8008368:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800836a:	e0a5      	b.n	80084b8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800836c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800836e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008372:	f000 80a1 	beq.w	80084b8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008376:	f7fa f90f 	bl	8002598 <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008382:	429a      	cmp	r2, r3
 8008384:	d302      	bcc.n	800838c <UART_WaitOnFlagUntilTimeout+0x32>
 8008386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008388:	2b00      	cmp	r3, #0
 800838a:	d13e      	bne.n	800840a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008394:	e853 3f00 	ldrex	r3, [r3]
 8008398:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800839a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800839c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083a0:	667b      	str	r3, [r7, #100]	; 0x64
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	461a      	mov	r2, r3
 80083a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083ac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083b2:	e841 2300 	strex	r3, r2, [r1]
 80083b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80083b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1e6      	bne.n	800838c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3308      	adds	r3, #8
 80083c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c8:	e853 3f00 	ldrex	r3, [r3]
 80083cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d0:	f023 0301 	bic.w	r3, r3, #1
 80083d4:	663b      	str	r3, [r7, #96]	; 0x60
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	3308      	adds	r3, #8
 80083dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083de:	64ba      	str	r2, [r7, #72]	; 0x48
 80083e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083e6:	e841 2300 	strex	r3, r2, [r1]
 80083ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80083ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1e5      	bne.n	80083be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2220      	movs	r2, #32
 80083f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2220      	movs	r2, #32
 80083fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e067      	b.n	80084da <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0304 	and.w	r3, r3, #4
 8008414:	2b00      	cmp	r3, #0
 8008416:	d04f      	beq.n	80084b8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008426:	d147      	bne.n	80084b8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008430:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	e853 3f00 	ldrex	r3, [r3]
 800843e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008446:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	461a      	mov	r2, r3
 800844e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008450:	637b      	str	r3, [r7, #52]	; 0x34
 8008452:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008454:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008458:	e841 2300 	strex	r3, r2, [r1]
 800845c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800845e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1e6      	bne.n	8008432 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3308      	adds	r3, #8
 800846a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	e853 3f00 	ldrex	r3, [r3]
 8008472:	613b      	str	r3, [r7, #16]
   return(result);
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	f023 0301 	bic.w	r3, r3, #1
 800847a:	66bb      	str	r3, [r7, #104]	; 0x68
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3308      	adds	r3, #8
 8008482:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008484:	623a      	str	r2, [r7, #32]
 8008486:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008488:	69f9      	ldr	r1, [r7, #28]
 800848a:	6a3a      	ldr	r2, [r7, #32]
 800848c:	e841 2300 	strex	r3, r2, [r1]
 8008490:	61bb      	str	r3, [r7, #24]
   return(result);
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e5      	bne.n	8008464 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2220      	movs	r2, #32
 800849c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2220      	movs	r2, #32
 80084a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2220      	movs	r2, #32
 80084a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e010      	b.n	80084da <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	69da      	ldr	r2, [r3, #28]
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	4013      	ands	r3, r2
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	bf0c      	ite	eq
 80084c8:	2301      	moveq	r3, #1
 80084ca:	2300      	movne	r3, #0
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	461a      	mov	r2, r3
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	f43f af4a 	beq.w	800836c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3770      	adds	r7, #112	; 0x70
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b096      	sub	sp, #88	; 0x58
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	4613      	mov	r3, r2
 80084f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	68ba      	ldr	r2, [r7, #8]
 80084f6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	88fa      	ldrh	r2, [r7, #6]
 80084fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2222      	movs	r2, #34	; 0x22
 800850c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008512:	2b00      	cmp	r3, #0
 8008514:	d02b      	beq.n	800856e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800851a:	4a40      	ldr	r2, [pc, #256]	; (800861c <UART_Start_Receive_DMA+0x138>)
 800851c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008522:	4a3f      	ldr	r2, [pc, #252]	; (8008620 <UART_Start_Receive_DMA+0x13c>)
 8008524:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800852a:	4a3e      	ldr	r2, [pc, #248]	; (8008624 <UART_Start_Receive_DMA+0x140>)
 800852c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008532:	2200      	movs	r2, #0
 8008534:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	3324      	adds	r3, #36	; 0x24
 8008540:	4619      	mov	r1, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008546:	461a      	mov	r2, r3
 8008548:	88fb      	ldrh	r3, [r7, #6]
 800854a:	f7fb fdf2 	bl	8004132 <HAL_DMA_Start_IT>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00c      	beq.n	800856e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2210      	movs	r2, #16
 8008558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2220      	movs	r2, #32
 8008568:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e051      	b.n	8008612 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857e:	e853 3f00 	ldrex	r3, [r3]
 8008582:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800858a:	657b      	str	r3, [r7, #84]	; 0x54
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	461a      	mov	r2, r3
 8008592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008594:	64bb      	str	r3, [r7, #72]	; 0x48
 8008596:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008598:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800859a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800859c:	e841 2300 	strex	r3, r2, [r1]
 80085a0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80085a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e6      	bne.n	8008576 <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	3308      	adds	r3, #8
 80085ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b2:	e853 3f00 	ldrex	r3, [r3]
 80085b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	f043 0301 	orr.w	r3, r3, #1
 80085be:	653b      	str	r3, [r7, #80]	; 0x50
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3308      	adds	r3, #8
 80085c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085c8:	637a      	str	r2, [r7, #52]	; 0x34
 80085ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085d0:	e841 2300 	strex	r3, r2, [r1]
 80085d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1e5      	bne.n	80085a8 <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3308      	adds	r3, #8
 80085e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	613b      	str	r3, [r7, #16]
   return(result);
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3308      	adds	r3, #8
 80085fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085fc:	623a      	str	r2, [r7, #32]
 80085fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	69f9      	ldr	r1, [r7, #28]
 8008602:	6a3a      	ldr	r2, [r7, #32]
 8008604:	e841 2300 	strex	r3, r2, [r1]
 8008608:	61bb      	str	r3, [r7, #24]
   return(result);
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e5      	bne.n	80085dc <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3758      	adds	r7, #88	; 0x58
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	0800873b 	.word	0x0800873b
 8008620:	08008859 	.word	0x08008859
 8008624:	08008891 	.word	0x08008891

08008628 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008628:	b480      	push	{r7}
 800862a:	b089      	sub	sp, #36	; 0x24
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	e853 3f00 	ldrex	r3, [r3]
 800863c:	60bb      	str	r3, [r7, #8]
   return(result);
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008644:	61fb      	str	r3, [r7, #28]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	61bb      	str	r3, [r7, #24]
 8008650:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008652:	6979      	ldr	r1, [r7, #20]
 8008654:	69ba      	ldr	r2, [r7, #24]
 8008656:	e841 2300 	strex	r3, r2, [r1]
 800865a:	613b      	str	r3, [r7, #16]
   return(result);
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1e6      	bne.n	8008630 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2220      	movs	r2, #32
 8008666:	679a      	str	r2, [r3, #120]	; 0x78
}
 8008668:	bf00      	nop
 800866a:	3724      	adds	r7, #36	; 0x24
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008674:	b480      	push	{r7}
 8008676:	b095      	sub	sp, #84	; 0x54
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008684:	e853 3f00 	ldrex	r3, [r3]
 8008688:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008690:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800869a:	643b      	str	r3, [r7, #64]	; 0x40
 800869c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086a2:	e841 2300 	strex	r3, r2, [r1]
 80086a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e6      	bne.n	800867c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3308      	adds	r3, #8
 80086b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b6:	6a3b      	ldr	r3, [r7, #32]
 80086b8:	e853 3f00 	ldrex	r3, [r3]
 80086bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	f023 0301 	bic.w	r3, r3, #1
 80086c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3308      	adds	r3, #8
 80086cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086d6:	e841 2300 	strex	r3, r2, [r1]
 80086da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1e5      	bne.n	80086ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d118      	bne.n	800871c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	e853 3f00 	ldrex	r3, [r3]
 80086f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	f023 0310 	bic.w	r3, r3, #16
 80086fe:	647b      	str	r3, [r7, #68]	; 0x44
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	461a      	mov	r2, r3
 8008706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008708:	61bb      	str	r3, [r7, #24]
 800870a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870c:	6979      	ldr	r1, [r7, #20]
 800870e:	69ba      	ldr	r2, [r7, #24]
 8008710:	e841 2300 	strex	r3, r2, [r1]
 8008714:	613b      	str	r3, [r7, #16]
   return(result);
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1e6      	bne.n	80086ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2220      	movs	r2, #32
 8008720:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800872e:	bf00      	nop
 8008730:	3754      	adds	r7, #84	; 0x54
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b09c      	sub	sp, #112	; 0x70
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008746:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	2b20      	cmp	r3, #32
 800874e:	d070      	beq.n	8008832 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 8008750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008752:	2200      	movs	r2, #0
 8008754:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800876c:	66bb      	str	r3, [r7, #104]	; 0x68
 800876e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	461a      	mov	r2, r3
 8008774:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008776:	65bb      	str	r3, [r7, #88]	; 0x58
 8008778:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800877c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e6      	bne.n	8008758 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800878a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3308      	adds	r3, #8
 8008790:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	e853 3f00 	ldrex	r3, [r3]
 8008798:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800879a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879c:	f023 0301 	bic.w	r3, r3, #1
 80087a0:	667b      	str	r3, [r7, #100]	; 0x64
 80087a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3308      	adds	r3, #8
 80087a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80087aa:	647a      	str	r2, [r7, #68]	; 0x44
 80087ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087b2:	e841 2300 	strex	r3, r2, [r1]
 80087b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1e5      	bne.n	800878a <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3308      	adds	r3, #8
 80087c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	e853 3f00 	ldrex	r3, [r3]
 80087cc:	623b      	str	r3, [r7, #32]
   return(result);
 80087ce:	6a3b      	ldr	r3, [r7, #32]
 80087d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087d4:	663b      	str	r3, [r7, #96]	; 0x60
 80087d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3308      	adds	r3, #8
 80087dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087de:	633a      	str	r2, [r7, #48]	; 0x30
 80087e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087e6:	e841 2300 	strex	r3, r2, [r1]
 80087ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1e5      	bne.n	80087be <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f4:	2220      	movs	r2, #32
 80087f6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d118      	bne.n	8008832 <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	60fb      	str	r3, [r7, #12]
   return(result);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f023 0310 	bic.w	r3, r3, #16
 8008814:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800881e:	61fb      	str	r3, [r7, #28]
 8008820:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008822:	69b9      	ldr	r1, [r7, #24]
 8008824:	69fa      	ldr	r2, [r7, #28]
 8008826:	e841 2300 	strex	r3, r2, [r1]
 800882a:	617b      	str	r3, [r7, #20]
   return(result);
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1e6      	bne.n	8008800 <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008836:	2b01      	cmp	r3, #1
 8008838:	d107      	bne.n	800884a <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800883a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800883c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008840:	4619      	mov	r1, r3
 8008842:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008844:	f7f8 fa28 	bl	8000c98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008848:	e002      	b.n	8008850 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 800884a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800884c:	f7ff faa6 	bl	8007d9c <HAL_UART_RxCpltCallback>
}
 8008850:	bf00      	nop
 8008852:	3770      	adds	r7, #112	; 0x70
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008864:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800886a:	2b01      	cmp	r3, #1
 800886c:	d109      	bne.n	8008882 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008874:	085b      	lsrs	r3, r3, #1
 8008876:	b29b      	uxth	r3, r3
 8008878:	4619      	mov	r1, r3
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f7f8 fa0c 	bl	8000c98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008880:	e002      	b.n	8008888 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f7ff fa94 	bl	8007db0 <HAL_UART_RxHalfCpltCallback>
}
 8008888:	bf00      	nop
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088a2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088a8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b4:	2b80      	cmp	r3, #128	; 0x80
 80088b6:	d109      	bne.n	80088cc <UART_DMAError+0x3c>
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	2b21      	cmp	r3, #33	; 0x21
 80088bc:	d106      	bne.n	80088cc <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80088c6:	6978      	ldr	r0, [r7, #20]
 80088c8:	f7ff feae 	bl	8008628 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d6:	2b40      	cmp	r3, #64	; 0x40
 80088d8:	d109      	bne.n	80088ee <UART_DMAError+0x5e>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b22      	cmp	r3, #34	; 0x22
 80088de:	d106      	bne.n	80088ee <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80088e8:	6978      	ldr	r0, [r7, #20]
 80088ea:	f7ff fec3 	bl	8008674 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088f4:	f043 0210 	orr.w	r2, r3, #16
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088fe:	6978      	ldr	r0, [r7, #20]
 8008900:	f7ff fa60 	bl	8007dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008904:	bf00      	nop
 8008906:	3718      	adds	r7, #24
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f7ff fa4a 	bl	8007dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008930:	bf00      	nop
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	60bb      	str	r3, [r7, #8]
   return(result);
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008954:	61fb      	str	r3, [r7, #28]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	61bb      	str	r3, [r7, #24]
 8008960:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008962:	6979      	ldr	r1, [r7, #20]
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	e841 2300 	strex	r3, r2, [r1]
 800896a:	613b      	str	r3, [r7, #16]
   return(result);
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1e6      	bne.n	8008940 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2220      	movs	r2, #32
 8008976:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff fa02 	bl	8007d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008984:	bf00      	nop
 8008986:	3720      	adds	r7, #32
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b08c      	sub	sp, #48	; 0x30
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	4613      	mov	r3, r2
 80089ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089b2:	2b20      	cmp	r3, #32
 80089b4:	d14a      	bne.n	8008a4c <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 80089bc:	88fb      	ldrh	r3, [r7, #6]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e043      	b.n	8008a4e <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d101      	bne.n	80089d4 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 80089d0:	2302      	movs	r3, #2
 80089d2:	e03c      	b.n	8008a4e <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2201      	movs	r2, #1
 80089e0:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80089e2:	88fb      	ldrh	r3, [r7, #6]
 80089e4:	461a      	mov	r2, r3
 80089e6:	68b9      	ldr	r1, [r7, #8]
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f7ff fd7b 	bl	80084e4 <UART_Start_Receive_DMA>
 80089ee:	4603      	mov	r3, r0
 80089f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80089f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d124      	bne.n	8008a46 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d11d      	bne.n	8008a40 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2210      	movs	r2, #16
 8008a0a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	e853 3f00 	ldrex	r3, [r3]
 8008a18:	617b      	str	r3, [r7, #20]
   return(result);
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f043 0310 	orr.w	r3, r3, #16
 8008a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	461a      	mov	r2, r3
 8008a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a2c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2e:	6a39      	ldr	r1, [r7, #32]
 8008a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a32:	e841 2300 	strex	r3, r2, [r1]
 8008a36:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1e6      	bne.n	8008a0c <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8008a3e:	e002      	b.n	8008a46 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008a46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a4a:	e000      	b.n	8008a4e <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8008a4c:	2302      	movs	r3, #2
  }
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3730      	adds	r7, #48	; 0x30
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <atoi>:
 8008a56:	220a      	movs	r2, #10
 8008a58:	2100      	movs	r1, #0
 8008a5a:	f000 bd81 	b.w	8009560 <strtol>
	...

08008a60 <__errno>:
 8008a60:	4b01      	ldr	r3, [pc, #4]	; (8008a68 <__errno+0x8>)
 8008a62:	6818      	ldr	r0, [r3, #0]
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	20000014 	.word	0x20000014

08008a6c <__libc_init_array>:
 8008a6c:	b570      	push	{r4, r5, r6, lr}
 8008a6e:	4d0d      	ldr	r5, [pc, #52]	; (8008aa4 <__libc_init_array+0x38>)
 8008a70:	4c0d      	ldr	r4, [pc, #52]	; (8008aa8 <__libc_init_array+0x3c>)
 8008a72:	1b64      	subs	r4, r4, r5
 8008a74:	10a4      	asrs	r4, r4, #2
 8008a76:	2600      	movs	r6, #0
 8008a78:	42a6      	cmp	r6, r4
 8008a7a:	d109      	bne.n	8008a90 <__libc_init_array+0x24>
 8008a7c:	4d0b      	ldr	r5, [pc, #44]	; (8008aac <__libc_init_array+0x40>)
 8008a7e:	4c0c      	ldr	r4, [pc, #48]	; (8008ab0 <__libc_init_array+0x44>)
 8008a80:	f003 fee0 	bl	800c844 <_init>
 8008a84:	1b64      	subs	r4, r4, r5
 8008a86:	10a4      	asrs	r4, r4, #2
 8008a88:	2600      	movs	r6, #0
 8008a8a:	42a6      	cmp	r6, r4
 8008a8c:	d105      	bne.n	8008a9a <__libc_init_array+0x2e>
 8008a8e:	bd70      	pop	{r4, r5, r6, pc}
 8008a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a94:	4798      	blx	r3
 8008a96:	3601      	adds	r6, #1
 8008a98:	e7ee      	b.n	8008a78 <__libc_init_array+0xc>
 8008a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a9e:	4798      	blx	r3
 8008aa0:	3601      	adds	r6, #1
 8008aa2:	e7f2      	b.n	8008a8a <__libc_init_array+0x1e>
 8008aa4:	0800cd18 	.word	0x0800cd18
 8008aa8:	0800cd18 	.word	0x0800cd18
 8008aac:	0800cd18 	.word	0x0800cd18
 8008ab0:	0800cd1c 	.word	0x0800cd1c

08008ab4 <memcpy>:
 8008ab4:	440a      	add	r2, r1
 8008ab6:	4291      	cmp	r1, r2
 8008ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008abc:	d100      	bne.n	8008ac0 <memcpy+0xc>
 8008abe:	4770      	bx	lr
 8008ac0:	b510      	push	{r4, lr}
 8008ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008aca:	4291      	cmp	r1, r2
 8008acc:	d1f9      	bne.n	8008ac2 <memcpy+0xe>
 8008ace:	bd10      	pop	{r4, pc}

08008ad0 <memset>:
 8008ad0:	4402      	add	r2, r0
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d100      	bne.n	8008ada <memset+0xa>
 8008ad8:	4770      	bx	lr
 8008ada:	f803 1b01 	strb.w	r1, [r3], #1
 8008ade:	e7f9      	b.n	8008ad4 <memset+0x4>

08008ae0 <__cvt>:
 8008ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae4:	ec55 4b10 	vmov	r4, r5, d0
 8008ae8:	2d00      	cmp	r5, #0
 8008aea:	460e      	mov	r6, r1
 8008aec:	4619      	mov	r1, r3
 8008aee:	462b      	mov	r3, r5
 8008af0:	bfbb      	ittet	lt
 8008af2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008af6:	461d      	movlt	r5, r3
 8008af8:	2300      	movge	r3, #0
 8008afa:	232d      	movlt	r3, #45	; 0x2d
 8008afc:	700b      	strb	r3, [r1, #0]
 8008afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008b04:	4691      	mov	r9, r2
 8008b06:	f023 0820 	bic.w	r8, r3, #32
 8008b0a:	bfbc      	itt	lt
 8008b0c:	4622      	movlt	r2, r4
 8008b0e:	4614      	movlt	r4, r2
 8008b10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b14:	d005      	beq.n	8008b22 <__cvt+0x42>
 8008b16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008b1a:	d100      	bne.n	8008b1e <__cvt+0x3e>
 8008b1c:	3601      	adds	r6, #1
 8008b1e:	2102      	movs	r1, #2
 8008b20:	e000      	b.n	8008b24 <__cvt+0x44>
 8008b22:	2103      	movs	r1, #3
 8008b24:	ab03      	add	r3, sp, #12
 8008b26:	9301      	str	r3, [sp, #4]
 8008b28:	ab02      	add	r3, sp, #8
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	ec45 4b10 	vmov	d0, r4, r5
 8008b30:	4653      	mov	r3, sl
 8008b32:	4632      	mov	r2, r6
 8008b34:	f000 fdac 	bl	8009690 <_dtoa_r>
 8008b38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008b3c:	4607      	mov	r7, r0
 8008b3e:	d102      	bne.n	8008b46 <__cvt+0x66>
 8008b40:	f019 0f01 	tst.w	r9, #1
 8008b44:	d022      	beq.n	8008b8c <__cvt+0xac>
 8008b46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b4a:	eb07 0906 	add.w	r9, r7, r6
 8008b4e:	d110      	bne.n	8008b72 <__cvt+0x92>
 8008b50:	783b      	ldrb	r3, [r7, #0]
 8008b52:	2b30      	cmp	r3, #48	; 0x30
 8008b54:	d10a      	bne.n	8008b6c <__cvt+0x8c>
 8008b56:	2200      	movs	r2, #0
 8008b58:	2300      	movs	r3, #0
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	f7f7 ffbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b62:	b918      	cbnz	r0, 8008b6c <__cvt+0x8c>
 8008b64:	f1c6 0601 	rsb	r6, r6, #1
 8008b68:	f8ca 6000 	str.w	r6, [sl]
 8008b6c:	f8da 3000 	ldr.w	r3, [sl]
 8008b70:	4499      	add	r9, r3
 8008b72:	2200      	movs	r2, #0
 8008b74:	2300      	movs	r3, #0
 8008b76:	4620      	mov	r0, r4
 8008b78:	4629      	mov	r1, r5
 8008b7a:	f7f7 ffad 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b7e:	b108      	cbz	r0, 8008b84 <__cvt+0xa4>
 8008b80:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b84:	2230      	movs	r2, #48	; 0x30
 8008b86:	9b03      	ldr	r3, [sp, #12]
 8008b88:	454b      	cmp	r3, r9
 8008b8a:	d307      	bcc.n	8008b9c <__cvt+0xbc>
 8008b8c:	9b03      	ldr	r3, [sp, #12]
 8008b8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b90:	1bdb      	subs	r3, r3, r7
 8008b92:	4638      	mov	r0, r7
 8008b94:	6013      	str	r3, [r2, #0]
 8008b96:	b004      	add	sp, #16
 8008b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9c:	1c59      	adds	r1, r3, #1
 8008b9e:	9103      	str	r1, [sp, #12]
 8008ba0:	701a      	strb	r2, [r3, #0]
 8008ba2:	e7f0      	b.n	8008b86 <__cvt+0xa6>

08008ba4 <__exponent>:
 8008ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2900      	cmp	r1, #0
 8008baa:	bfb8      	it	lt
 8008bac:	4249      	neglt	r1, r1
 8008bae:	f803 2b02 	strb.w	r2, [r3], #2
 8008bb2:	bfb4      	ite	lt
 8008bb4:	222d      	movlt	r2, #45	; 0x2d
 8008bb6:	222b      	movge	r2, #43	; 0x2b
 8008bb8:	2909      	cmp	r1, #9
 8008bba:	7042      	strb	r2, [r0, #1]
 8008bbc:	dd2a      	ble.n	8008c14 <__exponent+0x70>
 8008bbe:	f10d 0407 	add.w	r4, sp, #7
 8008bc2:	46a4      	mov	ip, r4
 8008bc4:	270a      	movs	r7, #10
 8008bc6:	46a6      	mov	lr, r4
 8008bc8:	460a      	mov	r2, r1
 8008bca:	fb91 f6f7 	sdiv	r6, r1, r7
 8008bce:	fb07 1516 	mls	r5, r7, r6, r1
 8008bd2:	3530      	adds	r5, #48	; 0x30
 8008bd4:	2a63      	cmp	r2, #99	; 0x63
 8008bd6:	f104 34ff 	add.w	r4, r4, #4294967295
 8008bda:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008bde:	4631      	mov	r1, r6
 8008be0:	dcf1      	bgt.n	8008bc6 <__exponent+0x22>
 8008be2:	3130      	adds	r1, #48	; 0x30
 8008be4:	f1ae 0502 	sub.w	r5, lr, #2
 8008be8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008bec:	1c44      	adds	r4, r0, #1
 8008bee:	4629      	mov	r1, r5
 8008bf0:	4561      	cmp	r1, ip
 8008bf2:	d30a      	bcc.n	8008c0a <__exponent+0x66>
 8008bf4:	f10d 0209 	add.w	r2, sp, #9
 8008bf8:	eba2 020e 	sub.w	r2, r2, lr
 8008bfc:	4565      	cmp	r5, ip
 8008bfe:	bf88      	it	hi
 8008c00:	2200      	movhi	r2, #0
 8008c02:	4413      	add	r3, r2
 8008c04:	1a18      	subs	r0, r3, r0
 8008c06:	b003      	add	sp, #12
 8008c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008c12:	e7ed      	b.n	8008bf0 <__exponent+0x4c>
 8008c14:	2330      	movs	r3, #48	; 0x30
 8008c16:	3130      	adds	r1, #48	; 0x30
 8008c18:	7083      	strb	r3, [r0, #2]
 8008c1a:	70c1      	strb	r1, [r0, #3]
 8008c1c:	1d03      	adds	r3, r0, #4
 8008c1e:	e7f1      	b.n	8008c04 <__exponent+0x60>

08008c20 <_printf_float>:
 8008c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	ed2d 8b02 	vpush	{d8}
 8008c28:	b08d      	sub	sp, #52	; 0x34
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c30:	4616      	mov	r6, r2
 8008c32:	461f      	mov	r7, r3
 8008c34:	4605      	mov	r5, r0
 8008c36:	f001 fb19 	bl	800a26c <_localeconv_r>
 8008c3a:	f8d0 a000 	ldr.w	sl, [r0]
 8008c3e:	4650      	mov	r0, sl
 8008c40:	f7f7 face 	bl	80001e0 <strlen>
 8008c44:	2300      	movs	r3, #0
 8008c46:	930a      	str	r3, [sp, #40]	; 0x28
 8008c48:	6823      	ldr	r3, [r4, #0]
 8008c4a:	9305      	str	r3, [sp, #20]
 8008c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c50:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008c54:	3307      	adds	r3, #7
 8008c56:	f023 0307 	bic.w	r3, r3, #7
 8008c5a:	f103 0208 	add.w	r2, r3, #8
 8008c5e:	f8c8 2000 	str.w	r2, [r8]
 8008c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c66:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008c6a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008c6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c72:	9307      	str	r3, [sp, #28]
 8008c74:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c78:	ee08 0a10 	vmov	s16, r0
 8008c7c:	4b9f      	ldr	r3, [pc, #636]	; (8008efc <_printf_float+0x2dc>)
 8008c7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c82:	f04f 32ff 	mov.w	r2, #4294967295
 8008c86:	f7f7 ff59 	bl	8000b3c <__aeabi_dcmpun>
 8008c8a:	bb88      	cbnz	r0, 8008cf0 <_printf_float+0xd0>
 8008c8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c90:	4b9a      	ldr	r3, [pc, #616]	; (8008efc <_printf_float+0x2dc>)
 8008c92:	f04f 32ff 	mov.w	r2, #4294967295
 8008c96:	f7f7 ff33 	bl	8000b00 <__aeabi_dcmple>
 8008c9a:	bb48      	cbnz	r0, 8008cf0 <_printf_float+0xd0>
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	4640      	mov	r0, r8
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	f7f7 ff22 	bl	8000aec <__aeabi_dcmplt>
 8008ca8:	b110      	cbz	r0, 8008cb0 <_printf_float+0x90>
 8008caa:	232d      	movs	r3, #45	; 0x2d
 8008cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cb0:	4b93      	ldr	r3, [pc, #588]	; (8008f00 <_printf_float+0x2e0>)
 8008cb2:	4894      	ldr	r0, [pc, #592]	; (8008f04 <_printf_float+0x2e4>)
 8008cb4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008cb8:	bf94      	ite	ls
 8008cba:	4698      	movls	r8, r3
 8008cbc:	4680      	movhi	r8, r0
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	6123      	str	r3, [r4, #16]
 8008cc2:	9b05      	ldr	r3, [sp, #20]
 8008cc4:	f023 0204 	bic.w	r2, r3, #4
 8008cc8:	6022      	str	r2, [r4, #0]
 8008cca:	f04f 0900 	mov.w	r9, #0
 8008cce:	9700      	str	r7, [sp, #0]
 8008cd0:	4633      	mov	r3, r6
 8008cd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	f000 f9d8 	bl	800908c <_printf_common>
 8008cdc:	3001      	adds	r0, #1
 8008cde:	f040 8090 	bne.w	8008e02 <_printf_float+0x1e2>
 8008ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce6:	b00d      	add	sp, #52	; 0x34
 8008ce8:	ecbd 8b02 	vpop	{d8}
 8008cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf0:	4642      	mov	r2, r8
 8008cf2:	464b      	mov	r3, r9
 8008cf4:	4640      	mov	r0, r8
 8008cf6:	4649      	mov	r1, r9
 8008cf8:	f7f7 ff20 	bl	8000b3c <__aeabi_dcmpun>
 8008cfc:	b140      	cbz	r0, 8008d10 <_printf_float+0xf0>
 8008cfe:	464b      	mov	r3, r9
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	bfbc      	itt	lt
 8008d04:	232d      	movlt	r3, #45	; 0x2d
 8008d06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008d0a:	487f      	ldr	r0, [pc, #508]	; (8008f08 <_printf_float+0x2e8>)
 8008d0c:	4b7f      	ldr	r3, [pc, #508]	; (8008f0c <_printf_float+0x2ec>)
 8008d0e:	e7d1      	b.n	8008cb4 <_printf_float+0x94>
 8008d10:	6863      	ldr	r3, [r4, #4]
 8008d12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008d16:	9206      	str	r2, [sp, #24]
 8008d18:	1c5a      	adds	r2, r3, #1
 8008d1a:	d13f      	bne.n	8008d9c <_printf_float+0x17c>
 8008d1c:	2306      	movs	r3, #6
 8008d1e:	6063      	str	r3, [r4, #4]
 8008d20:	9b05      	ldr	r3, [sp, #20]
 8008d22:	6861      	ldr	r1, [r4, #4]
 8008d24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9303      	str	r3, [sp, #12]
 8008d2c:	ab0a      	add	r3, sp, #40	; 0x28
 8008d2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008d32:	ab09      	add	r3, sp, #36	; 0x24
 8008d34:	ec49 8b10 	vmov	d0, r8, r9
 8008d38:	9300      	str	r3, [sp, #0]
 8008d3a:	6022      	str	r2, [r4, #0]
 8008d3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d40:	4628      	mov	r0, r5
 8008d42:	f7ff fecd 	bl	8008ae0 <__cvt>
 8008d46:	9b06      	ldr	r3, [sp, #24]
 8008d48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d4a:	2b47      	cmp	r3, #71	; 0x47
 8008d4c:	4680      	mov	r8, r0
 8008d4e:	d108      	bne.n	8008d62 <_printf_float+0x142>
 8008d50:	1cc8      	adds	r0, r1, #3
 8008d52:	db02      	blt.n	8008d5a <_printf_float+0x13a>
 8008d54:	6863      	ldr	r3, [r4, #4]
 8008d56:	4299      	cmp	r1, r3
 8008d58:	dd41      	ble.n	8008dde <_printf_float+0x1be>
 8008d5a:	f1ab 0b02 	sub.w	fp, fp, #2
 8008d5e:	fa5f fb8b 	uxtb.w	fp, fp
 8008d62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d66:	d820      	bhi.n	8008daa <_printf_float+0x18a>
 8008d68:	3901      	subs	r1, #1
 8008d6a:	465a      	mov	r2, fp
 8008d6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d70:	9109      	str	r1, [sp, #36]	; 0x24
 8008d72:	f7ff ff17 	bl	8008ba4 <__exponent>
 8008d76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d78:	1813      	adds	r3, r2, r0
 8008d7a:	2a01      	cmp	r2, #1
 8008d7c:	4681      	mov	r9, r0
 8008d7e:	6123      	str	r3, [r4, #16]
 8008d80:	dc02      	bgt.n	8008d88 <_printf_float+0x168>
 8008d82:	6822      	ldr	r2, [r4, #0]
 8008d84:	07d2      	lsls	r2, r2, #31
 8008d86:	d501      	bpl.n	8008d8c <_printf_float+0x16c>
 8008d88:	3301      	adds	r3, #1
 8008d8a:	6123      	str	r3, [r4, #16]
 8008d8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d09c      	beq.n	8008cce <_printf_float+0xae>
 8008d94:	232d      	movs	r3, #45	; 0x2d
 8008d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d9a:	e798      	b.n	8008cce <_printf_float+0xae>
 8008d9c:	9a06      	ldr	r2, [sp, #24]
 8008d9e:	2a47      	cmp	r2, #71	; 0x47
 8008da0:	d1be      	bne.n	8008d20 <_printf_float+0x100>
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1bc      	bne.n	8008d20 <_printf_float+0x100>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e7b9      	b.n	8008d1e <_printf_float+0xfe>
 8008daa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008dae:	d118      	bne.n	8008de2 <_printf_float+0x1c2>
 8008db0:	2900      	cmp	r1, #0
 8008db2:	6863      	ldr	r3, [r4, #4]
 8008db4:	dd0b      	ble.n	8008dce <_printf_float+0x1ae>
 8008db6:	6121      	str	r1, [r4, #16]
 8008db8:	b913      	cbnz	r3, 8008dc0 <_printf_float+0x1a0>
 8008dba:	6822      	ldr	r2, [r4, #0]
 8008dbc:	07d0      	lsls	r0, r2, #31
 8008dbe:	d502      	bpl.n	8008dc6 <_printf_float+0x1a6>
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	440b      	add	r3, r1
 8008dc4:	6123      	str	r3, [r4, #16]
 8008dc6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008dc8:	f04f 0900 	mov.w	r9, #0
 8008dcc:	e7de      	b.n	8008d8c <_printf_float+0x16c>
 8008dce:	b913      	cbnz	r3, 8008dd6 <_printf_float+0x1b6>
 8008dd0:	6822      	ldr	r2, [r4, #0]
 8008dd2:	07d2      	lsls	r2, r2, #31
 8008dd4:	d501      	bpl.n	8008dda <_printf_float+0x1ba>
 8008dd6:	3302      	adds	r3, #2
 8008dd8:	e7f4      	b.n	8008dc4 <_printf_float+0x1a4>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e7f2      	b.n	8008dc4 <_printf_float+0x1a4>
 8008dde:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008de4:	4299      	cmp	r1, r3
 8008de6:	db05      	blt.n	8008df4 <_printf_float+0x1d4>
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	6121      	str	r1, [r4, #16]
 8008dec:	07d8      	lsls	r0, r3, #31
 8008dee:	d5ea      	bpl.n	8008dc6 <_printf_float+0x1a6>
 8008df0:	1c4b      	adds	r3, r1, #1
 8008df2:	e7e7      	b.n	8008dc4 <_printf_float+0x1a4>
 8008df4:	2900      	cmp	r1, #0
 8008df6:	bfd4      	ite	le
 8008df8:	f1c1 0202 	rsble	r2, r1, #2
 8008dfc:	2201      	movgt	r2, #1
 8008dfe:	4413      	add	r3, r2
 8008e00:	e7e0      	b.n	8008dc4 <_printf_float+0x1a4>
 8008e02:	6823      	ldr	r3, [r4, #0]
 8008e04:	055a      	lsls	r2, r3, #21
 8008e06:	d407      	bmi.n	8008e18 <_printf_float+0x1f8>
 8008e08:	6923      	ldr	r3, [r4, #16]
 8008e0a:	4642      	mov	r2, r8
 8008e0c:	4631      	mov	r1, r6
 8008e0e:	4628      	mov	r0, r5
 8008e10:	47b8      	blx	r7
 8008e12:	3001      	adds	r0, #1
 8008e14:	d12c      	bne.n	8008e70 <_printf_float+0x250>
 8008e16:	e764      	b.n	8008ce2 <_printf_float+0xc2>
 8008e18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e1c:	f240 80e0 	bls.w	8008fe0 <_printf_float+0x3c0>
 8008e20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e24:	2200      	movs	r2, #0
 8008e26:	2300      	movs	r3, #0
 8008e28:	f7f7 fe56 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d034      	beq.n	8008e9a <_printf_float+0x27a>
 8008e30:	4a37      	ldr	r2, [pc, #220]	; (8008f10 <_printf_float+0x2f0>)
 8008e32:	2301      	movs	r3, #1
 8008e34:	4631      	mov	r1, r6
 8008e36:	4628      	mov	r0, r5
 8008e38:	47b8      	blx	r7
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	f43f af51 	beq.w	8008ce2 <_printf_float+0xc2>
 8008e40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e44:	429a      	cmp	r2, r3
 8008e46:	db02      	blt.n	8008e4e <_printf_float+0x22e>
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	07d8      	lsls	r0, r3, #31
 8008e4c:	d510      	bpl.n	8008e70 <_printf_float+0x250>
 8008e4e:	ee18 3a10 	vmov	r3, s16
 8008e52:	4652      	mov	r2, sl
 8008e54:	4631      	mov	r1, r6
 8008e56:	4628      	mov	r0, r5
 8008e58:	47b8      	blx	r7
 8008e5a:	3001      	adds	r0, #1
 8008e5c:	f43f af41 	beq.w	8008ce2 <_printf_float+0xc2>
 8008e60:	f04f 0800 	mov.w	r8, #0
 8008e64:	f104 091a 	add.w	r9, r4, #26
 8008e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	4543      	cmp	r3, r8
 8008e6e:	dc09      	bgt.n	8008e84 <_printf_float+0x264>
 8008e70:	6823      	ldr	r3, [r4, #0]
 8008e72:	079b      	lsls	r3, r3, #30
 8008e74:	f100 8105 	bmi.w	8009082 <_printf_float+0x462>
 8008e78:	68e0      	ldr	r0, [r4, #12]
 8008e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e7c:	4298      	cmp	r0, r3
 8008e7e:	bfb8      	it	lt
 8008e80:	4618      	movlt	r0, r3
 8008e82:	e730      	b.n	8008ce6 <_printf_float+0xc6>
 8008e84:	2301      	movs	r3, #1
 8008e86:	464a      	mov	r2, r9
 8008e88:	4631      	mov	r1, r6
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	47b8      	blx	r7
 8008e8e:	3001      	adds	r0, #1
 8008e90:	f43f af27 	beq.w	8008ce2 <_printf_float+0xc2>
 8008e94:	f108 0801 	add.w	r8, r8, #1
 8008e98:	e7e6      	b.n	8008e68 <_printf_float+0x248>
 8008e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	dc39      	bgt.n	8008f14 <_printf_float+0x2f4>
 8008ea0:	4a1b      	ldr	r2, [pc, #108]	; (8008f10 <_printf_float+0x2f0>)
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	4631      	mov	r1, r6
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	47b8      	blx	r7
 8008eaa:	3001      	adds	r0, #1
 8008eac:	f43f af19 	beq.w	8008ce2 <_printf_float+0xc2>
 8008eb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	d102      	bne.n	8008ebe <_printf_float+0x29e>
 8008eb8:	6823      	ldr	r3, [r4, #0]
 8008eba:	07d9      	lsls	r1, r3, #31
 8008ebc:	d5d8      	bpl.n	8008e70 <_printf_float+0x250>
 8008ebe:	ee18 3a10 	vmov	r3, s16
 8008ec2:	4652      	mov	r2, sl
 8008ec4:	4631      	mov	r1, r6
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	47b8      	blx	r7
 8008eca:	3001      	adds	r0, #1
 8008ecc:	f43f af09 	beq.w	8008ce2 <_printf_float+0xc2>
 8008ed0:	f04f 0900 	mov.w	r9, #0
 8008ed4:	f104 0a1a 	add.w	sl, r4, #26
 8008ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eda:	425b      	negs	r3, r3
 8008edc:	454b      	cmp	r3, r9
 8008ede:	dc01      	bgt.n	8008ee4 <_printf_float+0x2c4>
 8008ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee2:	e792      	b.n	8008e0a <_printf_float+0x1ea>
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	4652      	mov	r2, sl
 8008ee8:	4631      	mov	r1, r6
 8008eea:	4628      	mov	r0, r5
 8008eec:	47b8      	blx	r7
 8008eee:	3001      	adds	r0, #1
 8008ef0:	f43f aef7 	beq.w	8008ce2 <_printf_float+0xc2>
 8008ef4:	f109 0901 	add.w	r9, r9, #1
 8008ef8:	e7ee      	b.n	8008ed8 <_printf_float+0x2b8>
 8008efa:	bf00      	nop
 8008efc:	7fefffff 	.word	0x7fefffff
 8008f00:	0800c90c 	.word	0x0800c90c
 8008f04:	0800c910 	.word	0x0800c910
 8008f08:	0800c918 	.word	0x0800c918
 8008f0c:	0800c914 	.word	0x0800c914
 8008f10:	0800c91c 	.word	0x0800c91c
 8008f14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	bfa8      	it	ge
 8008f1c:	461a      	movge	r2, r3
 8008f1e:	2a00      	cmp	r2, #0
 8008f20:	4691      	mov	r9, r2
 8008f22:	dc37      	bgt.n	8008f94 <_printf_float+0x374>
 8008f24:	f04f 0b00 	mov.w	fp, #0
 8008f28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f2c:	f104 021a 	add.w	r2, r4, #26
 8008f30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f32:	9305      	str	r3, [sp, #20]
 8008f34:	eba3 0309 	sub.w	r3, r3, r9
 8008f38:	455b      	cmp	r3, fp
 8008f3a:	dc33      	bgt.n	8008fa4 <_printf_float+0x384>
 8008f3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f40:	429a      	cmp	r2, r3
 8008f42:	db3b      	blt.n	8008fbc <_printf_float+0x39c>
 8008f44:	6823      	ldr	r3, [r4, #0]
 8008f46:	07da      	lsls	r2, r3, #31
 8008f48:	d438      	bmi.n	8008fbc <_printf_float+0x39c>
 8008f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f4c:	9a05      	ldr	r2, [sp, #20]
 8008f4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f50:	1a9a      	subs	r2, r3, r2
 8008f52:	eba3 0901 	sub.w	r9, r3, r1
 8008f56:	4591      	cmp	r9, r2
 8008f58:	bfa8      	it	ge
 8008f5a:	4691      	movge	r9, r2
 8008f5c:	f1b9 0f00 	cmp.w	r9, #0
 8008f60:	dc35      	bgt.n	8008fce <_printf_float+0x3ae>
 8008f62:	f04f 0800 	mov.w	r8, #0
 8008f66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f6a:	f104 0a1a 	add.w	sl, r4, #26
 8008f6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f72:	1a9b      	subs	r3, r3, r2
 8008f74:	eba3 0309 	sub.w	r3, r3, r9
 8008f78:	4543      	cmp	r3, r8
 8008f7a:	f77f af79 	ble.w	8008e70 <_printf_float+0x250>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	4652      	mov	r2, sl
 8008f82:	4631      	mov	r1, r6
 8008f84:	4628      	mov	r0, r5
 8008f86:	47b8      	blx	r7
 8008f88:	3001      	adds	r0, #1
 8008f8a:	f43f aeaa 	beq.w	8008ce2 <_printf_float+0xc2>
 8008f8e:	f108 0801 	add.w	r8, r8, #1
 8008f92:	e7ec      	b.n	8008f6e <_printf_float+0x34e>
 8008f94:	4613      	mov	r3, r2
 8008f96:	4631      	mov	r1, r6
 8008f98:	4642      	mov	r2, r8
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	47b8      	blx	r7
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	d1c0      	bne.n	8008f24 <_printf_float+0x304>
 8008fa2:	e69e      	b.n	8008ce2 <_printf_float+0xc2>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	4631      	mov	r1, r6
 8008fa8:	4628      	mov	r0, r5
 8008faa:	9205      	str	r2, [sp, #20]
 8008fac:	47b8      	blx	r7
 8008fae:	3001      	adds	r0, #1
 8008fb0:	f43f ae97 	beq.w	8008ce2 <_printf_float+0xc2>
 8008fb4:	9a05      	ldr	r2, [sp, #20]
 8008fb6:	f10b 0b01 	add.w	fp, fp, #1
 8008fba:	e7b9      	b.n	8008f30 <_printf_float+0x310>
 8008fbc:	ee18 3a10 	vmov	r3, s16
 8008fc0:	4652      	mov	r2, sl
 8008fc2:	4631      	mov	r1, r6
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	47b8      	blx	r7
 8008fc8:	3001      	adds	r0, #1
 8008fca:	d1be      	bne.n	8008f4a <_printf_float+0x32a>
 8008fcc:	e689      	b.n	8008ce2 <_printf_float+0xc2>
 8008fce:	9a05      	ldr	r2, [sp, #20]
 8008fd0:	464b      	mov	r3, r9
 8008fd2:	4442      	add	r2, r8
 8008fd4:	4631      	mov	r1, r6
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	47b8      	blx	r7
 8008fda:	3001      	adds	r0, #1
 8008fdc:	d1c1      	bne.n	8008f62 <_printf_float+0x342>
 8008fde:	e680      	b.n	8008ce2 <_printf_float+0xc2>
 8008fe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fe2:	2a01      	cmp	r2, #1
 8008fe4:	dc01      	bgt.n	8008fea <_printf_float+0x3ca>
 8008fe6:	07db      	lsls	r3, r3, #31
 8008fe8:	d538      	bpl.n	800905c <_printf_float+0x43c>
 8008fea:	2301      	movs	r3, #1
 8008fec:	4642      	mov	r2, r8
 8008fee:	4631      	mov	r1, r6
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	47b8      	blx	r7
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	f43f ae74 	beq.w	8008ce2 <_printf_float+0xc2>
 8008ffa:	ee18 3a10 	vmov	r3, s16
 8008ffe:	4652      	mov	r2, sl
 8009000:	4631      	mov	r1, r6
 8009002:	4628      	mov	r0, r5
 8009004:	47b8      	blx	r7
 8009006:	3001      	adds	r0, #1
 8009008:	f43f ae6b 	beq.w	8008ce2 <_printf_float+0xc2>
 800900c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009010:	2200      	movs	r2, #0
 8009012:	2300      	movs	r3, #0
 8009014:	f7f7 fd60 	bl	8000ad8 <__aeabi_dcmpeq>
 8009018:	b9d8      	cbnz	r0, 8009052 <_printf_float+0x432>
 800901a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800901c:	f108 0201 	add.w	r2, r8, #1
 8009020:	3b01      	subs	r3, #1
 8009022:	4631      	mov	r1, r6
 8009024:	4628      	mov	r0, r5
 8009026:	47b8      	blx	r7
 8009028:	3001      	adds	r0, #1
 800902a:	d10e      	bne.n	800904a <_printf_float+0x42a>
 800902c:	e659      	b.n	8008ce2 <_printf_float+0xc2>
 800902e:	2301      	movs	r3, #1
 8009030:	4652      	mov	r2, sl
 8009032:	4631      	mov	r1, r6
 8009034:	4628      	mov	r0, r5
 8009036:	47b8      	blx	r7
 8009038:	3001      	adds	r0, #1
 800903a:	f43f ae52 	beq.w	8008ce2 <_printf_float+0xc2>
 800903e:	f108 0801 	add.w	r8, r8, #1
 8009042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009044:	3b01      	subs	r3, #1
 8009046:	4543      	cmp	r3, r8
 8009048:	dcf1      	bgt.n	800902e <_printf_float+0x40e>
 800904a:	464b      	mov	r3, r9
 800904c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009050:	e6dc      	b.n	8008e0c <_printf_float+0x1ec>
 8009052:	f04f 0800 	mov.w	r8, #0
 8009056:	f104 0a1a 	add.w	sl, r4, #26
 800905a:	e7f2      	b.n	8009042 <_printf_float+0x422>
 800905c:	2301      	movs	r3, #1
 800905e:	4642      	mov	r2, r8
 8009060:	e7df      	b.n	8009022 <_printf_float+0x402>
 8009062:	2301      	movs	r3, #1
 8009064:	464a      	mov	r2, r9
 8009066:	4631      	mov	r1, r6
 8009068:	4628      	mov	r0, r5
 800906a:	47b8      	blx	r7
 800906c:	3001      	adds	r0, #1
 800906e:	f43f ae38 	beq.w	8008ce2 <_printf_float+0xc2>
 8009072:	f108 0801 	add.w	r8, r8, #1
 8009076:	68e3      	ldr	r3, [r4, #12]
 8009078:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800907a:	1a5b      	subs	r3, r3, r1
 800907c:	4543      	cmp	r3, r8
 800907e:	dcf0      	bgt.n	8009062 <_printf_float+0x442>
 8009080:	e6fa      	b.n	8008e78 <_printf_float+0x258>
 8009082:	f04f 0800 	mov.w	r8, #0
 8009086:	f104 0919 	add.w	r9, r4, #25
 800908a:	e7f4      	b.n	8009076 <_printf_float+0x456>

0800908c <_printf_common>:
 800908c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009090:	4616      	mov	r6, r2
 8009092:	4699      	mov	r9, r3
 8009094:	688a      	ldr	r2, [r1, #8]
 8009096:	690b      	ldr	r3, [r1, #16]
 8009098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800909c:	4293      	cmp	r3, r2
 800909e:	bfb8      	it	lt
 80090a0:	4613      	movlt	r3, r2
 80090a2:	6033      	str	r3, [r6, #0]
 80090a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090a8:	4607      	mov	r7, r0
 80090aa:	460c      	mov	r4, r1
 80090ac:	b10a      	cbz	r2, 80090b2 <_printf_common+0x26>
 80090ae:	3301      	adds	r3, #1
 80090b0:	6033      	str	r3, [r6, #0]
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	0699      	lsls	r1, r3, #26
 80090b6:	bf42      	ittt	mi
 80090b8:	6833      	ldrmi	r3, [r6, #0]
 80090ba:	3302      	addmi	r3, #2
 80090bc:	6033      	strmi	r3, [r6, #0]
 80090be:	6825      	ldr	r5, [r4, #0]
 80090c0:	f015 0506 	ands.w	r5, r5, #6
 80090c4:	d106      	bne.n	80090d4 <_printf_common+0x48>
 80090c6:	f104 0a19 	add.w	sl, r4, #25
 80090ca:	68e3      	ldr	r3, [r4, #12]
 80090cc:	6832      	ldr	r2, [r6, #0]
 80090ce:	1a9b      	subs	r3, r3, r2
 80090d0:	42ab      	cmp	r3, r5
 80090d2:	dc26      	bgt.n	8009122 <_printf_common+0x96>
 80090d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090d8:	1e13      	subs	r3, r2, #0
 80090da:	6822      	ldr	r2, [r4, #0]
 80090dc:	bf18      	it	ne
 80090de:	2301      	movne	r3, #1
 80090e0:	0692      	lsls	r2, r2, #26
 80090e2:	d42b      	bmi.n	800913c <_printf_common+0xb0>
 80090e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090e8:	4649      	mov	r1, r9
 80090ea:	4638      	mov	r0, r7
 80090ec:	47c0      	blx	r8
 80090ee:	3001      	adds	r0, #1
 80090f0:	d01e      	beq.n	8009130 <_printf_common+0xa4>
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	68e5      	ldr	r5, [r4, #12]
 80090f6:	6832      	ldr	r2, [r6, #0]
 80090f8:	f003 0306 	and.w	r3, r3, #6
 80090fc:	2b04      	cmp	r3, #4
 80090fe:	bf08      	it	eq
 8009100:	1aad      	subeq	r5, r5, r2
 8009102:	68a3      	ldr	r3, [r4, #8]
 8009104:	6922      	ldr	r2, [r4, #16]
 8009106:	bf0c      	ite	eq
 8009108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800910c:	2500      	movne	r5, #0
 800910e:	4293      	cmp	r3, r2
 8009110:	bfc4      	itt	gt
 8009112:	1a9b      	subgt	r3, r3, r2
 8009114:	18ed      	addgt	r5, r5, r3
 8009116:	2600      	movs	r6, #0
 8009118:	341a      	adds	r4, #26
 800911a:	42b5      	cmp	r5, r6
 800911c:	d11a      	bne.n	8009154 <_printf_common+0xc8>
 800911e:	2000      	movs	r0, #0
 8009120:	e008      	b.n	8009134 <_printf_common+0xa8>
 8009122:	2301      	movs	r3, #1
 8009124:	4652      	mov	r2, sl
 8009126:	4649      	mov	r1, r9
 8009128:	4638      	mov	r0, r7
 800912a:	47c0      	blx	r8
 800912c:	3001      	adds	r0, #1
 800912e:	d103      	bne.n	8009138 <_printf_common+0xac>
 8009130:	f04f 30ff 	mov.w	r0, #4294967295
 8009134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009138:	3501      	adds	r5, #1
 800913a:	e7c6      	b.n	80090ca <_printf_common+0x3e>
 800913c:	18e1      	adds	r1, r4, r3
 800913e:	1c5a      	adds	r2, r3, #1
 8009140:	2030      	movs	r0, #48	; 0x30
 8009142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009146:	4422      	add	r2, r4
 8009148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800914c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009150:	3302      	adds	r3, #2
 8009152:	e7c7      	b.n	80090e4 <_printf_common+0x58>
 8009154:	2301      	movs	r3, #1
 8009156:	4622      	mov	r2, r4
 8009158:	4649      	mov	r1, r9
 800915a:	4638      	mov	r0, r7
 800915c:	47c0      	blx	r8
 800915e:	3001      	adds	r0, #1
 8009160:	d0e6      	beq.n	8009130 <_printf_common+0xa4>
 8009162:	3601      	adds	r6, #1
 8009164:	e7d9      	b.n	800911a <_printf_common+0x8e>
	...

08009168 <_printf_i>:
 8009168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800916c:	7e0f      	ldrb	r7, [r1, #24]
 800916e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009170:	2f78      	cmp	r7, #120	; 0x78
 8009172:	4691      	mov	r9, r2
 8009174:	4680      	mov	r8, r0
 8009176:	460c      	mov	r4, r1
 8009178:	469a      	mov	sl, r3
 800917a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800917e:	d807      	bhi.n	8009190 <_printf_i+0x28>
 8009180:	2f62      	cmp	r7, #98	; 0x62
 8009182:	d80a      	bhi.n	800919a <_printf_i+0x32>
 8009184:	2f00      	cmp	r7, #0
 8009186:	f000 80d8 	beq.w	800933a <_printf_i+0x1d2>
 800918a:	2f58      	cmp	r7, #88	; 0x58
 800918c:	f000 80a3 	beq.w	80092d6 <_printf_i+0x16e>
 8009190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009198:	e03a      	b.n	8009210 <_printf_i+0xa8>
 800919a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800919e:	2b15      	cmp	r3, #21
 80091a0:	d8f6      	bhi.n	8009190 <_printf_i+0x28>
 80091a2:	a101      	add	r1, pc, #4	; (adr r1, 80091a8 <_printf_i+0x40>)
 80091a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091a8:	08009201 	.word	0x08009201
 80091ac:	08009215 	.word	0x08009215
 80091b0:	08009191 	.word	0x08009191
 80091b4:	08009191 	.word	0x08009191
 80091b8:	08009191 	.word	0x08009191
 80091bc:	08009191 	.word	0x08009191
 80091c0:	08009215 	.word	0x08009215
 80091c4:	08009191 	.word	0x08009191
 80091c8:	08009191 	.word	0x08009191
 80091cc:	08009191 	.word	0x08009191
 80091d0:	08009191 	.word	0x08009191
 80091d4:	08009321 	.word	0x08009321
 80091d8:	08009245 	.word	0x08009245
 80091dc:	08009303 	.word	0x08009303
 80091e0:	08009191 	.word	0x08009191
 80091e4:	08009191 	.word	0x08009191
 80091e8:	08009343 	.word	0x08009343
 80091ec:	08009191 	.word	0x08009191
 80091f0:	08009245 	.word	0x08009245
 80091f4:	08009191 	.word	0x08009191
 80091f8:	08009191 	.word	0x08009191
 80091fc:	0800930b 	.word	0x0800930b
 8009200:	682b      	ldr	r3, [r5, #0]
 8009202:	1d1a      	adds	r2, r3, #4
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	602a      	str	r2, [r5, #0]
 8009208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800920c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009210:	2301      	movs	r3, #1
 8009212:	e0a3      	b.n	800935c <_printf_i+0x1f4>
 8009214:	6820      	ldr	r0, [r4, #0]
 8009216:	6829      	ldr	r1, [r5, #0]
 8009218:	0606      	lsls	r6, r0, #24
 800921a:	f101 0304 	add.w	r3, r1, #4
 800921e:	d50a      	bpl.n	8009236 <_printf_i+0xce>
 8009220:	680e      	ldr	r6, [r1, #0]
 8009222:	602b      	str	r3, [r5, #0]
 8009224:	2e00      	cmp	r6, #0
 8009226:	da03      	bge.n	8009230 <_printf_i+0xc8>
 8009228:	232d      	movs	r3, #45	; 0x2d
 800922a:	4276      	negs	r6, r6
 800922c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009230:	485e      	ldr	r0, [pc, #376]	; (80093ac <_printf_i+0x244>)
 8009232:	230a      	movs	r3, #10
 8009234:	e019      	b.n	800926a <_printf_i+0x102>
 8009236:	680e      	ldr	r6, [r1, #0]
 8009238:	602b      	str	r3, [r5, #0]
 800923a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800923e:	bf18      	it	ne
 8009240:	b236      	sxthne	r6, r6
 8009242:	e7ef      	b.n	8009224 <_printf_i+0xbc>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	6820      	ldr	r0, [r4, #0]
 8009248:	1d19      	adds	r1, r3, #4
 800924a:	6029      	str	r1, [r5, #0]
 800924c:	0601      	lsls	r1, r0, #24
 800924e:	d501      	bpl.n	8009254 <_printf_i+0xec>
 8009250:	681e      	ldr	r6, [r3, #0]
 8009252:	e002      	b.n	800925a <_printf_i+0xf2>
 8009254:	0646      	lsls	r6, r0, #25
 8009256:	d5fb      	bpl.n	8009250 <_printf_i+0xe8>
 8009258:	881e      	ldrh	r6, [r3, #0]
 800925a:	4854      	ldr	r0, [pc, #336]	; (80093ac <_printf_i+0x244>)
 800925c:	2f6f      	cmp	r7, #111	; 0x6f
 800925e:	bf0c      	ite	eq
 8009260:	2308      	moveq	r3, #8
 8009262:	230a      	movne	r3, #10
 8009264:	2100      	movs	r1, #0
 8009266:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800926a:	6865      	ldr	r5, [r4, #4]
 800926c:	60a5      	str	r5, [r4, #8]
 800926e:	2d00      	cmp	r5, #0
 8009270:	bfa2      	ittt	ge
 8009272:	6821      	ldrge	r1, [r4, #0]
 8009274:	f021 0104 	bicge.w	r1, r1, #4
 8009278:	6021      	strge	r1, [r4, #0]
 800927a:	b90e      	cbnz	r6, 8009280 <_printf_i+0x118>
 800927c:	2d00      	cmp	r5, #0
 800927e:	d04d      	beq.n	800931c <_printf_i+0x1b4>
 8009280:	4615      	mov	r5, r2
 8009282:	fbb6 f1f3 	udiv	r1, r6, r3
 8009286:	fb03 6711 	mls	r7, r3, r1, r6
 800928a:	5dc7      	ldrb	r7, [r0, r7]
 800928c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009290:	4637      	mov	r7, r6
 8009292:	42bb      	cmp	r3, r7
 8009294:	460e      	mov	r6, r1
 8009296:	d9f4      	bls.n	8009282 <_printf_i+0x11a>
 8009298:	2b08      	cmp	r3, #8
 800929a:	d10b      	bne.n	80092b4 <_printf_i+0x14c>
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	07de      	lsls	r6, r3, #31
 80092a0:	d508      	bpl.n	80092b4 <_printf_i+0x14c>
 80092a2:	6923      	ldr	r3, [r4, #16]
 80092a4:	6861      	ldr	r1, [r4, #4]
 80092a6:	4299      	cmp	r1, r3
 80092a8:	bfde      	ittt	le
 80092aa:	2330      	movle	r3, #48	; 0x30
 80092ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80092b4:	1b52      	subs	r2, r2, r5
 80092b6:	6122      	str	r2, [r4, #16]
 80092b8:	f8cd a000 	str.w	sl, [sp]
 80092bc:	464b      	mov	r3, r9
 80092be:	aa03      	add	r2, sp, #12
 80092c0:	4621      	mov	r1, r4
 80092c2:	4640      	mov	r0, r8
 80092c4:	f7ff fee2 	bl	800908c <_printf_common>
 80092c8:	3001      	adds	r0, #1
 80092ca:	d14c      	bne.n	8009366 <_printf_i+0x1fe>
 80092cc:	f04f 30ff 	mov.w	r0, #4294967295
 80092d0:	b004      	add	sp, #16
 80092d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d6:	4835      	ldr	r0, [pc, #212]	; (80093ac <_printf_i+0x244>)
 80092d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80092dc:	6829      	ldr	r1, [r5, #0]
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80092e4:	6029      	str	r1, [r5, #0]
 80092e6:	061d      	lsls	r5, r3, #24
 80092e8:	d514      	bpl.n	8009314 <_printf_i+0x1ac>
 80092ea:	07df      	lsls	r7, r3, #31
 80092ec:	bf44      	itt	mi
 80092ee:	f043 0320 	orrmi.w	r3, r3, #32
 80092f2:	6023      	strmi	r3, [r4, #0]
 80092f4:	b91e      	cbnz	r6, 80092fe <_printf_i+0x196>
 80092f6:	6823      	ldr	r3, [r4, #0]
 80092f8:	f023 0320 	bic.w	r3, r3, #32
 80092fc:	6023      	str	r3, [r4, #0]
 80092fe:	2310      	movs	r3, #16
 8009300:	e7b0      	b.n	8009264 <_printf_i+0xfc>
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	f043 0320 	orr.w	r3, r3, #32
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	2378      	movs	r3, #120	; 0x78
 800930c:	4828      	ldr	r0, [pc, #160]	; (80093b0 <_printf_i+0x248>)
 800930e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009312:	e7e3      	b.n	80092dc <_printf_i+0x174>
 8009314:	0659      	lsls	r1, r3, #25
 8009316:	bf48      	it	mi
 8009318:	b2b6      	uxthmi	r6, r6
 800931a:	e7e6      	b.n	80092ea <_printf_i+0x182>
 800931c:	4615      	mov	r5, r2
 800931e:	e7bb      	b.n	8009298 <_printf_i+0x130>
 8009320:	682b      	ldr	r3, [r5, #0]
 8009322:	6826      	ldr	r6, [r4, #0]
 8009324:	6961      	ldr	r1, [r4, #20]
 8009326:	1d18      	adds	r0, r3, #4
 8009328:	6028      	str	r0, [r5, #0]
 800932a:	0635      	lsls	r5, r6, #24
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	d501      	bpl.n	8009334 <_printf_i+0x1cc>
 8009330:	6019      	str	r1, [r3, #0]
 8009332:	e002      	b.n	800933a <_printf_i+0x1d2>
 8009334:	0670      	lsls	r0, r6, #25
 8009336:	d5fb      	bpl.n	8009330 <_printf_i+0x1c8>
 8009338:	8019      	strh	r1, [r3, #0]
 800933a:	2300      	movs	r3, #0
 800933c:	6123      	str	r3, [r4, #16]
 800933e:	4615      	mov	r5, r2
 8009340:	e7ba      	b.n	80092b8 <_printf_i+0x150>
 8009342:	682b      	ldr	r3, [r5, #0]
 8009344:	1d1a      	adds	r2, r3, #4
 8009346:	602a      	str	r2, [r5, #0]
 8009348:	681d      	ldr	r5, [r3, #0]
 800934a:	6862      	ldr	r2, [r4, #4]
 800934c:	2100      	movs	r1, #0
 800934e:	4628      	mov	r0, r5
 8009350:	f7f6 ff4e 	bl	80001f0 <memchr>
 8009354:	b108      	cbz	r0, 800935a <_printf_i+0x1f2>
 8009356:	1b40      	subs	r0, r0, r5
 8009358:	6060      	str	r0, [r4, #4]
 800935a:	6863      	ldr	r3, [r4, #4]
 800935c:	6123      	str	r3, [r4, #16]
 800935e:	2300      	movs	r3, #0
 8009360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009364:	e7a8      	b.n	80092b8 <_printf_i+0x150>
 8009366:	6923      	ldr	r3, [r4, #16]
 8009368:	462a      	mov	r2, r5
 800936a:	4649      	mov	r1, r9
 800936c:	4640      	mov	r0, r8
 800936e:	47d0      	blx	sl
 8009370:	3001      	adds	r0, #1
 8009372:	d0ab      	beq.n	80092cc <_printf_i+0x164>
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	079b      	lsls	r3, r3, #30
 8009378:	d413      	bmi.n	80093a2 <_printf_i+0x23a>
 800937a:	68e0      	ldr	r0, [r4, #12]
 800937c:	9b03      	ldr	r3, [sp, #12]
 800937e:	4298      	cmp	r0, r3
 8009380:	bfb8      	it	lt
 8009382:	4618      	movlt	r0, r3
 8009384:	e7a4      	b.n	80092d0 <_printf_i+0x168>
 8009386:	2301      	movs	r3, #1
 8009388:	4632      	mov	r2, r6
 800938a:	4649      	mov	r1, r9
 800938c:	4640      	mov	r0, r8
 800938e:	47d0      	blx	sl
 8009390:	3001      	adds	r0, #1
 8009392:	d09b      	beq.n	80092cc <_printf_i+0x164>
 8009394:	3501      	adds	r5, #1
 8009396:	68e3      	ldr	r3, [r4, #12]
 8009398:	9903      	ldr	r1, [sp, #12]
 800939a:	1a5b      	subs	r3, r3, r1
 800939c:	42ab      	cmp	r3, r5
 800939e:	dcf2      	bgt.n	8009386 <_printf_i+0x21e>
 80093a0:	e7eb      	b.n	800937a <_printf_i+0x212>
 80093a2:	2500      	movs	r5, #0
 80093a4:	f104 0619 	add.w	r6, r4, #25
 80093a8:	e7f5      	b.n	8009396 <_printf_i+0x22e>
 80093aa:	bf00      	nop
 80093ac:	0800c91e 	.word	0x0800c91e
 80093b0:	0800c92f 	.word	0x0800c92f

080093b4 <sniprintf>:
 80093b4:	b40c      	push	{r2, r3}
 80093b6:	b530      	push	{r4, r5, lr}
 80093b8:	4b17      	ldr	r3, [pc, #92]	; (8009418 <sniprintf+0x64>)
 80093ba:	1e0c      	subs	r4, r1, #0
 80093bc:	681d      	ldr	r5, [r3, #0]
 80093be:	b09d      	sub	sp, #116	; 0x74
 80093c0:	da08      	bge.n	80093d4 <sniprintf+0x20>
 80093c2:	238b      	movs	r3, #139	; 0x8b
 80093c4:	602b      	str	r3, [r5, #0]
 80093c6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ca:	b01d      	add	sp, #116	; 0x74
 80093cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093d0:	b002      	add	sp, #8
 80093d2:	4770      	bx	lr
 80093d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80093d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80093dc:	bf14      	ite	ne
 80093de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80093e2:	4623      	moveq	r3, r4
 80093e4:	9304      	str	r3, [sp, #16]
 80093e6:	9307      	str	r3, [sp, #28]
 80093e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093ec:	9002      	str	r0, [sp, #8]
 80093ee:	9006      	str	r0, [sp, #24]
 80093f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80093f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80093f6:	ab21      	add	r3, sp, #132	; 0x84
 80093f8:	a902      	add	r1, sp, #8
 80093fa:	4628      	mov	r0, r5
 80093fc:	9301      	str	r3, [sp, #4]
 80093fe:	f001 fc17 	bl	800ac30 <_svfiprintf_r>
 8009402:	1c43      	adds	r3, r0, #1
 8009404:	bfbc      	itt	lt
 8009406:	238b      	movlt	r3, #139	; 0x8b
 8009408:	602b      	strlt	r3, [r5, #0]
 800940a:	2c00      	cmp	r4, #0
 800940c:	d0dd      	beq.n	80093ca <sniprintf+0x16>
 800940e:	9b02      	ldr	r3, [sp, #8]
 8009410:	2200      	movs	r2, #0
 8009412:	701a      	strb	r2, [r3, #0]
 8009414:	e7d9      	b.n	80093ca <sniprintf+0x16>
 8009416:	bf00      	nop
 8009418:	20000014 	.word	0x20000014

0800941c <siprintf>:
 800941c:	b40e      	push	{r1, r2, r3}
 800941e:	b500      	push	{lr}
 8009420:	b09c      	sub	sp, #112	; 0x70
 8009422:	ab1d      	add	r3, sp, #116	; 0x74
 8009424:	9002      	str	r0, [sp, #8]
 8009426:	9006      	str	r0, [sp, #24]
 8009428:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800942c:	4809      	ldr	r0, [pc, #36]	; (8009454 <siprintf+0x38>)
 800942e:	9107      	str	r1, [sp, #28]
 8009430:	9104      	str	r1, [sp, #16]
 8009432:	4909      	ldr	r1, [pc, #36]	; (8009458 <siprintf+0x3c>)
 8009434:	f853 2b04 	ldr.w	r2, [r3], #4
 8009438:	9105      	str	r1, [sp, #20]
 800943a:	6800      	ldr	r0, [r0, #0]
 800943c:	9301      	str	r3, [sp, #4]
 800943e:	a902      	add	r1, sp, #8
 8009440:	f001 fbf6 	bl	800ac30 <_svfiprintf_r>
 8009444:	9b02      	ldr	r3, [sp, #8]
 8009446:	2200      	movs	r2, #0
 8009448:	701a      	strb	r2, [r3, #0]
 800944a:	b01c      	add	sp, #112	; 0x70
 800944c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009450:	b003      	add	sp, #12
 8009452:	4770      	bx	lr
 8009454:	20000014 	.word	0x20000014
 8009458:	ffff0208 	.word	0xffff0208

0800945c <_strtol_l.constprop.0>:
 800945c:	2b01      	cmp	r3, #1
 800945e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009462:	d001      	beq.n	8009468 <_strtol_l.constprop.0+0xc>
 8009464:	2b24      	cmp	r3, #36	; 0x24
 8009466:	d906      	bls.n	8009476 <_strtol_l.constprop.0+0x1a>
 8009468:	f7ff fafa 	bl	8008a60 <__errno>
 800946c:	2316      	movs	r3, #22
 800946e:	6003      	str	r3, [r0, #0]
 8009470:	2000      	movs	r0, #0
 8009472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009476:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800955c <_strtol_l.constprop.0+0x100>
 800947a:	460d      	mov	r5, r1
 800947c:	462e      	mov	r6, r5
 800947e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009482:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009486:	f017 0708 	ands.w	r7, r7, #8
 800948a:	d1f7      	bne.n	800947c <_strtol_l.constprop.0+0x20>
 800948c:	2c2d      	cmp	r4, #45	; 0x2d
 800948e:	d132      	bne.n	80094f6 <_strtol_l.constprop.0+0x9a>
 8009490:	782c      	ldrb	r4, [r5, #0]
 8009492:	2701      	movs	r7, #1
 8009494:	1cb5      	adds	r5, r6, #2
 8009496:	2b00      	cmp	r3, #0
 8009498:	d05b      	beq.n	8009552 <_strtol_l.constprop.0+0xf6>
 800949a:	2b10      	cmp	r3, #16
 800949c:	d109      	bne.n	80094b2 <_strtol_l.constprop.0+0x56>
 800949e:	2c30      	cmp	r4, #48	; 0x30
 80094a0:	d107      	bne.n	80094b2 <_strtol_l.constprop.0+0x56>
 80094a2:	782c      	ldrb	r4, [r5, #0]
 80094a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80094a8:	2c58      	cmp	r4, #88	; 0x58
 80094aa:	d14d      	bne.n	8009548 <_strtol_l.constprop.0+0xec>
 80094ac:	786c      	ldrb	r4, [r5, #1]
 80094ae:	2310      	movs	r3, #16
 80094b0:	3502      	adds	r5, #2
 80094b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80094b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80094ba:	f04f 0c00 	mov.w	ip, #0
 80094be:	fbb8 f9f3 	udiv	r9, r8, r3
 80094c2:	4666      	mov	r6, ip
 80094c4:	fb03 8a19 	mls	sl, r3, r9, r8
 80094c8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80094cc:	f1be 0f09 	cmp.w	lr, #9
 80094d0:	d816      	bhi.n	8009500 <_strtol_l.constprop.0+0xa4>
 80094d2:	4674      	mov	r4, lr
 80094d4:	42a3      	cmp	r3, r4
 80094d6:	dd24      	ble.n	8009522 <_strtol_l.constprop.0+0xc6>
 80094d8:	f1bc 0f00 	cmp.w	ip, #0
 80094dc:	db1e      	blt.n	800951c <_strtol_l.constprop.0+0xc0>
 80094de:	45b1      	cmp	r9, r6
 80094e0:	d31c      	bcc.n	800951c <_strtol_l.constprop.0+0xc0>
 80094e2:	d101      	bne.n	80094e8 <_strtol_l.constprop.0+0x8c>
 80094e4:	45a2      	cmp	sl, r4
 80094e6:	db19      	blt.n	800951c <_strtol_l.constprop.0+0xc0>
 80094e8:	fb06 4603 	mla	r6, r6, r3, r4
 80094ec:	f04f 0c01 	mov.w	ip, #1
 80094f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094f4:	e7e8      	b.n	80094c8 <_strtol_l.constprop.0+0x6c>
 80094f6:	2c2b      	cmp	r4, #43	; 0x2b
 80094f8:	bf04      	itt	eq
 80094fa:	782c      	ldrbeq	r4, [r5, #0]
 80094fc:	1cb5      	addeq	r5, r6, #2
 80094fe:	e7ca      	b.n	8009496 <_strtol_l.constprop.0+0x3a>
 8009500:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009504:	f1be 0f19 	cmp.w	lr, #25
 8009508:	d801      	bhi.n	800950e <_strtol_l.constprop.0+0xb2>
 800950a:	3c37      	subs	r4, #55	; 0x37
 800950c:	e7e2      	b.n	80094d4 <_strtol_l.constprop.0+0x78>
 800950e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009512:	f1be 0f19 	cmp.w	lr, #25
 8009516:	d804      	bhi.n	8009522 <_strtol_l.constprop.0+0xc6>
 8009518:	3c57      	subs	r4, #87	; 0x57
 800951a:	e7db      	b.n	80094d4 <_strtol_l.constprop.0+0x78>
 800951c:	f04f 3cff 	mov.w	ip, #4294967295
 8009520:	e7e6      	b.n	80094f0 <_strtol_l.constprop.0+0x94>
 8009522:	f1bc 0f00 	cmp.w	ip, #0
 8009526:	da05      	bge.n	8009534 <_strtol_l.constprop.0+0xd8>
 8009528:	2322      	movs	r3, #34	; 0x22
 800952a:	6003      	str	r3, [r0, #0]
 800952c:	4646      	mov	r6, r8
 800952e:	b942      	cbnz	r2, 8009542 <_strtol_l.constprop.0+0xe6>
 8009530:	4630      	mov	r0, r6
 8009532:	e79e      	b.n	8009472 <_strtol_l.constprop.0+0x16>
 8009534:	b107      	cbz	r7, 8009538 <_strtol_l.constprop.0+0xdc>
 8009536:	4276      	negs	r6, r6
 8009538:	2a00      	cmp	r2, #0
 800953a:	d0f9      	beq.n	8009530 <_strtol_l.constprop.0+0xd4>
 800953c:	f1bc 0f00 	cmp.w	ip, #0
 8009540:	d000      	beq.n	8009544 <_strtol_l.constprop.0+0xe8>
 8009542:	1e69      	subs	r1, r5, #1
 8009544:	6011      	str	r1, [r2, #0]
 8009546:	e7f3      	b.n	8009530 <_strtol_l.constprop.0+0xd4>
 8009548:	2430      	movs	r4, #48	; 0x30
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1b1      	bne.n	80094b2 <_strtol_l.constprop.0+0x56>
 800954e:	2308      	movs	r3, #8
 8009550:	e7af      	b.n	80094b2 <_strtol_l.constprop.0+0x56>
 8009552:	2c30      	cmp	r4, #48	; 0x30
 8009554:	d0a5      	beq.n	80094a2 <_strtol_l.constprop.0+0x46>
 8009556:	230a      	movs	r3, #10
 8009558:	e7ab      	b.n	80094b2 <_strtol_l.constprop.0+0x56>
 800955a:	bf00      	nop
 800955c:	0800c941 	.word	0x0800c941

08009560 <strtol>:
 8009560:	4613      	mov	r3, r2
 8009562:	460a      	mov	r2, r1
 8009564:	4601      	mov	r1, r0
 8009566:	4802      	ldr	r0, [pc, #8]	; (8009570 <strtol+0x10>)
 8009568:	6800      	ldr	r0, [r0, #0]
 800956a:	f7ff bf77 	b.w	800945c <_strtol_l.constprop.0>
 800956e:	bf00      	nop
 8009570:	20000014 	.word	0x20000014

08009574 <quorem>:
 8009574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009578:	6903      	ldr	r3, [r0, #16]
 800957a:	690c      	ldr	r4, [r1, #16]
 800957c:	42a3      	cmp	r3, r4
 800957e:	4607      	mov	r7, r0
 8009580:	f2c0 8081 	blt.w	8009686 <quorem+0x112>
 8009584:	3c01      	subs	r4, #1
 8009586:	f101 0814 	add.w	r8, r1, #20
 800958a:	f100 0514 	add.w	r5, r0, #20
 800958e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800959c:	3301      	adds	r3, #1
 800959e:	429a      	cmp	r2, r3
 80095a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80095a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80095a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80095ac:	d331      	bcc.n	8009612 <quorem+0x9e>
 80095ae:	f04f 0e00 	mov.w	lr, #0
 80095b2:	4640      	mov	r0, r8
 80095b4:	46ac      	mov	ip, r5
 80095b6:	46f2      	mov	sl, lr
 80095b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80095bc:	b293      	uxth	r3, r2
 80095be:	fb06 e303 	mla	r3, r6, r3, lr
 80095c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	ebaa 0303 	sub.w	r3, sl, r3
 80095cc:	f8dc a000 	ldr.w	sl, [ip]
 80095d0:	0c12      	lsrs	r2, r2, #16
 80095d2:	fa13 f38a 	uxtah	r3, r3, sl
 80095d6:	fb06 e202 	mla	r2, r6, r2, lr
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	9b00      	ldr	r3, [sp, #0]
 80095de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80095e2:	b292      	uxth	r2, r2
 80095e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80095e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80095f0:	4581      	cmp	r9, r0
 80095f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095f6:	f84c 3b04 	str.w	r3, [ip], #4
 80095fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80095fe:	d2db      	bcs.n	80095b8 <quorem+0x44>
 8009600:	f855 300b 	ldr.w	r3, [r5, fp]
 8009604:	b92b      	cbnz	r3, 8009612 <quorem+0x9e>
 8009606:	9b01      	ldr	r3, [sp, #4]
 8009608:	3b04      	subs	r3, #4
 800960a:	429d      	cmp	r5, r3
 800960c:	461a      	mov	r2, r3
 800960e:	d32e      	bcc.n	800966e <quorem+0xfa>
 8009610:	613c      	str	r4, [r7, #16]
 8009612:	4638      	mov	r0, r7
 8009614:	f001 f8b8 	bl	800a788 <__mcmp>
 8009618:	2800      	cmp	r0, #0
 800961a:	db24      	blt.n	8009666 <quorem+0xf2>
 800961c:	3601      	adds	r6, #1
 800961e:	4628      	mov	r0, r5
 8009620:	f04f 0c00 	mov.w	ip, #0
 8009624:	f858 2b04 	ldr.w	r2, [r8], #4
 8009628:	f8d0 e000 	ldr.w	lr, [r0]
 800962c:	b293      	uxth	r3, r2
 800962e:	ebac 0303 	sub.w	r3, ip, r3
 8009632:	0c12      	lsrs	r2, r2, #16
 8009634:	fa13 f38e 	uxtah	r3, r3, lr
 8009638:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800963c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009640:	b29b      	uxth	r3, r3
 8009642:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009646:	45c1      	cmp	r9, r8
 8009648:	f840 3b04 	str.w	r3, [r0], #4
 800964c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009650:	d2e8      	bcs.n	8009624 <quorem+0xb0>
 8009652:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009656:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800965a:	b922      	cbnz	r2, 8009666 <quorem+0xf2>
 800965c:	3b04      	subs	r3, #4
 800965e:	429d      	cmp	r5, r3
 8009660:	461a      	mov	r2, r3
 8009662:	d30a      	bcc.n	800967a <quorem+0x106>
 8009664:	613c      	str	r4, [r7, #16]
 8009666:	4630      	mov	r0, r6
 8009668:	b003      	add	sp, #12
 800966a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966e:	6812      	ldr	r2, [r2, #0]
 8009670:	3b04      	subs	r3, #4
 8009672:	2a00      	cmp	r2, #0
 8009674:	d1cc      	bne.n	8009610 <quorem+0x9c>
 8009676:	3c01      	subs	r4, #1
 8009678:	e7c7      	b.n	800960a <quorem+0x96>
 800967a:	6812      	ldr	r2, [r2, #0]
 800967c:	3b04      	subs	r3, #4
 800967e:	2a00      	cmp	r2, #0
 8009680:	d1f0      	bne.n	8009664 <quorem+0xf0>
 8009682:	3c01      	subs	r4, #1
 8009684:	e7eb      	b.n	800965e <quorem+0xea>
 8009686:	2000      	movs	r0, #0
 8009688:	e7ee      	b.n	8009668 <quorem+0xf4>
 800968a:	0000      	movs	r0, r0
 800968c:	0000      	movs	r0, r0
	...

08009690 <_dtoa_r>:
 8009690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009694:	ed2d 8b04 	vpush	{d8-d9}
 8009698:	ec57 6b10 	vmov	r6, r7, d0
 800969c:	b093      	sub	sp, #76	; 0x4c
 800969e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80096a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80096a4:	9106      	str	r1, [sp, #24]
 80096a6:	ee10 aa10 	vmov	sl, s0
 80096aa:	4604      	mov	r4, r0
 80096ac:	9209      	str	r2, [sp, #36]	; 0x24
 80096ae:	930c      	str	r3, [sp, #48]	; 0x30
 80096b0:	46bb      	mov	fp, r7
 80096b2:	b975      	cbnz	r5, 80096d2 <_dtoa_r+0x42>
 80096b4:	2010      	movs	r0, #16
 80096b6:	f000 fddd 	bl	800a274 <malloc>
 80096ba:	4602      	mov	r2, r0
 80096bc:	6260      	str	r0, [r4, #36]	; 0x24
 80096be:	b920      	cbnz	r0, 80096ca <_dtoa_r+0x3a>
 80096c0:	4ba7      	ldr	r3, [pc, #668]	; (8009960 <_dtoa_r+0x2d0>)
 80096c2:	21ea      	movs	r1, #234	; 0xea
 80096c4:	48a7      	ldr	r0, [pc, #668]	; (8009964 <_dtoa_r+0x2d4>)
 80096c6:	f001 fbc3 	bl	800ae50 <__assert_func>
 80096ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80096ce:	6005      	str	r5, [r0, #0]
 80096d0:	60c5      	str	r5, [r0, #12]
 80096d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096d4:	6819      	ldr	r1, [r3, #0]
 80096d6:	b151      	cbz	r1, 80096ee <_dtoa_r+0x5e>
 80096d8:	685a      	ldr	r2, [r3, #4]
 80096da:	604a      	str	r2, [r1, #4]
 80096dc:	2301      	movs	r3, #1
 80096de:	4093      	lsls	r3, r2
 80096e0:	608b      	str	r3, [r1, #8]
 80096e2:	4620      	mov	r0, r4
 80096e4:	f000 fe0e 	bl	800a304 <_Bfree>
 80096e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096ea:	2200      	movs	r2, #0
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	1e3b      	subs	r3, r7, #0
 80096f0:	bfaa      	itet	ge
 80096f2:	2300      	movge	r3, #0
 80096f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80096f8:	f8c8 3000 	strge.w	r3, [r8]
 80096fc:	4b9a      	ldr	r3, [pc, #616]	; (8009968 <_dtoa_r+0x2d8>)
 80096fe:	bfbc      	itt	lt
 8009700:	2201      	movlt	r2, #1
 8009702:	f8c8 2000 	strlt.w	r2, [r8]
 8009706:	ea33 030b 	bics.w	r3, r3, fp
 800970a:	d11b      	bne.n	8009744 <_dtoa_r+0xb4>
 800970c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800970e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009712:	6013      	str	r3, [r2, #0]
 8009714:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009718:	4333      	orrs	r3, r6
 800971a:	f000 8592 	beq.w	800a242 <_dtoa_r+0xbb2>
 800971e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009720:	b963      	cbnz	r3, 800973c <_dtoa_r+0xac>
 8009722:	4b92      	ldr	r3, [pc, #584]	; (800996c <_dtoa_r+0x2dc>)
 8009724:	e022      	b.n	800976c <_dtoa_r+0xdc>
 8009726:	4b92      	ldr	r3, [pc, #584]	; (8009970 <_dtoa_r+0x2e0>)
 8009728:	9301      	str	r3, [sp, #4]
 800972a:	3308      	adds	r3, #8
 800972c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800972e:	6013      	str	r3, [r2, #0]
 8009730:	9801      	ldr	r0, [sp, #4]
 8009732:	b013      	add	sp, #76	; 0x4c
 8009734:	ecbd 8b04 	vpop	{d8-d9}
 8009738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800973c:	4b8b      	ldr	r3, [pc, #556]	; (800996c <_dtoa_r+0x2dc>)
 800973e:	9301      	str	r3, [sp, #4]
 8009740:	3303      	adds	r3, #3
 8009742:	e7f3      	b.n	800972c <_dtoa_r+0x9c>
 8009744:	2200      	movs	r2, #0
 8009746:	2300      	movs	r3, #0
 8009748:	4650      	mov	r0, sl
 800974a:	4659      	mov	r1, fp
 800974c:	f7f7 f9c4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009750:	ec4b ab19 	vmov	d9, sl, fp
 8009754:	4680      	mov	r8, r0
 8009756:	b158      	cbz	r0, 8009770 <_dtoa_r+0xe0>
 8009758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800975a:	2301      	movs	r3, #1
 800975c:	6013      	str	r3, [r2, #0]
 800975e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009760:	2b00      	cmp	r3, #0
 8009762:	f000 856b 	beq.w	800a23c <_dtoa_r+0xbac>
 8009766:	4883      	ldr	r0, [pc, #524]	; (8009974 <_dtoa_r+0x2e4>)
 8009768:	6018      	str	r0, [r3, #0]
 800976a:	1e43      	subs	r3, r0, #1
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	e7df      	b.n	8009730 <_dtoa_r+0xa0>
 8009770:	ec4b ab10 	vmov	d0, sl, fp
 8009774:	aa10      	add	r2, sp, #64	; 0x40
 8009776:	a911      	add	r1, sp, #68	; 0x44
 8009778:	4620      	mov	r0, r4
 800977a:	f001 f8ab 	bl	800a8d4 <__d2b>
 800977e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009782:	ee08 0a10 	vmov	s16, r0
 8009786:	2d00      	cmp	r5, #0
 8009788:	f000 8084 	beq.w	8009894 <_dtoa_r+0x204>
 800978c:	ee19 3a90 	vmov	r3, s19
 8009790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009794:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009798:	4656      	mov	r6, sl
 800979a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800979e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80097a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80097a6:	4b74      	ldr	r3, [pc, #464]	; (8009978 <_dtoa_r+0x2e8>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	4630      	mov	r0, r6
 80097ac:	4639      	mov	r1, r7
 80097ae:	f7f6 fd73 	bl	8000298 <__aeabi_dsub>
 80097b2:	a365      	add	r3, pc, #404	; (adr r3, 8009948 <_dtoa_r+0x2b8>)
 80097b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b8:	f7f6 ff26 	bl	8000608 <__aeabi_dmul>
 80097bc:	a364      	add	r3, pc, #400	; (adr r3, 8009950 <_dtoa_r+0x2c0>)
 80097be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c2:	f7f6 fd6b 	bl	800029c <__adddf3>
 80097c6:	4606      	mov	r6, r0
 80097c8:	4628      	mov	r0, r5
 80097ca:	460f      	mov	r7, r1
 80097cc:	f7f6 feb2 	bl	8000534 <__aeabi_i2d>
 80097d0:	a361      	add	r3, pc, #388	; (adr r3, 8009958 <_dtoa_r+0x2c8>)
 80097d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d6:	f7f6 ff17 	bl	8000608 <__aeabi_dmul>
 80097da:	4602      	mov	r2, r0
 80097dc:	460b      	mov	r3, r1
 80097de:	4630      	mov	r0, r6
 80097e0:	4639      	mov	r1, r7
 80097e2:	f7f6 fd5b 	bl	800029c <__adddf3>
 80097e6:	4606      	mov	r6, r0
 80097e8:	460f      	mov	r7, r1
 80097ea:	f7f7 f9bd 	bl	8000b68 <__aeabi_d2iz>
 80097ee:	2200      	movs	r2, #0
 80097f0:	9000      	str	r0, [sp, #0]
 80097f2:	2300      	movs	r3, #0
 80097f4:	4630      	mov	r0, r6
 80097f6:	4639      	mov	r1, r7
 80097f8:	f7f7 f978 	bl	8000aec <__aeabi_dcmplt>
 80097fc:	b150      	cbz	r0, 8009814 <_dtoa_r+0x184>
 80097fe:	9800      	ldr	r0, [sp, #0]
 8009800:	f7f6 fe98 	bl	8000534 <__aeabi_i2d>
 8009804:	4632      	mov	r2, r6
 8009806:	463b      	mov	r3, r7
 8009808:	f7f7 f966 	bl	8000ad8 <__aeabi_dcmpeq>
 800980c:	b910      	cbnz	r0, 8009814 <_dtoa_r+0x184>
 800980e:	9b00      	ldr	r3, [sp, #0]
 8009810:	3b01      	subs	r3, #1
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	9b00      	ldr	r3, [sp, #0]
 8009816:	2b16      	cmp	r3, #22
 8009818:	d85a      	bhi.n	80098d0 <_dtoa_r+0x240>
 800981a:	9a00      	ldr	r2, [sp, #0]
 800981c:	4b57      	ldr	r3, [pc, #348]	; (800997c <_dtoa_r+0x2ec>)
 800981e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	ec51 0b19 	vmov	r0, r1, d9
 800982a:	f7f7 f95f 	bl	8000aec <__aeabi_dcmplt>
 800982e:	2800      	cmp	r0, #0
 8009830:	d050      	beq.n	80098d4 <_dtoa_r+0x244>
 8009832:	9b00      	ldr	r3, [sp, #0]
 8009834:	3b01      	subs	r3, #1
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	2300      	movs	r3, #0
 800983a:	930b      	str	r3, [sp, #44]	; 0x2c
 800983c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800983e:	1b5d      	subs	r5, r3, r5
 8009840:	1e6b      	subs	r3, r5, #1
 8009842:	9305      	str	r3, [sp, #20]
 8009844:	bf45      	ittet	mi
 8009846:	f1c5 0301 	rsbmi	r3, r5, #1
 800984a:	9304      	strmi	r3, [sp, #16]
 800984c:	2300      	movpl	r3, #0
 800984e:	2300      	movmi	r3, #0
 8009850:	bf4c      	ite	mi
 8009852:	9305      	strmi	r3, [sp, #20]
 8009854:	9304      	strpl	r3, [sp, #16]
 8009856:	9b00      	ldr	r3, [sp, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	db3d      	blt.n	80098d8 <_dtoa_r+0x248>
 800985c:	9b05      	ldr	r3, [sp, #20]
 800985e:	9a00      	ldr	r2, [sp, #0]
 8009860:	920a      	str	r2, [sp, #40]	; 0x28
 8009862:	4413      	add	r3, r2
 8009864:	9305      	str	r3, [sp, #20]
 8009866:	2300      	movs	r3, #0
 8009868:	9307      	str	r3, [sp, #28]
 800986a:	9b06      	ldr	r3, [sp, #24]
 800986c:	2b09      	cmp	r3, #9
 800986e:	f200 8089 	bhi.w	8009984 <_dtoa_r+0x2f4>
 8009872:	2b05      	cmp	r3, #5
 8009874:	bfc4      	itt	gt
 8009876:	3b04      	subgt	r3, #4
 8009878:	9306      	strgt	r3, [sp, #24]
 800987a:	9b06      	ldr	r3, [sp, #24]
 800987c:	f1a3 0302 	sub.w	r3, r3, #2
 8009880:	bfcc      	ite	gt
 8009882:	2500      	movgt	r5, #0
 8009884:	2501      	movle	r5, #1
 8009886:	2b03      	cmp	r3, #3
 8009888:	f200 8087 	bhi.w	800999a <_dtoa_r+0x30a>
 800988c:	e8df f003 	tbb	[pc, r3]
 8009890:	59383a2d 	.word	0x59383a2d
 8009894:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009898:	441d      	add	r5, r3
 800989a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800989e:	2b20      	cmp	r3, #32
 80098a0:	bfc1      	itttt	gt
 80098a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80098a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80098aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80098ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80098b2:	bfda      	itte	le
 80098b4:	f1c3 0320 	rsble	r3, r3, #32
 80098b8:	fa06 f003 	lslle.w	r0, r6, r3
 80098bc:	4318      	orrgt	r0, r3
 80098be:	f7f6 fe29 	bl	8000514 <__aeabi_ui2d>
 80098c2:	2301      	movs	r3, #1
 80098c4:	4606      	mov	r6, r0
 80098c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80098ca:	3d01      	subs	r5, #1
 80098cc:	930e      	str	r3, [sp, #56]	; 0x38
 80098ce:	e76a      	b.n	80097a6 <_dtoa_r+0x116>
 80098d0:	2301      	movs	r3, #1
 80098d2:	e7b2      	b.n	800983a <_dtoa_r+0x1aa>
 80098d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80098d6:	e7b1      	b.n	800983c <_dtoa_r+0x1ac>
 80098d8:	9b04      	ldr	r3, [sp, #16]
 80098da:	9a00      	ldr	r2, [sp, #0]
 80098dc:	1a9b      	subs	r3, r3, r2
 80098de:	9304      	str	r3, [sp, #16]
 80098e0:	4253      	negs	r3, r2
 80098e2:	9307      	str	r3, [sp, #28]
 80098e4:	2300      	movs	r3, #0
 80098e6:	930a      	str	r3, [sp, #40]	; 0x28
 80098e8:	e7bf      	b.n	800986a <_dtoa_r+0x1da>
 80098ea:	2300      	movs	r3, #0
 80098ec:	9308      	str	r3, [sp, #32]
 80098ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	dc55      	bgt.n	80099a0 <_dtoa_r+0x310>
 80098f4:	2301      	movs	r3, #1
 80098f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098fa:	461a      	mov	r2, r3
 80098fc:	9209      	str	r2, [sp, #36]	; 0x24
 80098fe:	e00c      	b.n	800991a <_dtoa_r+0x28a>
 8009900:	2301      	movs	r3, #1
 8009902:	e7f3      	b.n	80098ec <_dtoa_r+0x25c>
 8009904:	2300      	movs	r3, #0
 8009906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009908:	9308      	str	r3, [sp, #32]
 800990a:	9b00      	ldr	r3, [sp, #0]
 800990c:	4413      	add	r3, r2
 800990e:	9302      	str	r3, [sp, #8]
 8009910:	3301      	adds	r3, #1
 8009912:	2b01      	cmp	r3, #1
 8009914:	9303      	str	r3, [sp, #12]
 8009916:	bfb8      	it	lt
 8009918:	2301      	movlt	r3, #1
 800991a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800991c:	2200      	movs	r2, #0
 800991e:	6042      	str	r2, [r0, #4]
 8009920:	2204      	movs	r2, #4
 8009922:	f102 0614 	add.w	r6, r2, #20
 8009926:	429e      	cmp	r6, r3
 8009928:	6841      	ldr	r1, [r0, #4]
 800992a:	d93d      	bls.n	80099a8 <_dtoa_r+0x318>
 800992c:	4620      	mov	r0, r4
 800992e:	f000 fca9 	bl	800a284 <_Balloc>
 8009932:	9001      	str	r0, [sp, #4]
 8009934:	2800      	cmp	r0, #0
 8009936:	d13b      	bne.n	80099b0 <_dtoa_r+0x320>
 8009938:	4b11      	ldr	r3, [pc, #68]	; (8009980 <_dtoa_r+0x2f0>)
 800993a:	4602      	mov	r2, r0
 800993c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009940:	e6c0      	b.n	80096c4 <_dtoa_r+0x34>
 8009942:	2301      	movs	r3, #1
 8009944:	e7df      	b.n	8009906 <_dtoa_r+0x276>
 8009946:	bf00      	nop
 8009948:	636f4361 	.word	0x636f4361
 800994c:	3fd287a7 	.word	0x3fd287a7
 8009950:	8b60c8b3 	.word	0x8b60c8b3
 8009954:	3fc68a28 	.word	0x3fc68a28
 8009958:	509f79fb 	.word	0x509f79fb
 800995c:	3fd34413 	.word	0x3fd34413
 8009960:	0800ca4e 	.word	0x0800ca4e
 8009964:	0800ca65 	.word	0x0800ca65
 8009968:	7ff00000 	.word	0x7ff00000
 800996c:	0800ca4a 	.word	0x0800ca4a
 8009970:	0800ca41 	.word	0x0800ca41
 8009974:	0800c91d 	.word	0x0800c91d
 8009978:	3ff80000 	.word	0x3ff80000
 800997c:	0800cb58 	.word	0x0800cb58
 8009980:	0800cac0 	.word	0x0800cac0
 8009984:	2501      	movs	r5, #1
 8009986:	2300      	movs	r3, #0
 8009988:	9306      	str	r3, [sp, #24]
 800998a:	9508      	str	r5, [sp, #32]
 800998c:	f04f 33ff 	mov.w	r3, #4294967295
 8009990:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009994:	2200      	movs	r2, #0
 8009996:	2312      	movs	r3, #18
 8009998:	e7b0      	b.n	80098fc <_dtoa_r+0x26c>
 800999a:	2301      	movs	r3, #1
 800999c:	9308      	str	r3, [sp, #32]
 800999e:	e7f5      	b.n	800998c <_dtoa_r+0x2fc>
 80099a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80099a6:	e7b8      	b.n	800991a <_dtoa_r+0x28a>
 80099a8:	3101      	adds	r1, #1
 80099aa:	6041      	str	r1, [r0, #4]
 80099ac:	0052      	lsls	r2, r2, #1
 80099ae:	e7b8      	b.n	8009922 <_dtoa_r+0x292>
 80099b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099b2:	9a01      	ldr	r2, [sp, #4]
 80099b4:	601a      	str	r2, [r3, #0]
 80099b6:	9b03      	ldr	r3, [sp, #12]
 80099b8:	2b0e      	cmp	r3, #14
 80099ba:	f200 809d 	bhi.w	8009af8 <_dtoa_r+0x468>
 80099be:	2d00      	cmp	r5, #0
 80099c0:	f000 809a 	beq.w	8009af8 <_dtoa_r+0x468>
 80099c4:	9b00      	ldr	r3, [sp, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	dd32      	ble.n	8009a30 <_dtoa_r+0x3a0>
 80099ca:	4ab7      	ldr	r2, [pc, #732]	; (8009ca8 <_dtoa_r+0x618>)
 80099cc:	f003 030f 	and.w	r3, r3, #15
 80099d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80099d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099d8:	9b00      	ldr	r3, [sp, #0]
 80099da:	05d8      	lsls	r0, r3, #23
 80099dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80099e0:	d516      	bpl.n	8009a10 <_dtoa_r+0x380>
 80099e2:	4bb2      	ldr	r3, [pc, #712]	; (8009cac <_dtoa_r+0x61c>)
 80099e4:	ec51 0b19 	vmov	r0, r1, d9
 80099e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099ec:	f7f6 ff36 	bl	800085c <__aeabi_ddiv>
 80099f0:	f007 070f 	and.w	r7, r7, #15
 80099f4:	4682      	mov	sl, r0
 80099f6:	468b      	mov	fp, r1
 80099f8:	2503      	movs	r5, #3
 80099fa:	4eac      	ldr	r6, [pc, #688]	; (8009cac <_dtoa_r+0x61c>)
 80099fc:	b957      	cbnz	r7, 8009a14 <_dtoa_r+0x384>
 80099fe:	4642      	mov	r2, r8
 8009a00:	464b      	mov	r3, r9
 8009a02:	4650      	mov	r0, sl
 8009a04:	4659      	mov	r1, fp
 8009a06:	f7f6 ff29 	bl	800085c <__aeabi_ddiv>
 8009a0a:	4682      	mov	sl, r0
 8009a0c:	468b      	mov	fp, r1
 8009a0e:	e028      	b.n	8009a62 <_dtoa_r+0x3d2>
 8009a10:	2502      	movs	r5, #2
 8009a12:	e7f2      	b.n	80099fa <_dtoa_r+0x36a>
 8009a14:	07f9      	lsls	r1, r7, #31
 8009a16:	d508      	bpl.n	8009a2a <_dtoa_r+0x39a>
 8009a18:	4640      	mov	r0, r8
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a20:	f7f6 fdf2 	bl	8000608 <__aeabi_dmul>
 8009a24:	3501      	adds	r5, #1
 8009a26:	4680      	mov	r8, r0
 8009a28:	4689      	mov	r9, r1
 8009a2a:	107f      	asrs	r7, r7, #1
 8009a2c:	3608      	adds	r6, #8
 8009a2e:	e7e5      	b.n	80099fc <_dtoa_r+0x36c>
 8009a30:	f000 809b 	beq.w	8009b6a <_dtoa_r+0x4da>
 8009a34:	9b00      	ldr	r3, [sp, #0]
 8009a36:	4f9d      	ldr	r7, [pc, #628]	; (8009cac <_dtoa_r+0x61c>)
 8009a38:	425e      	negs	r6, r3
 8009a3a:	4b9b      	ldr	r3, [pc, #620]	; (8009ca8 <_dtoa_r+0x618>)
 8009a3c:	f006 020f 	and.w	r2, r6, #15
 8009a40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a48:	ec51 0b19 	vmov	r0, r1, d9
 8009a4c:	f7f6 fddc 	bl	8000608 <__aeabi_dmul>
 8009a50:	1136      	asrs	r6, r6, #4
 8009a52:	4682      	mov	sl, r0
 8009a54:	468b      	mov	fp, r1
 8009a56:	2300      	movs	r3, #0
 8009a58:	2502      	movs	r5, #2
 8009a5a:	2e00      	cmp	r6, #0
 8009a5c:	d17a      	bne.n	8009b54 <_dtoa_r+0x4c4>
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1d3      	bne.n	8009a0a <_dtoa_r+0x37a>
 8009a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 8082 	beq.w	8009b6e <_dtoa_r+0x4de>
 8009a6a:	4b91      	ldr	r3, [pc, #580]	; (8009cb0 <_dtoa_r+0x620>)
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	4650      	mov	r0, sl
 8009a70:	4659      	mov	r1, fp
 8009a72:	f7f7 f83b 	bl	8000aec <__aeabi_dcmplt>
 8009a76:	2800      	cmp	r0, #0
 8009a78:	d079      	beq.n	8009b6e <_dtoa_r+0x4de>
 8009a7a:	9b03      	ldr	r3, [sp, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d076      	beq.n	8009b6e <_dtoa_r+0x4de>
 8009a80:	9b02      	ldr	r3, [sp, #8]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	dd36      	ble.n	8009af4 <_dtoa_r+0x464>
 8009a86:	9b00      	ldr	r3, [sp, #0]
 8009a88:	4650      	mov	r0, sl
 8009a8a:	4659      	mov	r1, fp
 8009a8c:	1e5f      	subs	r7, r3, #1
 8009a8e:	2200      	movs	r2, #0
 8009a90:	4b88      	ldr	r3, [pc, #544]	; (8009cb4 <_dtoa_r+0x624>)
 8009a92:	f7f6 fdb9 	bl	8000608 <__aeabi_dmul>
 8009a96:	9e02      	ldr	r6, [sp, #8]
 8009a98:	4682      	mov	sl, r0
 8009a9a:	468b      	mov	fp, r1
 8009a9c:	3501      	adds	r5, #1
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	f7f6 fd48 	bl	8000534 <__aeabi_i2d>
 8009aa4:	4652      	mov	r2, sl
 8009aa6:	465b      	mov	r3, fp
 8009aa8:	f7f6 fdae 	bl	8000608 <__aeabi_dmul>
 8009aac:	4b82      	ldr	r3, [pc, #520]	; (8009cb8 <_dtoa_r+0x628>)
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f7f6 fbf4 	bl	800029c <__adddf3>
 8009ab4:	46d0      	mov	r8, sl
 8009ab6:	46d9      	mov	r9, fp
 8009ab8:	4682      	mov	sl, r0
 8009aba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009abe:	2e00      	cmp	r6, #0
 8009ac0:	d158      	bne.n	8009b74 <_dtoa_r+0x4e4>
 8009ac2:	4b7e      	ldr	r3, [pc, #504]	; (8009cbc <_dtoa_r+0x62c>)
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	4640      	mov	r0, r8
 8009ac8:	4649      	mov	r1, r9
 8009aca:	f7f6 fbe5 	bl	8000298 <__aeabi_dsub>
 8009ace:	4652      	mov	r2, sl
 8009ad0:	465b      	mov	r3, fp
 8009ad2:	4680      	mov	r8, r0
 8009ad4:	4689      	mov	r9, r1
 8009ad6:	f7f7 f827 	bl	8000b28 <__aeabi_dcmpgt>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	f040 8295 	bne.w	800a00a <_dtoa_r+0x97a>
 8009ae0:	4652      	mov	r2, sl
 8009ae2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009ae6:	4640      	mov	r0, r8
 8009ae8:	4649      	mov	r1, r9
 8009aea:	f7f6 ffff 	bl	8000aec <__aeabi_dcmplt>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	f040 8289 	bne.w	800a006 <_dtoa_r+0x976>
 8009af4:	ec5b ab19 	vmov	sl, fp, d9
 8009af8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f2c0 8148 	blt.w	8009d90 <_dtoa_r+0x700>
 8009b00:	9a00      	ldr	r2, [sp, #0]
 8009b02:	2a0e      	cmp	r2, #14
 8009b04:	f300 8144 	bgt.w	8009d90 <_dtoa_r+0x700>
 8009b08:	4b67      	ldr	r3, [pc, #412]	; (8009ca8 <_dtoa_r+0x618>)
 8009b0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f280 80d5 	bge.w	8009cc4 <_dtoa_r+0x634>
 8009b1a:	9b03      	ldr	r3, [sp, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f300 80d1 	bgt.w	8009cc4 <_dtoa_r+0x634>
 8009b22:	f040 826f 	bne.w	800a004 <_dtoa_r+0x974>
 8009b26:	4b65      	ldr	r3, [pc, #404]	; (8009cbc <_dtoa_r+0x62c>)
 8009b28:	2200      	movs	r2, #0
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	4649      	mov	r1, r9
 8009b2e:	f7f6 fd6b 	bl	8000608 <__aeabi_dmul>
 8009b32:	4652      	mov	r2, sl
 8009b34:	465b      	mov	r3, fp
 8009b36:	f7f6 ffed 	bl	8000b14 <__aeabi_dcmpge>
 8009b3a:	9e03      	ldr	r6, [sp, #12]
 8009b3c:	4637      	mov	r7, r6
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	f040 8245 	bne.w	8009fce <_dtoa_r+0x93e>
 8009b44:	9d01      	ldr	r5, [sp, #4]
 8009b46:	2331      	movs	r3, #49	; 0x31
 8009b48:	f805 3b01 	strb.w	r3, [r5], #1
 8009b4c:	9b00      	ldr	r3, [sp, #0]
 8009b4e:	3301      	adds	r3, #1
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	e240      	b.n	8009fd6 <_dtoa_r+0x946>
 8009b54:	07f2      	lsls	r2, r6, #31
 8009b56:	d505      	bpl.n	8009b64 <_dtoa_r+0x4d4>
 8009b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b5c:	f7f6 fd54 	bl	8000608 <__aeabi_dmul>
 8009b60:	3501      	adds	r5, #1
 8009b62:	2301      	movs	r3, #1
 8009b64:	1076      	asrs	r6, r6, #1
 8009b66:	3708      	adds	r7, #8
 8009b68:	e777      	b.n	8009a5a <_dtoa_r+0x3ca>
 8009b6a:	2502      	movs	r5, #2
 8009b6c:	e779      	b.n	8009a62 <_dtoa_r+0x3d2>
 8009b6e:	9f00      	ldr	r7, [sp, #0]
 8009b70:	9e03      	ldr	r6, [sp, #12]
 8009b72:	e794      	b.n	8009a9e <_dtoa_r+0x40e>
 8009b74:	9901      	ldr	r1, [sp, #4]
 8009b76:	4b4c      	ldr	r3, [pc, #304]	; (8009ca8 <_dtoa_r+0x618>)
 8009b78:	4431      	add	r1, r6
 8009b7a:	910d      	str	r1, [sp, #52]	; 0x34
 8009b7c:	9908      	ldr	r1, [sp, #32]
 8009b7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b86:	2900      	cmp	r1, #0
 8009b88:	d043      	beq.n	8009c12 <_dtoa_r+0x582>
 8009b8a:	494d      	ldr	r1, [pc, #308]	; (8009cc0 <_dtoa_r+0x630>)
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	f7f6 fe65 	bl	800085c <__aeabi_ddiv>
 8009b92:	4652      	mov	r2, sl
 8009b94:	465b      	mov	r3, fp
 8009b96:	f7f6 fb7f 	bl	8000298 <__aeabi_dsub>
 8009b9a:	9d01      	ldr	r5, [sp, #4]
 8009b9c:	4682      	mov	sl, r0
 8009b9e:	468b      	mov	fp, r1
 8009ba0:	4649      	mov	r1, r9
 8009ba2:	4640      	mov	r0, r8
 8009ba4:	f7f6 ffe0 	bl	8000b68 <__aeabi_d2iz>
 8009ba8:	4606      	mov	r6, r0
 8009baa:	f7f6 fcc3 	bl	8000534 <__aeabi_i2d>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4640      	mov	r0, r8
 8009bb4:	4649      	mov	r1, r9
 8009bb6:	f7f6 fb6f 	bl	8000298 <__aeabi_dsub>
 8009bba:	3630      	adds	r6, #48	; 0x30
 8009bbc:	f805 6b01 	strb.w	r6, [r5], #1
 8009bc0:	4652      	mov	r2, sl
 8009bc2:	465b      	mov	r3, fp
 8009bc4:	4680      	mov	r8, r0
 8009bc6:	4689      	mov	r9, r1
 8009bc8:	f7f6 ff90 	bl	8000aec <__aeabi_dcmplt>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d163      	bne.n	8009c98 <_dtoa_r+0x608>
 8009bd0:	4642      	mov	r2, r8
 8009bd2:	464b      	mov	r3, r9
 8009bd4:	4936      	ldr	r1, [pc, #216]	; (8009cb0 <_dtoa_r+0x620>)
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	f7f6 fb5e 	bl	8000298 <__aeabi_dsub>
 8009bdc:	4652      	mov	r2, sl
 8009bde:	465b      	mov	r3, fp
 8009be0:	f7f6 ff84 	bl	8000aec <__aeabi_dcmplt>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	f040 80b5 	bne.w	8009d54 <_dtoa_r+0x6c4>
 8009bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bec:	429d      	cmp	r5, r3
 8009bee:	d081      	beq.n	8009af4 <_dtoa_r+0x464>
 8009bf0:	4b30      	ldr	r3, [pc, #192]	; (8009cb4 <_dtoa_r+0x624>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	4650      	mov	r0, sl
 8009bf6:	4659      	mov	r1, fp
 8009bf8:	f7f6 fd06 	bl	8000608 <__aeabi_dmul>
 8009bfc:	4b2d      	ldr	r3, [pc, #180]	; (8009cb4 <_dtoa_r+0x624>)
 8009bfe:	4682      	mov	sl, r0
 8009c00:	468b      	mov	fp, r1
 8009c02:	4640      	mov	r0, r8
 8009c04:	4649      	mov	r1, r9
 8009c06:	2200      	movs	r2, #0
 8009c08:	f7f6 fcfe 	bl	8000608 <__aeabi_dmul>
 8009c0c:	4680      	mov	r8, r0
 8009c0e:	4689      	mov	r9, r1
 8009c10:	e7c6      	b.n	8009ba0 <_dtoa_r+0x510>
 8009c12:	4650      	mov	r0, sl
 8009c14:	4659      	mov	r1, fp
 8009c16:	f7f6 fcf7 	bl	8000608 <__aeabi_dmul>
 8009c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c1c:	9d01      	ldr	r5, [sp, #4]
 8009c1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c20:	4682      	mov	sl, r0
 8009c22:	468b      	mov	fp, r1
 8009c24:	4649      	mov	r1, r9
 8009c26:	4640      	mov	r0, r8
 8009c28:	f7f6 ff9e 	bl	8000b68 <__aeabi_d2iz>
 8009c2c:	4606      	mov	r6, r0
 8009c2e:	f7f6 fc81 	bl	8000534 <__aeabi_i2d>
 8009c32:	3630      	adds	r6, #48	; 0x30
 8009c34:	4602      	mov	r2, r0
 8009c36:	460b      	mov	r3, r1
 8009c38:	4640      	mov	r0, r8
 8009c3a:	4649      	mov	r1, r9
 8009c3c:	f7f6 fb2c 	bl	8000298 <__aeabi_dsub>
 8009c40:	f805 6b01 	strb.w	r6, [r5], #1
 8009c44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c46:	429d      	cmp	r5, r3
 8009c48:	4680      	mov	r8, r0
 8009c4a:	4689      	mov	r9, r1
 8009c4c:	f04f 0200 	mov.w	r2, #0
 8009c50:	d124      	bne.n	8009c9c <_dtoa_r+0x60c>
 8009c52:	4b1b      	ldr	r3, [pc, #108]	; (8009cc0 <_dtoa_r+0x630>)
 8009c54:	4650      	mov	r0, sl
 8009c56:	4659      	mov	r1, fp
 8009c58:	f7f6 fb20 	bl	800029c <__adddf3>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	460b      	mov	r3, r1
 8009c60:	4640      	mov	r0, r8
 8009c62:	4649      	mov	r1, r9
 8009c64:	f7f6 ff60 	bl	8000b28 <__aeabi_dcmpgt>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d173      	bne.n	8009d54 <_dtoa_r+0x6c4>
 8009c6c:	4652      	mov	r2, sl
 8009c6e:	465b      	mov	r3, fp
 8009c70:	4913      	ldr	r1, [pc, #76]	; (8009cc0 <_dtoa_r+0x630>)
 8009c72:	2000      	movs	r0, #0
 8009c74:	f7f6 fb10 	bl	8000298 <__aeabi_dsub>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	4640      	mov	r0, r8
 8009c7e:	4649      	mov	r1, r9
 8009c80:	f7f6 ff34 	bl	8000aec <__aeabi_dcmplt>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	f43f af35 	beq.w	8009af4 <_dtoa_r+0x464>
 8009c8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009c8c:	1e6b      	subs	r3, r5, #1
 8009c8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c94:	2b30      	cmp	r3, #48	; 0x30
 8009c96:	d0f8      	beq.n	8009c8a <_dtoa_r+0x5fa>
 8009c98:	9700      	str	r7, [sp, #0]
 8009c9a:	e049      	b.n	8009d30 <_dtoa_r+0x6a0>
 8009c9c:	4b05      	ldr	r3, [pc, #20]	; (8009cb4 <_dtoa_r+0x624>)
 8009c9e:	f7f6 fcb3 	bl	8000608 <__aeabi_dmul>
 8009ca2:	4680      	mov	r8, r0
 8009ca4:	4689      	mov	r9, r1
 8009ca6:	e7bd      	b.n	8009c24 <_dtoa_r+0x594>
 8009ca8:	0800cb58 	.word	0x0800cb58
 8009cac:	0800cb30 	.word	0x0800cb30
 8009cb0:	3ff00000 	.word	0x3ff00000
 8009cb4:	40240000 	.word	0x40240000
 8009cb8:	401c0000 	.word	0x401c0000
 8009cbc:	40140000 	.word	0x40140000
 8009cc0:	3fe00000 	.word	0x3fe00000
 8009cc4:	9d01      	ldr	r5, [sp, #4]
 8009cc6:	4656      	mov	r6, sl
 8009cc8:	465f      	mov	r7, fp
 8009cca:	4642      	mov	r2, r8
 8009ccc:	464b      	mov	r3, r9
 8009cce:	4630      	mov	r0, r6
 8009cd0:	4639      	mov	r1, r7
 8009cd2:	f7f6 fdc3 	bl	800085c <__aeabi_ddiv>
 8009cd6:	f7f6 ff47 	bl	8000b68 <__aeabi_d2iz>
 8009cda:	4682      	mov	sl, r0
 8009cdc:	f7f6 fc2a 	bl	8000534 <__aeabi_i2d>
 8009ce0:	4642      	mov	r2, r8
 8009ce2:	464b      	mov	r3, r9
 8009ce4:	f7f6 fc90 	bl	8000608 <__aeabi_dmul>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	460b      	mov	r3, r1
 8009cec:	4630      	mov	r0, r6
 8009cee:	4639      	mov	r1, r7
 8009cf0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009cf4:	f7f6 fad0 	bl	8000298 <__aeabi_dsub>
 8009cf8:	f805 6b01 	strb.w	r6, [r5], #1
 8009cfc:	9e01      	ldr	r6, [sp, #4]
 8009cfe:	9f03      	ldr	r7, [sp, #12]
 8009d00:	1bae      	subs	r6, r5, r6
 8009d02:	42b7      	cmp	r7, r6
 8009d04:	4602      	mov	r2, r0
 8009d06:	460b      	mov	r3, r1
 8009d08:	d135      	bne.n	8009d76 <_dtoa_r+0x6e6>
 8009d0a:	f7f6 fac7 	bl	800029c <__adddf3>
 8009d0e:	4642      	mov	r2, r8
 8009d10:	464b      	mov	r3, r9
 8009d12:	4606      	mov	r6, r0
 8009d14:	460f      	mov	r7, r1
 8009d16:	f7f6 ff07 	bl	8000b28 <__aeabi_dcmpgt>
 8009d1a:	b9d0      	cbnz	r0, 8009d52 <_dtoa_r+0x6c2>
 8009d1c:	4642      	mov	r2, r8
 8009d1e:	464b      	mov	r3, r9
 8009d20:	4630      	mov	r0, r6
 8009d22:	4639      	mov	r1, r7
 8009d24:	f7f6 fed8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d28:	b110      	cbz	r0, 8009d30 <_dtoa_r+0x6a0>
 8009d2a:	f01a 0f01 	tst.w	sl, #1
 8009d2e:	d110      	bne.n	8009d52 <_dtoa_r+0x6c2>
 8009d30:	4620      	mov	r0, r4
 8009d32:	ee18 1a10 	vmov	r1, s16
 8009d36:	f000 fae5 	bl	800a304 <_Bfree>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	9800      	ldr	r0, [sp, #0]
 8009d3e:	702b      	strb	r3, [r5, #0]
 8009d40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d42:	3001      	adds	r0, #1
 8009d44:	6018      	str	r0, [r3, #0]
 8009d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	f43f acf1 	beq.w	8009730 <_dtoa_r+0xa0>
 8009d4e:	601d      	str	r5, [r3, #0]
 8009d50:	e4ee      	b.n	8009730 <_dtoa_r+0xa0>
 8009d52:	9f00      	ldr	r7, [sp, #0]
 8009d54:	462b      	mov	r3, r5
 8009d56:	461d      	mov	r5, r3
 8009d58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d5c:	2a39      	cmp	r2, #57	; 0x39
 8009d5e:	d106      	bne.n	8009d6e <_dtoa_r+0x6de>
 8009d60:	9a01      	ldr	r2, [sp, #4]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d1f7      	bne.n	8009d56 <_dtoa_r+0x6c6>
 8009d66:	9901      	ldr	r1, [sp, #4]
 8009d68:	2230      	movs	r2, #48	; 0x30
 8009d6a:	3701      	adds	r7, #1
 8009d6c:	700a      	strb	r2, [r1, #0]
 8009d6e:	781a      	ldrb	r2, [r3, #0]
 8009d70:	3201      	adds	r2, #1
 8009d72:	701a      	strb	r2, [r3, #0]
 8009d74:	e790      	b.n	8009c98 <_dtoa_r+0x608>
 8009d76:	4ba6      	ldr	r3, [pc, #664]	; (800a010 <_dtoa_r+0x980>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f7f6 fc45 	bl	8000608 <__aeabi_dmul>
 8009d7e:	2200      	movs	r2, #0
 8009d80:	2300      	movs	r3, #0
 8009d82:	4606      	mov	r6, r0
 8009d84:	460f      	mov	r7, r1
 8009d86:	f7f6 fea7 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	d09d      	beq.n	8009cca <_dtoa_r+0x63a>
 8009d8e:	e7cf      	b.n	8009d30 <_dtoa_r+0x6a0>
 8009d90:	9a08      	ldr	r2, [sp, #32]
 8009d92:	2a00      	cmp	r2, #0
 8009d94:	f000 80d7 	beq.w	8009f46 <_dtoa_r+0x8b6>
 8009d98:	9a06      	ldr	r2, [sp, #24]
 8009d9a:	2a01      	cmp	r2, #1
 8009d9c:	f300 80ba 	bgt.w	8009f14 <_dtoa_r+0x884>
 8009da0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009da2:	2a00      	cmp	r2, #0
 8009da4:	f000 80b2 	beq.w	8009f0c <_dtoa_r+0x87c>
 8009da8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009dac:	9e07      	ldr	r6, [sp, #28]
 8009dae:	9d04      	ldr	r5, [sp, #16]
 8009db0:	9a04      	ldr	r2, [sp, #16]
 8009db2:	441a      	add	r2, r3
 8009db4:	9204      	str	r2, [sp, #16]
 8009db6:	9a05      	ldr	r2, [sp, #20]
 8009db8:	2101      	movs	r1, #1
 8009dba:	441a      	add	r2, r3
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	9205      	str	r2, [sp, #20]
 8009dc0:	f000 fb58 	bl	800a474 <__i2b>
 8009dc4:	4607      	mov	r7, r0
 8009dc6:	2d00      	cmp	r5, #0
 8009dc8:	dd0c      	ble.n	8009de4 <_dtoa_r+0x754>
 8009dca:	9b05      	ldr	r3, [sp, #20]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	dd09      	ble.n	8009de4 <_dtoa_r+0x754>
 8009dd0:	42ab      	cmp	r3, r5
 8009dd2:	9a04      	ldr	r2, [sp, #16]
 8009dd4:	bfa8      	it	ge
 8009dd6:	462b      	movge	r3, r5
 8009dd8:	1ad2      	subs	r2, r2, r3
 8009dda:	9204      	str	r2, [sp, #16]
 8009ddc:	9a05      	ldr	r2, [sp, #20]
 8009dde:	1aed      	subs	r5, r5, r3
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	9305      	str	r3, [sp, #20]
 8009de4:	9b07      	ldr	r3, [sp, #28]
 8009de6:	b31b      	cbz	r3, 8009e30 <_dtoa_r+0x7a0>
 8009de8:	9b08      	ldr	r3, [sp, #32]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f000 80af 	beq.w	8009f4e <_dtoa_r+0x8be>
 8009df0:	2e00      	cmp	r6, #0
 8009df2:	dd13      	ble.n	8009e1c <_dtoa_r+0x78c>
 8009df4:	4639      	mov	r1, r7
 8009df6:	4632      	mov	r2, r6
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f000 fbfb 	bl	800a5f4 <__pow5mult>
 8009dfe:	ee18 2a10 	vmov	r2, s16
 8009e02:	4601      	mov	r1, r0
 8009e04:	4607      	mov	r7, r0
 8009e06:	4620      	mov	r0, r4
 8009e08:	f000 fb4a 	bl	800a4a0 <__multiply>
 8009e0c:	ee18 1a10 	vmov	r1, s16
 8009e10:	4680      	mov	r8, r0
 8009e12:	4620      	mov	r0, r4
 8009e14:	f000 fa76 	bl	800a304 <_Bfree>
 8009e18:	ee08 8a10 	vmov	s16, r8
 8009e1c:	9b07      	ldr	r3, [sp, #28]
 8009e1e:	1b9a      	subs	r2, r3, r6
 8009e20:	d006      	beq.n	8009e30 <_dtoa_r+0x7a0>
 8009e22:	ee18 1a10 	vmov	r1, s16
 8009e26:	4620      	mov	r0, r4
 8009e28:	f000 fbe4 	bl	800a5f4 <__pow5mult>
 8009e2c:	ee08 0a10 	vmov	s16, r0
 8009e30:	2101      	movs	r1, #1
 8009e32:	4620      	mov	r0, r4
 8009e34:	f000 fb1e 	bl	800a474 <__i2b>
 8009e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	4606      	mov	r6, r0
 8009e3e:	f340 8088 	ble.w	8009f52 <_dtoa_r+0x8c2>
 8009e42:	461a      	mov	r2, r3
 8009e44:	4601      	mov	r1, r0
 8009e46:	4620      	mov	r0, r4
 8009e48:	f000 fbd4 	bl	800a5f4 <__pow5mult>
 8009e4c:	9b06      	ldr	r3, [sp, #24]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	4606      	mov	r6, r0
 8009e52:	f340 8081 	ble.w	8009f58 <_dtoa_r+0x8c8>
 8009e56:	f04f 0800 	mov.w	r8, #0
 8009e5a:	6933      	ldr	r3, [r6, #16]
 8009e5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009e60:	6918      	ldr	r0, [r3, #16]
 8009e62:	f000 fab7 	bl	800a3d4 <__hi0bits>
 8009e66:	f1c0 0020 	rsb	r0, r0, #32
 8009e6a:	9b05      	ldr	r3, [sp, #20]
 8009e6c:	4418      	add	r0, r3
 8009e6e:	f010 001f 	ands.w	r0, r0, #31
 8009e72:	f000 8092 	beq.w	8009f9a <_dtoa_r+0x90a>
 8009e76:	f1c0 0320 	rsb	r3, r0, #32
 8009e7a:	2b04      	cmp	r3, #4
 8009e7c:	f340 808a 	ble.w	8009f94 <_dtoa_r+0x904>
 8009e80:	f1c0 001c 	rsb	r0, r0, #28
 8009e84:	9b04      	ldr	r3, [sp, #16]
 8009e86:	4403      	add	r3, r0
 8009e88:	9304      	str	r3, [sp, #16]
 8009e8a:	9b05      	ldr	r3, [sp, #20]
 8009e8c:	4403      	add	r3, r0
 8009e8e:	4405      	add	r5, r0
 8009e90:	9305      	str	r3, [sp, #20]
 8009e92:	9b04      	ldr	r3, [sp, #16]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	dd07      	ble.n	8009ea8 <_dtoa_r+0x818>
 8009e98:	ee18 1a10 	vmov	r1, s16
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f000 fc02 	bl	800a6a8 <__lshift>
 8009ea4:	ee08 0a10 	vmov	s16, r0
 8009ea8:	9b05      	ldr	r3, [sp, #20]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	dd05      	ble.n	8009eba <_dtoa_r+0x82a>
 8009eae:	4631      	mov	r1, r6
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f000 fbf8 	bl	800a6a8 <__lshift>
 8009eb8:	4606      	mov	r6, r0
 8009eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d06e      	beq.n	8009f9e <_dtoa_r+0x90e>
 8009ec0:	ee18 0a10 	vmov	r0, s16
 8009ec4:	4631      	mov	r1, r6
 8009ec6:	f000 fc5f 	bl	800a788 <__mcmp>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	da67      	bge.n	8009f9e <_dtoa_r+0x90e>
 8009ece:	9b00      	ldr	r3, [sp, #0]
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	ee18 1a10 	vmov	r1, s16
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	220a      	movs	r2, #10
 8009eda:	2300      	movs	r3, #0
 8009edc:	4620      	mov	r0, r4
 8009ede:	f000 fa33 	bl	800a348 <__multadd>
 8009ee2:	9b08      	ldr	r3, [sp, #32]
 8009ee4:	ee08 0a10 	vmov	s16, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f000 81b1 	beq.w	800a250 <_dtoa_r+0xbc0>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	4639      	mov	r1, r7
 8009ef2:	220a      	movs	r2, #10
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f000 fa27 	bl	800a348 <__multadd>
 8009efa:	9b02      	ldr	r3, [sp, #8]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	4607      	mov	r7, r0
 8009f00:	f300 808e 	bgt.w	800a020 <_dtoa_r+0x990>
 8009f04:	9b06      	ldr	r3, [sp, #24]
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	dc51      	bgt.n	8009fae <_dtoa_r+0x91e>
 8009f0a:	e089      	b.n	800a020 <_dtoa_r+0x990>
 8009f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009f12:	e74b      	b.n	8009dac <_dtoa_r+0x71c>
 8009f14:	9b03      	ldr	r3, [sp, #12]
 8009f16:	1e5e      	subs	r6, r3, #1
 8009f18:	9b07      	ldr	r3, [sp, #28]
 8009f1a:	42b3      	cmp	r3, r6
 8009f1c:	bfbf      	itttt	lt
 8009f1e:	9b07      	ldrlt	r3, [sp, #28]
 8009f20:	9607      	strlt	r6, [sp, #28]
 8009f22:	1af2      	sublt	r2, r6, r3
 8009f24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009f26:	bfb6      	itet	lt
 8009f28:	189b      	addlt	r3, r3, r2
 8009f2a:	1b9e      	subge	r6, r3, r6
 8009f2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009f2e:	9b03      	ldr	r3, [sp, #12]
 8009f30:	bfb8      	it	lt
 8009f32:	2600      	movlt	r6, #0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	bfb7      	itett	lt
 8009f38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009f3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009f40:	1a9d      	sublt	r5, r3, r2
 8009f42:	2300      	movlt	r3, #0
 8009f44:	e734      	b.n	8009db0 <_dtoa_r+0x720>
 8009f46:	9e07      	ldr	r6, [sp, #28]
 8009f48:	9d04      	ldr	r5, [sp, #16]
 8009f4a:	9f08      	ldr	r7, [sp, #32]
 8009f4c:	e73b      	b.n	8009dc6 <_dtoa_r+0x736>
 8009f4e:	9a07      	ldr	r2, [sp, #28]
 8009f50:	e767      	b.n	8009e22 <_dtoa_r+0x792>
 8009f52:	9b06      	ldr	r3, [sp, #24]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	dc18      	bgt.n	8009f8a <_dtoa_r+0x8fa>
 8009f58:	f1ba 0f00 	cmp.w	sl, #0
 8009f5c:	d115      	bne.n	8009f8a <_dtoa_r+0x8fa>
 8009f5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f62:	b993      	cbnz	r3, 8009f8a <_dtoa_r+0x8fa>
 8009f64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f68:	0d1b      	lsrs	r3, r3, #20
 8009f6a:	051b      	lsls	r3, r3, #20
 8009f6c:	b183      	cbz	r3, 8009f90 <_dtoa_r+0x900>
 8009f6e:	9b04      	ldr	r3, [sp, #16]
 8009f70:	3301      	adds	r3, #1
 8009f72:	9304      	str	r3, [sp, #16]
 8009f74:	9b05      	ldr	r3, [sp, #20]
 8009f76:	3301      	adds	r3, #1
 8009f78:	9305      	str	r3, [sp, #20]
 8009f7a:	f04f 0801 	mov.w	r8, #1
 8009f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f47f af6a 	bne.w	8009e5a <_dtoa_r+0x7ca>
 8009f86:	2001      	movs	r0, #1
 8009f88:	e76f      	b.n	8009e6a <_dtoa_r+0x7da>
 8009f8a:	f04f 0800 	mov.w	r8, #0
 8009f8e:	e7f6      	b.n	8009f7e <_dtoa_r+0x8ee>
 8009f90:	4698      	mov	r8, r3
 8009f92:	e7f4      	b.n	8009f7e <_dtoa_r+0x8ee>
 8009f94:	f43f af7d 	beq.w	8009e92 <_dtoa_r+0x802>
 8009f98:	4618      	mov	r0, r3
 8009f9a:	301c      	adds	r0, #28
 8009f9c:	e772      	b.n	8009e84 <_dtoa_r+0x7f4>
 8009f9e:	9b03      	ldr	r3, [sp, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	dc37      	bgt.n	800a014 <_dtoa_r+0x984>
 8009fa4:	9b06      	ldr	r3, [sp, #24]
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	dd34      	ble.n	800a014 <_dtoa_r+0x984>
 8009faa:	9b03      	ldr	r3, [sp, #12]
 8009fac:	9302      	str	r3, [sp, #8]
 8009fae:	9b02      	ldr	r3, [sp, #8]
 8009fb0:	b96b      	cbnz	r3, 8009fce <_dtoa_r+0x93e>
 8009fb2:	4631      	mov	r1, r6
 8009fb4:	2205      	movs	r2, #5
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f000 f9c6 	bl	800a348 <__multadd>
 8009fbc:	4601      	mov	r1, r0
 8009fbe:	4606      	mov	r6, r0
 8009fc0:	ee18 0a10 	vmov	r0, s16
 8009fc4:	f000 fbe0 	bl	800a788 <__mcmp>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	f73f adbb 	bgt.w	8009b44 <_dtoa_r+0x4b4>
 8009fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd0:	9d01      	ldr	r5, [sp, #4]
 8009fd2:	43db      	mvns	r3, r3
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	f04f 0800 	mov.w	r8, #0
 8009fda:	4631      	mov	r1, r6
 8009fdc:	4620      	mov	r0, r4
 8009fde:	f000 f991 	bl	800a304 <_Bfree>
 8009fe2:	2f00      	cmp	r7, #0
 8009fe4:	f43f aea4 	beq.w	8009d30 <_dtoa_r+0x6a0>
 8009fe8:	f1b8 0f00 	cmp.w	r8, #0
 8009fec:	d005      	beq.n	8009ffa <_dtoa_r+0x96a>
 8009fee:	45b8      	cmp	r8, r7
 8009ff0:	d003      	beq.n	8009ffa <_dtoa_r+0x96a>
 8009ff2:	4641      	mov	r1, r8
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f000 f985 	bl	800a304 <_Bfree>
 8009ffa:	4639      	mov	r1, r7
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	f000 f981 	bl	800a304 <_Bfree>
 800a002:	e695      	b.n	8009d30 <_dtoa_r+0x6a0>
 800a004:	2600      	movs	r6, #0
 800a006:	4637      	mov	r7, r6
 800a008:	e7e1      	b.n	8009fce <_dtoa_r+0x93e>
 800a00a:	9700      	str	r7, [sp, #0]
 800a00c:	4637      	mov	r7, r6
 800a00e:	e599      	b.n	8009b44 <_dtoa_r+0x4b4>
 800a010:	40240000 	.word	0x40240000
 800a014:	9b08      	ldr	r3, [sp, #32]
 800a016:	2b00      	cmp	r3, #0
 800a018:	f000 80ca 	beq.w	800a1b0 <_dtoa_r+0xb20>
 800a01c:	9b03      	ldr	r3, [sp, #12]
 800a01e:	9302      	str	r3, [sp, #8]
 800a020:	2d00      	cmp	r5, #0
 800a022:	dd05      	ble.n	800a030 <_dtoa_r+0x9a0>
 800a024:	4639      	mov	r1, r7
 800a026:	462a      	mov	r2, r5
 800a028:	4620      	mov	r0, r4
 800a02a:	f000 fb3d 	bl	800a6a8 <__lshift>
 800a02e:	4607      	mov	r7, r0
 800a030:	f1b8 0f00 	cmp.w	r8, #0
 800a034:	d05b      	beq.n	800a0ee <_dtoa_r+0xa5e>
 800a036:	6879      	ldr	r1, [r7, #4]
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 f923 	bl	800a284 <_Balloc>
 800a03e:	4605      	mov	r5, r0
 800a040:	b928      	cbnz	r0, 800a04e <_dtoa_r+0x9be>
 800a042:	4b87      	ldr	r3, [pc, #540]	; (800a260 <_dtoa_r+0xbd0>)
 800a044:	4602      	mov	r2, r0
 800a046:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a04a:	f7ff bb3b 	b.w	80096c4 <_dtoa_r+0x34>
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	3202      	adds	r2, #2
 800a052:	0092      	lsls	r2, r2, #2
 800a054:	f107 010c 	add.w	r1, r7, #12
 800a058:	300c      	adds	r0, #12
 800a05a:	f7fe fd2b 	bl	8008ab4 <memcpy>
 800a05e:	2201      	movs	r2, #1
 800a060:	4629      	mov	r1, r5
 800a062:	4620      	mov	r0, r4
 800a064:	f000 fb20 	bl	800a6a8 <__lshift>
 800a068:	9b01      	ldr	r3, [sp, #4]
 800a06a:	f103 0901 	add.w	r9, r3, #1
 800a06e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a072:	4413      	add	r3, r2
 800a074:	9305      	str	r3, [sp, #20]
 800a076:	f00a 0301 	and.w	r3, sl, #1
 800a07a:	46b8      	mov	r8, r7
 800a07c:	9304      	str	r3, [sp, #16]
 800a07e:	4607      	mov	r7, r0
 800a080:	4631      	mov	r1, r6
 800a082:	ee18 0a10 	vmov	r0, s16
 800a086:	f7ff fa75 	bl	8009574 <quorem>
 800a08a:	4641      	mov	r1, r8
 800a08c:	9002      	str	r0, [sp, #8]
 800a08e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a092:	ee18 0a10 	vmov	r0, s16
 800a096:	f000 fb77 	bl	800a788 <__mcmp>
 800a09a:	463a      	mov	r2, r7
 800a09c:	9003      	str	r0, [sp, #12]
 800a09e:	4631      	mov	r1, r6
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f000 fb8d 	bl	800a7c0 <__mdiff>
 800a0a6:	68c2      	ldr	r2, [r0, #12]
 800a0a8:	f109 3bff 	add.w	fp, r9, #4294967295
 800a0ac:	4605      	mov	r5, r0
 800a0ae:	bb02      	cbnz	r2, 800a0f2 <_dtoa_r+0xa62>
 800a0b0:	4601      	mov	r1, r0
 800a0b2:	ee18 0a10 	vmov	r0, s16
 800a0b6:	f000 fb67 	bl	800a788 <__mcmp>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	4629      	mov	r1, r5
 800a0be:	4620      	mov	r0, r4
 800a0c0:	9207      	str	r2, [sp, #28]
 800a0c2:	f000 f91f 	bl	800a304 <_Bfree>
 800a0c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a0ca:	ea43 0102 	orr.w	r1, r3, r2
 800a0ce:	9b04      	ldr	r3, [sp, #16]
 800a0d0:	430b      	orrs	r3, r1
 800a0d2:	464d      	mov	r5, r9
 800a0d4:	d10f      	bne.n	800a0f6 <_dtoa_r+0xa66>
 800a0d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a0da:	d02a      	beq.n	800a132 <_dtoa_r+0xaa2>
 800a0dc:	9b03      	ldr	r3, [sp, #12]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	dd02      	ble.n	800a0e8 <_dtoa_r+0xa58>
 800a0e2:	9b02      	ldr	r3, [sp, #8]
 800a0e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a0e8:	f88b a000 	strb.w	sl, [fp]
 800a0ec:	e775      	b.n	8009fda <_dtoa_r+0x94a>
 800a0ee:	4638      	mov	r0, r7
 800a0f0:	e7ba      	b.n	800a068 <_dtoa_r+0x9d8>
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	e7e2      	b.n	800a0bc <_dtoa_r+0xa2c>
 800a0f6:	9b03      	ldr	r3, [sp, #12]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	db04      	blt.n	800a106 <_dtoa_r+0xa76>
 800a0fc:	9906      	ldr	r1, [sp, #24]
 800a0fe:	430b      	orrs	r3, r1
 800a100:	9904      	ldr	r1, [sp, #16]
 800a102:	430b      	orrs	r3, r1
 800a104:	d122      	bne.n	800a14c <_dtoa_r+0xabc>
 800a106:	2a00      	cmp	r2, #0
 800a108:	ddee      	ble.n	800a0e8 <_dtoa_r+0xa58>
 800a10a:	ee18 1a10 	vmov	r1, s16
 800a10e:	2201      	movs	r2, #1
 800a110:	4620      	mov	r0, r4
 800a112:	f000 fac9 	bl	800a6a8 <__lshift>
 800a116:	4631      	mov	r1, r6
 800a118:	ee08 0a10 	vmov	s16, r0
 800a11c:	f000 fb34 	bl	800a788 <__mcmp>
 800a120:	2800      	cmp	r0, #0
 800a122:	dc03      	bgt.n	800a12c <_dtoa_r+0xa9c>
 800a124:	d1e0      	bne.n	800a0e8 <_dtoa_r+0xa58>
 800a126:	f01a 0f01 	tst.w	sl, #1
 800a12a:	d0dd      	beq.n	800a0e8 <_dtoa_r+0xa58>
 800a12c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a130:	d1d7      	bne.n	800a0e2 <_dtoa_r+0xa52>
 800a132:	2339      	movs	r3, #57	; 0x39
 800a134:	f88b 3000 	strb.w	r3, [fp]
 800a138:	462b      	mov	r3, r5
 800a13a:	461d      	mov	r5, r3
 800a13c:	3b01      	subs	r3, #1
 800a13e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a142:	2a39      	cmp	r2, #57	; 0x39
 800a144:	d071      	beq.n	800a22a <_dtoa_r+0xb9a>
 800a146:	3201      	adds	r2, #1
 800a148:	701a      	strb	r2, [r3, #0]
 800a14a:	e746      	b.n	8009fda <_dtoa_r+0x94a>
 800a14c:	2a00      	cmp	r2, #0
 800a14e:	dd07      	ble.n	800a160 <_dtoa_r+0xad0>
 800a150:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a154:	d0ed      	beq.n	800a132 <_dtoa_r+0xaa2>
 800a156:	f10a 0301 	add.w	r3, sl, #1
 800a15a:	f88b 3000 	strb.w	r3, [fp]
 800a15e:	e73c      	b.n	8009fda <_dtoa_r+0x94a>
 800a160:	9b05      	ldr	r3, [sp, #20]
 800a162:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a166:	4599      	cmp	r9, r3
 800a168:	d047      	beq.n	800a1fa <_dtoa_r+0xb6a>
 800a16a:	ee18 1a10 	vmov	r1, s16
 800a16e:	2300      	movs	r3, #0
 800a170:	220a      	movs	r2, #10
 800a172:	4620      	mov	r0, r4
 800a174:	f000 f8e8 	bl	800a348 <__multadd>
 800a178:	45b8      	cmp	r8, r7
 800a17a:	ee08 0a10 	vmov	s16, r0
 800a17e:	f04f 0300 	mov.w	r3, #0
 800a182:	f04f 020a 	mov.w	r2, #10
 800a186:	4641      	mov	r1, r8
 800a188:	4620      	mov	r0, r4
 800a18a:	d106      	bne.n	800a19a <_dtoa_r+0xb0a>
 800a18c:	f000 f8dc 	bl	800a348 <__multadd>
 800a190:	4680      	mov	r8, r0
 800a192:	4607      	mov	r7, r0
 800a194:	f109 0901 	add.w	r9, r9, #1
 800a198:	e772      	b.n	800a080 <_dtoa_r+0x9f0>
 800a19a:	f000 f8d5 	bl	800a348 <__multadd>
 800a19e:	4639      	mov	r1, r7
 800a1a0:	4680      	mov	r8, r0
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	220a      	movs	r2, #10
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f000 f8ce 	bl	800a348 <__multadd>
 800a1ac:	4607      	mov	r7, r0
 800a1ae:	e7f1      	b.n	800a194 <_dtoa_r+0xb04>
 800a1b0:	9b03      	ldr	r3, [sp, #12]
 800a1b2:	9302      	str	r3, [sp, #8]
 800a1b4:	9d01      	ldr	r5, [sp, #4]
 800a1b6:	ee18 0a10 	vmov	r0, s16
 800a1ba:	4631      	mov	r1, r6
 800a1bc:	f7ff f9da 	bl	8009574 <quorem>
 800a1c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a1c4:	9b01      	ldr	r3, [sp, #4]
 800a1c6:	f805 ab01 	strb.w	sl, [r5], #1
 800a1ca:	1aea      	subs	r2, r5, r3
 800a1cc:	9b02      	ldr	r3, [sp, #8]
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	dd09      	ble.n	800a1e6 <_dtoa_r+0xb56>
 800a1d2:	ee18 1a10 	vmov	r1, s16
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	220a      	movs	r2, #10
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f000 f8b4 	bl	800a348 <__multadd>
 800a1e0:	ee08 0a10 	vmov	s16, r0
 800a1e4:	e7e7      	b.n	800a1b6 <_dtoa_r+0xb26>
 800a1e6:	9b02      	ldr	r3, [sp, #8]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	bfc8      	it	gt
 800a1ec:	461d      	movgt	r5, r3
 800a1ee:	9b01      	ldr	r3, [sp, #4]
 800a1f0:	bfd8      	it	le
 800a1f2:	2501      	movle	r5, #1
 800a1f4:	441d      	add	r5, r3
 800a1f6:	f04f 0800 	mov.w	r8, #0
 800a1fa:	ee18 1a10 	vmov	r1, s16
 800a1fe:	2201      	movs	r2, #1
 800a200:	4620      	mov	r0, r4
 800a202:	f000 fa51 	bl	800a6a8 <__lshift>
 800a206:	4631      	mov	r1, r6
 800a208:	ee08 0a10 	vmov	s16, r0
 800a20c:	f000 fabc 	bl	800a788 <__mcmp>
 800a210:	2800      	cmp	r0, #0
 800a212:	dc91      	bgt.n	800a138 <_dtoa_r+0xaa8>
 800a214:	d102      	bne.n	800a21c <_dtoa_r+0xb8c>
 800a216:	f01a 0f01 	tst.w	sl, #1
 800a21a:	d18d      	bne.n	800a138 <_dtoa_r+0xaa8>
 800a21c:	462b      	mov	r3, r5
 800a21e:	461d      	mov	r5, r3
 800a220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a224:	2a30      	cmp	r2, #48	; 0x30
 800a226:	d0fa      	beq.n	800a21e <_dtoa_r+0xb8e>
 800a228:	e6d7      	b.n	8009fda <_dtoa_r+0x94a>
 800a22a:	9a01      	ldr	r2, [sp, #4]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d184      	bne.n	800a13a <_dtoa_r+0xaaa>
 800a230:	9b00      	ldr	r3, [sp, #0]
 800a232:	3301      	adds	r3, #1
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	2331      	movs	r3, #49	; 0x31
 800a238:	7013      	strb	r3, [r2, #0]
 800a23a:	e6ce      	b.n	8009fda <_dtoa_r+0x94a>
 800a23c:	4b09      	ldr	r3, [pc, #36]	; (800a264 <_dtoa_r+0xbd4>)
 800a23e:	f7ff ba95 	b.w	800976c <_dtoa_r+0xdc>
 800a242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a244:	2b00      	cmp	r3, #0
 800a246:	f47f aa6e 	bne.w	8009726 <_dtoa_r+0x96>
 800a24a:	4b07      	ldr	r3, [pc, #28]	; (800a268 <_dtoa_r+0xbd8>)
 800a24c:	f7ff ba8e 	b.w	800976c <_dtoa_r+0xdc>
 800a250:	9b02      	ldr	r3, [sp, #8]
 800a252:	2b00      	cmp	r3, #0
 800a254:	dcae      	bgt.n	800a1b4 <_dtoa_r+0xb24>
 800a256:	9b06      	ldr	r3, [sp, #24]
 800a258:	2b02      	cmp	r3, #2
 800a25a:	f73f aea8 	bgt.w	8009fae <_dtoa_r+0x91e>
 800a25e:	e7a9      	b.n	800a1b4 <_dtoa_r+0xb24>
 800a260:	0800cac0 	.word	0x0800cac0
 800a264:	0800c91c 	.word	0x0800c91c
 800a268:	0800ca41 	.word	0x0800ca41

0800a26c <_localeconv_r>:
 800a26c:	4800      	ldr	r0, [pc, #0]	; (800a270 <_localeconv_r+0x4>)
 800a26e:	4770      	bx	lr
 800a270:	20000168 	.word	0x20000168

0800a274 <malloc>:
 800a274:	4b02      	ldr	r3, [pc, #8]	; (800a280 <malloc+0xc>)
 800a276:	4601      	mov	r1, r0
 800a278:	6818      	ldr	r0, [r3, #0]
 800a27a:	f000 bc09 	b.w	800aa90 <_malloc_r>
 800a27e:	bf00      	nop
 800a280:	20000014 	.word	0x20000014

0800a284 <_Balloc>:
 800a284:	b570      	push	{r4, r5, r6, lr}
 800a286:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a288:	4604      	mov	r4, r0
 800a28a:	460d      	mov	r5, r1
 800a28c:	b976      	cbnz	r6, 800a2ac <_Balloc+0x28>
 800a28e:	2010      	movs	r0, #16
 800a290:	f7ff fff0 	bl	800a274 <malloc>
 800a294:	4602      	mov	r2, r0
 800a296:	6260      	str	r0, [r4, #36]	; 0x24
 800a298:	b920      	cbnz	r0, 800a2a4 <_Balloc+0x20>
 800a29a:	4b18      	ldr	r3, [pc, #96]	; (800a2fc <_Balloc+0x78>)
 800a29c:	4818      	ldr	r0, [pc, #96]	; (800a300 <_Balloc+0x7c>)
 800a29e:	2166      	movs	r1, #102	; 0x66
 800a2a0:	f000 fdd6 	bl	800ae50 <__assert_func>
 800a2a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2a8:	6006      	str	r6, [r0, #0]
 800a2aa:	60c6      	str	r6, [r0, #12]
 800a2ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a2ae:	68f3      	ldr	r3, [r6, #12]
 800a2b0:	b183      	cbz	r3, 800a2d4 <_Balloc+0x50>
 800a2b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2ba:	b9b8      	cbnz	r0, 800a2ec <_Balloc+0x68>
 800a2bc:	2101      	movs	r1, #1
 800a2be:	fa01 f605 	lsl.w	r6, r1, r5
 800a2c2:	1d72      	adds	r2, r6, #5
 800a2c4:	0092      	lsls	r2, r2, #2
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f000 fb60 	bl	800a98c <_calloc_r>
 800a2cc:	b160      	cbz	r0, 800a2e8 <_Balloc+0x64>
 800a2ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2d2:	e00e      	b.n	800a2f2 <_Balloc+0x6e>
 800a2d4:	2221      	movs	r2, #33	; 0x21
 800a2d6:	2104      	movs	r1, #4
 800a2d8:	4620      	mov	r0, r4
 800a2da:	f000 fb57 	bl	800a98c <_calloc_r>
 800a2de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2e0:	60f0      	str	r0, [r6, #12]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1e4      	bne.n	800a2b2 <_Balloc+0x2e>
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	bd70      	pop	{r4, r5, r6, pc}
 800a2ec:	6802      	ldr	r2, [r0, #0]
 800a2ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2f8:	e7f7      	b.n	800a2ea <_Balloc+0x66>
 800a2fa:	bf00      	nop
 800a2fc:	0800ca4e 	.word	0x0800ca4e
 800a300:	0800cad1 	.word	0x0800cad1

0800a304 <_Bfree>:
 800a304:	b570      	push	{r4, r5, r6, lr}
 800a306:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a308:	4605      	mov	r5, r0
 800a30a:	460c      	mov	r4, r1
 800a30c:	b976      	cbnz	r6, 800a32c <_Bfree+0x28>
 800a30e:	2010      	movs	r0, #16
 800a310:	f7ff ffb0 	bl	800a274 <malloc>
 800a314:	4602      	mov	r2, r0
 800a316:	6268      	str	r0, [r5, #36]	; 0x24
 800a318:	b920      	cbnz	r0, 800a324 <_Bfree+0x20>
 800a31a:	4b09      	ldr	r3, [pc, #36]	; (800a340 <_Bfree+0x3c>)
 800a31c:	4809      	ldr	r0, [pc, #36]	; (800a344 <_Bfree+0x40>)
 800a31e:	218a      	movs	r1, #138	; 0x8a
 800a320:	f000 fd96 	bl	800ae50 <__assert_func>
 800a324:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a328:	6006      	str	r6, [r0, #0]
 800a32a:	60c6      	str	r6, [r0, #12]
 800a32c:	b13c      	cbz	r4, 800a33e <_Bfree+0x3a>
 800a32e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a330:	6862      	ldr	r2, [r4, #4]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a338:	6021      	str	r1, [r4, #0]
 800a33a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a33e:	bd70      	pop	{r4, r5, r6, pc}
 800a340:	0800ca4e 	.word	0x0800ca4e
 800a344:	0800cad1 	.word	0x0800cad1

0800a348 <__multadd>:
 800a348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a34c:	690d      	ldr	r5, [r1, #16]
 800a34e:	4607      	mov	r7, r0
 800a350:	460c      	mov	r4, r1
 800a352:	461e      	mov	r6, r3
 800a354:	f101 0c14 	add.w	ip, r1, #20
 800a358:	2000      	movs	r0, #0
 800a35a:	f8dc 3000 	ldr.w	r3, [ip]
 800a35e:	b299      	uxth	r1, r3
 800a360:	fb02 6101 	mla	r1, r2, r1, r6
 800a364:	0c1e      	lsrs	r6, r3, #16
 800a366:	0c0b      	lsrs	r3, r1, #16
 800a368:	fb02 3306 	mla	r3, r2, r6, r3
 800a36c:	b289      	uxth	r1, r1
 800a36e:	3001      	adds	r0, #1
 800a370:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a374:	4285      	cmp	r5, r0
 800a376:	f84c 1b04 	str.w	r1, [ip], #4
 800a37a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a37e:	dcec      	bgt.n	800a35a <__multadd+0x12>
 800a380:	b30e      	cbz	r6, 800a3c6 <__multadd+0x7e>
 800a382:	68a3      	ldr	r3, [r4, #8]
 800a384:	42ab      	cmp	r3, r5
 800a386:	dc19      	bgt.n	800a3bc <__multadd+0x74>
 800a388:	6861      	ldr	r1, [r4, #4]
 800a38a:	4638      	mov	r0, r7
 800a38c:	3101      	adds	r1, #1
 800a38e:	f7ff ff79 	bl	800a284 <_Balloc>
 800a392:	4680      	mov	r8, r0
 800a394:	b928      	cbnz	r0, 800a3a2 <__multadd+0x5a>
 800a396:	4602      	mov	r2, r0
 800a398:	4b0c      	ldr	r3, [pc, #48]	; (800a3cc <__multadd+0x84>)
 800a39a:	480d      	ldr	r0, [pc, #52]	; (800a3d0 <__multadd+0x88>)
 800a39c:	21b5      	movs	r1, #181	; 0xb5
 800a39e:	f000 fd57 	bl	800ae50 <__assert_func>
 800a3a2:	6922      	ldr	r2, [r4, #16]
 800a3a4:	3202      	adds	r2, #2
 800a3a6:	f104 010c 	add.w	r1, r4, #12
 800a3aa:	0092      	lsls	r2, r2, #2
 800a3ac:	300c      	adds	r0, #12
 800a3ae:	f7fe fb81 	bl	8008ab4 <memcpy>
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	4638      	mov	r0, r7
 800a3b6:	f7ff ffa5 	bl	800a304 <_Bfree>
 800a3ba:	4644      	mov	r4, r8
 800a3bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3c0:	3501      	adds	r5, #1
 800a3c2:	615e      	str	r6, [r3, #20]
 800a3c4:	6125      	str	r5, [r4, #16]
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3cc:	0800cac0 	.word	0x0800cac0
 800a3d0:	0800cad1 	.word	0x0800cad1

0800a3d4 <__hi0bits>:
 800a3d4:	0c03      	lsrs	r3, r0, #16
 800a3d6:	041b      	lsls	r3, r3, #16
 800a3d8:	b9d3      	cbnz	r3, 800a410 <__hi0bits+0x3c>
 800a3da:	0400      	lsls	r0, r0, #16
 800a3dc:	2310      	movs	r3, #16
 800a3de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a3e2:	bf04      	itt	eq
 800a3e4:	0200      	lsleq	r0, r0, #8
 800a3e6:	3308      	addeq	r3, #8
 800a3e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a3ec:	bf04      	itt	eq
 800a3ee:	0100      	lsleq	r0, r0, #4
 800a3f0:	3304      	addeq	r3, #4
 800a3f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a3f6:	bf04      	itt	eq
 800a3f8:	0080      	lsleq	r0, r0, #2
 800a3fa:	3302      	addeq	r3, #2
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	db05      	blt.n	800a40c <__hi0bits+0x38>
 800a400:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a404:	f103 0301 	add.w	r3, r3, #1
 800a408:	bf08      	it	eq
 800a40a:	2320      	moveq	r3, #32
 800a40c:	4618      	mov	r0, r3
 800a40e:	4770      	bx	lr
 800a410:	2300      	movs	r3, #0
 800a412:	e7e4      	b.n	800a3de <__hi0bits+0xa>

0800a414 <__lo0bits>:
 800a414:	6803      	ldr	r3, [r0, #0]
 800a416:	f013 0207 	ands.w	r2, r3, #7
 800a41a:	4601      	mov	r1, r0
 800a41c:	d00b      	beq.n	800a436 <__lo0bits+0x22>
 800a41e:	07da      	lsls	r2, r3, #31
 800a420:	d423      	bmi.n	800a46a <__lo0bits+0x56>
 800a422:	0798      	lsls	r0, r3, #30
 800a424:	bf49      	itett	mi
 800a426:	085b      	lsrmi	r3, r3, #1
 800a428:	089b      	lsrpl	r3, r3, #2
 800a42a:	2001      	movmi	r0, #1
 800a42c:	600b      	strmi	r3, [r1, #0]
 800a42e:	bf5c      	itt	pl
 800a430:	600b      	strpl	r3, [r1, #0]
 800a432:	2002      	movpl	r0, #2
 800a434:	4770      	bx	lr
 800a436:	b298      	uxth	r0, r3
 800a438:	b9a8      	cbnz	r0, 800a466 <__lo0bits+0x52>
 800a43a:	0c1b      	lsrs	r3, r3, #16
 800a43c:	2010      	movs	r0, #16
 800a43e:	b2da      	uxtb	r2, r3
 800a440:	b90a      	cbnz	r2, 800a446 <__lo0bits+0x32>
 800a442:	3008      	adds	r0, #8
 800a444:	0a1b      	lsrs	r3, r3, #8
 800a446:	071a      	lsls	r2, r3, #28
 800a448:	bf04      	itt	eq
 800a44a:	091b      	lsreq	r3, r3, #4
 800a44c:	3004      	addeq	r0, #4
 800a44e:	079a      	lsls	r2, r3, #30
 800a450:	bf04      	itt	eq
 800a452:	089b      	lsreq	r3, r3, #2
 800a454:	3002      	addeq	r0, #2
 800a456:	07da      	lsls	r2, r3, #31
 800a458:	d403      	bmi.n	800a462 <__lo0bits+0x4e>
 800a45a:	085b      	lsrs	r3, r3, #1
 800a45c:	f100 0001 	add.w	r0, r0, #1
 800a460:	d005      	beq.n	800a46e <__lo0bits+0x5a>
 800a462:	600b      	str	r3, [r1, #0]
 800a464:	4770      	bx	lr
 800a466:	4610      	mov	r0, r2
 800a468:	e7e9      	b.n	800a43e <__lo0bits+0x2a>
 800a46a:	2000      	movs	r0, #0
 800a46c:	4770      	bx	lr
 800a46e:	2020      	movs	r0, #32
 800a470:	4770      	bx	lr
	...

0800a474 <__i2b>:
 800a474:	b510      	push	{r4, lr}
 800a476:	460c      	mov	r4, r1
 800a478:	2101      	movs	r1, #1
 800a47a:	f7ff ff03 	bl	800a284 <_Balloc>
 800a47e:	4602      	mov	r2, r0
 800a480:	b928      	cbnz	r0, 800a48e <__i2b+0x1a>
 800a482:	4b05      	ldr	r3, [pc, #20]	; (800a498 <__i2b+0x24>)
 800a484:	4805      	ldr	r0, [pc, #20]	; (800a49c <__i2b+0x28>)
 800a486:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a48a:	f000 fce1 	bl	800ae50 <__assert_func>
 800a48e:	2301      	movs	r3, #1
 800a490:	6144      	str	r4, [r0, #20]
 800a492:	6103      	str	r3, [r0, #16]
 800a494:	bd10      	pop	{r4, pc}
 800a496:	bf00      	nop
 800a498:	0800cac0 	.word	0x0800cac0
 800a49c:	0800cad1 	.word	0x0800cad1

0800a4a0 <__multiply>:
 800a4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a4:	4691      	mov	r9, r2
 800a4a6:	690a      	ldr	r2, [r1, #16]
 800a4a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	bfb8      	it	lt
 800a4b0:	460b      	movlt	r3, r1
 800a4b2:	460c      	mov	r4, r1
 800a4b4:	bfbc      	itt	lt
 800a4b6:	464c      	movlt	r4, r9
 800a4b8:	4699      	movlt	r9, r3
 800a4ba:	6927      	ldr	r7, [r4, #16]
 800a4bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a4c0:	68a3      	ldr	r3, [r4, #8]
 800a4c2:	6861      	ldr	r1, [r4, #4]
 800a4c4:	eb07 060a 	add.w	r6, r7, sl
 800a4c8:	42b3      	cmp	r3, r6
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	bfb8      	it	lt
 800a4ce:	3101      	addlt	r1, #1
 800a4d0:	f7ff fed8 	bl	800a284 <_Balloc>
 800a4d4:	b930      	cbnz	r0, 800a4e4 <__multiply+0x44>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	4b44      	ldr	r3, [pc, #272]	; (800a5ec <__multiply+0x14c>)
 800a4da:	4845      	ldr	r0, [pc, #276]	; (800a5f0 <__multiply+0x150>)
 800a4dc:	f240 115d 	movw	r1, #349	; 0x15d
 800a4e0:	f000 fcb6 	bl	800ae50 <__assert_func>
 800a4e4:	f100 0514 	add.w	r5, r0, #20
 800a4e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a4ec:	462b      	mov	r3, r5
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	4543      	cmp	r3, r8
 800a4f2:	d321      	bcc.n	800a538 <__multiply+0x98>
 800a4f4:	f104 0314 	add.w	r3, r4, #20
 800a4f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a4fc:	f109 0314 	add.w	r3, r9, #20
 800a500:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a504:	9202      	str	r2, [sp, #8]
 800a506:	1b3a      	subs	r2, r7, r4
 800a508:	3a15      	subs	r2, #21
 800a50a:	f022 0203 	bic.w	r2, r2, #3
 800a50e:	3204      	adds	r2, #4
 800a510:	f104 0115 	add.w	r1, r4, #21
 800a514:	428f      	cmp	r7, r1
 800a516:	bf38      	it	cc
 800a518:	2204      	movcc	r2, #4
 800a51a:	9201      	str	r2, [sp, #4]
 800a51c:	9a02      	ldr	r2, [sp, #8]
 800a51e:	9303      	str	r3, [sp, #12]
 800a520:	429a      	cmp	r2, r3
 800a522:	d80c      	bhi.n	800a53e <__multiply+0x9e>
 800a524:	2e00      	cmp	r6, #0
 800a526:	dd03      	ble.n	800a530 <__multiply+0x90>
 800a528:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d05a      	beq.n	800a5e6 <__multiply+0x146>
 800a530:	6106      	str	r6, [r0, #16]
 800a532:	b005      	add	sp, #20
 800a534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a538:	f843 2b04 	str.w	r2, [r3], #4
 800a53c:	e7d8      	b.n	800a4f0 <__multiply+0x50>
 800a53e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a542:	f1ba 0f00 	cmp.w	sl, #0
 800a546:	d024      	beq.n	800a592 <__multiply+0xf2>
 800a548:	f104 0e14 	add.w	lr, r4, #20
 800a54c:	46a9      	mov	r9, r5
 800a54e:	f04f 0c00 	mov.w	ip, #0
 800a552:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a556:	f8d9 1000 	ldr.w	r1, [r9]
 800a55a:	fa1f fb82 	uxth.w	fp, r2
 800a55e:	b289      	uxth	r1, r1
 800a560:	fb0a 110b 	mla	r1, sl, fp, r1
 800a564:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a568:	f8d9 2000 	ldr.w	r2, [r9]
 800a56c:	4461      	add	r1, ip
 800a56e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a572:	fb0a c20b 	mla	r2, sl, fp, ip
 800a576:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a57a:	b289      	uxth	r1, r1
 800a57c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a580:	4577      	cmp	r7, lr
 800a582:	f849 1b04 	str.w	r1, [r9], #4
 800a586:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a58a:	d8e2      	bhi.n	800a552 <__multiply+0xb2>
 800a58c:	9a01      	ldr	r2, [sp, #4]
 800a58e:	f845 c002 	str.w	ip, [r5, r2]
 800a592:	9a03      	ldr	r2, [sp, #12]
 800a594:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a598:	3304      	adds	r3, #4
 800a59a:	f1b9 0f00 	cmp.w	r9, #0
 800a59e:	d020      	beq.n	800a5e2 <__multiply+0x142>
 800a5a0:	6829      	ldr	r1, [r5, #0]
 800a5a2:	f104 0c14 	add.w	ip, r4, #20
 800a5a6:	46ae      	mov	lr, r5
 800a5a8:	f04f 0a00 	mov.w	sl, #0
 800a5ac:	f8bc b000 	ldrh.w	fp, [ip]
 800a5b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a5b4:	fb09 220b 	mla	r2, r9, fp, r2
 800a5b8:	4492      	add	sl, r2
 800a5ba:	b289      	uxth	r1, r1
 800a5bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a5c0:	f84e 1b04 	str.w	r1, [lr], #4
 800a5c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a5c8:	f8be 1000 	ldrh.w	r1, [lr]
 800a5cc:	0c12      	lsrs	r2, r2, #16
 800a5ce:	fb09 1102 	mla	r1, r9, r2, r1
 800a5d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a5d6:	4567      	cmp	r7, ip
 800a5d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a5dc:	d8e6      	bhi.n	800a5ac <__multiply+0x10c>
 800a5de:	9a01      	ldr	r2, [sp, #4]
 800a5e0:	50a9      	str	r1, [r5, r2]
 800a5e2:	3504      	adds	r5, #4
 800a5e4:	e79a      	b.n	800a51c <__multiply+0x7c>
 800a5e6:	3e01      	subs	r6, #1
 800a5e8:	e79c      	b.n	800a524 <__multiply+0x84>
 800a5ea:	bf00      	nop
 800a5ec:	0800cac0 	.word	0x0800cac0
 800a5f0:	0800cad1 	.word	0x0800cad1

0800a5f4 <__pow5mult>:
 800a5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5f8:	4615      	mov	r5, r2
 800a5fa:	f012 0203 	ands.w	r2, r2, #3
 800a5fe:	4606      	mov	r6, r0
 800a600:	460f      	mov	r7, r1
 800a602:	d007      	beq.n	800a614 <__pow5mult+0x20>
 800a604:	4c25      	ldr	r4, [pc, #148]	; (800a69c <__pow5mult+0xa8>)
 800a606:	3a01      	subs	r2, #1
 800a608:	2300      	movs	r3, #0
 800a60a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a60e:	f7ff fe9b 	bl	800a348 <__multadd>
 800a612:	4607      	mov	r7, r0
 800a614:	10ad      	asrs	r5, r5, #2
 800a616:	d03d      	beq.n	800a694 <__pow5mult+0xa0>
 800a618:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a61a:	b97c      	cbnz	r4, 800a63c <__pow5mult+0x48>
 800a61c:	2010      	movs	r0, #16
 800a61e:	f7ff fe29 	bl	800a274 <malloc>
 800a622:	4602      	mov	r2, r0
 800a624:	6270      	str	r0, [r6, #36]	; 0x24
 800a626:	b928      	cbnz	r0, 800a634 <__pow5mult+0x40>
 800a628:	4b1d      	ldr	r3, [pc, #116]	; (800a6a0 <__pow5mult+0xac>)
 800a62a:	481e      	ldr	r0, [pc, #120]	; (800a6a4 <__pow5mult+0xb0>)
 800a62c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a630:	f000 fc0e 	bl	800ae50 <__assert_func>
 800a634:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a638:	6004      	str	r4, [r0, #0]
 800a63a:	60c4      	str	r4, [r0, #12]
 800a63c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a640:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a644:	b94c      	cbnz	r4, 800a65a <__pow5mult+0x66>
 800a646:	f240 2171 	movw	r1, #625	; 0x271
 800a64a:	4630      	mov	r0, r6
 800a64c:	f7ff ff12 	bl	800a474 <__i2b>
 800a650:	2300      	movs	r3, #0
 800a652:	f8c8 0008 	str.w	r0, [r8, #8]
 800a656:	4604      	mov	r4, r0
 800a658:	6003      	str	r3, [r0, #0]
 800a65a:	f04f 0900 	mov.w	r9, #0
 800a65e:	07eb      	lsls	r3, r5, #31
 800a660:	d50a      	bpl.n	800a678 <__pow5mult+0x84>
 800a662:	4639      	mov	r1, r7
 800a664:	4622      	mov	r2, r4
 800a666:	4630      	mov	r0, r6
 800a668:	f7ff ff1a 	bl	800a4a0 <__multiply>
 800a66c:	4639      	mov	r1, r7
 800a66e:	4680      	mov	r8, r0
 800a670:	4630      	mov	r0, r6
 800a672:	f7ff fe47 	bl	800a304 <_Bfree>
 800a676:	4647      	mov	r7, r8
 800a678:	106d      	asrs	r5, r5, #1
 800a67a:	d00b      	beq.n	800a694 <__pow5mult+0xa0>
 800a67c:	6820      	ldr	r0, [r4, #0]
 800a67e:	b938      	cbnz	r0, 800a690 <__pow5mult+0x9c>
 800a680:	4622      	mov	r2, r4
 800a682:	4621      	mov	r1, r4
 800a684:	4630      	mov	r0, r6
 800a686:	f7ff ff0b 	bl	800a4a0 <__multiply>
 800a68a:	6020      	str	r0, [r4, #0]
 800a68c:	f8c0 9000 	str.w	r9, [r0]
 800a690:	4604      	mov	r4, r0
 800a692:	e7e4      	b.n	800a65e <__pow5mult+0x6a>
 800a694:	4638      	mov	r0, r7
 800a696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a69a:	bf00      	nop
 800a69c:	0800cc20 	.word	0x0800cc20
 800a6a0:	0800ca4e 	.word	0x0800ca4e
 800a6a4:	0800cad1 	.word	0x0800cad1

0800a6a8 <__lshift>:
 800a6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	6849      	ldr	r1, [r1, #4]
 800a6b0:	6923      	ldr	r3, [r4, #16]
 800a6b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6b6:	68a3      	ldr	r3, [r4, #8]
 800a6b8:	4607      	mov	r7, r0
 800a6ba:	4691      	mov	r9, r2
 800a6bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6c0:	f108 0601 	add.w	r6, r8, #1
 800a6c4:	42b3      	cmp	r3, r6
 800a6c6:	db0b      	blt.n	800a6e0 <__lshift+0x38>
 800a6c8:	4638      	mov	r0, r7
 800a6ca:	f7ff fddb 	bl	800a284 <_Balloc>
 800a6ce:	4605      	mov	r5, r0
 800a6d0:	b948      	cbnz	r0, 800a6e6 <__lshift+0x3e>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	4b2a      	ldr	r3, [pc, #168]	; (800a780 <__lshift+0xd8>)
 800a6d6:	482b      	ldr	r0, [pc, #172]	; (800a784 <__lshift+0xdc>)
 800a6d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a6dc:	f000 fbb8 	bl	800ae50 <__assert_func>
 800a6e0:	3101      	adds	r1, #1
 800a6e2:	005b      	lsls	r3, r3, #1
 800a6e4:	e7ee      	b.n	800a6c4 <__lshift+0x1c>
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	f100 0114 	add.w	r1, r0, #20
 800a6ec:	f100 0210 	add.w	r2, r0, #16
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	4553      	cmp	r3, sl
 800a6f4:	db37      	blt.n	800a766 <__lshift+0xbe>
 800a6f6:	6920      	ldr	r0, [r4, #16]
 800a6f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6fc:	f104 0314 	add.w	r3, r4, #20
 800a700:	f019 091f 	ands.w	r9, r9, #31
 800a704:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a708:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a70c:	d02f      	beq.n	800a76e <__lshift+0xc6>
 800a70e:	f1c9 0e20 	rsb	lr, r9, #32
 800a712:	468a      	mov	sl, r1
 800a714:	f04f 0c00 	mov.w	ip, #0
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	fa02 f209 	lsl.w	r2, r2, r9
 800a71e:	ea42 020c 	orr.w	r2, r2, ip
 800a722:	f84a 2b04 	str.w	r2, [sl], #4
 800a726:	f853 2b04 	ldr.w	r2, [r3], #4
 800a72a:	4298      	cmp	r0, r3
 800a72c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a730:	d8f2      	bhi.n	800a718 <__lshift+0x70>
 800a732:	1b03      	subs	r3, r0, r4
 800a734:	3b15      	subs	r3, #21
 800a736:	f023 0303 	bic.w	r3, r3, #3
 800a73a:	3304      	adds	r3, #4
 800a73c:	f104 0215 	add.w	r2, r4, #21
 800a740:	4290      	cmp	r0, r2
 800a742:	bf38      	it	cc
 800a744:	2304      	movcc	r3, #4
 800a746:	f841 c003 	str.w	ip, [r1, r3]
 800a74a:	f1bc 0f00 	cmp.w	ip, #0
 800a74e:	d001      	beq.n	800a754 <__lshift+0xac>
 800a750:	f108 0602 	add.w	r6, r8, #2
 800a754:	3e01      	subs	r6, #1
 800a756:	4638      	mov	r0, r7
 800a758:	612e      	str	r6, [r5, #16]
 800a75a:	4621      	mov	r1, r4
 800a75c:	f7ff fdd2 	bl	800a304 <_Bfree>
 800a760:	4628      	mov	r0, r5
 800a762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a766:	f842 0f04 	str.w	r0, [r2, #4]!
 800a76a:	3301      	adds	r3, #1
 800a76c:	e7c1      	b.n	800a6f2 <__lshift+0x4a>
 800a76e:	3904      	subs	r1, #4
 800a770:	f853 2b04 	ldr.w	r2, [r3], #4
 800a774:	f841 2f04 	str.w	r2, [r1, #4]!
 800a778:	4298      	cmp	r0, r3
 800a77a:	d8f9      	bhi.n	800a770 <__lshift+0xc8>
 800a77c:	e7ea      	b.n	800a754 <__lshift+0xac>
 800a77e:	bf00      	nop
 800a780:	0800cac0 	.word	0x0800cac0
 800a784:	0800cad1 	.word	0x0800cad1

0800a788 <__mcmp>:
 800a788:	b530      	push	{r4, r5, lr}
 800a78a:	6902      	ldr	r2, [r0, #16]
 800a78c:	690c      	ldr	r4, [r1, #16]
 800a78e:	1b12      	subs	r2, r2, r4
 800a790:	d10e      	bne.n	800a7b0 <__mcmp+0x28>
 800a792:	f100 0314 	add.w	r3, r0, #20
 800a796:	3114      	adds	r1, #20
 800a798:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a79c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a7a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a7a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a7a8:	42a5      	cmp	r5, r4
 800a7aa:	d003      	beq.n	800a7b4 <__mcmp+0x2c>
 800a7ac:	d305      	bcc.n	800a7ba <__mcmp+0x32>
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	bd30      	pop	{r4, r5, pc}
 800a7b4:	4283      	cmp	r3, r0
 800a7b6:	d3f3      	bcc.n	800a7a0 <__mcmp+0x18>
 800a7b8:	e7fa      	b.n	800a7b0 <__mcmp+0x28>
 800a7ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a7be:	e7f7      	b.n	800a7b0 <__mcmp+0x28>

0800a7c0 <__mdiff>:
 800a7c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c4:	460c      	mov	r4, r1
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	4611      	mov	r1, r2
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	4690      	mov	r8, r2
 800a7ce:	f7ff ffdb 	bl	800a788 <__mcmp>
 800a7d2:	1e05      	subs	r5, r0, #0
 800a7d4:	d110      	bne.n	800a7f8 <__mdiff+0x38>
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	4630      	mov	r0, r6
 800a7da:	f7ff fd53 	bl	800a284 <_Balloc>
 800a7de:	b930      	cbnz	r0, 800a7ee <__mdiff+0x2e>
 800a7e0:	4b3a      	ldr	r3, [pc, #232]	; (800a8cc <__mdiff+0x10c>)
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	f240 2132 	movw	r1, #562	; 0x232
 800a7e8:	4839      	ldr	r0, [pc, #228]	; (800a8d0 <__mdiff+0x110>)
 800a7ea:	f000 fb31 	bl	800ae50 <__assert_func>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f8:	bfa4      	itt	ge
 800a7fa:	4643      	movge	r3, r8
 800a7fc:	46a0      	movge	r8, r4
 800a7fe:	4630      	mov	r0, r6
 800a800:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a804:	bfa6      	itte	ge
 800a806:	461c      	movge	r4, r3
 800a808:	2500      	movge	r5, #0
 800a80a:	2501      	movlt	r5, #1
 800a80c:	f7ff fd3a 	bl	800a284 <_Balloc>
 800a810:	b920      	cbnz	r0, 800a81c <__mdiff+0x5c>
 800a812:	4b2e      	ldr	r3, [pc, #184]	; (800a8cc <__mdiff+0x10c>)
 800a814:	4602      	mov	r2, r0
 800a816:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a81a:	e7e5      	b.n	800a7e8 <__mdiff+0x28>
 800a81c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a820:	6926      	ldr	r6, [r4, #16]
 800a822:	60c5      	str	r5, [r0, #12]
 800a824:	f104 0914 	add.w	r9, r4, #20
 800a828:	f108 0514 	add.w	r5, r8, #20
 800a82c:	f100 0e14 	add.w	lr, r0, #20
 800a830:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a834:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a838:	f108 0210 	add.w	r2, r8, #16
 800a83c:	46f2      	mov	sl, lr
 800a83e:	2100      	movs	r1, #0
 800a840:	f859 3b04 	ldr.w	r3, [r9], #4
 800a844:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a848:	fa1f f883 	uxth.w	r8, r3
 800a84c:	fa11 f18b 	uxtah	r1, r1, fp
 800a850:	0c1b      	lsrs	r3, r3, #16
 800a852:	eba1 0808 	sub.w	r8, r1, r8
 800a856:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a85a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a85e:	fa1f f888 	uxth.w	r8, r8
 800a862:	1419      	asrs	r1, r3, #16
 800a864:	454e      	cmp	r6, r9
 800a866:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a86a:	f84a 3b04 	str.w	r3, [sl], #4
 800a86e:	d8e7      	bhi.n	800a840 <__mdiff+0x80>
 800a870:	1b33      	subs	r3, r6, r4
 800a872:	3b15      	subs	r3, #21
 800a874:	f023 0303 	bic.w	r3, r3, #3
 800a878:	3304      	adds	r3, #4
 800a87a:	3415      	adds	r4, #21
 800a87c:	42a6      	cmp	r6, r4
 800a87e:	bf38      	it	cc
 800a880:	2304      	movcc	r3, #4
 800a882:	441d      	add	r5, r3
 800a884:	4473      	add	r3, lr
 800a886:	469e      	mov	lr, r3
 800a888:	462e      	mov	r6, r5
 800a88a:	4566      	cmp	r6, ip
 800a88c:	d30e      	bcc.n	800a8ac <__mdiff+0xec>
 800a88e:	f10c 0203 	add.w	r2, ip, #3
 800a892:	1b52      	subs	r2, r2, r5
 800a894:	f022 0203 	bic.w	r2, r2, #3
 800a898:	3d03      	subs	r5, #3
 800a89a:	45ac      	cmp	ip, r5
 800a89c:	bf38      	it	cc
 800a89e:	2200      	movcc	r2, #0
 800a8a0:	441a      	add	r2, r3
 800a8a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a8a6:	b17b      	cbz	r3, 800a8c8 <__mdiff+0x108>
 800a8a8:	6107      	str	r7, [r0, #16]
 800a8aa:	e7a3      	b.n	800a7f4 <__mdiff+0x34>
 800a8ac:	f856 8b04 	ldr.w	r8, [r6], #4
 800a8b0:	fa11 f288 	uxtah	r2, r1, r8
 800a8b4:	1414      	asrs	r4, r2, #16
 800a8b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a8ba:	b292      	uxth	r2, r2
 800a8bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a8c0:	f84e 2b04 	str.w	r2, [lr], #4
 800a8c4:	1421      	asrs	r1, r4, #16
 800a8c6:	e7e0      	b.n	800a88a <__mdiff+0xca>
 800a8c8:	3f01      	subs	r7, #1
 800a8ca:	e7ea      	b.n	800a8a2 <__mdiff+0xe2>
 800a8cc:	0800cac0 	.word	0x0800cac0
 800a8d0:	0800cad1 	.word	0x0800cad1

0800a8d4 <__d2b>:
 800a8d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8d8:	4689      	mov	r9, r1
 800a8da:	2101      	movs	r1, #1
 800a8dc:	ec57 6b10 	vmov	r6, r7, d0
 800a8e0:	4690      	mov	r8, r2
 800a8e2:	f7ff fccf 	bl	800a284 <_Balloc>
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	b930      	cbnz	r0, 800a8f8 <__d2b+0x24>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	4b25      	ldr	r3, [pc, #148]	; (800a984 <__d2b+0xb0>)
 800a8ee:	4826      	ldr	r0, [pc, #152]	; (800a988 <__d2b+0xb4>)
 800a8f0:	f240 310a 	movw	r1, #778	; 0x30a
 800a8f4:	f000 faac 	bl	800ae50 <__assert_func>
 800a8f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a8fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a900:	bb35      	cbnz	r5, 800a950 <__d2b+0x7c>
 800a902:	2e00      	cmp	r6, #0
 800a904:	9301      	str	r3, [sp, #4]
 800a906:	d028      	beq.n	800a95a <__d2b+0x86>
 800a908:	4668      	mov	r0, sp
 800a90a:	9600      	str	r6, [sp, #0]
 800a90c:	f7ff fd82 	bl	800a414 <__lo0bits>
 800a910:	9900      	ldr	r1, [sp, #0]
 800a912:	b300      	cbz	r0, 800a956 <__d2b+0x82>
 800a914:	9a01      	ldr	r2, [sp, #4]
 800a916:	f1c0 0320 	rsb	r3, r0, #32
 800a91a:	fa02 f303 	lsl.w	r3, r2, r3
 800a91e:	430b      	orrs	r3, r1
 800a920:	40c2      	lsrs	r2, r0
 800a922:	6163      	str	r3, [r4, #20]
 800a924:	9201      	str	r2, [sp, #4]
 800a926:	9b01      	ldr	r3, [sp, #4]
 800a928:	61a3      	str	r3, [r4, #24]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	bf14      	ite	ne
 800a92e:	2202      	movne	r2, #2
 800a930:	2201      	moveq	r2, #1
 800a932:	6122      	str	r2, [r4, #16]
 800a934:	b1d5      	cbz	r5, 800a96c <__d2b+0x98>
 800a936:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a93a:	4405      	add	r5, r0
 800a93c:	f8c9 5000 	str.w	r5, [r9]
 800a940:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a944:	f8c8 0000 	str.w	r0, [r8]
 800a948:	4620      	mov	r0, r4
 800a94a:	b003      	add	sp, #12
 800a94c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a950:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a954:	e7d5      	b.n	800a902 <__d2b+0x2e>
 800a956:	6161      	str	r1, [r4, #20]
 800a958:	e7e5      	b.n	800a926 <__d2b+0x52>
 800a95a:	a801      	add	r0, sp, #4
 800a95c:	f7ff fd5a 	bl	800a414 <__lo0bits>
 800a960:	9b01      	ldr	r3, [sp, #4]
 800a962:	6163      	str	r3, [r4, #20]
 800a964:	2201      	movs	r2, #1
 800a966:	6122      	str	r2, [r4, #16]
 800a968:	3020      	adds	r0, #32
 800a96a:	e7e3      	b.n	800a934 <__d2b+0x60>
 800a96c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a970:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a974:	f8c9 0000 	str.w	r0, [r9]
 800a978:	6918      	ldr	r0, [r3, #16]
 800a97a:	f7ff fd2b 	bl	800a3d4 <__hi0bits>
 800a97e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a982:	e7df      	b.n	800a944 <__d2b+0x70>
 800a984:	0800cac0 	.word	0x0800cac0
 800a988:	0800cad1 	.word	0x0800cad1

0800a98c <_calloc_r>:
 800a98c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a98e:	fba1 2402 	umull	r2, r4, r1, r2
 800a992:	b94c      	cbnz	r4, 800a9a8 <_calloc_r+0x1c>
 800a994:	4611      	mov	r1, r2
 800a996:	9201      	str	r2, [sp, #4]
 800a998:	f000 f87a 	bl	800aa90 <_malloc_r>
 800a99c:	9a01      	ldr	r2, [sp, #4]
 800a99e:	4605      	mov	r5, r0
 800a9a0:	b930      	cbnz	r0, 800a9b0 <_calloc_r+0x24>
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	b003      	add	sp, #12
 800a9a6:	bd30      	pop	{r4, r5, pc}
 800a9a8:	220c      	movs	r2, #12
 800a9aa:	6002      	str	r2, [r0, #0]
 800a9ac:	2500      	movs	r5, #0
 800a9ae:	e7f8      	b.n	800a9a2 <_calloc_r+0x16>
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	f7fe f88d 	bl	8008ad0 <memset>
 800a9b6:	e7f4      	b.n	800a9a2 <_calloc_r+0x16>

0800a9b8 <_free_r>:
 800a9b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9ba:	2900      	cmp	r1, #0
 800a9bc:	d044      	beq.n	800aa48 <_free_r+0x90>
 800a9be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9c2:	9001      	str	r0, [sp, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f1a1 0404 	sub.w	r4, r1, #4
 800a9ca:	bfb8      	it	lt
 800a9cc:	18e4      	addlt	r4, r4, r3
 800a9ce:	f000 fa9b 	bl	800af08 <__malloc_lock>
 800a9d2:	4a1e      	ldr	r2, [pc, #120]	; (800aa4c <_free_r+0x94>)
 800a9d4:	9801      	ldr	r0, [sp, #4]
 800a9d6:	6813      	ldr	r3, [r2, #0]
 800a9d8:	b933      	cbnz	r3, 800a9e8 <_free_r+0x30>
 800a9da:	6063      	str	r3, [r4, #4]
 800a9dc:	6014      	str	r4, [r2, #0]
 800a9de:	b003      	add	sp, #12
 800a9e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9e4:	f000 ba96 	b.w	800af14 <__malloc_unlock>
 800a9e8:	42a3      	cmp	r3, r4
 800a9ea:	d908      	bls.n	800a9fe <_free_r+0x46>
 800a9ec:	6825      	ldr	r5, [r4, #0]
 800a9ee:	1961      	adds	r1, r4, r5
 800a9f0:	428b      	cmp	r3, r1
 800a9f2:	bf01      	itttt	eq
 800a9f4:	6819      	ldreq	r1, [r3, #0]
 800a9f6:	685b      	ldreq	r3, [r3, #4]
 800a9f8:	1949      	addeq	r1, r1, r5
 800a9fa:	6021      	streq	r1, [r4, #0]
 800a9fc:	e7ed      	b.n	800a9da <_free_r+0x22>
 800a9fe:	461a      	mov	r2, r3
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	b10b      	cbz	r3, 800aa08 <_free_r+0x50>
 800aa04:	42a3      	cmp	r3, r4
 800aa06:	d9fa      	bls.n	800a9fe <_free_r+0x46>
 800aa08:	6811      	ldr	r1, [r2, #0]
 800aa0a:	1855      	adds	r5, r2, r1
 800aa0c:	42a5      	cmp	r5, r4
 800aa0e:	d10b      	bne.n	800aa28 <_free_r+0x70>
 800aa10:	6824      	ldr	r4, [r4, #0]
 800aa12:	4421      	add	r1, r4
 800aa14:	1854      	adds	r4, r2, r1
 800aa16:	42a3      	cmp	r3, r4
 800aa18:	6011      	str	r1, [r2, #0]
 800aa1a:	d1e0      	bne.n	800a9de <_free_r+0x26>
 800aa1c:	681c      	ldr	r4, [r3, #0]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	6053      	str	r3, [r2, #4]
 800aa22:	4421      	add	r1, r4
 800aa24:	6011      	str	r1, [r2, #0]
 800aa26:	e7da      	b.n	800a9de <_free_r+0x26>
 800aa28:	d902      	bls.n	800aa30 <_free_r+0x78>
 800aa2a:	230c      	movs	r3, #12
 800aa2c:	6003      	str	r3, [r0, #0]
 800aa2e:	e7d6      	b.n	800a9de <_free_r+0x26>
 800aa30:	6825      	ldr	r5, [r4, #0]
 800aa32:	1961      	adds	r1, r4, r5
 800aa34:	428b      	cmp	r3, r1
 800aa36:	bf04      	itt	eq
 800aa38:	6819      	ldreq	r1, [r3, #0]
 800aa3a:	685b      	ldreq	r3, [r3, #4]
 800aa3c:	6063      	str	r3, [r4, #4]
 800aa3e:	bf04      	itt	eq
 800aa40:	1949      	addeq	r1, r1, r5
 800aa42:	6021      	streq	r1, [r4, #0]
 800aa44:	6054      	str	r4, [r2, #4]
 800aa46:	e7ca      	b.n	800a9de <_free_r+0x26>
 800aa48:	b003      	add	sp, #12
 800aa4a:	bd30      	pop	{r4, r5, pc}
 800aa4c:	2000043c 	.word	0x2000043c

0800aa50 <sbrk_aligned>:
 800aa50:	b570      	push	{r4, r5, r6, lr}
 800aa52:	4e0e      	ldr	r6, [pc, #56]	; (800aa8c <sbrk_aligned+0x3c>)
 800aa54:	460c      	mov	r4, r1
 800aa56:	6831      	ldr	r1, [r6, #0]
 800aa58:	4605      	mov	r5, r0
 800aa5a:	b911      	cbnz	r1, 800aa62 <sbrk_aligned+0x12>
 800aa5c:	f000 f9e8 	bl	800ae30 <_sbrk_r>
 800aa60:	6030      	str	r0, [r6, #0]
 800aa62:	4621      	mov	r1, r4
 800aa64:	4628      	mov	r0, r5
 800aa66:	f000 f9e3 	bl	800ae30 <_sbrk_r>
 800aa6a:	1c43      	adds	r3, r0, #1
 800aa6c:	d00a      	beq.n	800aa84 <sbrk_aligned+0x34>
 800aa6e:	1cc4      	adds	r4, r0, #3
 800aa70:	f024 0403 	bic.w	r4, r4, #3
 800aa74:	42a0      	cmp	r0, r4
 800aa76:	d007      	beq.n	800aa88 <sbrk_aligned+0x38>
 800aa78:	1a21      	subs	r1, r4, r0
 800aa7a:	4628      	mov	r0, r5
 800aa7c:	f000 f9d8 	bl	800ae30 <_sbrk_r>
 800aa80:	3001      	adds	r0, #1
 800aa82:	d101      	bne.n	800aa88 <sbrk_aligned+0x38>
 800aa84:	f04f 34ff 	mov.w	r4, #4294967295
 800aa88:	4620      	mov	r0, r4
 800aa8a:	bd70      	pop	{r4, r5, r6, pc}
 800aa8c:	20000440 	.word	0x20000440

0800aa90 <_malloc_r>:
 800aa90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa94:	1ccd      	adds	r5, r1, #3
 800aa96:	f025 0503 	bic.w	r5, r5, #3
 800aa9a:	3508      	adds	r5, #8
 800aa9c:	2d0c      	cmp	r5, #12
 800aa9e:	bf38      	it	cc
 800aaa0:	250c      	movcc	r5, #12
 800aaa2:	2d00      	cmp	r5, #0
 800aaa4:	4607      	mov	r7, r0
 800aaa6:	db01      	blt.n	800aaac <_malloc_r+0x1c>
 800aaa8:	42a9      	cmp	r1, r5
 800aaaa:	d905      	bls.n	800aab8 <_malloc_r+0x28>
 800aaac:	230c      	movs	r3, #12
 800aaae:	603b      	str	r3, [r7, #0]
 800aab0:	2600      	movs	r6, #0
 800aab2:	4630      	mov	r0, r6
 800aab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aab8:	4e2e      	ldr	r6, [pc, #184]	; (800ab74 <_malloc_r+0xe4>)
 800aaba:	f000 fa25 	bl	800af08 <__malloc_lock>
 800aabe:	6833      	ldr	r3, [r6, #0]
 800aac0:	461c      	mov	r4, r3
 800aac2:	bb34      	cbnz	r4, 800ab12 <_malloc_r+0x82>
 800aac4:	4629      	mov	r1, r5
 800aac6:	4638      	mov	r0, r7
 800aac8:	f7ff ffc2 	bl	800aa50 <sbrk_aligned>
 800aacc:	1c43      	adds	r3, r0, #1
 800aace:	4604      	mov	r4, r0
 800aad0:	d14d      	bne.n	800ab6e <_malloc_r+0xde>
 800aad2:	6834      	ldr	r4, [r6, #0]
 800aad4:	4626      	mov	r6, r4
 800aad6:	2e00      	cmp	r6, #0
 800aad8:	d140      	bne.n	800ab5c <_malloc_r+0xcc>
 800aada:	6823      	ldr	r3, [r4, #0]
 800aadc:	4631      	mov	r1, r6
 800aade:	4638      	mov	r0, r7
 800aae0:	eb04 0803 	add.w	r8, r4, r3
 800aae4:	f000 f9a4 	bl	800ae30 <_sbrk_r>
 800aae8:	4580      	cmp	r8, r0
 800aaea:	d13a      	bne.n	800ab62 <_malloc_r+0xd2>
 800aaec:	6821      	ldr	r1, [r4, #0]
 800aaee:	3503      	adds	r5, #3
 800aaf0:	1a6d      	subs	r5, r5, r1
 800aaf2:	f025 0503 	bic.w	r5, r5, #3
 800aaf6:	3508      	adds	r5, #8
 800aaf8:	2d0c      	cmp	r5, #12
 800aafa:	bf38      	it	cc
 800aafc:	250c      	movcc	r5, #12
 800aafe:	4629      	mov	r1, r5
 800ab00:	4638      	mov	r0, r7
 800ab02:	f7ff ffa5 	bl	800aa50 <sbrk_aligned>
 800ab06:	3001      	adds	r0, #1
 800ab08:	d02b      	beq.n	800ab62 <_malloc_r+0xd2>
 800ab0a:	6823      	ldr	r3, [r4, #0]
 800ab0c:	442b      	add	r3, r5
 800ab0e:	6023      	str	r3, [r4, #0]
 800ab10:	e00e      	b.n	800ab30 <_malloc_r+0xa0>
 800ab12:	6822      	ldr	r2, [r4, #0]
 800ab14:	1b52      	subs	r2, r2, r5
 800ab16:	d41e      	bmi.n	800ab56 <_malloc_r+0xc6>
 800ab18:	2a0b      	cmp	r2, #11
 800ab1a:	d916      	bls.n	800ab4a <_malloc_r+0xba>
 800ab1c:	1961      	adds	r1, r4, r5
 800ab1e:	42a3      	cmp	r3, r4
 800ab20:	6025      	str	r5, [r4, #0]
 800ab22:	bf18      	it	ne
 800ab24:	6059      	strne	r1, [r3, #4]
 800ab26:	6863      	ldr	r3, [r4, #4]
 800ab28:	bf08      	it	eq
 800ab2a:	6031      	streq	r1, [r6, #0]
 800ab2c:	5162      	str	r2, [r4, r5]
 800ab2e:	604b      	str	r3, [r1, #4]
 800ab30:	4638      	mov	r0, r7
 800ab32:	f104 060b 	add.w	r6, r4, #11
 800ab36:	f000 f9ed 	bl	800af14 <__malloc_unlock>
 800ab3a:	f026 0607 	bic.w	r6, r6, #7
 800ab3e:	1d23      	adds	r3, r4, #4
 800ab40:	1af2      	subs	r2, r6, r3
 800ab42:	d0b6      	beq.n	800aab2 <_malloc_r+0x22>
 800ab44:	1b9b      	subs	r3, r3, r6
 800ab46:	50a3      	str	r3, [r4, r2]
 800ab48:	e7b3      	b.n	800aab2 <_malloc_r+0x22>
 800ab4a:	6862      	ldr	r2, [r4, #4]
 800ab4c:	42a3      	cmp	r3, r4
 800ab4e:	bf0c      	ite	eq
 800ab50:	6032      	streq	r2, [r6, #0]
 800ab52:	605a      	strne	r2, [r3, #4]
 800ab54:	e7ec      	b.n	800ab30 <_malloc_r+0xa0>
 800ab56:	4623      	mov	r3, r4
 800ab58:	6864      	ldr	r4, [r4, #4]
 800ab5a:	e7b2      	b.n	800aac2 <_malloc_r+0x32>
 800ab5c:	4634      	mov	r4, r6
 800ab5e:	6876      	ldr	r6, [r6, #4]
 800ab60:	e7b9      	b.n	800aad6 <_malloc_r+0x46>
 800ab62:	230c      	movs	r3, #12
 800ab64:	603b      	str	r3, [r7, #0]
 800ab66:	4638      	mov	r0, r7
 800ab68:	f000 f9d4 	bl	800af14 <__malloc_unlock>
 800ab6c:	e7a1      	b.n	800aab2 <_malloc_r+0x22>
 800ab6e:	6025      	str	r5, [r4, #0]
 800ab70:	e7de      	b.n	800ab30 <_malloc_r+0xa0>
 800ab72:	bf00      	nop
 800ab74:	2000043c 	.word	0x2000043c

0800ab78 <__ssputs_r>:
 800ab78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab7c:	688e      	ldr	r6, [r1, #8]
 800ab7e:	429e      	cmp	r6, r3
 800ab80:	4682      	mov	sl, r0
 800ab82:	460c      	mov	r4, r1
 800ab84:	4690      	mov	r8, r2
 800ab86:	461f      	mov	r7, r3
 800ab88:	d838      	bhi.n	800abfc <__ssputs_r+0x84>
 800ab8a:	898a      	ldrh	r2, [r1, #12]
 800ab8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab90:	d032      	beq.n	800abf8 <__ssputs_r+0x80>
 800ab92:	6825      	ldr	r5, [r4, #0]
 800ab94:	6909      	ldr	r1, [r1, #16]
 800ab96:	eba5 0901 	sub.w	r9, r5, r1
 800ab9a:	6965      	ldr	r5, [r4, #20]
 800ab9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aba0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aba4:	3301      	adds	r3, #1
 800aba6:	444b      	add	r3, r9
 800aba8:	106d      	asrs	r5, r5, #1
 800abaa:	429d      	cmp	r5, r3
 800abac:	bf38      	it	cc
 800abae:	461d      	movcc	r5, r3
 800abb0:	0553      	lsls	r3, r2, #21
 800abb2:	d531      	bpl.n	800ac18 <__ssputs_r+0xa0>
 800abb4:	4629      	mov	r1, r5
 800abb6:	f7ff ff6b 	bl	800aa90 <_malloc_r>
 800abba:	4606      	mov	r6, r0
 800abbc:	b950      	cbnz	r0, 800abd4 <__ssputs_r+0x5c>
 800abbe:	230c      	movs	r3, #12
 800abc0:	f8ca 3000 	str.w	r3, [sl]
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abca:	81a3      	strh	r3, [r4, #12]
 800abcc:	f04f 30ff 	mov.w	r0, #4294967295
 800abd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abd4:	6921      	ldr	r1, [r4, #16]
 800abd6:	464a      	mov	r2, r9
 800abd8:	f7fd ff6c 	bl	8008ab4 <memcpy>
 800abdc:	89a3      	ldrh	r3, [r4, #12]
 800abde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800abe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abe6:	81a3      	strh	r3, [r4, #12]
 800abe8:	6126      	str	r6, [r4, #16]
 800abea:	6165      	str	r5, [r4, #20]
 800abec:	444e      	add	r6, r9
 800abee:	eba5 0509 	sub.w	r5, r5, r9
 800abf2:	6026      	str	r6, [r4, #0]
 800abf4:	60a5      	str	r5, [r4, #8]
 800abf6:	463e      	mov	r6, r7
 800abf8:	42be      	cmp	r6, r7
 800abfa:	d900      	bls.n	800abfe <__ssputs_r+0x86>
 800abfc:	463e      	mov	r6, r7
 800abfe:	6820      	ldr	r0, [r4, #0]
 800ac00:	4632      	mov	r2, r6
 800ac02:	4641      	mov	r1, r8
 800ac04:	f000 f966 	bl	800aed4 <memmove>
 800ac08:	68a3      	ldr	r3, [r4, #8]
 800ac0a:	1b9b      	subs	r3, r3, r6
 800ac0c:	60a3      	str	r3, [r4, #8]
 800ac0e:	6823      	ldr	r3, [r4, #0]
 800ac10:	4433      	add	r3, r6
 800ac12:	6023      	str	r3, [r4, #0]
 800ac14:	2000      	movs	r0, #0
 800ac16:	e7db      	b.n	800abd0 <__ssputs_r+0x58>
 800ac18:	462a      	mov	r2, r5
 800ac1a:	f000 f981 	bl	800af20 <_realloc_r>
 800ac1e:	4606      	mov	r6, r0
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d1e1      	bne.n	800abe8 <__ssputs_r+0x70>
 800ac24:	6921      	ldr	r1, [r4, #16]
 800ac26:	4650      	mov	r0, sl
 800ac28:	f7ff fec6 	bl	800a9b8 <_free_r>
 800ac2c:	e7c7      	b.n	800abbe <__ssputs_r+0x46>
	...

0800ac30 <_svfiprintf_r>:
 800ac30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac34:	4698      	mov	r8, r3
 800ac36:	898b      	ldrh	r3, [r1, #12]
 800ac38:	061b      	lsls	r3, r3, #24
 800ac3a:	b09d      	sub	sp, #116	; 0x74
 800ac3c:	4607      	mov	r7, r0
 800ac3e:	460d      	mov	r5, r1
 800ac40:	4614      	mov	r4, r2
 800ac42:	d50e      	bpl.n	800ac62 <_svfiprintf_r+0x32>
 800ac44:	690b      	ldr	r3, [r1, #16]
 800ac46:	b963      	cbnz	r3, 800ac62 <_svfiprintf_r+0x32>
 800ac48:	2140      	movs	r1, #64	; 0x40
 800ac4a:	f7ff ff21 	bl	800aa90 <_malloc_r>
 800ac4e:	6028      	str	r0, [r5, #0]
 800ac50:	6128      	str	r0, [r5, #16]
 800ac52:	b920      	cbnz	r0, 800ac5e <_svfiprintf_r+0x2e>
 800ac54:	230c      	movs	r3, #12
 800ac56:	603b      	str	r3, [r7, #0]
 800ac58:	f04f 30ff 	mov.w	r0, #4294967295
 800ac5c:	e0d1      	b.n	800ae02 <_svfiprintf_r+0x1d2>
 800ac5e:	2340      	movs	r3, #64	; 0x40
 800ac60:	616b      	str	r3, [r5, #20]
 800ac62:	2300      	movs	r3, #0
 800ac64:	9309      	str	r3, [sp, #36]	; 0x24
 800ac66:	2320      	movs	r3, #32
 800ac68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac70:	2330      	movs	r3, #48	; 0x30
 800ac72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ae1c <_svfiprintf_r+0x1ec>
 800ac76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac7a:	f04f 0901 	mov.w	r9, #1
 800ac7e:	4623      	mov	r3, r4
 800ac80:	469a      	mov	sl, r3
 800ac82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac86:	b10a      	cbz	r2, 800ac8c <_svfiprintf_r+0x5c>
 800ac88:	2a25      	cmp	r2, #37	; 0x25
 800ac8a:	d1f9      	bne.n	800ac80 <_svfiprintf_r+0x50>
 800ac8c:	ebba 0b04 	subs.w	fp, sl, r4
 800ac90:	d00b      	beq.n	800acaa <_svfiprintf_r+0x7a>
 800ac92:	465b      	mov	r3, fp
 800ac94:	4622      	mov	r2, r4
 800ac96:	4629      	mov	r1, r5
 800ac98:	4638      	mov	r0, r7
 800ac9a:	f7ff ff6d 	bl	800ab78 <__ssputs_r>
 800ac9e:	3001      	adds	r0, #1
 800aca0:	f000 80aa 	beq.w	800adf8 <_svfiprintf_r+0x1c8>
 800aca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aca6:	445a      	add	r2, fp
 800aca8:	9209      	str	r2, [sp, #36]	; 0x24
 800acaa:	f89a 3000 	ldrb.w	r3, [sl]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f000 80a2 	beq.w	800adf8 <_svfiprintf_r+0x1c8>
 800acb4:	2300      	movs	r3, #0
 800acb6:	f04f 32ff 	mov.w	r2, #4294967295
 800acba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acbe:	f10a 0a01 	add.w	sl, sl, #1
 800acc2:	9304      	str	r3, [sp, #16]
 800acc4:	9307      	str	r3, [sp, #28]
 800acc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acca:	931a      	str	r3, [sp, #104]	; 0x68
 800accc:	4654      	mov	r4, sl
 800acce:	2205      	movs	r2, #5
 800acd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acd4:	4851      	ldr	r0, [pc, #324]	; (800ae1c <_svfiprintf_r+0x1ec>)
 800acd6:	f7f5 fa8b 	bl	80001f0 <memchr>
 800acda:	9a04      	ldr	r2, [sp, #16]
 800acdc:	b9d8      	cbnz	r0, 800ad16 <_svfiprintf_r+0xe6>
 800acde:	06d0      	lsls	r0, r2, #27
 800ace0:	bf44      	itt	mi
 800ace2:	2320      	movmi	r3, #32
 800ace4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ace8:	0711      	lsls	r1, r2, #28
 800acea:	bf44      	itt	mi
 800acec:	232b      	movmi	r3, #43	; 0x2b
 800acee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acf2:	f89a 3000 	ldrb.w	r3, [sl]
 800acf6:	2b2a      	cmp	r3, #42	; 0x2a
 800acf8:	d015      	beq.n	800ad26 <_svfiprintf_r+0xf6>
 800acfa:	9a07      	ldr	r2, [sp, #28]
 800acfc:	4654      	mov	r4, sl
 800acfe:	2000      	movs	r0, #0
 800ad00:	f04f 0c0a 	mov.w	ip, #10
 800ad04:	4621      	mov	r1, r4
 800ad06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad0a:	3b30      	subs	r3, #48	; 0x30
 800ad0c:	2b09      	cmp	r3, #9
 800ad0e:	d94e      	bls.n	800adae <_svfiprintf_r+0x17e>
 800ad10:	b1b0      	cbz	r0, 800ad40 <_svfiprintf_r+0x110>
 800ad12:	9207      	str	r2, [sp, #28]
 800ad14:	e014      	b.n	800ad40 <_svfiprintf_r+0x110>
 800ad16:	eba0 0308 	sub.w	r3, r0, r8
 800ad1a:	fa09 f303 	lsl.w	r3, r9, r3
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	9304      	str	r3, [sp, #16]
 800ad22:	46a2      	mov	sl, r4
 800ad24:	e7d2      	b.n	800accc <_svfiprintf_r+0x9c>
 800ad26:	9b03      	ldr	r3, [sp, #12]
 800ad28:	1d19      	adds	r1, r3, #4
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	9103      	str	r1, [sp, #12]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	bfbb      	ittet	lt
 800ad32:	425b      	neglt	r3, r3
 800ad34:	f042 0202 	orrlt.w	r2, r2, #2
 800ad38:	9307      	strge	r3, [sp, #28]
 800ad3a:	9307      	strlt	r3, [sp, #28]
 800ad3c:	bfb8      	it	lt
 800ad3e:	9204      	strlt	r2, [sp, #16]
 800ad40:	7823      	ldrb	r3, [r4, #0]
 800ad42:	2b2e      	cmp	r3, #46	; 0x2e
 800ad44:	d10c      	bne.n	800ad60 <_svfiprintf_r+0x130>
 800ad46:	7863      	ldrb	r3, [r4, #1]
 800ad48:	2b2a      	cmp	r3, #42	; 0x2a
 800ad4a:	d135      	bne.n	800adb8 <_svfiprintf_r+0x188>
 800ad4c:	9b03      	ldr	r3, [sp, #12]
 800ad4e:	1d1a      	adds	r2, r3, #4
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	9203      	str	r2, [sp, #12]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	bfb8      	it	lt
 800ad58:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad5c:	3402      	adds	r4, #2
 800ad5e:	9305      	str	r3, [sp, #20]
 800ad60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ae2c <_svfiprintf_r+0x1fc>
 800ad64:	7821      	ldrb	r1, [r4, #0]
 800ad66:	2203      	movs	r2, #3
 800ad68:	4650      	mov	r0, sl
 800ad6a:	f7f5 fa41 	bl	80001f0 <memchr>
 800ad6e:	b140      	cbz	r0, 800ad82 <_svfiprintf_r+0x152>
 800ad70:	2340      	movs	r3, #64	; 0x40
 800ad72:	eba0 000a 	sub.w	r0, r0, sl
 800ad76:	fa03 f000 	lsl.w	r0, r3, r0
 800ad7a:	9b04      	ldr	r3, [sp, #16]
 800ad7c:	4303      	orrs	r3, r0
 800ad7e:	3401      	adds	r4, #1
 800ad80:	9304      	str	r3, [sp, #16]
 800ad82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad86:	4826      	ldr	r0, [pc, #152]	; (800ae20 <_svfiprintf_r+0x1f0>)
 800ad88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad8c:	2206      	movs	r2, #6
 800ad8e:	f7f5 fa2f 	bl	80001f0 <memchr>
 800ad92:	2800      	cmp	r0, #0
 800ad94:	d038      	beq.n	800ae08 <_svfiprintf_r+0x1d8>
 800ad96:	4b23      	ldr	r3, [pc, #140]	; (800ae24 <_svfiprintf_r+0x1f4>)
 800ad98:	bb1b      	cbnz	r3, 800ade2 <_svfiprintf_r+0x1b2>
 800ad9a:	9b03      	ldr	r3, [sp, #12]
 800ad9c:	3307      	adds	r3, #7
 800ad9e:	f023 0307 	bic.w	r3, r3, #7
 800ada2:	3308      	adds	r3, #8
 800ada4:	9303      	str	r3, [sp, #12]
 800ada6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ada8:	4433      	add	r3, r6
 800adaa:	9309      	str	r3, [sp, #36]	; 0x24
 800adac:	e767      	b.n	800ac7e <_svfiprintf_r+0x4e>
 800adae:	fb0c 3202 	mla	r2, ip, r2, r3
 800adb2:	460c      	mov	r4, r1
 800adb4:	2001      	movs	r0, #1
 800adb6:	e7a5      	b.n	800ad04 <_svfiprintf_r+0xd4>
 800adb8:	2300      	movs	r3, #0
 800adba:	3401      	adds	r4, #1
 800adbc:	9305      	str	r3, [sp, #20]
 800adbe:	4619      	mov	r1, r3
 800adc0:	f04f 0c0a 	mov.w	ip, #10
 800adc4:	4620      	mov	r0, r4
 800adc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adca:	3a30      	subs	r2, #48	; 0x30
 800adcc:	2a09      	cmp	r2, #9
 800adce:	d903      	bls.n	800add8 <_svfiprintf_r+0x1a8>
 800add0:	2b00      	cmp	r3, #0
 800add2:	d0c5      	beq.n	800ad60 <_svfiprintf_r+0x130>
 800add4:	9105      	str	r1, [sp, #20]
 800add6:	e7c3      	b.n	800ad60 <_svfiprintf_r+0x130>
 800add8:	fb0c 2101 	mla	r1, ip, r1, r2
 800addc:	4604      	mov	r4, r0
 800adde:	2301      	movs	r3, #1
 800ade0:	e7f0      	b.n	800adc4 <_svfiprintf_r+0x194>
 800ade2:	ab03      	add	r3, sp, #12
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	462a      	mov	r2, r5
 800ade8:	4b0f      	ldr	r3, [pc, #60]	; (800ae28 <_svfiprintf_r+0x1f8>)
 800adea:	a904      	add	r1, sp, #16
 800adec:	4638      	mov	r0, r7
 800adee:	f7fd ff17 	bl	8008c20 <_printf_float>
 800adf2:	1c42      	adds	r2, r0, #1
 800adf4:	4606      	mov	r6, r0
 800adf6:	d1d6      	bne.n	800ada6 <_svfiprintf_r+0x176>
 800adf8:	89ab      	ldrh	r3, [r5, #12]
 800adfa:	065b      	lsls	r3, r3, #25
 800adfc:	f53f af2c 	bmi.w	800ac58 <_svfiprintf_r+0x28>
 800ae00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae02:	b01d      	add	sp, #116	; 0x74
 800ae04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae08:	ab03      	add	r3, sp, #12
 800ae0a:	9300      	str	r3, [sp, #0]
 800ae0c:	462a      	mov	r2, r5
 800ae0e:	4b06      	ldr	r3, [pc, #24]	; (800ae28 <_svfiprintf_r+0x1f8>)
 800ae10:	a904      	add	r1, sp, #16
 800ae12:	4638      	mov	r0, r7
 800ae14:	f7fe f9a8 	bl	8009168 <_printf_i>
 800ae18:	e7eb      	b.n	800adf2 <_svfiprintf_r+0x1c2>
 800ae1a:	bf00      	nop
 800ae1c:	0800cc2c 	.word	0x0800cc2c
 800ae20:	0800cc36 	.word	0x0800cc36
 800ae24:	08008c21 	.word	0x08008c21
 800ae28:	0800ab79 	.word	0x0800ab79
 800ae2c:	0800cc32 	.word	0x0800cc32

0800ae30 <_sbrk_r>:
 800ae30:	b538      	push	{r3, r4, r5, lr}
 800ae32:	4d06      	ldr	r5, [pc, #24]	; (800ae4c <_sbrk_r+0x1c>)
 800ae34:	2300      	movs	r3, #0
 800ae36:	4604      	mov	r4, r0
 800ae38:	4608      	mov	r0, r1
 800ae3a:	602b      	str	r3, [r5, #0]
 800ae3c:	f7f7 fae0 	bl	8002400 <_sbrk>
 800ae40:	1c43      	adds	r3, r0, #1
 800ae42:	d102      	bne.n	800ae4a <_sbrk_r+0x1a>
 800ae44:	682b      	ldr	r3, [r5, #0]
 800ae46:	b103      	cbz	r3, 800ae4a <_sbrk_r+0x1a>
 800ae48:	6023      	str	r3, [r4, #0]
 800ae4a:	bd38      	pop	{r3, r4, r5, pc}
 800ae4c:	20000444 	.word	0x20000444

0800ae50 <__assert_func>:
 800ae50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae52:	4614      	mov	r4, r2
 800ae54:	461a      	mov	r2, r3
 800ae56:	4b09      	ldr	r3, [pc, #36]	; (800ae7c <__assert_func+0x2c>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4605      	mov	r5, r0
 800ae5c:	68d8      	ldr	r0, [r3, #12]
 800ae5e:	b14c      	cbz	r4, 800ae74 <__assert_func+0x24>
 800ae60:	4b07      	ldr	r3, [pc, #28]	; (800ae80 <__assert_func+0x30>)
 800ae62:	9100      	str	r1, [sp, #0]
 800ae64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae68:	4906      	ldr	r1, [pc, #24]	; (800ae84 <__assert_func+0x34>)
 800ae6a:	462b      	mov	r3, r5
 800ae6c:	f000 f80e 	bl	800ae8c <fiprintf>
 800ae70:	f000 faac 	bl	800b3cc <abort>
 800ae74:	4b04      	ldr	r3, [pc, #16]	; (800ae88 <__assert_func+0x38>)
 800ae76:	461c      	mov	r4, r3
 800ae78:	e7f3      	b.n	800ae62 <__assert_func+0x12>
 800ae7a:	bf00      	nop
 800ae7c:	20000014 	.word	0x20000014
 800ae80:	0800cc3d 	.word	0x0800cc3d
 800ae84:	0800cc4a 	.word	0x0800cc4a
 800ae88:	0800cc78 	.word	0x0800cc78

0800ae8c <fiprintf>:
 800ae8c:	b40e      	push	{r1, r2, r3}
 800ae8e:	b503      	push	{r0, r1, lr}
 800ae90:	4601      	mov	r1, r0
 800ae92:	ab03      	add	r3, sp, #12
 800ae94:	4805      	ldr	r0, [pc, #20]	; (800aeac <fiprintf+0x20>)
 800ae96:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae9a:	6800      	ldr	r0, [r0, #0]
 800ae9c:	9301      	str	r3, [sp, #4]
 800ae9e:	f000 f897 	bl	800afd0 <_vfiprintf_r>
 800aea2:	b002      	add	sp, #8
 800aea4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aea8:	b003      	add	sp, #12
 800aeaa:	4770      	bx	lr
 800aeac:	20000014 	.word	0x20000014

0800aeb0 <__ascii_mbtowc>:
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	b901      	cbnz	r1, 800aeb6 <__ascii_mbtowc+0x6>
 800aeb4:	a901      	add	r1, sp, #4
 800aeb6:	b142      	cbz	r2, 800aeca <__ascii_mbtowc+0x1a>
 800aeb8:	b14b      	cbz	r3, 800aece <__ascii_mbtowc+0x1e>
 800aeba:	7813      	ldrb	r3, [r2, #0]
 800aebc:	600b      	str	r3, [r1, #0]
 800aebe:	7812      	ldrb	r2, [r2, #0]
 800aec0:	1e10      	subs	r0, r2, #0
 800aec2:	bf18      	it	ne
 800aec4:	2001      	movne	r0, #1
 800aec6:	b002      	add	sp, #8
 800aec8:	4770      	bx	lr
 800aeca:	4610      	mov	r0, r2
 800aecc:	e7fb      	b.n	800aec6 <__ascii_mbtowc+0x16>
 800aece:	f06f 0001 	mvn.w	r0, #1
 800aed2:	e7f8      	b.n	800aec6 <__ascii_mbtowc+0x16>

0800aed4 <memmove>:
 800aed4:	4288      	cmp	r0, r1
 800aed6:	b510      	push	{r4, lr}
 800aed8:	eb01 0402 	add.w	r4, r1, r2
 800aedc:	d902      	bls.n	800aee4 <memmove+0x10>
 800aede:	4284      	cmp	r4, r0
 800aee0:	4623      	mov	r3, r4
 800aee2:	d807      	bhi.n	800aef4 <memmove+0x20>
 800aee4:	1e43      	subs	r3, r0, #1
 800aee6:	42a1      	cmp	r1, r4
 800aee8:	d008      	beq.n	800aefc <memmove+0x28>
 800aeea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aef2:	e7f8      	b.n	800aee6 <memmove+0x12>
 800aef4:	4402      	add	r2, r0
 800aef6:	4601      	mov	r1, r0
 800aef8:	428a      	cmp	r2, r1
 800aefa:	d100      	bne.n	800aefe <memmove+0x2a>
 800aefc:	bd10      	pop	{r4, pc}
 800aefe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af06:	e7f7      	b.n	800aef8 <memmove+0x24>

0800af08 <__malloc_lock>:
 800af08:	4801      	ldr	r0, [pc, #4]	; (800af10 <__malloc_lock+0x8>)
 800af0a:	f000 bc1f 	b.w	800b74c <__retarget_lock_acquire_recursive>
 800af0e:	bf00      	nop
 800af10:	20000448 	.word	0x20000448

0800af14 <__malloc_unlock>:
 800af14:	4801      	ldr	r0, [pc, #4]	; (800af1c <__malloc_unlock+0x8>)
 800af16:	f000 bc1a 	b.w	800b74e <__retarget_lock_release_recursive>
 800af1a:	bf00      	nop
 800af1c:	20000448 	.word	0x20000448

0800af20 <_realloc_r>:
 800af20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af24:	4680      	mov	r8, r0
 800af26:	4614      	mov	r4, r2
 800af28:	460e      	mov	r6, r1
 800af2a:	b921      	cbnz	r1, 800af36 <_realloc_r+0x16>
 800af2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af30:	4611      	mov	r1, r2
 800af32:	f7ff bdad 	b.w	800aa90 <_malloc_r>
 800af36:	b92a      	cbnz	r2, 800af44 <_realloc_r+0x24>
 800af38:	f7ff fd3e 	bl	800a9b8 <_free_r>
 800af3c:	4625      	mov	r5, r4
 800af3e:	4628      	mov	r0, r5
 800af40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af44:	f000 fc6a 	bl	800b81c <_malloc_usable_size_r>
 800af48:	4284      	cmp	r4, r0
 800af4a:	4607      	mov	r7, r0
 800af4c:	d802      	bhi.n	800af54 <_realloc_r+0x34>
 800af4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af52:	d812      	bhi.n	800af7a <_realloc_r+0x5a>
 800af54:	4621      	mov	r1, r4
 800af56:	4640      	mov	r0, r8
 800af58:	f7ff fd9a 	bl	800aa90 <_malloc_r>
 800af5c:	4605      	mov	r5, r0
 800af5e:	2800      	cmp	r0, #0
 800af60:	d0ed      	beq.n	800af3e <_realloc_r+0x1e>
 800af62:	42bc      	cmp	r4, r7
 800af64:	4622      	mov	r2, r4
 800af66:	4631      	mov	r1, r6
 800af68:	bf28      	it	cs
 800af6a:	463a      	movcs	r2, r7
 800af6c:	f7fd fda2 	bl	8008ab4 <memcpy>
 800af70:	4631      	mov	r1, r6
 800af72:	4640      	mov	r0, r8
 800af74:	f7ff fd20 	bl	800a9b8 <_free_r>
 800af78:	e7e1      	b.n	800af3e <_realloc_r+0x1e>
 800af7a:	4635      	mov	r5, r6
 800af7c:	e7df      	b.n	800af3e <_realloc_r+0x1e>

0800af7e <__sfputc_r>:
 800af7e:	6893      	ldr	r3, [r2, #8]
 800af80:	3b01      	subs	r3, #1
 800af82:	2b00      	cmp	r3, #0
 800af84:	b410      	push	{r4}
 800af86:	6093      	str	r3, [r2, #8]
 800af88:	da08      	bge.n	800af9c <__sfputc_r+0x1e>
 800af8a:	6994      	ldr	r4, [r2, #24]
 800af8c:	42a3      	cmp	r3, r4
 800af8e:	db01      	blt.n	800af94 <__sfputc_r+0x16>
 800af90:	290a      	cmp	r1, #10
 800af92:	d103      	bne.n	800af9c <__sfputc_r+0x1e>
 800af94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af98:	f000 b94a 	b.w	800b230 <__swbuf_r>
 800af9c:	6813      	ldr	r3, [r2, #0]
 800af9e:	1c58      	adds	r0, r3, #1
 800afa0:	6010      	str	r0, [r2, #0]
 800afa2:	7019      	strb	r1, [r3, #0]
 800afa4:	4608      	mov	r0, r1
 800afa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <__sfputs_r>:
 800afac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afae:	4606      	mov	r6, r0
 800afb0:	460f      	mov	r7, r1
 800afb2:	4614      	mov	r4, r2
 800afb4:	18d5      	adds	r5, r2, r3
 800afb6:	42ac      	cmp	r4, r5
 800afb8:	d101      	bne.n	800afbe <__sfputs_r+0x12>
 800afba:	2000      	movs	r0, #0
 800afbc:	e007      	b.n	800afce <__sfputs_r+0x22>
 800afbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afc2:	463a      	mov	r2, r7
 800afc4:	4630      	mov	r0, r6
 800afc6:	f7ff ffda 	bl	800af7e <__sfputc_r>
 800afca:	1c43      	adds	r3, r0, #1
 800afcc:	d1f3      	bne.n	800afb6 <__sfputs_r+0xa>
 800afce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800afd0 <_vfiprintf_r>:
 800afd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd4:	460d      	mov	r5, r1
 800afd6:	b09d      	sub	sp, #116	; 0x74
 800afd8:	4614      	mov	r4, r2
 800afda:	4698      	mov	r8, r3
 800afdc:	4606      	mov	r6, r0
 800afde:	b118      	cbz	r0, 800afe8 <_vfiprintf_r+0x18>
 800afe0:	6983      	ldr	r3, [r0, #24]
 800afe2:	b90b      	cbnz	r3, 800afe8 <_vfiprintf_r+0x18>
 800afe4:	f000 fb14 	bl	800b610 <__sinit>
 800afe8:	4b89      	ldr	r3, [pc, #548]	; (800b210 <_vfiprintf_r+0x240>)
 800afea:	429d      	cmp	r5, r3
 800afec:	d11b      	bne.n	800b026 <_vfiprintf_r+0x56>
 800afee:	6875      	ldr	r5, [r6, #4]
 800aff0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aff2:	07d9      	lsls	r1, r3, #31
 800aff4:	d405      	bmi.n	800b002 <_vfiprintf_r+0x32>
 800aff6:	89ab      	ldrh	r3, [r5, #12]
 800aff8:	059a      	lsls	r2, r3, #22
 800affa:	d402      	bmi.n	800b002 <_vfiprintf_r+0x32>
 800affc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800affe:	f000 fba5 	bl	800b74c <__retarget_lock_acquire_recursive>
 800b002:	89ab      	ldrh	r3, [r5, #12]
 800b004:	071b      	lsls	r3, r3, #28
 800b006:	d501      	bpl.n	800b00c <_vfiprintf_r+0x3c>
 800b008:	692b      	ldr	r3, [r5, #16]
 800b00a:	b9eb      	cbnz	r3, 800b048 <_vfiprintf_r+0x78>
 800b00c:	4629      	mov	r1, r5
 800b00e:	4630      	mov	r0, r6
 800b010:	f000 f96e 	bl	800b2f0 <__swsetup_r>
 800b014:	b1c0      	cbz	r0, 800b048 <_vfiprintf_r+0x78>
 800b016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b018:	07dc      	lsls	r4, r3, #31
 800b01a:	d50e      	bpl.n	800b03a <_vfiprintf_r+0x6a>
 800b01c:	f04f 30ff 	mov.w	r0, #4294967295
 800b020:	b01d      	add	sp, #116	; 0x74
 800b022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b026:	4b7b      	ldr	r3, [pc, #492]	; (800b214 <_vfiprintf_r+0x244>)
 800b028:	429d      	cmp	r5, r3
 800b02a:	d101      	bne.n	800b030 <_vfiprintf_r+0x60>
 800b02c:	68b5      	ldr	r5, [r6, #8]
 800b02e:	e7df      	b.n	800aff0 <_vfiprintf_r+0x20>
 800b030:	4b79      	ldr	r3, [pc, #484]	; (800b218 <_vfiprintf_r+0x248>)
 800b032:	429d      	cmp	r5, r3
 800b034:	bf08      	it	eq
 800b036:	68f5      	ldreq	r5, [r6, #12]
 800b038:	e7da      	b.n	800aff0 <_vfiprintf_r+0x20>
 800b03a:	89ab      	ldrh	r3, [r5, #12]
 800b03c:	0598      	lsls	r0, r3, #22
 800b03e:	d4ed      	bmi.n	800b01c <_vfiprintf_r+0x4c>
 800b040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b042:	f000 fb84 	bl	800b74e <__retarget_lock_release_recursive>
 800b046:	e7e9      	b.n	800b01c <_vfiprintf_r+0x4c>
 800b048:	2300      	movs	r3, #0
 800b04a:	9309      	str	r3, [sp, #36]	; 0x24
 800b04c:	2320      	movs	r3, #32
 800b04e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b052:	f8cd 800c 	str.w	r8, [sp, #12]
 800b056:	2330      	movs	r3, #48	; 0x30
 800b058:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b21c <_vfiprintf_r+0x24c>
 800b05c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b060:	f04f 0901 	mov.w	r9, #1
 800b064:	4623      	mov	r3, r4
 800b066:	469a      	mov	sl, r3
 800b068:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b06c:	b10a      	cbz	r2, 800b072 <_vfiprintf_r+0xa2>
 800b06e:	2a25      	cmp	r2, #37	; 0x25
 800b070:	d1f9      	bne.n	800b066 <_vfiprintf_r+0x96>
 800b072:	ebba 0b04 	subs.w	fp, sl, r4
 800b076:	d00b      	beq.n	800b090 <_vfiprintf_r+0xc0>
 800b078:	465b      	mov	r3, fp
 800b07a:	4622      	mov	r2, r4
 800b07c:	4629      	mov	r1, r5
 800b07e:	4630      	mov	r0, r6
 800b080:	f7ff ff94 	bl	800afac <__sfputs_r>
 800b084:	3001      	adds	r0, #1
 800b086:	f000 80aa 	beq.w	800b1de <_vfiprintf_r+0x20e>
 800b08a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b08c:	445a      	add	r2, fp
 800b08e:	9209      	str	r2, [sp, #36]	; 0x24
 800b090:	f89a 3000 	ldrb.w	r3, [sl]
 800b094:	2b00      	cmp	r3, #0
 800b096:	f000 80a2 	beq.w	800b1de <_vfiprintf_r+0x20e>
 800b09a:	2300      	movs	r3, #0
 800b09c:	f04f 32ff 	mov.w	r2, #4294967295
 800b0a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0a4:	f10a 0a01 	add.w	sl, sl, #1
 800b0a8:	9304      	str	r3, [sp, #16]
 800b0aa:	9307      	str	r3, [sp, #28]
 800b0ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0b0:	931a      	str	r3, [sp, #104]	; 0x68
 800b0b2:	4654      	mov	r4, sl
 800b0b4:	2205      	movs	r2, #5
 800b0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ba:	4858      	ldr	r0, [pc, #352]	; (800b21c <_vfiprintf_r+0x24c>)
 800b0bc:	f7f5 f898 	bl	80001f0 <memchr>
 800b0c0:	9a04      	ldr	r2, [sp, #16]
 800b0c2:	b9d8      	cbnz	r0, 800b0fc <_vfiprintf_r+0x12c>
 800b0c4:	06d1      	lsls	r1, r2, #27
 800b0c6:	bf44      	itt	mi
 800b0c8:	2320      	movmi	r3, #32
 800b0ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0ce:	0713      	lsls	r3, r2, #28
 800b0d0:	bf44      	itt	mi
 800b0d2:	232b      	movmi	r3, #43	; 0x2b
 800b0d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b0dc:	2b2a      	cmp	r3, #42	; 0x2a
 800b0de:	d015      	beq.n	800b10c <_vfiprintf_r+0x13c>
 800b0e0:	9a07      	ldr	r2, [sp, #28]
 800b0e2:	4654      	mov	r4, sl
 800b0e4:	2000      	movs	r0, #0
 800b0e6:	f04f 0c0a 	mov.w	ip, #10
 800b0ea:	4621      	mov	r1, r4
 800b0ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0f0:	3b30      	subs	r3, #48	; 0x30
 800b0f2:	2b09      	cmp	r3, #9
 800b0f4:	d94e      	bls.n	800b194 <_vfiprintf_r+0x1c4>
 800b0f6:	b1b0      	cbz	r0, 800b126 <_vfiprintf_r+0x156>
 800b0f8:	9207      	str	r2, [sp, #28]
 800b0fa:	e014      	b.n	800b126 <_vfiprintf_r+0x156>
 800b0fc:	eba0 0308 	sub.w	r3, r0, r8
 800b100:	fa09 f303 	lsl.w	r3, r9, r3
 800b104:	4313      	orrs	r3, r2
 800b106:	9304      	str	r3, [sp, #16]
 800b108:	46a2      	mov	sl, r4
 800b10a:	e7d2      	b.n	800b0b2 <_vfiprintf_r+0xe2>
 800b10c:	9b03      	ldr	r3, [sp, #12]
 800b10e:	1d19      	adds	r1, r3, #4
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	9103      	str	r1, [sp, #12]
 800b114:	2b00      	cmp	r3, #0
 800b116:	bfbb      	ittet	lt
 800b118:	425b      	neglt	r3, r3
 800b11a:	f042 0202 	orrlt.w	r2, r2, #2
 800b11e:	9307      	strge	r3, [sp, #28]
 800b120:	9307      	strlt	r3, [sp, #28]
 800b122:	bfb8      	it	lt
 800b124:	9204      	strlt	r2, [sp, #16]
 800b126:	7823      	ldrb	r3, [r4, #0]
 800b128:	2b2e      	cmp	r3, #46	; 0x2e
 800b12a:	d10c      	bne.n	800b146 <_vfiprintf_r+0x176>
 800b12c:	7863      	ldrb	r3, [r4, #1]
 800b12e:	2b2a      	cmp	r3, #42	; 0x2a
 800b130:	d135      	bne.n	800b19e <_vfiprintf_r+0x1ce>
 800b132:	9b03      	ldr	r3, [sp, #12]
 800b134:	1d1a      	adds	r2, r3, #4
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	9203      	str	r2, [sp, #12]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	bfb8      	it	lt
 800b13e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b142:	3402      	adds	r4, #2
 800b144:	9305      	str	r3, [sp, #20]
 800b146:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b22c <_vfiprintf_r+0x25c>
 800b14a:	7821      	ldrb	r1, [r4, #0]
 800b14c:	2203      	movs	r2, #3
 800b14e:	4650      	mov	r0, sl
 800b150:	f7f5 f84e 	bl	80001f0 <memchr>
 800b154:	b140      	cbz	r0, 800b168 <_vfiprintf_r+0x198>
 800b156:	2340      	movs	r3, #64	; 0x40
 800b158:	eba0 000a 	sub.w	r0, r0, sl
 800b15c:	fa03 f000 	lsl.w	r0, r3, r0
 800b160:	9b04      	ldr	r3, [sp, #16]
 800b162:	4303      	orrs	r3, r0
 800b164:	3401      	adds	r4, #1
 800b166:	9304      	str	r3, [sp, #16]
 800b168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b16c:	482c      	ldr	r0, [pc, #176]	; (800b220 <_vfiprintf_r+0x250>)
 800b16e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b172:	2206      	movs	r2, #6
 800b174:	f7f5 f83c 	bl	80001f0 <memchr>
 800b178:	2800      	cmp	r0, #0
 800b17a:	d03f      	beq.n	800b1fc <_vfiprintf_r+0x22c>
 800b17c:	4b29      	ldr	r3, [pc, #164]	; (800b224 <_vfiprintf_r+0x254>)
 800b17e:	bb1b      	cbnz	r3, 800b1c8 <_vfiprintf_r+0x1f8>
 800b180:	9b03      	ldr	r3, [sp, #12]
 800b182:	3307      	adds	r3, #7
 800b184:	f023 0307 	bic.w	r3, r3, #7
 800b188:	3308      	adds	r3, #8
 800b18a:	9303      	str	r3, [sp, #12]
 800b18c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b18e:	443b      	add	r3, r7
 800b190:	9309      	str	r3, [sp, #36]	; 0x24
 800b192:	e767      	b.n	800b064 <_vfiprintf_r+0x94>
 800b194:	fb0c 3202 	mla	r2, ip, r2, r3
 800b198:	460c      	mov	r4, r1
 800b19a:	2001      	movs	r0, #1
 800b19c:	e7a5      	b.n	800b0ea <_vfiprintf_r+0x11a>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	3401      	adds	r4, #1
 800b1a2:	9305      	str	r3, [sp, #20]
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	f04f 0c0a 	mov.w	ip, #10
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1b0:	3a30      	subs	r2, #48	; 0x30
 800b1b2:	2a09      	cmp	r2, #9
 800b1b4:	d903      	bls.n	800b1be <_vfiprintf_r+0x1ee>
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d0c5      	beq.n	800b146 <_vfiprintf_r+0x176>
 800b1ba:	9105      	str	r1, [sp, #20]
 800b1bc:	e7c3      	b.n	800b146 <_vfiprintf_r+0x176>
 800b1be:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1c2:	4604      	mov	r4, r0
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e7f0      	b.n	800b1aa <_vfiprintf_r+0x1da>
 800b1c8:	ab03      	add	r3, sp, #12
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	462a      	mov	r2, r5
 800b1ce:	4b16      	ldr	r3, [pc, #88]	; (800b228 <_vfiprintf_r+0x258>)
 800b1d0:	a904      	add	r1, sp, #16
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	f7fd fd24 	bl	8008c20 <_printf_float>
 800b1d8:	4607      	mov	r7, r0
 800b1da:	1c78      	adds	r0, r7, #1
 800b1dc:	d1d6      	bne.n	800b18c <_vfiprintf_r+0x1bc>
 800b1de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1e0:	07d9      	lsls	r1, r3, #31
 800b1e2:	d405      	bmi.n	800b1f0 <_vfiprintf_r+0x220>
 800b1e4:	89ab      	ldrh	r3, [r5, #12]
 800b1e6:	059a      	lsls	r2, r3, #22
 800b1e8:	d402      	bmi.n	800b1f0 <_vfiprintf_r+0x220>
 800b1ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1ec:	f000 faaf 	bl	800b74e <__retarget_lock_release_recursive>
 800b1f0:	89ab      	ldrh	r3, [r5, #12]
 800b1f2:	065b      	lsls	r3, r3, #25
 800b1f4:	f53f af12 	bmi.w	800b01c <_vfiprintf_r+0x4c>
 800b1f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1fa:	e711      	b.n	800b020 <_vfiprintf_r+0x50>
 800b1fc:	ab03      	add	r3, sp, #12
 800b1fe:	9300      	str	r3, [sp, #0]
 800b200:	462a      	mov	r2, r5
 800b202:	4b09      	ldr	r3, [pc, #36]	; (800b228 <_vfiprintf_r+0x258>)
 800b204:	a904      	add	r1, sp, #16
 800b206:	4630      	mov	r0, r6
 800b208:	f7fd ffae 	bl	8009168 <_printf_i>
 800b20c:	e7e4      	b.n	800b1d8 <_vfiprintf_r+0x208>
 800b20e:	bf00      	nop
 800b210:	0800cca4 	.word	0x0800cca4
 800b214:	0800ccc4 	.word	0x0800ccc4
 800b218:	0800cc84 	.word	0x0800cc84
 800b21c:	0800cc2c 	.word	0x0800cc2c
 800b220:	0800cc36 	.word	0x0800cc36
 800b224:	08008c21 	.word	0x08008c21
 800b228:	0800afad 	.word	0x0800afad
 800b22c:	0800cc32 	.word	0x0800cc32

0800b230 <__swbuf_r>:
 800b230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b232:	460e      	mov	r6, r1
 800b234:	4614      	mov	r4, r2
 800b236:	4605      	mov	r5, r0
 800b238:	b118      	cbz	r0, 800b242 <__swbuf_r+0x12>
 800b23a:	6983      	ldr	r3, [r0, #24]
 800b23c:	b90b      	cbnz	r3, 800b242 <__swbuf_r+0x12>
 800b23e:	f000 f9e7 	bl	800b610 <__sinit>
 800b242:	4b21      	ldr	r3, [pc, #132]	; (800b2c8 <__swbuf_r+0x98>)
 800b244:	429c      	cmp	r4, r3
 800b246:	d12b      	bne.n	800b2a0 <__swbuf_r+0x70>
 800b248:	686c      	ldr	r4, [r5, #4]
 800b24a:	69a3      	ldr	r3, [r4, #24]
 800b24c:	60a3      	str	r3, [r4, #8]
 800b24e:	89a3      	ldrh	r3, [r4, #12]
 800b250:	071a      	lsls	r2, r3, #28
 800b252:	d52f      	bpl.n	800b2b4 <__swbuf_r+0x84>
 800b254:	6923      	ldr	r3, [r4, #16]
 800b256:	b36b      	cbz	r3, 800b2b4 <__swbuf_r+0x84>
 800b258:	6923      	ldr	r3, [r4, #16]
 800b25a:	6820      	ldr	r0, [r4, #0]
 800b25c:	1ac0      	subs	r0, r0, r3
 800b25e:	6963      	ldr	r3, [r4, #20]
 800b260:	b2f6      	uxtb	r6, r6
 800b262:	4283      	cmp	r3, r0
 800b264:	4637      	mov	r7, r6
 800b266:	dc04      	bgt.n	800b272 <__swbuf_r+0x42>
 800b268:	4621      	mov	r1, r4
 800b26a:	4628      	mov	r0, r5
 800b26c:	f000 f93c 	bl	800b4e8 <_fflush_r>
 800b270:	bb30      	cbnz	r0, 800b2c0 <__swbuf_r+0x90>
 800b272:	68a3      	ldr	r3, [r4, #8]
 800b274:	3b01      	subs	r3, #1
 800b276:	60a3      	str	r3, [r4, #8]
 800b278:	6823      	ldr	r3, [r4, #0]
 800b27a:	1c5a      	adds	r2, r3, #1
 800b27c:	6022      	str	r2, [r4, #0]
 800b27e:	701e      	strb	r6, [r3, #0]
 800b280:	6963      	ldr	r3, [r4, #20]
 800b282:	3001      	adds	r0, #1
 800b284:	4283      	cmp	r3, r0
 800b286:	d004      	beq.n	800b292 <__swbuf_r+0x62>
 800b288:	89a3      	ldrh	r3, [r4, #12]
 800b28a:	07db      	lsls	r3, r3, #31
 800b28c:	d506      	bpl.n	800b29c <__swbuf_r+0x6c>
 800b28e:	2e0a      	cmp	r6, #10
 800b290:	d104      	bne.n	800b29c <__swbuf_r+0x6c>
 800b292:	4621      	mov	r1, r4
 800b294:	4628      	mov	r0, r5
 800b296:	f000 f927 	bl	800b4e8 <_fflush_r>
 800b29a:	b988      	cbnz	r0, 800b2c0 <__swbuf_r+0x90>
 800b29c:	4638      	mov	r0, r7
 800b29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2a0:	4b0a      	ldr	r3, [pc, #40]	; (800b2cc <__swbuf_r+0x9c>)
 800b2a2:	429c      	cmp	r4, r3
 800b2a4:	d101      	bne.n	800b2aa <__swbuf_r+0x7a>
 800b2a6:	68ac      	ldr	r4, [r5, #8]
 800b2a8:	e7cf      	b.n	800b24a <__swbuf_r+0x1a>
 800b2aa:	4b09      	ldr	r3, [pc, #36]	; (800b2d0 <__swbuf_r+0xa0>)
 800b2ac:	429c      	cmp	r4, r3
 800b2ae:	bf08      	it	eq
 800b2b0:	68ec      	ldreq	r4, [r5, #12]
 800b2b2:	e7ca      	b.n	800b24a <__swbuf_r+0x1a>
 800b2b4:	4621      	mov	r1, r4
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	f000 f81a 	bl	800b2f0 <__swsetup_r>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	d0cb      	beq.n	800b258 <__swbuf_r+0x28>
 800b2c0:	f04f 37ff 	mov.w	r7, #4294967295
 800b2c4:	e7ea      	b.n	800b29c <__swbuf_r+0x6c>
 800b2c6:	bf00      	nop
 800b2c8:	0800cca4 	.word	0x0800cca4
 800b2cc:	0800ccc4 	.word	0x0800ccc4
 800b2d0:	0800cc84 	.word	0x0800cc84

0800b2d4 <__ascii_wctomb>:
 800b2d4:	b149      	cbz	r1, 800b2ea <__ascii_wctomb+0x16>
 800b2d6:	2aff      	cmp	r2, #255	; 0xff
 800b2d8:	bf85      	ittet	hi
 800b2da:	238a      	movhi	r3, #138	; 0x8a
 800b2dc:	6003      	strhi	r3, [r0, #0]
 800b2de:	700a      	strbls	r2, [r1, #0]
 800b2e0:	f04f 30ff 	movhi.w	r0, #4294967295
 800b2e4:	bf98      	it	ls
 800b2e6:	2001      	movls	r0, #1
 800b2e8:	4770      	bx	lr
 800b2ea:	4608      	mov	r0, r1
 800b2ec:	4770      	bx	lr
	...

0800b2f0 <__swsetup_r>:
 800b2f0:	4b32      	ldr	r3, [pc, #200]	; (800b3bc <__swsetup_r+0xcc>)
 800b2f2:	b570      	push	{r4, r5, r6, lr}
 800b2f4:	681d      	ldr	r5, [r3, #0]
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	460c      	mov	r4, r1
 800b2fa:	b125      	cbz	r5, 800b306 <__swsetup_r+0x16>
 800b2fc:	69ab      	ldr	r3, [r5, #24]
 800b2fe:	b913      	cbnz	r3, 800b306 <__swsetup_r+0x16>
 800b300:	4628      	mov	r0, r5
 800b302:	f000 f985 	bl	800b610 <__sinit>
 800b306:	4b2e      	ldr	r3, [pc, #184]	; (800b3c0 <__swsetup_r+0xd0>)
 800b308:	429c      	cmp	r4, r3
 800b30a:	d10f      	bne.n	800b32c <__swsetup_r+0x3c>
 800b30c:	686c      	ldr	r4, [r5, #4]
 800b30e:	89a3      	ldrh	r3, [r4, #12]
 800b310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b314:	0719      	lsls	r1, r3, #28
 800b316:	d42c      	bmi.n	800b372 <__swsetup_r+0x82>
 800b318:	06dd      	lsls	r5, r3, #27
 800b31a:	d411      	bmi.n	800b340 <__swsetup_r+0x50>
 800b31c:	2309      	movs	r3, #9
 800b31e:	6033      	str	r3, [r6, #0]
 800b320:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b324:	81a3      	strh	r3, [r4, #12]
 800b326:	f04f 30ff 	mov.w	r0, #4294967295
 800b32a:	e03e      	b.n	800b3aa <__swsetup_r+0xba>
 800b32c:	4b25      	ldr	r3, [pc, #148]	; (800b3c4 <__swsetup_r+0xd4>)
 800b32e:	429c      	cmp	r4, r3
 800b330:	d101      	bne.n	800b336 <__swsetup_r+0x46>
 800b332:	68ac      	ldr	r4, [r5, #8]
 800b334:	e7eb      	b.n	800b30e <__swsetup_r+0x1e>
 800b336:	4b24      	ldr	r3, [pc, #144]	; (800b3c8 <__swsetup_r+0xd8>)
 800b338:	429c      	cmp	r4, r3
 800b33a:	bf08      	it	eq
 800b33c:	68ec      	ldreq	r4, [r5, #12]
 800b33e:	e7e6      	b.n	800b30e <__swsetup_r+0x1e>
 800b340:	0758      	lsls	r0, r3, #29
 800b342:	d512      	bpl.n	800b36a <__swsetup_r+0x7a>
 800b344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b346:	b141      	cbz	r1, 800b35a <__swsetup_r+0x6a>
 800b348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b34c:	4299      	cmp	r1, r3
 800b34e:	d002      	beq.n	800b356 <__swsetup_r+0x66>
 800b350:	4630      	mov	r0, r6
 800b352:	f7ff fb31 	bl	800a9b8 <_free_r>
 800b356:	2300      	movs	r3, #0
 800b358:	6363      	str	r3, [r4, #52]	; 0x34
 800b35a:	89a3      	ldrh	r3, [r4, #12]
 800b35c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b360:	81a3      	strh	r3, [r4, #12]
 800b362:	2300      	movs	r3, #0
 800b364:	6063      	str	r3, [r4, #4]
 800b366:	6923      	ldr	r3, [r4, #16]
 800b368:	6023      	str	r3, [r4, #0]
 800b36a:	89a3      	ldrh	r3, [r4, #12]
 800b36c:	f043 0308 	orr.w	r3, r3, #8
 800b370:	81a3      	strh	r3, [r4, #12]
 800b372:	6923      	ldr	r3, [r4, #16]
 800b374:	b94b      	cbnz	r3, 800b38a <__swsetup_r+0x9a>
 800b376:	89a3      	ldrh	r3, [r4, #12]
 800b378:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b37c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b380:	d003      	beq.n	800b38a <__swsetup_r+0x9a>
 800b382:	4621      	mov	r1, r4
 800b384:	4630      	mov	r0, r6
 800b386:	f000 fa09 	bl	800b79c <__smakebuf_r>
 800b38a:	89a0      	ldrh	r0, [r4, #12]
 800b38c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b390:	f010 0301 	ands.w	r3, r0, #1
 800b394:	d00a      	beq.n	800b3ac <__swsetup_r+0xbc>
 800b396:	2300      	movs	r3, #0
 800b398:	60a3      	str	r3, [r4, #8]
 800b39a:	6963      	ldr	r3, [r4, #20]
 800b39c:	425b      	negs	r3, r3
 800b39e:	61a3      	str	r3, [r4, #24]
 800b3a0:	6923      	ldr	r3, [r4, #16]
 800b3a2:	b943      	cbnz	r3, 800b3b6 <__swsetup_r+0xc6>
 800b3a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b3a8:	d1ba      	bne.n	800b320 <__swsetup_r+0x30>
 800b3aa:	bd70      	pop	{r4, r5, r6, pc}
 800b3ac:	0781      	lsls	r1, r0, #30
 800b3ae:	bf58      	it	pl
 800b3b0:	6963      	ldrpl	r3, [r4, #20]
 800b3b2:	60a3      	str	r3, [r4, #8]
 800b3b4:	e7f4      	b.n	800b3a0 <__swsetup_r+0xb0>
 800b3b6:	2000      	movs	r0, #0
 800b3b8:	e7f7      	b.n	800b3aa <__swsetup_r+0xba>
 800b3ba:	bf00      	nop
 800b3bc:	20000014 	.word	0x20000014
 800b3c0:	0800cca4 	.word	0x0800cca4
 800b3c4:	0800ccc4 	.word	0x0800ccc4
 800b3c8:	0800cc84 	.word	0x0800cc84

0800b3cc <abort>:
 800b3cc:	b508      	push	{r3, lr}
 800b3ce:	2006      	movs	r0, #6
 800b3d0:	f000 fa54 	bl	800b87c <raise>
 800b3d4:	2001      	movs	r0, #1
 800b3d6:	f7f6 ff9b 	bl	8002310 <_exit>
	...

0800b3dc <__sflush_r>:
 800b3dc:	898a      	ldrh	r2, [r1, #12]
 800b3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e2:	4605      	mov	r5, r0
 800b3e4:	0710      	lsls	r0, r2, #28
 800b3e6:	460c      	mov	r4, r1
 800b3e8:	d458      	bmi.n	800b49c <__sflush_r+0xc0>
 800b3ea:	684b      	ldr	r3, [r1, #4]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	dc05      	bgt.n	800b3fc <__sflush_r+0x20>
 800b3f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	dc02      	bgt.n	800b3fc <__sflush_r+0x20>
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3fe:	2e00      	cmp	r6, #0
 800b400:	d0f9      	beq.n	800b3f6 <__sflush_r+0x1a>
 800b402:	2300      	movs	r3, #0
 800b404:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b408:	682f      	ldr	r7, [r5, #0]
 800b40a:	602b      	str	r3, [r5, #0]
 800b40c:	d032      	beq.n	800b474 <__sflush_r+0x98>
 800b40e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b410:	89a3      	ldrh	r3, [r4, #12]
 800b412:	075a      	lsls	r2, r3, #29
 800b414:	d505      	bpl.n	800b422 <__sflush_r+0x46>
 800b416:	6863      	ldr	r3, [r4, #4]
 800b418:	1ac0      	subs	r0, r0, r3
 800b41a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b41c:	b10b      	cbz	r3, 800b422 <__sflush_r+0x46>
 800b41e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b420:	1ac0      	subs	r0, r0, r3
 800b422:	2300      	movs	r3, #0
 800b424:	4602      	mov	r2, r0
 800b426:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b428:	6a21      	ldr	r1, [r4, #32]
 800b42a:	4628      	mov	r0, r5
 800b42c:	47b0      	blx	r6
 800b42e:	1c43      	adds	r3, r0, #1
 800b430:	89a3      	ldrh	r3, [r4, #12]
 800b432:	d106      	bne.n	800b442 <__sflush_r+0x66>
 800b434:	6829      	ldr	r1, [r5, #0]
 800b436:	291d      	cmp	r1, #29
 800b438:	d82c      	bhi.n	800b494 <__sflush_r+0xb8>
 800b43a:	4a2a      	ldr	r2, [pc, #168]	; (800b4e4 <__sflush_r+0x108>)
 800b43c:	40ca      	lsrs	r2, r1
 800b43e:	07d6      	lsls	r6, r2, #31
 800b440:	d528      	bpl.n	800b494 <__sflush_r+0xb8>
 800b442:	2200      	movs	r2, #0
 800b444:	6062      	str	r2, [r4, #4]
 800b446:	04d9      	lsls	r1, r3, #19
 800b448:	6922      	ldr	r2, [r4, #16]
 800b44a:	6022      	str	r2, [r4, #0]
 800b44c:	d504      	bpl.n	800b458 <__sflush_r+0x7c>
 800b44e:	1c42      	adds	r2, r0, #1
 800b450:	d101      	bne.n	800b456 <__sflush_r+0x7a>
 800b452:	682b      	ldr	r3, [r5, #0]
 800b454:	b903      	cbnz	r3, 800b458 <__sflush_r+0x7c>
 800b456:	6560      	str	r0, [r4, #84]	; 0x54
 800b458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b45a:	602f      	str	r7, [r5, #0]
 800b45c:	2900      	cmp	r1, #0
 800b45e:	d0ca      	beq.n	800b3f6 <__sflush_r+0x1a>
 800b460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b464:	4299      	cmp	r1, r3
 800b466:	d002      	beq.n	800b46e <__sflush_r+0x92>
 800b468:	4628      	mov	r0, r5
 800b46a:	f7ff faa5 	bl	800a9b8 <_free_r>
 800b46e:	2000      	movs	r0, #0
 800b470:	6360      	str	r0, [r4, #52]	; 0x34
 800b472:	e7c1      	b.n	800b3f8 <__sflush_r+0x1c>
 800b474:	6a21      	ldr	r1, [r4, #32]
 800b476:	2301      	movs	r3, #1
 800b478:	4628      	mov	r0, r5
 800b47a:	47b0      	blx	r6
 800b47c:	1c41      	adds	r1, r0, #1
 800b47e:	d1c7      	bne.n	800b410 <__sflush_r+0x34>
 800b480:	682b      	ldr	r3, [r5, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d0c4      	beq.n	800b410 <__sflush_r+0x34>
 800b486:	2b1d      	cmp	r3, #29
 800b488:	d001      	beq.n	800b48e <__sflush_r+0xb2>
 800b48a:	2b16      	cmp	r3, #22
 800b48c:	d101      	bne.n	800b492 <__sflush_r+0xb6>
 800b48e:	602f      	str	r7, [r5, #0]
 800b490:	e7b1      	b.n	800b3f6 <__sflush_r+0x1a>
 800b492:	89a3      	ldrh	r3, [r4, #12]
 800b494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b498:	81a3      	strh	r3, [r4, #12]
 800b49a:	e7ad      	b.n	800b3f8 <__sflush_r+0x1c>
 800b49c:	690f      	ldr	r7, [r1, #16]
 800b49e:	2f00      	cmp	r7, #0
 800b4a0:	d0a9      	beq.n	800b3f6 <__sflush_r+0x1a>
 800b4a2:	0793      	lsls	r3, r2, #30
 800b4a4:	680e      	ldr	r6, [r1, #0]
 800b4a6:	bf08      	it	eq
 800b4a8:	694b      	ldreq	r3, [r1, #20]
 800b4aa:	600f      	str	r7, [r1, #0]
 800b4ac:	bf18      	it	ne
 800b4ae:	2300      	movne	r3, #0
 800b4b0:	eba6 0807 	sub.w	r8, r6, r7
 800b4b4:	608b      	str	r3, [r1, #8]
 800b4b6:	f1b8 0f00 	cmp.w	r8, #0
 800b4ba:	dd9c      	ble.n	800b3f6 <__sflush_r+0x1a>
 800b4bc:	6a21      	ldr	r1, [r4, #32]
 800b4be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b4c0:	4643      	mov	r3, r8
 800b4c2:	463a      	mov	r2, r7
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	47b0      	blx	r6
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	dc06      	bgt.n	800b4da <__sflush_r+0xfe>
 800b4cc:	89a3      	ldrh	r3, [r4, #12]
 800b4ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4d2:	81a3      	strh	r3, [r4, #12]
 800b4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d8:	e78e      	b.n	800b3f8 <__sflush_r+0x1c>
 800b4da:	4407      	add	r7, r0
 800b4dc:	eba8 0800 	sub.w	r8, r8, r0
 800b4e0:	e7e9      	b.n	800b4b6 <__sflush_r+0xda>
 800b4e2:	bf00      	nop
 800b4e4:	20400001 	.word	0x20400001

0800b4e8 <_fflush_r>:
 800b4e8:	b538      	push	{r3, r4, r5, lr}
 800b4ea:	690b      	ldr	r3, [r1, #16]
 800b4ec:	4605      	mov	r5, r0
 800b4ee:	460c      	mov	r4, r1
 800b4f0:	b913      	cbnz	r3, 800b4f8 <_fflush_r+0x10>
 800b4f2:	2500      	movs	r5, #0
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	bd38      	pop	{r3, r4, r5, pc}
 800b4f8:	b118      	cbz	r0, 800b502 <_fflush_r+0x1a>
 800b4fa:	6983      	ldr	r3, [r0, #24]
 800b4fc:	b90b      	cbnz	r3, 800b502 <_fflush_r+0x1a>
 800b4fe:	f000 f887 	bl	800b610 <__sinit>
 800b502:	4b14      	ldr	r3, [pc, #80]	; (800b554 <_fflush_r+0x6c>)
 800b504:	429c      	cmp	r4, r3
 800b506:	d11b      	bne.n	800b540 <_fflush_r+0x58>
 800b508:	686c      	ldr	r4, [r5, #4]
 800b50a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d0ef      	beq.n	800b4f2 <_fflush_r+0xa>
 800b512:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b514:	07d0      	lsls	r0, r2, #31
 800b516:	d404      	bmi.n	800b522 <_fflush_r+0x3a>
 800b518:	0599      	lsls	r1, r3, #22
 800b51a:	d402      	bmi.n	800b522 <_fflush_r+0x3a>
 800b51c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b51e:	f000 f915 	bl	800b74c <__retarget_lock_acquire_recursive>
 800b522:	4628      	mov	r0, r5
 800b524:	4621      	mov	r1, r4
 800b526:	f7ff ff59 	bl	800b3dc <__sflush_r>
 800b52a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b52c:	07da      	lsls	r2, r3, #31
 800b52e:	4605      	mov	r5, r0
 800b530:	d4e0      	bmi.n	800b4f4 <_fflush_r+0xc>
 800b532:	89a3      	ldrh	r3, [r4, #12]
 800b534:	059b      	lsls	r3, r3, #22
 800b536:	d4dd      	bmi.n	800b4f4 <_fflush_r+0xc>
 800b538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b53a:	f000 f908 	bl	800b74e <__retarget_lock_release_recursive>
 800b53e:	e7d9      	b.n	800b4f4 <_fflush_r+0xc>
 800b540:	4b05      	ldr	r3, [pc, #20]	; (800b558 <_fflush_r+0x70>)
 800b542:	429c      	cmp	r4, r3
 800b544:	d101      	bne.n	800b54a <_fflush_r+0x62>
 800b546:	68ac      	ldr	r4, [r5, #8]
 800b548:	e7df      	b.n	800b50a <_fflush_r+0x22>
 800b54a:	4b04      	ldr	r3, [pc, #16]	; (800b55c <_fflush_r+0x74>)
 800b54c:	429c      	cmp	r4, r3
 800b54e:	bf08      	it	eq
 800b550:	68ec      	ldreq	r4, [r5, #12]
 800b552:	e7da      	b.n	800b50a <_fflush_r+0x22>
 800b554:	0800cca4 	.word	0x0800cca4
 800b558:	0800ccc4 	.word	0x0800ccc4
 800b55c:	0800cc84 	.word	0x0800cc84

0800b560 <std>:
 800b560:	2300      	movs	r3, #0
 800b562:	b510      	push	{r4, lr}
 800b564:	4604      	mov	r4, r0
 800b566:	e9c0 3300 	strd	r3, r3, [r0]
 800b56a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b56e:	6083      	str	r3, [r0, #8]
 800b570:	8181      	strh	r1, [r0, #12]
 800b572:	6643      	str	r3, [r0, #100]	; 0x64
 800b574:	81c2      	strh	r2, [r0, #14]
 800b576:	6183      	str	r3, [r0, #24]
 800b578:	4619      	mov	r1, r3
 800b57a:	2208      	movs	r2, #8
 800b57c:	305c      	adds	r0, #92	; 0x5c
 800b57e:	f7fd faa7 	bl	8008ad0 <memset>
 800b582:	4b05      	ldr	r3, [pc, #20]	; (800b598 <std+0x38>)
 800b584:	6263      	str	r3, [r4, #36]	; 0x24
 800b586:	4b05      	ldr	r3, [pc, #20]	; (800b59c <std+0x3c>)
 800b588:	62a3      	str	r3, [r4, #40]	; 0x28
 800b58a:	4b05      	ldr	r3, [pc, #20]	; (800b5a0 <std+0x40>)
 800b58c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b58e:	4b05      	ldr	r3, [pc, #20]	; (800b5a4 <std+0x44>)
 800b590:	6224      	str	r4, [r4, #32]
 800b592:	6323      	str	r3, [r4, #48]	; 0x30
 800b594:	bd10      	pop	{r4, pc}
 800b596:	bf00      	nop
 800b598:	0800b8b5 	.word	0x0800b8b5
 800b59c:	0800b8d7 	.word	0x0800b8d7
 800b5a0:	0800b90f 	.word	0x0800b90f
 800b5a4:	0800b933 	.word	0x0800b933

0800b5a8 <_cleanup_r>:
 800b5a8:	4901      	ldr	r1, [pc, #4]	; (800b5b0 <_cleanup_r+0x8>)
 800b5aa:	f000 b8af 	b.w	800b70c <_fwalk_reent>
 800b5ae:	bf00      	nop
 800b5b0:	0800b4e9 	.word	0x0800b4e9

0800b5b4 <__sfmoreglue>:
 800b5b4:	b570      	push	{r4, r5, r6, lr}
 800b5b6:	2268      	movs	r2, #104	; 0x68
 800b5b8:	1e4d      	subs	r5, r1, #1
 800b5ba:	4355      	muls	r5, r2
 800b5bc:	460e      	mov	r6, r1
 800b5be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b5c2:	f7ff fa65 	bl	800aa90 <_malloc_r>
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	b140      	cbz	r0, 800b5dc <__sfmoreglue+0x28>
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	e9c0 1600 	strd	r1, r6, [r0]
 800b5d0:	300c      	adds	r0, #12
 800b5d2:	60a0      	str	r0, [r4, #8]
 800b5d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b5d8:	f7fd fa7a 	bl	8008ad0 <memset>
 800b5dc:	4620      	mov	r0, r4
 800b5de:	bd70      	pop	{r4, r5, r6, pc}

0800b5e0 <__sfp_lock_acquire>:
 800b5e0:	4801      	ldr	r0, [pc, #4]	; (800b5e8 <__sfp_lock_acquire+0x8>)
 800b5e2:	f000 b8b3 	b.w	800b74c <__retarget_lock_acquire_recursive>
 800b5e6:	bf00      	nop
 800b5e8:	20000449 	.word	0x20000449

0800b5ec <__sfp_lock_release>:
 800b5ec:	4801      	ldr	r0, [pc, #4]	; (800b5f4 <__sfp_lock_release+0x8>)
 800b5ee:	f000 b8ae 	b.w	800b74e <__retarget_lock_release_recursive>
 800b5f2:	bf00      	nop
 800b5f4:	20000449 	.word	0x20000449

0800b5f8 <__sinit_lock_acquire>:
 800b5f8:	4801      	ldr	r0, [pc, #4]	; (800b600 <__sinit_lock_acquire+0x8>)
 800b5fa:	f000 b8a7 	b.w	800b74c <__retarget_lock_acquire_recursive>
 800b5fe:	bf00      	nop
 800b600:	2000044a 	.word	0x2000044a

0800b604 <__sinit_lock_release>:
 800b604:	4801      	ldr	r0, [pc, #4]	; (800b60c <__sinit_lock_release+0x8>)
 800b606:	f000 b8a2 	b.w	800b74e <__retarget_lock_release_recursive>
 800b60a:	bf00      	nop
 800b60c:	2000044a 	.word	0x2000044a

0800b610 <__sinit>:
 800b610:	b510      	push	{r4, lr}
 800b612:	4604      	mov	r4, r0
 800b614:	f7ff fff0 	bl	800b5f8 <__sinit_lock_acquire>
 800b618:	69a3      	ldr	r3, [r4, #24]
 800b61a:	b11b      	cbz	r3, 800b624 <__sinit+0x14>
 800b61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b620:	f7ff bff0 	b.w	800b604 <__sinit_lock_release>
 800b624:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b628:	6523      	str	r3, [r4, #80]	; 0x50
 800b62a:	4b13      	ldr	r3, [pc, #76]	; (800b678 <__sinit+0x68>)
 800b62c:	4a13      	ldr	r2, [pc, #76]	; (800b67c <__sinit+0x6c>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	62a2      	str	r2, [r4, #40]	; 0x28
 800b632:	42a3      	cmp	r3, r4
 800b634:	bf04      	itt	eq
 800b636:	2301      	moveq	r3, #1
 800b638:	61a3      	streq	r3, [r4, #24]
 800b63a:	4620      	mov	r0, r4
 800b63c:	f000 f820 	bl	800b680 <__sfp>
 800b640:	6060      	str	r0, [r4, #4]
 800b642:	4620      	mov	r0, r4
 800b644:	f000 f81c 	bl	800b680 <__sfp>
 800b648:	60a0      	str	r0, [r4, #8]
 800b64a:	4620      	mov	r0, r4
 800b64c:	f000 f818 	bl	800b680 <__sfp>
 800b650:	2200      	movs	r2, #0
 800b652:	60e0      	str	r0, [r4, #12]
 800b654:	2104      	movs	r1, #4
 800b656:	6860      	ldr	r0, [r4, #4]
 800b658:	f7ff ff82 	bl	800b560 <std>
 800b65c:	68a0      	ldr	r0, [r4, #8]
 800b65e:	2201      	movs	r2, #1
 800b660:	2109      	movs	r1, #9
 800b662:	f7ff ff7d 	bl	800b560 <std>
 800b666:	68e0      	ldr	r0, [r4, #12]
 800b668:	2202      	movs	r2, #2
 800b66a:	2112      	movs	r1, #18
 800b66c:	f7ff ff78 	bl	800b560 <std>
 800b670:	2301      	movs	r3, #1
 800b672:	61a3      	str	r3, [r4, #24]
 800b674:	e7d2      	b.n	800b61c <__sinit+0xc>
 800b676:	bf00      	nop
 800b678:	0800c908 	.word	0x0800c908
 800b67c:	0800b5a9 	.word	0x0800b5a9

0800b680 <__sfp>:
 800b680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b682:	4607      	mov	r7, r0
 800b684:	f7ff ffac 	bl	800b5e0 <__sfp_lock_acquire>
 800b688:	4b1e      	ldr	r3, [pc, #120]	; (800b704 <__sfp+0x84>)
 800b68a:	681e      	ldr	r6, [r3, #0]
 800b68c:	69b3      	ldr	r3, [r6, #24]
 800b68e:	b913      	cbnz	r3, 800b696 <__sfp+0x16>
 800b690:	4630      	mov	r0, r6
 800b692:	f7ff ffbd 	bl	800b610 <__sinit>
 800b696:	3648      	adds	r6, #72	; 0x48
 800b698:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b69c:	3b01      	subs	r3, #1
 800b69e:	d503      	bpl.n	800b6a8 <__sfp+0x28>
 800b6a0:	6833      	ldr	r3, [r6, #0]
 800b6a2:	b30b      	cbz	r3, 800b6e8 <__sfp+0x68>
 800b6a4:	6836      	ldr	r6, [r6, #0]
 800b6a6:	e7f7      	b.n	800b698 <__sfp+0x18>
 800b6a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b6ac:	b9d5      	cbnz	r5, 800b6e4 <__sfp+0x64>
 800b6ae:	4b16      	ldr	r3, [pc, #88]	; (800b708 <__sfp+0x88>)
 800b6b0:	60e3      	str	r3, [r4, #12]
 800b6b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b6b6:	6665      	str	r5, [r4, #100]	; 0x64
 800b6b8:	f000 f847 	bl	800b74a <__retarget_lock_init_recursive>
 800b6bc:	f7ff ff96 	bl	800b5ec <__sfp_lock_release>
 800b6c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b6c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b6c8:	6025      	str	r5, [r4, #0]
 800b6ca:	61a5      	str	r5, [r4, #24]
 800b6cc:	2208      	movs	r2, #8
 800b6ce:	4629      	mov	r1, r5
 800b6d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b6d4:	f7fd f9fc 	bl	8008ad0 <memset>
 800b6d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b6dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6e4:	3468      	adds	r4, #104	; 0x68
 800b6e6:	e7d9      	b.n	800b69c <__sfp+0x1c>
 800b6e8:	2104      	movs	r1, #4
 800b6ea:	4638      	mov	r0, r7
 800b6ec:	f7ff ff62 	bl	800b5b4 <__sfmoreglue>
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	6030      	str	r0, [r6, #0]
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d1d5      	bne.n	800b6a4 <__sfp+0x24>
 800b6f8:	f7ff ff78 	bl	800b5ec <__sfp_lock_release>
 800b6fc:	230c      	movs	r3, #12
 800b6fe:	603b      	str	r3, [r7, #0]
 800b700:	e7ee      	b.n	800b6e0 <__sfp+0x60>
 800b702:	bf00      	nop
 800b704:	0800c908 	.word	0x0800c908
 800b708:	ffff0001 	.word	0xffff0001

0800b70c <_fwalk_reent>:
 800b70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b710:	4606      	mov	r6, r0
 800b712:	4688      	mov	r8, r1
 800b714:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b718:	2700      	movs	r7, #0
 800b71a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b71e:	f1b9 0901 	subs.w	r9, r9, #1
 800b722:	d505      	bpl.n	800b730 <_fwalk_reent+0x24>
 800b724:	6824      	ldr	r4, [r4, #0]
 800b726:	2c00      	cmp	r4, #0
 800b728:	d1f7      	bne.n	800b71a <_fwalk_reent+0xe>
 800b72a:	4638      	mov	r0, r7
 800b72c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b730:	89ab      	ldrh	r3, [r5, #12]
 800b732:	2b01      	cmp	r3, #1
 800b734:	d907      	bls.n	800b746 <_fwalk_reent+0x3a>
 800b736:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b73a:	3301      	adds	r3, #1
 800b73c:	d003      	beq.n	800b746 <_fwalk_reent+0x3a>
 800b73e:	4629      	mov	r1, r5
 800b740:	4630      	mov	r0, r6
 800b742:	47c0      	blx	r8
 800b744:	4307      	orrs	r7, r0
 800b746:	3568      	adds	r5, #104	; 0x68
 800b748:	e7e9      	b.n	800b71e <_fwalk_reent+0x12>

0800b74a <__retarget_lock_init_recursive>:
 800b74a:	4770      	bx	lr

0800b74c <__retarget_lock_acquire_recursive>:
 800b74c:	4770      	bx	lr

0800b74e <__retarget_lock_release_recursive>:
 800b74e:	4770      	bx	lr

0800b750 <__swhatbuf_r>:
 800b750:	b570      	push	{r4, r5, r6, lr}
 800b752:	460e      	mov	r6, r1
 800b754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b758:	2900      	cmp	r1, #0
 800b75a:	b096      	sub	sp, #88	; 0x58
 800b75c:	4614      	mov	r4, r2
 800b75e:	461d      	mov	r5, r3
 800b760:	da08      	bge.n	800b774 <__swhatbuf_r+0x24>
 800b762:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b766:	2200      	movs	r2, #0
 800b768:	602a      	str	r2, [r5, #0]
 800b76a:	061a      	lsls	r2, r3, #24
 800b76c:	d410      	bmi.n	800b790 <__swhatbuf_r+0x40>
 800b76e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b772:	e00e      	b.n	800b792 <__swhatbuf_r+0x42>
 800b774:	466a      	mov	r2, sp
 800b776:	f000 f903 	bl	800b980 <_fstat_r>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	dbf1      	blt.n	800b762 <__swhatbuf_r+0x12>
 800b77e:	9a01      	ldr	r2, [sp, #4]
 800b780:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b784:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b788:	425a      	negs	r2, r3
 800b78a:	415a      	adcs	r2, r3
 800b78c:	602a      	str	r2, [r5, #0]
 800b78e:	e7ee      	b.n	800b76e <__swhatbuf_r+0x1e>
 800b790:	2340      	movs	r3, #64	; 0x40
 800b792:	2000      	movs	r0, #0
 800b794:	6023      	str	r3, [r4, #0]
 800b796:	b016      	add	sp, #88	; 0x58
 800b798:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b79c <__smakebuf_r>:
 800b79c:	898b      	ldrh	r3, [r1, #12]
 800b79e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7a0:	079d      	lsls	r5, r3, #30
 800b7a2:	4606      	mov	r6, r0
 800b7a4:	460c      	mov	r4, r1
 800b7a6:	d507      	bpl.n	800b7b8 <__smakebuf_r+0x1c>
 800b7a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7ac:	6023      	str	r3, [r4, #0]
 800b7ae:	6123      	str	r3, [r4, #16]
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	6163      	str	r3, [r4, #20]
 800b7b4:	b002      	add	sp, #8
 800b7b6:	bd70      	pop	{r4, r5, r6, pc}
 800b7b8:	ab01      	add	r3, sp, #4
 800b7ba:	466a      	mov	r2, sp
 800b7bc:	f7ff ffc8 	bl	800b750 <__swhatbuf_r>
 800b7c0:	9900      	ldr	r1, [sp, #0]
 800b7c2:	4605      	mov	r5, r0
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	f7ff f963 	bl	800aa90 <_malloc_r>
 800b7ca:	b948      	cbnz	r0, 800b7e0 <__smakebuf_r+0x44>
 800b7cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7d0:	059a      	lsls	r2, r3, #22
 800b7d2:	d4ef      	bmi.n	800b7b4 <__smakebuf_r+0x18>
 800b7d4:	f023 0303 	bic.w	r3, r3, #3
 800b7d8:	f043 0302 	orr.w	r3, r3, #2
 800b7dc:	81a3      	strh	r3, [r4, #12]
 800b7de:	e7e3      	b.n	800b7a8 <__smakebuf_r+0xc>
 800b7e0:	4b0d      	ldr	r3, [pc, #52]	; (800b818 <__smakebuf_r+0x7c>)
 800b7e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b7e4:	89a3      	ldrh	r3, [r4, #12]
 800b7e6:	6020      	str	r0, [r4, #0]
 800b7e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7ec:	81a3      	strh	r3, [r4, #12]
 800b7ee:	9b00      	ldr	r3, [sp, #0]
 800b7f0:	6163      	str	r3, [r4, #20]
 800b7f2:	9b01      	ldr	r3, [sp, #4]
 800b7f4:	6120      	str	r0, [r4, #16]
 800b7f6:	b15b      	cbz	r3, 800b810 <__smakebuf_r+0x74>
 800b7f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7fc:	4630      	mov	r0, r6
 800b7fe:	f000 f8d1 	bl	800b9a4 <_isatty_r>
 800b802:	b128      	cbz	r0, 800b810 <__smakebuf_r+0x74>
 800b804:	89a3      	ldrh	r3, [r4, #12]
 800b806:	f023 0303 	bic.w	r3, r3, #3
 800b80a:	f043 0301 	orr.w	r3, r3, #1
 800b80e:	81a3      	strh	r3, [r4, #12]
 800b810:	89a0      	ldrh	r0, [r4, #12]
 800b812:	4305      	orrs	r5, r0
 800b814:	81a5      	strh	r5, [r4, #12]
 800b816:	e7cd      	b.n	800b7b4 <__smakebuf_r+0x18>
 800b818:	0800b5a9 	.word	0x0800b5a9

0800b81c <_malloc_usable_size_r>:
 800b81c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b820:	1f18      	subs	r0, r3, #4
 800b822:	2b00      	cmp	r3, #0
 800b824:	bfbc      	itt	lt
 800b826:	580b      	ldrlt	r3, [r1, r0]
 800b828:	18c0      	addlt	r0, r0, r3
 800b82a:	4770      	bx	lr

0800b82c <_raise_r>:
 800b82c:	291f      	cmp	r1, #31
 800b82e:	b538      	push	{r3, r4, r5, lr}
 800b830:	4604      	mov	r4, r0
 800b832:	460d      	mov	r5, r1
 800b834:	d904      	bls.n	800b840 <_raise_r+0x14>
 800b836:	2316      	movs	r3, #22
 800b838:	6003      	str	r3, [r0, #0]
 800b83a:	f04f 30ff 	mov.w	r0, #4294967295
 800b83e:	bd38      	pop	{r3, r4, r5, pc}
 800b840:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b842:	b112      	cbz	r2, 800b84a <_raise_r+0x1e>
 800b844:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b848:	b94b      	cbnz	r3, 800b85e <_raise_r+0x32>
 800b84a:	4620      	mov	r0, r4
 800b84c:	f000 f830 	bl	800b8b0 <_getpid_r>
 800b850:	462a      	mov	r2, r5
 800b852:	4601      	mov	r1, r0
 800b854:	4620      	mov	r0, r4
 800b856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b85a:	f000 b817 	b.w	800b88c <_kill_r>
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d00a      	beq.n	800b878 <_raise_r+0x4c>
 800b862:	1c59      	adds	r1, r3, #1
 800b864:	d103      	bne.n	800b86e <_raise_r+0x42>
 800b866:	2316      	movs	r3, #22
 800b868:	6003      	str	r3, [r0, #0]
 800b86a:	2001      	movs	r0, #1
 800b86c:	e7e7      	b.n	800b83e <_raise_r+0x12>
 800b86e:	2400      	movs	r4, #0
 800b870:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b874:	4628      	mov	r0, r5
 800b876:	4798      	blx	r3
 800b878:	2000      	movs	r0, #0
 800b87a:	e7e0      	b.n	800b83e <_raise_r+0x12>

0800b87c <raise>:
 800b87c:	4b02      	ldr	r3, [pc, #8]	; (800b888 <raise+0xc>)
 800b87e:	4601      	mov	r1, r0
 800b880:	6818      	ldr	r0, [r3, #0]
 800b882:	f7ff bfd3 	b.w	800b82c <_raise_r>
 800b886:	bf00      	nop
 800b888:	20000014 	.word	0x20000014

0800b88c <_kill_r>:
 800b88c:	b538      	push	{r3, r4, r5, lr}
 800b88e:	4d07      	ldr	r5, [pc, #28]	; (800b8ac <_kill_r+0x20>)
 800b890:	2300      	movs	r3, #0
 800b892:	4604      	mov	r4, r0
 800b894:	4608      	mov	r0, r1
 800b896:	4611      	mov	r1, r2
 800b898:	602b      	str	r3, [r5, #0]
 800b89a:	f7f6 fd29 	bl	80022f0 <_kill>
 800b89e:	1c43      	adds	r3, r0, #1
 800b8a0:	d102      	bne.n	800b8a8 <_kill_r+0x1c>
 800b8a2:	682b      	ldr	r3, [r5, #0]
 800b8a4:	b103      	cbz	r3, 800b8a8 <_kill_r+0x1c>
 800b8a6:	6023      	str	r3, [r4, #0]
 800b8a8:	bd38      	pop	{r3, r4, r5, pc}
 800b8aa:	bf00      	nop
 800b8ac:	20000444 	.word	0x20000444

0800b8b0 <_getpid_r>:
 800b8b0:	f7f6 bd16 	b.w	80022e0 <_getpid>

0800b8b4 <__sread>:
 800b8b4:	b510      	push	{r4, lr}
 800b8b6:	460c      	mov	r4, r1
 800b8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8bc:	f000 f894 	bl	800b9e8 <_read_r>
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	bfab      	itete	ge
 800b8c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b8c6:	89a3      	ldrhlt	r3, [r4, #12]
 800b8c8:	181b      	addge	r3, r3, r0
 800b8ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b8ce:	bfac      	ite	ge
 800b8d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b8d2:	81a3      	strhlt	r3, [r4, #12]
 800b8d4:	bd10      	pop	{r4, pc}

0800b8d6 <__swrite>:
 800b8d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8da:	461f      	mov	r7, r3
 800b8dc:	898b      	ldrh	r3, [r1, #12]
 800b8de:	05db      	lsls	r3, r3, #23
 800b8e0:	4605      	mov	r5, r0
 800b8e2:	460c      	mov	r4, r1
 800b8e4:	4616      	mov	r6, r2
 800b8e6:	d505      	bpl.n	800b8f4 <__swrite+0x1e>
 800b8e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ec:	2302      	movs	r3, #2
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	f000 f868 	bl	800b9c4 <_lseek_r>
 800b8f4:	89a3      	ldrh	r3, [r4, #12]
 800b8f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8fe:	81a3      	strh	r3, [r4, #12]
 800b900:	4632      	mov	r2, r6
 800b902:	463b      	mov	r3, r7
 800b904:	4628      	mov	r0, r5
 800b906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b90a:	f000 b817 	b.w	800b93c <_write_r>

0800b90e <__sseek>:
 800b90e:	b510      	push	{r4, lr}
 800b910:	460c      	mov	r4, r1
 800b912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b916:	f000 f855 	bl	800b9c4 <_lseek_r>
 800b91a:	1c43      	adds	r3, r0, #1
 800b91c:	89a3      	ldrh	r3, [r4, #12]
 800b91e:	bf15      	itete	ne
 800b920:	6560      	strne	r0, [r4, #84]	; 0x54
 800b922:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b926:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b92a:	81a3      	strheq	r3, [r4, #12]
 800b92c:	bf18      	it	ne
 800b92e:	81a3      	strhne	r3, [r4, #12]
 800b930:	bd10      	pop	{r4, pc}

0800b932 <__sclose>:
 800b932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b936:	f000 b813 	b.w	800b960 <_close_r>
	...

0800b93c <_write_r>:
 800b93c:	b538      	push	{r3, r4, r5, lr}
 800b93e:	4d07      	ldr	r5, [pc, #28]	; (800b95c <_write_r+0x20>)
 800b940:	4604      	mov	r4, r0
 800b942:	4608      	mov	r0, r1
 800b944:	4611      	mov	r1, r2
 800b946:	2200      	movs	r2, #0
 800b948:	602a      	str	r2, [r5, #0]
 800b94a:	461a      	mov	r2, r3
 800b94c:	f7f6 fd07 	bl	800235e <_write>
 800b950:	1c43      	adds	r3, r0, #1
 800b952:	d102      	bne.n	800b95a <_write_r+0x1e>
 800b954:	682b      	ldr	r3, [r5, #0]
 800b956:	b103      	cbz	r3, 800b95a <_write_r+0x1e>
 800b958:	6023      	str	r3, [r4, #0]
 800b95a:	bd38      	pop	{r3, r4, r5, pc}
 800b95c:	20000444 	.word	0x20000444

0800b960 <_close_r>:
 800b960:	b538      	push	{r3, r4, r5, lr}
 800b962:	4d06      	ldr	r5, [pc, #24]	; (800b97c <_close_r+0x1c>)
 800b964:	2300      	movs	r3, #0
 800b966:	4604      	mov	r4, r0
 800b968:	4608      	mov	r0, r1
 800b96a:	602b      	str	r3, [r5, #0]
 800b96c:	f7f6 fd13 	bl	8002396 <_close>
 800b970:	1c43      	adds	r3, r0, #1
 800b972:	d102      	bne.n	800b97a <_close_r+0x1a>
 800b974:	682b      	ldr	r3, [r5, #0]
 800b976:	b103      	cbz	r3, 800b97a <_close_r+0x1a>
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	bd38      	pop	{r3, r4, r5, pc}
 800b97c:	20000444 	.word	0x20000444

0800b980 <_fstat_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4d07      	ldr	r5, [pc, #28]	; (800b9a0 <_fstat_r+0x20>)
 800b984:	2300      	movs	r3, #0
 800b986:	4604      	mov	r4, r0
 800b988:	4608      	mov	r0, r1
 800b98a:	4611      	mov	r1, r2
 800b98c:	602b      	str	r3, [r5, #0]
 800b98e:	f7f6 fd0e 	bl	80023ae <_fstat>
 800b992:	1c43      	adds	r3, r0, #1
 800b994:	d102      	bne.n	800b99c <_fstat_r+0x1c>
 800b996:	682b      	ldr	r3, [r5, #0]
 800b998:	b103      	cbz	r3, 800b99c <_fstat_r+0x1c>
 800b99a:	6023      	str	r3, [r4, #0]
 800b99c:	bd38      	pop	{r3, r4, r5, pc}
 800b99e:	bf00      	nop
 800b9a0:	20000444 	.word	0x20000444

0800b9a4 <_isatty_r>:
 800b9a4:	b538      	push	{r3, r4, r5, lr}
 800b9a6:	4d06      	ldr	r5, [pc, #24]	; (800b9c0 <_isatty_r+0x1c>)
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	4608      	mov	r0, r1
 800b9ae:	602b      	str	r3, [r5, #0]
 800b9b0:	f7f6 fd0d 	bl	80023ce <_isatty>
 800b9b4:	1c43      	adds	r3, r0, #1
 800b9b6:	d102      	bne.n	800b9be <_isatty_r+0x1a>
 800b9b8:	682b      	ldr	r3, [r5, #0]
 800b9ba:	b103      	cbz	r3, 800b9be <_isatty_r+0x1a>
 800b9bc:	6023      	str	r3, [r4, #0]
 800b9be:	bd38      	pop	{r3, r4, r5, pc}
 800b9c0:	20000444 	.word	0x20000444

0800b9c4 <_lseek_r>:
 800b9c4:	b538      	push	{r3, r4, r5, lr}
 800b9c6:	4d07      	ldr	r5, [pc, #28]	; (800b9e4 <_lseek_r+0x20>)
 800b9c8:	4604      	mov	r4, r0
 800b9ca:	4608      	mov	r0, r1
 800b9cc:	4611      	mov	r1, r2
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	602a      	str	r2, [r5, #0]
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	f7f6 fd06 	bl	80023e4 <_lseek>
 800b9d8:	1c43      	adds	r3, r0, #1
 800b9da:	d102      	bne.n	800b9e2 <_lseek_r+0x1e>
 800b9dc:	682b      	ldr	r3, [r5, #0]
 800b9de:	b103      	cbz	r3, 800b9e2 <_lseek_r+0x1e>
 800b9e0:	6023      	str	r3, [r4, #0]
 800b9e2:	bd38      	pop	{r3, r4, r5, pc}
 800b9e4:	20000444 	.word	0x20000444

0800b9e8 <_read_r>:
 800b9e8:	b538      	push	{r3, r4, r5, lr}
 800b9ea:	4d07      	ldr	r5, [pc, #28]	; (800ba08 <_read_r+0x20>)
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	4608      	mov	r0, r1
 800b9f0:	4611      	mov	r1, r2
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	602a      	str	r2, [r5, #0]
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	f7f6 fc94 	bl	8002324 <_read>
 800b9fc:	1c43      	adds	r3, r0, #1
 800b9fe:	d102      	bne.n	800ba06 <_read_r+0x1e>
 800ba00:	682b      	ldr	r3, [r5, #0]
 800ba02:	b103      	cbz	r3, 800ba06 <_read_r+0x1e>
 800ba04:	6023      	str	r3, [r4, #0]
 800ba06:	bd38      	pop	{r3, r4, r5, pc}
 800ba08:	20000444 	.word	0x20000444

0800ba0c <pow>:
 800ba0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0e:	ed2d 8b02 	vpush	{d8}
 800ba12:	eeb0 8a40 	vmov.f32	s16, s0
 800ba16:	eef0 8a60 	vmov.f32	s17, s1
 800ba1a:	ec55 4b11 	vmov	r4, r5, d1
 800ba1e:	f000 f867 	bl	800baf0 <__ieee754_pow>
 800ba22:	4622      	mov	r2, r4
 800ba24:	462b      	mov	r3, r5
 800ba26:	4620      	mov	r0, r4
 800ba28:	4629      	mov	r1, r5
 800ba2a:	ec57 6b10 	vmov	r6, r7, d0
 800ba2e:	f7f5 f885 	bl	8000b3c <__aeabi_dcmpun>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d13b      	bne.n	800baae <pow+0xa2>
 800ba36:	ec51 0b18 	vmov	r0, r1, d8
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	f7f5 f84b 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba42:	b1b8      	cbz	r0, 800ba74 <pow+0x68>
 800ba44:	2200      	movs	r2, #0
 800ba46:	2300      	movs	r3, #0
 800ba48:	4620      	mov	r0, r4
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	f7f5 f844 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	d146      	bne.n	800bae2 <pow+0xd6>
 800ba54:	ec45 4b10 	vmov	d0, r4, r5
 800ba58:	f000 fe63 	bl	800c722 <finite>
 800ba5c:	b338      	cbz	r0, 800baae <pow+0xa2>
 800ba5e:	2200      	movs	r2, #0
 800ba60:	2300      	movs	r3, #0
 800ba62:	4620      	mov	r0, r4
 800ba64:	4629      	mov	r1, r5
 800ba66:	f7f5 f841 	bl	8000aec <__aeabi_dcmplt>
 800ba6a:	b300      	cbz	r0, 800baae <pow+0xa2>
 800ba6c:	f7fc fff8 	bl	8008a60 <__errno>
 800ba70:	2322      	movs	r3, #34	; 0x22
 800ba72:	e01b      	b.n	800baac <pow+0xa0>
 800ba74:	ec47 6b10 	vmov	d0, r6, r7
 800ba78:	f000 fe53 	bl	800c722 <finite>
 800ba7c:	b9e0      	cbnz	r0, 800bab8 <pow+0xac>
 800ba7e:	eeb0 0a48 	vmov.f32	s0, s16
 800ba82:	eef0 0a68 	vmov.f32	s1, s17
 800ba86:	f000 fe4c 	bl	800c722 <finite>
 800ba8a:	b1a8      	cbz	r0, 800bab8 <pow+0xac>
 800ba8c:	ec45 4b10 	vmov	d0, r4, r5
 800ba90:	f000 fe47 	bl	800c722 <finite>
 800ba94:	b180      	cbz	r0, 800bab8 <pow+0xac>
 800ba96:	4632      	mov	r2, r6
 800ba98:	463b      	mov	r3, r7
 800ba9a:	4630      	mov	r0, r6
 800ba9c:	4639      	mov	r1, r7
 800ba9e:	f7f5 f84d 	bl	8000b3c <__aeabi_dcmpun>
 800baa2:	2800      	cmp	r0, #0
 800baa4:	d0e2      	beq.n	800ba6c <pow+0x60>
 800baa6:	f7fc ffdb 	bl	8008a60 <__errno>
 800baaa:	2321      	movs	r3, #33	; 0x21
 800baac:	6003      	str	r3, [r0, #0]
 800baae:	ecbd 8b02 	vpop	{d8}
 800bab2:	ec47 6b10 	vmov	d0, r6, r7
 800bab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bab8:	2200      	movs	r2, #0
 800baba:	2300      	movs	r3, #0
 800babc:	4630      	mov	r0, r6
 800babe:	4639      	mov	r1, r7
 800bac0:	f7f5 f80a 	bl	8000ad8 <__aeabi_dcmpeq>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	d0f2      	beq.n	800baae <pow+0xa2>
 800bac8:	eeb0 0a48 	vmov.f32	s0, s16
 800bacc:	eef0 0a68 	vmov.f32	s1, s17
 800bad0:	f000 fe27 	bl	800c722 <finite>
 800bad4:	2800      	cmp	r0, #0
 800bad6:	d0ea      	beq.n	800baae <pow+0xa2>
 800bad8:	ec45 4b10 	vmov	d0, r4, r5
 800badc:	f000 fe21 	bl	800c722 <finite>
 800bae0:	e7c3      	b.n	800ba6a <pow+0x5e>
 800bae2:	4f01      	ldr	r7, [pc, #4]	; (800bae8 <pow+0xdc>)
 800bae4:	2600      	movs	r6, #0
 800bae6:	e7e2      	b.n	800baae <pow+0xa2>
 800bae8:	3ff00000 	.word	0x3ff00000
 800baec:	00000000 	.word	0x00000000

0800baf0 <__ieee754_pow>:
 800baf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf4:	ed2d 8b06 	vpush	{d8-d10}
 800baf8:	b089      	sub	sp, #36	; 0x24
 800bafa:	ed8d 1b00 	vstr	d1, [sp]
 800bafe:	e9dd 2900 	ldrd	r2, r9, [sp]
 800bb02:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800bb06:	ea58 0102 	orrs.w	r1, r8, r2
 800bb0a:	ec57 6b10 	vmov	r6, r7, d0
 800bb0e:	d115      	bne.n	800bb3c <__ieee754_pow+0x4c>
 800bb10:	19b3      	adds	r3, r6, r6
 800bb12:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bb16:	4152      	adcs	r2, r2
 800bb18:	4299      	cmp	r1, r3
 800bb1a:	4b89      	ldr	r3, [pc, #548]	; (800bd40 <__ieee754_pow+0x250>)
 800bb1c:	4193      	sbcs	r3, r2
 800bb1e:	f080 84d2 	bcs.w	800c4c6 <__ieee754_pow+0x9d6>
 800bb22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb26:	4630      	mov	r0, r6
 800bb28:	4639      	mov	r1, r7
 800bb2a:	f7f4 fbb7 	bl	800029c <__adddf3>
 800bb2e:	ec41 0b10 	vmov	d0, r0, r1
 800bb32:	b009      	add	sp, #36	; 0x24
 800bb34:	ecbd 8b06 	vpop	{d8-d10}
 800bb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb3c:	4b81      	ldr	r3, [pc, #516]	; (800bd44 <__ieee754_pow+0x254>)
 800bb3e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800bb42:	429c      	cmp	r4, r3
 800bb44:	ee10 aa10 	vmov	sl, s0
 800bb48:	463d      	mov	r5, r7
 800bb4a:	dc06      	bgt.n	800bb5a <__ieee754_pow+0x6a>
 800bb4c:	d101      	bne.n	800bb52 <__ieee754_pow+0x62>
 800bb4e:	2e00      	cmp	r6, #0
 800bb50:	d1e7      	bne.n	800bb22 <__ieee754_pow+0x32>
 800bb52:	4598      	cmp	r8, r3
 800bb54:	dc01      	bgt.n	800bb5a <__ieee754_pow+0x6a>
 800bb56:	d10f      	bne.n	800bb78 <__ieee754_pow+0x88>
 800bb58:	b172      	cbz	r2, 800bb78 <__ieee754_pow+0x88>
 800bb5a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bb5e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bb62:	ea55 050a 	orrs.w	r5, r5, sl
 800bb66:	d1dc      	bne.n	800bb22 <__ieee754_pow+0x32>
 800bb68:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bb6c:	18db      	adds	r3, r3, r3
 800bb6e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bb72:	4152      	adcs	r2, r2
 800bb74:	429d      	cmp	r5, r3
 800bb76:	e7d0      	b.n	800bb1a <__ieee754_pow+0x2a>
 800bb78:	2d00      	cmp	r5, #0
 800bb7a:	da3b      	bge.n	800bbf4 <__ieee754_pow+0x104>
 800bb7c:	4b72      	ldr	r3, [pc, #456]	; (800bd48 <__ieee754_pow+0x258>)
 800bb7e:	4598      	cmp	r8, r3
 800bb80:	dc51      	bgt.n	800bc26 <__ieee754_pow+0x136>
 800bb82:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bb86:	4598      	cmp	r8, r3
 800bb88:	f340 84ac 	ble.w	800c4e4 <__ieee754_pow+0x9f4>
 800bb8c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bb90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bb94:	2b14      	cmp	r3, #20
 800bb96:	dd0f      	ble.n	800bbb8 <__ieee754_pow+0xc8>
 800bb98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bb9c:	fa22 f103 	lsr.w	r1, r2, r3
 800bba0:	fa01 f303 	lsl.w	r3, r1, r3
 800bba4:	4293      	cmp	r3, r2
 800bba6:	f040 849d 	bne.w	800c4e4 <__ieee754_pow+0x9f4>
 800bbaa:	f001 0101 	and.w	r1, r1, #1
 800bbae:	f1c1 0302 	rsb	r3, r1, #2
 800bbb2:	9304      	str	r3, [sp, #16]
 800bbb4:	b182      	cbz	r2, 800bbd8 <__ieee754_pow+0xe8>
 800bbb6:	e05f      	b.n	800bc78 <__ieee754_pow+0x188>
 800bbb8:	2a00      	cmp	r2, #0
 800bbba:	d15b      	bne.n	800bc74 <__ieee754_pow+0x184>
 800bbbc:	f1c3 0314 	rsb	r3, r3, #20
 800bbc0:	fa48 f103 	asr.w	r1, r8, r3
 800bbc4:	fa01 f303 	lsl.w	r3, r1, r3
 800bbc8:	4543      	cmp	r3, r8
 800bbca:	f040 8488 	bne.w	800c4de <__ieee754_pow+0x9ee>
 800bbce:	f001 0101 	and.w	r1, r1, #1
 800bbd2:	f1c1 0302 	rsb	r3, r1, #2
 800bbd6:	9304      	str	r3, [sp, #16]
 800bbd8:	4b5c      	ldr	r3, [pc, #368]	; (800bd4c <__ieee754_pow+0x25c>)
 800bbda:	4598      	cmp	r8, r3
 800bbdc:	d132      	bne.n	800bc44 <__ieee754_pow+0x154>
 800bbde:	f1b9 0f00 	cmp.w	r9, #0
 800bbe2:	f280 8478 	bge.w	800c4d6 <__ieee754_pow+0x9e6>
 800bbe6:	4959      	ldr	r1, [pc, #356]	; (800bd4c <__ieee754_pow+0x25c>)
 800bbe8:	4632      	mov	r2, r6
 800bbea:	463b      	mov	r3, r7
 800bbec:	2000      	movs	r0, #0
 800bbee:	f7f4 fe35 	bl	800085c <__aeabi_ddiv>
 800bbf2:	e79c      	b.n	800bb2e <__ieee754_pow+0x3e>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	9304      	str	r3, [sp, #16]
 800bbf8:	2a00      	cmp	r2, #0
 800bbfa:	d13d      	bne.n	800bc78 <__ieee754_pow+0x188>
 800bbfc:	4b51      	ldr	r3, [pc, #324]	; (800bd44 <__ieee754_pow+0x254>)
 800bbfe:	4598      	cmp	r8, r3
 800bc00:	d1ea      	bne.n	800bbd8 <__ieee754_pow+0xe8>
 800bc02:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bc06:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bc0a:	ea53 030a 	orrs.w	r3, r3, sl
 800bc0e:	f000 845a 	beq.w	800c4c6 <__ieee754_pow+0x9d6>
 800bc12:	4b4f      	ldr	r3, [pc, #316]	; (800bd50 <__ieee754_pow+0x260>)
 800bc14:	429c      	cmp	r4, r3
 800bc16:	dd08      	ble.n	800bc2a <__ieee754_pow+0x13a>
 800bc18:	f1b9 0f00 	cmp.w	r9, #0
 800bc1c:	f2c0 8457 	blt.w	800c4ce <__ieee754_pow+0x9de>
 800bc20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc24:	e783      	b.n	800bb2e <__ieee754_pow+0x3e>
 800bc26:	2302      	movs	r3, #2
 800bc28:	e7e5      	b.n	800bbf6 <__ieee754_pow+0x106>
 800bc2a:	f1b9 0f00 	cmp.w	r9, #0
 800bc2e:	f04f 0000 	mov.w	r0, #0
 800bc32:	f04f 0100 	mov.w	r1, #0
 800bc36:	f6bf af7a 	bge.w	800bb2e <__ieee754_pow+0x3e>
 800bc3a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bc3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bc42:	e774      	b.n	800bb2e <__ieee754_pow+0x3e>
 800bc44:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bc48:	d106      	bne.n	800bc58 <__ieee754_pow+0x168>
 800bc4a:	4632      	mov	r2, r6
 800bc4c:	463b      	mov	r3, r7
 800bc4e:	4630      	mov	r0, r6
 800bc50:	4639      	mov	r1, r7
 800bc52:	f7f4 fcd9 	bl	8000608 <__aeabi_dmul>
 800bc56:	e76a      	b.n	800bb2e <__ieee754_pow+0x3e>
 800bc58:	4b3e      	ldr	r3, [pc, #248]	; (800bd54 <__ieee754_pow+0x264>)
 800bc5a:	4599      	cmp	r9, r3
 800bc5c:	d10c      	bne.n	800bc78 <__ieee754_pow+0x188>
 800bc5e:	2d00      	cmp	r5, #0
 800bc60:	db0a      	blt.n	800bc78 <__ieee754_pow+0x188>
 800bc62:	ec47 6b10 	vmov	d0, r6, r7
 800bc66:	b009      	add	sp, #36	; 0x24
 800bc68:	ecbd 8b06 	vpop	{d8-d10}
 800bc6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc70:	f000 bc6c 	b.w	800c54c <__ieee754_sqrt>
 800bc74:	2300      	movs	r3, #0
 800bc76:	9304      	str	r3, [sp, #16]
 800bc78:	ec47 6b10 	vmov	d0, r6, r7
 800bc7c:	f000 fd48 	bl	800c710 <fabs>
 800bc80:	ec51 0b10 	vmov	r0, r1, d0
 800bc84:	f1ba 0f00 	cmp.w	sl, #0
 800bc88:	d129      	bne.n	800bcde <__ieee754_pow+0x1ee>
 800bc8a:	b124      	cbz	r4, 800bc96 <__ieee754_pow+0x1a6>
 800bc8c:	4b2f      	ldr	r3, [pc, #188]	; (800bd4c <__ieee754_pow+0x25c>)
 800bc8e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d123      	bne.n	800bcde <__ieee754_pow+0x1ee>
 800bc96:	f1b9 0f00 	cmp.w	r9, #0
 800bc9a:	da05      	bge.n	800bca8 <__ieee754_pow+0x1b8>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	2000      	movs	r0, #0
 800bca2:	492a      	ldr	r1, [pc, #168]	; (800bd4c <__ieee754_pow+0x25c>)
 800bca4:	f7f4 fdda 	bl	800085c <__aeabi_ddiv>
 800bca8:	2d00      	cmp	r5, #0
 800bcaa:	f6bf af40 	bge.w	800bb2e <__ieee754_pow+0x3e>
 800bcae:	9b04      	ldr	r3, [sp, #16]
 800bcb0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bcb4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bcb8:	4323      	orrs	r3, r4
 800bcba:	d108      	bne.n	800bcce <__ieee754_pow+0x1de>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	4610      	mov	r0, r2
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	f7f4 fae8 	bl	8000298 <__aeabi_dsub>
 800bcc8:	4602      	mov	r2, r0
 800bcca:	460b      	mov	r3, r1
 800bccc:	e78f      	b.n	800bbee <__ieee754_pow+0xfe>
 800bcce:	9b04      	ldr	r3, [sp, #16]
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	f47f af2c 	bne.w	800bb2e <__ieee754_pow+0x3e>
 800bcd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bcda:	4619      	mov	r1, r3
 800bcdc:	e727      	b.n	800bb2e <__ieee754_pow+0x3e>
 800bcde:	0feb      	lsrs	r3, r5, #31
 800bce0:	3b01      	subs	r3, #1
 800bce2:	9306      	str	r3, [sp, #24]
 800bce4:	9a06      	ldr	r2, [sp, #24]
 800bce6:	9b04      	ldr	r3, [sp, #16]
 800bce8:	4313      	orrs	r3, r2
 800bcea:	d102      	bne.n	800bcf2 <__ieee754_pow+0x202>
 800bcec:	4632      	mov	r2, r6
 800bcee:	463b      	mov	r3, r7
 800bcf0:	e7e6      	b.n	800bcc0 <__ieee754_pow+0x1d0>
 800bcf2:	4b19      	ldr	r3, [pc, #100]	; (800bd58 <__ieee754_pow+0x268>)
 800bcf4:	4598      	cmp	r8, r3
 800bcf6:	f340 80fb 	ble.w	800bef0 <__ieee754_pow+0x400>
 800bcfa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bcfe:	4598      	cmp	r8, r3
 800bd00:	4b13      	ldr	r3, [pc, #76]	; (800bd50 <__ieee754_pow+0x260>)
 800bd02:	dd0c      	ble.n	800bd1e <__ieee754_pow+0x22e>
 800bd04:	429c      	cmp	r4, r3
 800bd06:	dc0f      	bgt.n	800bd28 <__ieee754_pow+0x238>
 800bd08:	f1b9 0f00 	cmp.w	r9, #0
 800bd0c:	da0f      	bge.n	800bd2e <__ieee754_pow+0x23e>
 800bd0e:	2000      	movs	r0, #0
 800bd10:	b009      	add	sp, #36	; 0x24
 800bd12:	ecbd 8b06 	vpop	{d8-d10}
 800bd16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd1a:	f000 bcf0 	b.w	800c6fe <__math_oflow>
 800bd1e:	429c      	cmp	r4, r3
 800bd20:	dbf2      	blt.n	800bd08 <__ieee754_pow+0x218>
 800bd22:	4b0a      	ldr	r3, [pc, #40]	; (800bd4c <__ieee754_pow+0x25c>)
 800bd24:	429c      	cmp	r4, r3
 800bd26:	dd19      	ble.n	800bd5c <__ieee754_pow+0x26c>
 800bd28:	f1b9 0f00 	cmp.w	r9, #0
 800bd2c:	dcef      	bgt.n	800bd0e <__ieee754_pow+0x21e>
 800bd2e:	2000      	movs	r0, #0
 800bd30:	b009      	add	sp, #36	; 0x24
 800bd32:	ecbd 8b06 	vpop	{d8-d10}
 800bd36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd3a:	f000 bcd7 	b.w	800c6ec <__math_uflow>
 800bd3e:	bf00      	nop
 800bd40:	fff00000 	.word	0xfff00000
 800bd44:	7ff00000 	.word	0x7ff00000
 800bd48:	433fffff 	.word	0x433fffff
 800bd4c:	3ff00000 	.word	0x3ff00000
 800bd50:	3fefffff 	.word	0x3fefffff
 800bd54:	3fe00000 	.word	0x3fe00000
 800bd58:	41e00000 	.word	0x41e00000
 800bd5c:	4b60      	ldr	r3, [pc, #384]	; (800bee0 <__ieee754_pow+0x3f0>)
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f7f4 fa9a 	bl	8000298 <__aeabi_dsub>
 800bd64:	a354      	add	r3, pc, #336	; (adr r3, 800beb8 <__ieee754_pow+0x3c8>)
 800bd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	460d      	mov	r5, r1
 800bd6e:	f7f4 fc4b 	bl	8000608 <__aeabi_dmul>
 800bd72:	a353      	add	r3, pc, #332	; (adr r3, 800bec0 <__ieee754_pow+0x3d0>)
 800bd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd78:	4606      	mov	r6, r0
 800bd7a:	460f      	mov	r7, r1
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	4629      	mov	r1, r5
 800bd80:	f7f4 fc42 	bl	8000608 <__aeabi_dmul>
 800bd84:	4b57      	ldr	r3, [pc, #348]	; (800bee4 <__ieee754_pow+0x3f4>)
 800bd86:	4682      	mov	sl, r0
 800bd88:	468b      	mov	fp, r1
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	4629      	mov	r1, r5
 800bd90:	f7f4 fc3a 	bl	8000608 <__aeabi_dmul>
 800bd94:	4602      	mov	r2, r0
 800bd96:	460b      	mov	r3, r1
 800bd98:	a14b      	add	r1, pc, #300	; (adr r1, 800bec8 <__ieee754_pow+0x3d8>)
 800bd9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd9e:	f7f4 fa7b 	bl	8000298 <__aeabi_dsub>
 800bda2:	4622      	mov	r2, r4
 800bda4:	462b      	mov	r3, r5
 800bda6:	f7f4 fc2f 	bl	8000608 <__aeabi_dmul>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	460b      	mov	r3, r1
 800bdae:	2000      	movs	r0, #0
 800bdb0:	494d      	ldr	r1, [pc, #308]	; (800bee8 <__ieee754_pow+0x3f8>)
 800bdb2:	f7f4 fa71 	bl	8000298 <__aeabi_dsub>
 800bdb6:	4622      	mov	r2, r4
 800bdb8:	4680      	mov	r8, r0
 800bdba:	4689      	mov	r9, r1
 800bdbc:	462b      	mov	r3, r5
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	f7f4 fc21 	bl	8000608 <__aeabi_dmul>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	460b      	mov	r3, r1
 800bdca:	4640      	mov	r0, r8
 800bdcc:	4649      	mov	r1, r9
 800bdce:	f7f4 fc1b 	bl	8000608 <__aeabi_dmul>
 800bdd2:	a33f      	add	r3, pc, #252	; (adr r3, 800bed0 <__ieee754_pow+0x3e0>)
 800bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd8:	f7f4 fc16 	bl	8000608 <__aeabi_dmul>
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	4650      	mov	r0, sl
 800bde2:	4659      	mov	r1, fp
 800bde4:	f7f4 fa58 	bl	8000298 <__aeabi_dsub>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4680      	mov	r8, r0
 800bdee:	4689      	mov	r9, r1
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	4639      	mov	r1, r7
 800bdf4:	f7f4 fa52 	bl	800029c <__adddf3>
 800bdf8:	2000      	movs	r0, #0
 800bdfa:	4632      	mov	r2, r6
 800bdfc:	463b      	mov	r3, r7
 800bdfe:	4604      	mov	r4, r0
 800be00:	460d      	mov	r5, r1
 800be02:	f7f4 fa49 	bl	8000298 <__aeabi_dsub>
 800be06:	4602      	mov	r2, r0
 800be08:	460b      	mov	r3, r1
 800be0a:	4640      	mov	r0, r8
 800be0c:	4649      	mov	r1, r9
 800be0e:	f7f4 fa43 	bl	8000298 <__aeabi_dsub>
 800be12:	9b04      	ldr	r3, [sp, #16]
 800be14:	9a06      	ldr	r2, [sp, #24]
 800be16:	3b01      	subs	r3, #1
 800be18:	4313      	orrs	r3, r2
 800be1a:	4682      	mov	sl, r0
 800be1c:	468b      	mov	fp, r1
 800be1e:	f040 81e7 	bne.w	800c1f0 <__ieee754_pow+0x700>
 800be22:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bed8 <__ieee754_pow+0x3e8>
 800be26:	eeb0 8a47 	vmov.f32	s16, s14
 800be2a:	eef0 8a67 	vmov.f32	s17, s15
 800be2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800be32:	2600      	movs	r6, #0
 800be34:	4632      	mov	r2, r6
 800be36:	463b      	mov	r3, r7
 800be38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be3c:	f7f4 fa2c 	bl	8000298 <__aeabi_dsub>
 800be40:	4622      	mov	r2, r4
 800be42:	462b      	mov	r3, r5
 800be44:	f7f4 fbe0 	bl	8000608 <__aeabi_dmul>
 800be48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be4c:	4680      	mov	r8, r0
 800be4e:	4689      	mov	r9, r1
 800be50:	4650      	mov	r0, sl
 800be52:	4659      	mov	r1, fp
 800be54:	f7f4 fbd8 	bl	8000608 <__aeabi_dmul>
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	4640      	mov	r0, r8
 800be5e:	4649      	mov	r1, r9
 800be60:	f7f4 fa1c 	bl	800029c <__adddf3>
 800be64:	4632      	mov	r2, r6
 800be66:	463b      	mov	r3, r7
 800be68:	4680      	mov	r8, r0
 800be6a:	4689      	mov	r9, r1
 800be6c:	4620      	mov	r0, r4
 800be6e:	4629      	mov	r1, r5
 800be70:	f7f4 fbca 	bl	8000608 <__aeabi_dmul>
 800be74:	460b      	mov	r3, r1
 800be76:	4604      	mov	r4, r0
 800be78:	460d      	mov	r5, r1
 800be7a:	4602      	mov	r2, r0
 800be7c:	4649      	mov	r1, r9
 800be7e:	4640      	mov	r0, r8
 800be80:	f7f4 fa0c 	bl	800029c <__adddf3>
 800be84:	4b19      	ldr	r3, [pc, #100]	; (800beec <__ieee754_pow+0x3fc>)
 800be86:	4299      	cmp	r1, r3
 800be88:	ec45 4b19 	vmov	d9, r4, r5
 800be8c:	4606      	mov	r6, r0
 800be8e:	460f      	mov	r7, r1
 800be90:	468b      	mov	fp, r1
 800be92:	f340 82f1 	ble.w	800c478 <__ieee754_pow+0x988>
 800be96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800be9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800be9e:	4303      	orrs	r3, r0
 800bea0:	f000 81e4 	beq.w	800c26c <__ieee754_pow+0x77c>
 800bea4:	ec51 0b18 	vmov	r0, r1, d8
 800bea8:	2200      	movs	r2, #0
 800beaa:	2300      	movs	r3, #0
 800beac:	f7f4 fe1e 	bl	8000aec <__aeabi_dcmplt>
 800beb0:	3800      	subs	r0, #0
 800beb2:	bf18      	it	ne
 800beb4:	2001      	movne	r0, #1
 800beb6:	e72b      	b.n	800bd10 <__ieee754_pow+0x220>
 800beb8:	60000000 	.word	0x60000000
 800bebc:	3ff71547 	.word	0x3ff71547
 800bec0:	f85ddf44 	.word	0xf85ddf44
 800bec4:	3e54ae0b 	.word	0x3e54ae0b
 800bec8:	55555555 	.word	0x55555555
 800becc:	3fd55555 	.word	0x3fd55555
 800bed0:	652b82fe 	.word	0x652b82fe
 800bed4:	3ff71547 	.word	0x3ff71547
 800bed8:	00000000 	.word	0x00000000
 800bedc:	bff00000 	.word	0xbff00000
 800bee0:	3ff00000 	.word	0x3ff00000
 800bee4:	3fd00000 	.word	0x3fd00000
 800bee8:	3fe00000 	.word	0x3fe00000
 800beec:	408fffff 	.word	0x408fffff
 800bef0:	4bd5      	ldr	r3, [pc, #852]	; (800c248 <__ieee754_pow+0x758>)
 800bef2:	402b      	ands	r3, r5
 800bef4:	2200      	movs	r2, #0
 800bef6:	b92b      	cbnz	r3, 800bf04 <__ieee754_pow+0x414>
 800bef8:	4bd4      	ldr	r3, [pc, #848]	; (800c24c <__ieee754_pow+0x75c>)
 800befa:	f7f4 fb85 	bl	8000608 <__aeabi_dmul>
 800befe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bf02:	460c      	mov	r4, r1
 800bf04:	1523      	asrs	r3, r4, #20
 800bf06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bf0a:	4413      	add	r3, r2
 800bf0c:	9305      	str	r3, [sp, #20]
 800bf0e:	4bd0      	ldr	r3, [pc, #832]	; (800c250 <__ieee754_pow+0x760>)
 800bf10:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bf14:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bf18:	429c      	cmp	r4, r3
 800bf1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bf1e:	dd08      	ble.n	800bf32 <__ieee754_pow+0x442>
 800bf20:	4bcc      	ldr	r3, [pc, #816]	; (800c254 <__ieee754_pow+0x764>)
 800bf22:	429c      	cmp	r4, r3
 800bf24:	f340 8162 	ble.w	800c1ec <__ieee754_pow+0x6fc>
 800bf28:	9b05      	ldr	r3, [sp, #20]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	9305      	str	r3, [sp, #20]
 800bf2e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bf32:	2400      	movs	r4, #0
 800bf34:	00e3      	lsls	r3, r4, #3
 800bf36:	9307      	str	r3, [sp, #28]
 800bf38:	4bc7      	ldr	r3, [pc, #796]	; (800c258 <__ieee754_pow+0x768>)
 800bf3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf3e:	ed93 7b00 	vldr	d7, [r3]
 800bf42:	4629      	mov	r1, r5
 800bf44:	ec53 2b17 	vmov	r2, r3, d7
 800bf48:	eeb0 9a47 	vmov.f32	s18, s14
 800bf4c:	eef0 9a67 	vmov.f32	s19, s15
 800bf50:	4682      	mov	sl, r0
 800bf52:	f7f4 f9a1 	bl	8000298 <__aeabi_dsub>
 800bf56:	4652      	mov	r2, sl
 800bf58:	4606      	mov	r6, r0
 800bf5a:	460f      	mov	r7, r1
 800bf5c:	462b      	mov	r3, r5
 800bf5e:	ec51 0b19 	vmov	r0, r1, d9
 800bf62:	f7f4 f99b 	bl	800029c <__adddf3>
 800bf66:	4602      	mov	r2, r0
 800bf68:	460b      	mov	r3, r1
 800bf6a:	2000      	movs	r0, #0
 800bf6c:	49bb      	ldr	r1, [pc, #748]	; (800c25c <__ieee754_pow+0x76c>)
 800bf6e:	f7f4 fc75 	bl	800085c <__aeabi_ddiv>
 800bf72:	ec41 0b1a 	vmov	d10, r0, r1
 800bf76:	4602      	mov	r2, r0
 800bf78:	460b      	mov	r3, r1
 800bf7a:	4630      	mov	r0, r6
 800bf7c:	4639      	mov	r1, r7
 800bf7e:	f7f4 fb43 	bl	8000608 <__aeabi_dmul>
 800bf82:	2300      	movs	r3, #0
 800bf84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf88:	9302      	str	r3, [sp, #8]
 800bf8a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bf8e:	46ab      	mov	fp, r5
 800bf90:	106d      	asrs	r5, r5, #1
 800bf92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bf96:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bf9a:	ec41 0b18 	vmov	d8, r0, r1
 800bf9e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	4640      	mov	r0, r8
 800bfa6:	4649      	mov	r1, r9
 800bfa8:	4614      	mov	r4, r2
 800bfaa:	461d      	mov	r5, r3
 800bfac:	f7f4 fb2c 	bl	8000608 <__aeabi_dmul>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	4630      	mov	r0, r6
 800bfb6:	4639      	mov	r1, r7
 800bfb8:	f7f4 f96e 	bl	8000298 <__aeabi_dsub>
 800bfbc:	ec53 2b19 	vmov	r2, r3, d9
 800bfc0:	4606      	mov	r6, r0
 800bfc2:	460f      	mov	r7, r1
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	f7f4 f966 	bl	8000298 <__aeabi_dsub>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	460b      	mov	r3, r1
 800bfd0:	4650      	mov	r0, sl
 800bfd2:	4659      	mov	r1, fp
 800bfd4:	f7f4 f960 	bl	8000298 <__aeabi_dsub>
 800bfd8:	4642      	mov	r2, r8
 800bfda:	464b      	mov	r3, r9
 800bfdc:	f7f4 fb14 	bl	8000608 <__aeabi_dmul>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	460b      	mov	r3, r1
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	4639      	mov	r1, r7
 800bfe8:	f7f4 f956 	bl	8000298 <__aeabi_dsub>
 800bfec:	ec53 2b1a 	vmov	r2, r3, d10
 800bff0:	f7f4 fb0a 	bl	8000608 <__aeabi_dmul>
 800bff4:	ec53 2b18 	vmov	r2, r3, d8
 800bff8:	ec41 0b19 	vmov	d9, r0, r1
 800bffc:	ec51 0b18 	vmov	r0, r1, d8
 800c000:	f7f4 fb02 	bl	8000608 <__aeabi_dmul>
 800c004:	a37c      	add	r3, pc, #496	; (adr r3, 800c1f8 <__ieee754_pow+0x708>)
 800c006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00a:	4604      	mov	r4, r0
 800c00c:	460d      	mov	r5, r1
 800c00e:	f7f4 fafb 	bl	8000608 <__aeabi_dmul>
 800c012:	a37b      	add	r3, pc, #492	; (adr r3, 800c200 <__ieee754_pow+0x710>)
 800c014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c018:	f7f4 f940 	bl	800029c <__adddf3>
 800c01c:	4622      	mov	r2, r4
 800c01e:	462b      	mov	r3, r5
 800c020:	f7f4 faf2 	bl	8000608 <__aeabi_dmul>
 800c024:	a378      	add	r3, pc, #480	; (adr r3, 800c208 <__ieee754_pow+0x718>)
 800c026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02a:	f7f4 f937 	bl	800029c <__adddf3>
 800c02e:	4622      	mov	r2, r4
 800c030:	462b      	mov	r3, r5
 800c032:	f7f4 fae9 	bl	8000608 <__aeabi_dmul>
 800c036:	a376      	add	r3, pc, #472	; (adr r3, 800c210 <__ieee754_pow+0x720>)
 800c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03c:	f7f4 f92e 	bl	800029c <__adddf3>
 800c040:	4622      	mov	r2, r4
 800c042:	462b      	mov	r3, r5
 800c044:	f7f4 fae0 	bl	8000608 <__aeabi_dmul>
 800c048:	a373      	add	r3, pc, #460	; (adr r3, 800c218 <__ieee754_pow+0x728>)
 800c04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04e:	f7f4 f925 	bl	800029c <__adddf3>
 800c052:	4622      	mov	r2, r4
 800c054:	462b      	mov	r3, r5
 800c056:	f7f4 fad7 	bl	8000608 <__aeabi_dmul>
 800c05a:	a371      	add	r3, pc, #452	; (adr r3, 800c220 <__ieee754_pow+0x730>)
 800c05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c060:	f7f4 f91c 	bl	800029c <__adddf3>
 800c064:	4622      	mov	r2, r4
 800c066:	4606      	mov	r6, r0
 800c068:	460f      	mov	r7, r1
 800c06a:	462b      	mov	r3, r5
 800c06c:	4620      	mov	r0, r4
 800c06e:	4629      	mov	r1, r5
 800c070:	f7f4 faca 	bl	8000608 <__aeabi_dmul>
 800c074:	4602      	mov	r2, r0
 800c076:	460b      	mov	r3, r1
 800c078:	4630      	mov	r0, r6
 800c07a:	4639      	mov	r1, r7
 800c07c:	f7f4 fac4 	bl	8000608 <__aeabi_dmul>
 800c080:	4642      	mov	r2, r8
 800c082:	4604      	mov	r4, r0
 800c084:	460d      	mov	r5, r1
 800c086:	464b      	mov	r3, r9
 800c088:	ec51 0b18 	vmov	r0, r1, d8
 800c08c:	f7f4 f906 	bl	800029c <__adddf3>
 800c090:	ec53 2b19 	vmov	r2, r3, d9
 800c094:	f7f4 fab8 	bl	8000608 <__aeabi_dmul>
 800c098:	4622      	mov	r2, r4
 800c09a:	462b      	mov	r3, r5
 800c09c:	f7f4 f8fe 	bl	800029c <__adddf3>
 800c0a0:	4642      	mov	r2, r8
 800c0a2:	4682      	mov	sl, r0
 800c0a4:	468b      	mov	fp, r1
 800c0a6:	464b      	mov	r3, r9
 800c0a8:	4640      	mov	r0, r8
 800c0aa:	4649      	mov	r1, r9
 800c0ac:	f7f4 faac 	bl	8000608 <__aeabi_dmul>
 800c0b0:	4b6b      	ldr	r3, [pc, #428]	; (800c260 <__ieee754_pow+0x770>)
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	4606      	mov	r6, r0
 800c0b6:	460f      	mov	r7, r1
 800c0b8:	f7f4 f8f0 	bl	800029c <__adddf3>
 800c0bc:	4652      	mov	r2, sl
 800c0be:	465b      	mov	r3, fp
 800c0c0:	f7f4 f8ec 	bl	800029c <__adddf3>
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	460d      	mov	r5, r1
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	4640      	mov	r0, r8
 800c0d0:	4649      	mov	r1, r9
 800c0d2:	f7f4 fa99 	bl	8000608 <__aeabi_dmul>
 800c0d6:	4b62      	ldr	r3, [pc, #392]	; (800c260 <__ieee754_pow+0x770>)
 800c0d8:	4680      	mov	r8, r0
 800c0da:	4689      	mov	r9, r1
 800c0dc:	2200      	movs	r2, #0
 800c0de:	4620      	mov	r0, r4
 800c0e0:	4629      	mov	r1, r5
 800c0e2:	f7f4 f8d9 	bl	8000298 <__aeabi_dsub>
 800c0e6:	4632      	mov	r2, r6
 800c0e8:	463b      	mov	r3, r7
 800c0ea:	f7f4 f8d5 	bl	8000298 <__aeabi_dsub>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	4650      	mov	r0, sl
 800c0f4:	4659      	mov	r1, fp
 800c0f6:	f7f4 f8cf 	bl	8000298 <__aeabi_dsub>
 800c0fa:	ec53 2b18 	vmov	r2, r3, d8
 800c0fe:	f7f4 fa83 	bl	8000608 <__aeabi_dmul>
 800c102:	4622      	mov	r2, r4
 800c104:	4606      	mov	r6, r0
 800c106:	460f      	mov	r7, r1
 800c108:	462b      	mov	r3, r5
 800c10a:	ec51 0b19 	vmov	r0, r1, d9
 800c10e:	f7f4 fa7b 	bl	8000608 <__aeabi_dmul>
 800c112:	4602      	mov	r2, r0
 800c114:	460b      	mov	r3, r1
 800c116:	4630      	mov	r0, r6
 800c118:	4639      	mov	r1, r7
 800c11a:	f7f4 f8bf 	bl	800029c <__adddf3>
 800c11e:	4606      	mov	r6, r0
 800c120:	460f      	mov	r7, r1
 800c122:	4602      	mov	r2, r0
 800c124:	460b      	mov	r3, r1
 800c126:	4640      	mov	r0, r8
 800c128:	4649      	mov	r1, r9
 800c12a:	f7f4 f8b7 	bl	800029c <__adddf3>
 800c12e:	a33e      	add	r3, pc, #248	; (adr r3, 800c228 <__ieee754_pow+0x738>)
 800c130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c134:	2000      	movs	r0, #0
 800c136:	4604      	mov	r4, r0
 800c138:	460d      	mov	r5, r1
 800c13a:	f7f4 fa65 	bl	8000608 <__aeabi_dmul>
 800c13e:	4642      	mov	r2, r8
 800c140:	ec41 0b18 	vmov	d8, r0, r1
 800c144:	464b      	mov	r3, r9
 800c146:	4620      	mov	r0, r4
 800c148:	4629      	mov	r1, r5
 800c14a:	f7f4 f8a5 	bl	8000298 <__aeabi_dsub>
 800c14e:	4602      	mov	r2, r0
 800c150:	460b      	mov	r3, r1
 800c152:	4630      	mov	r0, r6
 800c154:	4639      	mov	r1, r7
 800c156:	f7f4 f89f 	bl	8000298 <__aeabi_dsub>
 800c15a:	a335      	add	r3, pc, #212	; (adr r3, 800c230 <__ieee754_pow+0x740>)
 800c15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c160:	f7f4 fa52 	bl	8000608 <__aeabi_dmul>
 800c164:	a334      	add	r3, pc, #208	; (adr r3, 800c238 <__ieee754_pow+0x748>)
 800c166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16a:	4606      	mov	r6, r0
 800c16c:	460f      	mov	r7, r1
 800c16e:	4620      	mov	r0, r4
 800c170:	4629      	mov	r1, r5
 800c172:	f7f4 fa49 	bl	8000608 <__aeabi_dmul>
 800c176:	4602      	mov	r2, r0
 800c178:	460b      	mov	r3, r1
 800c17a:	4630      	mov	r0, r6
 800c17c:	4639      	mov	r1, r7
 800c17e:	f7f4 f88d 	bl	800029c <__adddf3>
 800c182:	9a07      	ldr	r2, [sp, #28]
 800c184:	4b37      	ldr	r3, [pc, #220]	; (800c264 <__ieee754_pow+0x774>)
 800c186:	4413      	add	r3, r2
 800c188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18c:	f7f4 f886 	bl	800029c <__adddf3>
 800c190:	4682      	mov	sl, r0
 800c192:	9805      	ldr	r0, [sp, #20]
 800c194:	468b      	mov	fp, r1
 800c196:	f7f4 f9cd 	bl	8000534 <__aeabi_i2d>
 800c19a:	9a07      	ldr	r2, [sp, #28]
 800c19c:	4b32      	ldr	r3, [pc, #200]	; (800c268 <__ieee754_pow+0x778>)
 800c19e:	4413      	add	r3, r2
 800c1a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c1a4:	4606      	mov	r6, r0
 800c1a6:	460f      	mov	r7, r1
 800c1a8:	4652      	mov	r2, sl
 800c1aa:	465b      	mov	r3, fp
 800c1ac:	ec51 0b18 	vmov	r0, r1, d8
 800c1b0:	f7f4 f874 	bl	800029c <__adddf3>
 800c1b4:	4642      	mov	r2, r8
 800c1b6:	464b      	mov	r3, r9
 800c1b8:	f7f4 f870 	bl	800029c <__adddf3>
 800c1bc:	4632      	mov	r2, r6
 800c1be:	463b      	mov	r3, r7
 800c1c0:	f7f4 f86c 	bl	800029c <__adddf3>
 800c1c4:	2000      	movs	r0, #0
 800c1c6:	4632      	mov	r2, r6
 800c1c8:	463b      	mov	r3, r7
 800c1ca:	4604      	mov	r4, r0
 800c1cc:	460d      	mov	r5, r1
 800c1ce:	f7f4 f863 	bl	8000298 <__aeabi_dsub>
 800c1d2:	4642      	mov	r2, r8
 800c1d4:	464b      	mov	r3, r9
 800c1d6:	f7f4 f85f 	bl	8000298 <__aeabi_dsub>
 800c1da:	ec53 2b18 	vmov	r2, r3, d8
 800c1de:	f7f4 f85b 	bl	8000298 <__aeabi_dsub>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	4650      	mov	r0, sl
 800c1e8:	4659      	mov	r1, fp
 800c1ea:	e610      	b.n	800be0e <__ieee754_pow+0x31e>
 800c1ec:	2401      	movs	r4, #1
 800c1ee:	e6a1      	b.n	800bf34 <__ieee754_pow+0x444>
 800c1f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c240 <__ieee754_pow+0x750>
 800c1f4:	e617      	b.n	800be26 <__ieee754_pow+0x336>
 800c1f6:	bf00      	nop
 800c1f8:	4a454eef 	.word	0x4a454eef
 800c1fc:	3fca7e28 	.word	0x3fca7e28
 800c200:	93c9db65 	.word	0x93c9db65
 800c204:	3fcd864a 	.word	0x3fcd864a
 800c208:	a91d4101 	.word	0xa91d4101
 800c20c:	3fd17460 	.word	0x3fd17460
 800c210:	518f264d 	.word	0x518f264d
 800c214:	3fd55555 	.word	0x3fd55555
 800c218:	db6fabff 	.word	0xdb6fabff
 800c21c:	3fdb6db6 	.word	0x3fdb6db6
 800c220:	33333303 	.word	0x33333303
 800c224:	3fe33333 	.word	0x3fe33333
 800c228:	e0000000 	.word	0xe0000000
 800c22c:	3feec709 	.word	0x3feec709
 800c230:	dc3a03fd 	.word	0xdc3a03fd
 800c234:	3feec709 	.word	0x3feec709
 800c238:	145b01f5 	.word	0x145b01f5
 800c23c:	be3e2fe0 	.word	0xbe3e2fe0
 800c240:	00000000 	.word	0x00000000
 800c244:	3ff00000 	.word	0x3ff00000
 800c248:	7ff00000 	.word	0x7ff00000
 800c24c:	43400000 	.word	0x43400000
 800c250:	0003988e 	.word	0x0003988e
 800c254:	000bb679 	.word	0x000bb679
 800c258:	0800cce8 	.word	0x0800cce8
 800c25c:	3ff00000 	.word	0x3ff00000
 800c260:	40080000 	.word	0x40080000
 800c264:	0800cd08 	.word	0x0800cd08
 800c268:	0800ccf8 	.word	0x0800ccf8
 800c26c:	a3b5      	add	r3, pc, #724	; (adr r3, 800c544 <__ieee754_pow+0xa54>)
 800c26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c272:	4640      	mov	r0, r8
 800c274:	4649      	mov	r1, r9
 800c276:	f7f4 f811 	bl	800029c <__adddf3>
 800c27a:	4622      	mov	r2, r4
 800c27c:	ec41 0b1a 	vmov	d10, r0, r1
 800c280:	462b      	mov	r3, r5
 800c282:	4630      	mov	r0, r6
 800c284:	4639      	mov	r1, r7
 800c286:	f7f4 f807 	bl	8000298 <__aeabi_dsub>
 800c28a:	4602      	mov	r2, r0
 800c28c:	460b      	mov	r3, r1
 800c28e:	ec51 0b1a 	vmov	r0, r1, d10
 800c292:	f7f4 fc49 	bl	8000b28 <__aeabi_dcmpgt>
 800c296:	2800      	cmp	r0, #0
 800c298:	f47f ae04 	bne.w	800bea4 <__ieee754_pow+0x3b4>
 800c29c:	4aa4      	ldr	r2, [pc, #656]	; (800c530 <__ieee754_pow+0xa40>)
 800c29e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	f340 8108 	ble.w	800c4b8 <__ieee754_pow+0x9c8>
 800c2a8:	151b      	asrs	r3, r3, #20
 800c2aa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c2ae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c2b2:	fa4a f303 	asr.w	r3, sl, r3
 800c2b6:	445b      	add	r3, fp
 800c2b8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c2bc:	4e9d      	ldr	r6, [pc, #628]	; (800c534 <__ieee754_pow+0xa44>)
 800c2be:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c2c2:	4116      	asrs	r6, r2
 800c2c4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c2c8:	2000      	movs	r0, #0
 800c2ca:	ea23 0106 	bic.w	r1, r3, r6
 800c2ce:	f1c2 0214 	rsb	r2, r2, #20
 800c2d2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c2d6:	fa4a fa02 	asr.w	sl, sl, r2
 800c2da:	f1bb 0f00 	cmp.w	fp, #0
 800c2de:	4602      	mov	r2, r0
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	4629      	mov	r1, r5
 800c2e6:	bfb8      	it	lt
 800c2e8:	f1ca 0a00 	rsblt	sl, sl, #0
 800c2ec:	f7f3 ffd4 	bl	8000298 <__aeabi_dsub>
 800c2f0:	ec41 0b19 	vmov	d9, r0, r1
 800c2f4:	4642      	mov	r2, r8
 800c2f6:	464b      	mov	r3, r9
 800c2f8:	ec51 0b19 	vmov	r0, r1, d9
 800c2fc:	f7f3 ffce 	bl	800029c <__adddf3>
 800c300:	a37b      	add	r3, pc, #492	; (adr r3, 800c4f0 <__ieee754_pow+0xa00>)
 800c302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c306:	2000      	movs	r0, #0
 800c308:	4604      	mov	r4, r0
 800c30a:	460d      	mov	r5, r1
 800c30c:	f7f4 f97c 	bl	8000608 <__aeabi_dmul>
 800c310:	ec53 2b19 	vmov	r2, r3, d9
 800c314:	4606      	mov	r6, r0
 800c316:	460f      	mov	r7, r1
 800c318:	4620      	mov	r0, r4
 800c31a:	4629      	mov	r1, r5
 800c31c:	f7f3 ffbc 	bl	8000298 <__aeabi_dsub>
 800c320:	4602      	mov	r2, r0
 800c322:	460b      	mov	r3, r1
 800c324:	4640      	mov	r0, r8
 800c326:	4649      	mov	r1, r9
 800c328:	f7f3 ffb6 	bl	8000298 <__aeabi_dsub>
 800c32c:	a372      	add	r3, pc, #456	; (adr r3, 800c4f8 <__ieee754_pow+0xa08>)
 800c32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c332:	f7f4 f969 	bl	8000608 <__aeabi_dmul>
 800c336:	a372      	add	r3, pc, #456	; (adr r3, 800c500 <__ieee754_pow+0xa10>)
 800c338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33c:	4680      	mov	r8, r0
 800c33e:	4689      	mov	r9, r1
 800c340:	4620      	mov	r0, r4
 800c342:	4629      	mov	r1, r5
 800c344:	f7f4 f960 	bl	8000608 <__aeabi_dmul>
 800c348:	4602      	mov	r2, r0
 800c34a:	460b      	mov	r3, r1
 800c34c:	4640      	mov	r0, r8
 800c34e:	4649      	mov	r1, r9
 800c350:	f7f3 ffa4 	bl	800029c <__adddf3>
 800c354:	4604      	mov	r4, r0
 800c356:	460d      	mov	r5, r1
 800c358:	4602      	mov	r2, r0
 800c35a:	460b      	mov	r3, r1
 800c35c:	4630      	mov	r0, r6
 800c35e:	4639      	mov	r1, r7
 800c360:	f7f3 ff9c 	bl	800029c <__adddf3>
 800c364:	4632      	mov	r2, r6
 800c366:	463b      	mov	r3, r7
 800c368:	4680      	mov	r8, r0
 800c36a:	4689      	mov	r9, r1
 800c36c:	f7f3 ff94 	bl	8000298 <__aeabi_dsub>
 800c370:	4602      	mov	r2, r0
 800c372:	460b      	mov	r3, r1
 800c374:	4620      	mov	r0, r4
 800c376:	4629      	mov	r1, r5
 800c378:	f7f3 ff8e 	bl	8000298 <__aeabi_dsub>
 800c37c:	4642      	mov	r2, r8
 800c37e:	4606      	mov	r6, r0
 800c380:	460f      	mov	r7, r1
 800c382:	464b      	mov	r3, r9
 800c384:	4640      	mov	r0, r8
 800c386:	4649      	mov	r1, r9
 800c388:	f7f4 f93e 	bl	8000608 <__aeabi_dmul>
 800c38c:	a35e      	add	r3, pc, #376	; (adr r3, 800c508 <__ieee754_pow+0xa18>)
 800c38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c392:	4604      	mov	r4, r0
 800c394:	460d      	mov	r5, r1
 800c396:	f7f4 f937 	bl	8000608 <__aeabi_dmul>
 800c39a:	a35d      	add	r3, pc, #372	; (adr r3, 800c510 <__ieee754_pow+0xa20>)
 800c39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a0:	f7f3 ff7a 	bl	8000298 <__aeabi_dsub>
 800c3a4:	4622      	mov	r2, r4
 800c3a6:	462b      	mov	r3, r5
 800c3a8:	f7f4 f92e 	bl	8000608 <__aeabi_dmul>
 800c3ac:	a35a      	add	r3, pc, #360	; (adr r3, 800c518 <__ieee754_pow+0xa28>)
 800c3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b2:	f7f3 ff73 	bl	800029c <__adddf3>
 800c3b6:	4622      	mov	r2, r4
 800c3b8:	462b      	mov	r3, r5
 800c3ba:	f7f4 f925 	bl	8000608 <__aeabi_dmul>
 800c3be:	a358      	add	r3, pc, #352	; (adr r3, 800c520 <__ieee754_pow+0xa30>)
 800c3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c4:	f7f3 ff68 	bl	8000298 <__aeabi_dsub>
 800c3c8:	4622      	mov	r2, r4
 800c3ca:	462b      	mov	r3, r5
 800c3cc:	f7f4 f91c 	bl	8000608 <__aeabi_dmul>
 800c3d0:	a355      	add	r3, pc, #340	; (adr r3, 800c528 <__ieee754_pow+0xa38>)
 800c3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d6:	f7f3 ff61 	bl	800029c <__adddf3>
 800c3da:	4622      	mov	r2, r4
 800c3dc:	462b      	mov	r3, r5
 800c3de:	f7f4 f913 	bl	8000608 <__aeabi_dmul>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	4640      	mov	r0, r8
 800c3e8:	4649      	mov	r1, r9
 800c3ea:	f7f3 ff55 	bl	8000298 <__aeabi_dsub>
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	460d      	mov	r5, r1
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	4640      	mov	r0, r8
 800c3f8:	4649      	mov	r1, r9
 800c3fa:	f7f4 f905 	bl	8000608 <__aeabi_dmul>
 800c3fe:	2200      	movs	r2, #0
 800c400:	ec41 0b19 	vmov	d9, r0, r1
 800c404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c408:	4620      	mov	r0, r4
 800c40a:	4629      	mov	r1, r5
 800c40c:	f7f3 ff44 	bl	8000298 <__aeabi_dsub>
 800c410:	4602      	mov	r2, r0
 800c412:	460b      	mov	r3, r1
 800c414:	ec51 0b19 	vmov	r0, r1, d9
 800c418:	f7f4 fa20 	bl	800085c <__aeabi_ddiv>
 800c41c:	4632      	mov	r2, r6
 800c41e:	4604      	mov	r4, r0
 800c420:	460d      	mov	r5, r1
 800c422:	463b      	mov	r3, r7
 800c424:	4640      	mov	r0, r8
 800c426:	4649      	mov	r1, r9
 800c428:	f7f4 f8ee 	bl	8000608 <__aeabi_dmul>
 800c42c:	4632      	mov	r2, r6
 800c42e:	463b      	mov	r3, r7
 800c430:	f7f3 ff34 	bl	800029c <__adddf3>
 800c434:	4602      	mov	r2, r0
 800c436:	460b      	mov	r3, r1
 800c438:	4620      	mov	r0, r4
 800c43a:	4629      	mov	r1, r5
 800c43c:	f7f3 ff2c 	bl	8000298 <__aeabi_dsub>
 800c440:	4642      	mov	r2, r8
 800c442:	464b      	mov	r3, r9
 800c444:	f7f3 ff28 	bl	8000298 <__aeabi_dsub>
 800c448:	460b      	mov	r3, r1
 800c44a:	4602      	mov	r2, r0
 800c44c:	493a      	ldr	r1, [pc, #232]	; (800c538 <__ieee754_pow+0xa48>)
 800c44e:	2000      	movs	r0, #0
 800c450:	f7f3 ff22 	bl	8000298 <__aeabi_dsub>
 800c454:	ec41 0b10 	vmov	d0, r0, r1
 800c458:	ee10 3a90 	vmov	r3, s1
 800c45c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c464:	da2b      	bge.n	800c4be <__ieee754_pow+0x9ce>
 800c466:	4650      	mov	r0, sl
 800c468:	f000 f966 	bl	800c738 <scalbn>
 800c46c:	ec51 0b10 	vmov	r0, r1, d0
 800c470:	ec53 2b18 	vmov	r2, r3, d8
 800c474:	f7ff bbed 	b.w	800bc52 <__ieee754_pow+0x162>
 800c478:	4b30      	ldr	r3, [pc, #192]	; (800c53c <__ieee754_pow+0xa4c>)
 800c47a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c47e:	429e      	cmp	r6, r3
 800c480:	f77f af0c 	ble.w	800c29c <__ieee754_pow+0x7ac>
 800c484:	4b2e      	ldr	r3, [pc, #184]	; (800c540 <__ieee754_pow+0xa50>)
 800c486:	440b      	add	r3, r1
 800c488:	4303      	orrs	r3, r0
 800c48a:	d009      	beq.n	800c4a0 <__ieee754_pow+0x9b0>
 800c48c:	ec51 0b18 	vmov	r0, r1, d8
 800c490:	2200      	movs	r2, #0
 800c492:	2300      	movs	r3, #0
 800c494:	f7f4 fb2a 	bl	8000aec <__aeabi_dcmplt>
 800c498:	3800      	subs	r0, #0
 800c49a:	bf18      	it	ne
 800c49c:	2001      	movne	r0, #1
 800c49e:	e447      	b.n	800bd30 <__ieee754_pow+0x240>
 800c4a0:	4622      	mov	r2, r4
 800c4a2:	462b      	mov	r3, r5
 800c4a4:	f7f3 fef8 	bl	8000298 <__aeabi_dsub>
 800c4a8:	4642      	mov	r2, r8
 800c4aa:	464b      	mov	r3, r9
 800c4ac:	f7f4 fb32 	bl	8000b14 <__aeabi_dcmpge>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	f43f aef3 	beq.w	800c29c <__ieee754_pow+0x7ac>
 800c4b6:	e7e9      	b.n	800c48c <__ieee754_pow+0x99c>
 800c4b8:	f04f 0a00 	mov.w	sl, #0
 800c4bc:	e71a      	b.n	800c2f4 <__ieee754_pow+0x804>
 800c4be:	ec51 0b10 	vmov	r0, r1, d0
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	e7d4      	b.n	800c470 <__ieee754_pow+0x980>
 800c4c6:	491c      	ldr	r1, [pc, #112]	; (800c538 <__ieee754_pow+0xa48>)
 800c4c8:	2000      	movs	r0, #0
 800c4ca:	f7ff bb30 	b.w	800bb2e <__ieee754_pow+0x3e>
 800c4ce:	2000      	movs	r0, #0
 800c4d0:	2100      	movs	r1, #0
 800c4d2:	f7ff bb2c 	b.w	800bb2e <__ieee754_pow+0x3e>
 800c4d6:	4630      	mov	r0, r6
 800c4d8:	4639      	mov	r1, r7
 800c4da:	f7ff bb28 	b.w	800bb2e <__ieee754_pow+0x3e>
 800c4de:	9204      	str	r2, [sp, #16]
 800c4e0:	f7ff bb7a 	b.w	800bbd8 <__ieee754_pow+0xe8>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	f7ff bb64 	b.w	800bbb2 <__ieee754_pow+0xc2>
 800c4ea:	bf00      	nop
 800c4ec:	f3af 8000 	nop.w
 800c4f0:	00000000 	.word	0x00000000
 800c4f4:	3fe62e43 	.word	0x3fe62e43
 800c4f8:	fefa39ef 	.word	0xfefa39ef
 800c4fc:	3fe62e42 	.word	0x3fe62e42
 800c500:	0ca86c39 	.word	0x0ca86c39
 800c504:	be205c61 	.word	0xbe205c61
 800c508:	72bea4d0 	.word	0x72bea4d0
 800c50c:	3e663769 	.word	0x3e663769
 800c510:	c5d26bf1 	.word	0xc5d26bf1
 800c514:	3ebbbd41 	.word	0x3ebbbd41
 800c518:	af25de2c 	.word	0xaf25de2c
 800c51c:	3f11566a 	.word	0x3f11566a
 800c520:	16bebd93 	.word	0x16bebd93
 800c524:	3f66c16c 	.word	0x3f66c16c
 800c528:	5555553e 	.word	0x5555553e
 800c52c:	3fc55555 	.word	0x3fc55555
 800c530:	3fe00000 	.word	0x3fe00000
 800c534:	000fffff 	.word	0x000fffff
 800c538:	3ff00000 	.word	0x3ff00000
 800c53c:	4090cbff 	.word	0x4090cbff
 800c540:	3f6f3400 	.word	0x3f6f3400
 800c544:	652b82fe 	.word	0x652b82fe
 800c548:	3c971547 	.word	0x3c971547

0800c54c <__ieee754_sqrt>:
 800c54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c550:	ec55 4b10 	vmov	r4, r5, d0
 800c554:	4e55      	ldr	r6, [pc, #340]	; (800c6ac <__ieee754_sqrt+0x160>)
 800c556:	43ae      	bics	r6, r5
 800c558:	ee10 0a10 	vmov	r0, s0
 800c55c:	ee10 3a10 	vmov	r3, s0
 800c560:	462a      	mov	r2, r5
 800c562:	4629      	mov	r1, r5
 800c564:	d110      	bne.n	800c588 <__ieee754_sqrt+0x3c>
 800c566:	ee10 2a10 	vmov	r2, s0
 800c56a:	462b      	mov	r3, r5
 800c56c:	f7f4 f84c 	bl	8000608 <__aeabi_dmul>
 800c570:	4602      	mov	r2, r0
 800c572:	460b      	mov	r3, r1
 800c574:	4620      	mov	r0, r4
 800c576:	4629      	mov	r1, r5
 800c578:	f7f3 fe90 	bl	800029c <__adddf3>
 800c57c:	4604      	mov	r4, r0
 800c57e:	460d      	mov	r5, r1
 800c580:	ec45 4b10 	vmov	d0, r4, r5
 800c584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c588:	2d00      	cmp	r5, #0
 800c58a:	dc10      	bgt.n	800c5ae <__ieee754_sqrt+0x62>
 800c58c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c590:	4330      	orrs	r0, r6
 800c592:	d0f5      	beq.n	800c580 <__ieee754_sqrt+0x34>
 800c594:	b15d      	cbz	r5, 800c5ae <__ieee754_sqrt+0x62>
 800c596:	ee10 2a10 	vmov	r2, s0
 800c59a:	462b      	mov	r3, r5
 800c59c:	ee10 0a10 	vmov	r0, s0
 800c5a0:	f7f3 fe7a 	bl	8000298 <__aeabi_dsub>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	f7f4 f958 	bl	800085c <__aeabi_ddiv>
 800c5ac:	e7e6      	b.n	800c57c <__ieee754_sqrt+0x30>
 800c5ae:	1512      	asrs	r2, r2, #20
 800c5b0:	d074      	beq.n	800c69c <__ieee754_sqrt+0x150>
 800c5b2:	07d4      	lsls	r4, r2, #31
 800c5b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c5b8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c5bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c5c0:	bf5e      	ittt	pl
 800c5c2:	0fda      	lsrpl	r2, r3, #31
 800c5c4:	005b      	lslpl	r3, r3, #1
 800c5c6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c5ca:	2400      	movs	r4, #0
 800c5cc:	0fda      	lsrs	r2, r3, #31
 800c5ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c5d2:	107f      	asrs	r7, r7, #1
 800c5d4:	005b      	lsls	r3, r3, #1
 800c5d6:	2516      	movs	r5, #22
 800c5d8:	4620      	mov	r0, r4
 800c5da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c5de:	1886      	adds	r6, r0, r2
 800c5e0:	428e      	cmp	r6, r1
 800c5e2:	bfde      	ittt	le
 800c5e4:	1b89      	suble	r1, r1, r6
 800c5e6:	18b0      	addle	r0, r6, r2
 800c5e8:	18a4      	addle	r4, r4, r2
 800c5ea:	0049      	lsls	r1, r1, #1
 800c5ec:	3d01      	subs	r5, #1
 800c5ee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c5f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c5f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c5fa:	d1f0      	bne.n	800c5de <__ieee754_sqrt+0x92>
 800c5fc:	462a      	mov	r2, r5
 800c5fe:	f04f 0e20 	mov.w	lr, #32
 800c602:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c606:	4281      	cmp	r1, r0
 800c608:	eb06 0c05 	add.w	ip, r6, r5
 800c60c:	dc02      	bgt.n	800c614 <__ieee754_sqrt+0xc8>
 800c60e:	d113      	bne.n	800c638 <__ieee754_sqrt+0xec>
 800c610:	459c      	cmp	ip, r3
 800c612:	d811      	bhi.n	800c638 <__ieee754_sqrt+0xec>
 800c614:	f1bc 0f00 	cmp.w	ip, #0
 800c618:	eb0c 0506 	add.w	r5, ip, r6
 800c61c:	da43      	bge.n	800c6a6 <__ieee754_sqrt+0x15a>
 800c61e:	2d00      	cmp	r5, #0
 800c620:	db41      	blt.n	800c6a6 <__ieee754_sqrt+0x15a>
 800c622:	f100 0801 	add.w	r8, r0, #1
 800c626:	1a09      	subs	r1, r1, r0
 800c628:	459c      	cmp	ip, r3
 800c62a:	bf88      	it	hi
 800c62c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c630:	eba3 030c 	sub.w	r3, r3, ip
 800c634:	4432      	add	r2, r6
 800c636:	4640      	mov	r0, r8
 800c638:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c63c:	f1be 0e01 	subs.w	lr, lr, #1
 800c640:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c644:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c648:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c64c:	d1db      	bne.n	800c606 <__ieee754_sqrt+0xba>
 800c64e:	430b      	orrs	r3, r1
 800c650:	d006      	beq.n	800c660 <__ieee754_sqrt+0x114>
 800c652:	1c50      	adds	r0, r2, #1
 800c654:	bf13      	iteet	ne
 800c656:	3201      	addne	r2, #1
 800c658:	3401      	addeq	r4, #1
 800c65a:	4672      	moveq	r2, lr
 800c65c:	f022 0201 	bicne.w	r2, r2, #1
 800c660:	1063      	asrs	r3, r4, #1
 800c662:	0852      	lsrs	r2, r2, #1
 800c664:	07e1      	lsls	r1, r4, #31
 800c666:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c66a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c66e:	bf48      	it	mi
 800c670:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c674:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c678:	4614      	mov	r4, r2
 800c67a:	e781      	b.n	800c580 <__ieee754_sqrt+0x34>
 800c67c:	0ad9      	lsrs	r1, r3, #11
 800c67e:	3815      	subs	r0, #21
 800c680:	055b      	lsls	r3, r3, #21
 800c682:	2900      	cmp	r1, #0
 800c684:	d0fa      	beq.n	800c67c <__ieee754_sqrt+0x130>
 800c686:	02cd      	lsls	r5, r1, #11
 800c688:	d50a      	bpl.n	800c6a0 <__ieee754_sqrt+0x154>
 800c68a:	f1c2 0420 	rsb	r4, r2, #32
 800c68e:	fa23 f404 	lsr.w	r4, r3, r4
 800c692:	1e55      	subs	r5, r2, #1
 800c694:	4093      	lsls	r3, r2
 800c696:	4321      	orrs	r1, r4
 800c698:	1b42      	subs	r2, r0, r5
 800c69a:	e78a      	b.n	800c5b2 <__ieee754_sqrt+0x66>
 800c69c:	4610      	mov	r0, r2
 800c69e:	e7f0      	b.n	800c682 <__ieee754_sqrt+0x136>
 800c6a0:	0049      	lsls	r1, r1, #1
 800c6a2:	3201      	adds	r2, #1
 800c6a4:	e7ef      	b.n	800c686 <__ieee754_sqrt+0x13a>
 800c6a6:	4680      	mov	r8, r0
 800c6a8:	e7bd      	b.n	800c626 <__ieee754_sqrt+0xda>
 800c6aa:	bf00      	nop
 800c6ac:	7ff00000 	.word	0x7ff00000

0800c6b0 <with_errno>:
 800c6b0:	b570      	push	{r4, r5, r6, lr}
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	460d      	mov	r5, r1
 800c6b6:	4616      	mov	r6, r2
 800c6b8:	f7fc f9d2 	bl	8008a60 <__errno>
 800c6bc:	4629      	mov	r1, r5
 800c6be:	6006      	str	r6, [r0, #0]
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	bd70      	pop	{r4, r5, r6, pc}

0800c6c4 <xflow>:
 800c6c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6c6:	4614      	mov	r4, r2
 800c6c8:	461d      	mov	r5, r3
 800c6ca:	b108      	cbz	r0, 800c6d0 <xflow+0xc>
 800c6cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c6d0:	e9cd 2300 	strd	r2, r3, [sp]
 800c6d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6d8:	4620      	mov	r0, r4
 800c6da:	4629      	mov	r1, r5
 800c6dc:	f7f3 ff94 	bl	8000608 <__aeabi_dmul>
 800c6e0:	2222      	movs	r2, #34	; 0x22
 800c6e2:	b003      	add	sp, #12
 800c6e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6e8:	f7ff bfe2 	b.w	800c6b0 <with_errno>

0800c6ec <__math_uflow>:
 800c6ec:	b508      	push	{r3, lr}
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c6f4:	f7ff ffe6 	bl	800c6c4 <xflow>
 800c6f8:	ec41 0b10 	vmov	d0, r0, r1
 800c6fc:	bd08      	pop	{r3, pc}

0800c6fe <__math_oflow>:
 800c6fe:	b508      	push	{r3, lr}
 800c700:	2200      	movs	r2, #0
 800c702:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c706:	f7ff ffdd 	bl	800c6c4 <xflow>
 800c70a:	ec41 0b10 	vmov	d0, r0, r1
 800c70e:	bd08      	pop	{r3, pc}

0800c710 <fabs>:
 800c710:	ec51 0b10 	vmov	r0, r1, d0
 800c714:	ee10 2a10 	vmov	r2, s0
 800c718:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c71c:	ec43 2b10 	vmov	d0, r2, r3
 800c720:	4770      	bx	lr

0800c722 <finite>:
 800c722:	b082      	sub	sp, #8
 800c724:	ed8d 0b00 	vstr	d0, [sp]
 800c728:	9801      	ldr	r0, [sp, #4]
 800c72a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c72e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c732:	0fc0      	lsrs	r0, r0, #31
 800c734:	b002      	add	sp, #8
 800c736:	4770      	bx	lr

0800c738 <scalbn>:
 800c738:	b570      	push	{r4, r5, r6, lr}
 800c73a:	ec55 4b10 	vmov	r4, r5, d0
 800c73e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c742:	4606      	mov	r6, r0
 800c744:	462b      	mov	r3, r5
 800c746:	b99a      	cbnz	r2, 800c770 <scalbn+0x38>
 800c748:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c74c:	4323      	orrs	r3, r4
 800c74e:	d036      	beq.n	800c7be <scalbn+0x86>
 800c750:	4b39      	ldr	r3, [pc, #228]	; (800c838 <scalbn+0x100>)
 800c752:	4629      	mov	r1, r5
 800c754:	ee10 0a10 	vmov	r0, s0
 800c758:	2200      	movs	r2, #0
 800c75a:	f7f3 ff55 	bl	8000608 <__aeabi_dmul>
 800c75e:	4b37      	ldr	r3, [pc, #220]	; (800c83c <scalbn+0x104>)
 800c760:	429e      	cmp	r6, r3
 800c762:	4604      	mov	r4, r0
 800c764:	460d      	mov	r5, r1
 800c766:	da10      	bge.n	800c78a <scalbn+0x52>
 800c768:	a32b      	add	r3, pc, #172	; (adr r3, 800c818 <scalbn+0xe0>)
 800c76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76e:	e03a      	b.n	800c7e6 <scalbn+0xae>
 800c770:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c774:	428a      	cmp	r2, r1
 800c776:	d10c      	bne.n	800c792 <scalbn+0x5a>
 800c778:	ee10 2a10 	vmov	r2, s0
 800c77c:	4620      	mov	r0, r4
 800c77e:	4629      	mov	r1, r5
 800c780:	f7f3 fd8c 	bl	800029c <__adddf3>
 800c784:	4604      	mov	r4, r0
 800c786:	460d      	mov	r5, r1
 800c788:	e019      	b.n	800c7be <scalbn+0x86>
 800c78a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c78e:	460b      	mov	r3, r1
 800c790:	3a36      	subs	r2, #54	; 0x36
 800c792:	4432      	add	r2, r6
 800c794:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c798:	428a      	cmp	r2, r1
 800c79a:	dd08      	ble.n	800c7ae <scalbn+0x76>
 800c79c:	2d00      	cmp	r5, #0
 800c79e:	a120      	add	r1, pc, #128	; (adr r1, 800c820 <scalbn+0xe8>)
 800c7a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7a4:	da1c      	bge.n	800c7e0 <scalbn+0xa8>
 800c7a6:	a120      	add	r1, pc, #128	; (adr r1, 800c828 <scalbn+0xf0>)
 800c7a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7ac:	e018      	b.n	800c7e0 <scalbn+0xa8>
 800c7ae:	2a00      	cmp	r2, #0
 800c7b0:	dd08      	ble.n	800c7c4 <scalbn+0x8c>
 800c7b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c7b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c7ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c7be:	ec45 4b10 	vmov	d0, r4, r5
 800c7c2:	bd70      	pop	{r4, r5, r6, pc}
 800c7c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c7c8:	da19      	bge.n	800c7fe <scalbn+0xc6>
 800c7ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c7ce:	429e      	cmp	r6, r3
 800c7d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c7d4:	dd0a      	ble.n	800c7ec <scalbn+0xb4>
 800c7d6:	a112      	add	r1, pc, #72	; (adr r1, 800c820 <scalbn+0xe8>)
 800c7d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d1e2      	bne.n	800c7a6 <scalbn+0x6e>
 800c7e0:	a30f      	add	r3, pc, #60	; (adr r3, 800c820 <scalbn+0xe8>)
 800c7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e6:	f7f3 ff0f 	bl	8000608 <__aeabi_dmul>
 800c7ea:	e7cb      	b.n	800c784 <scalbn+0x4c>
 800c7ec:	a10a      	add	r1, pc, #40	; (adr r1, 800c818 <scalbn+0xe0>)
 800c7ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d0b8      	beq.n	800c768 <scalbn+0x30>
 800c7f6:	a10e      	add	r1, pc, #56	; (adr r1, 800c830 <scalbn+0xf8>)
 800c7f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7fc:	e7b4      	b.n	800c768 <scalbn+0x30>
 800c7fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c802:	3236      	adds	r2, #54	; 0x36
 800c804:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c808:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c80c:	4620      	mov	r0, r4
 800c80e:	4b0c      	ldr	r3, [pc, #48]	; (800c840 <scalbn+0x108>)
 800c810:	2200      	movs	r2, #0
 800c812:	e7e8      	b.n	800c7e6 <scalbn+0xae>
 800c814:	f3af 8000 	nop.w
 800c818:	c2f8f359 	.word	0xc2f8f359
 800c81c:	01a56e1f 	.word	0x01a56e1f
 800c820:	8800759c 	.word	0x8800759c
 800c824:	7e37e43c 	.word	0x7e37e43c
 800c828:	8800759c 	.word	0x8800759c
 800c82c:	fe37e43c 	.word	0xfe37e43c
 800c830:	c2f8f359 	.word	0xc2f8f359
 800c834:	81a56e1f 	.word	0x81a56e1f
 800c838:	43500000 	.word	0x43500000
 800c83c:	ffff3cb0 	.word	0xffff3cb0
 800c840:	3c900000 	.word	0x3c900000

0800c844 <_init>:
 800c844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c846:	bf00      	nop
 800c848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c84a:	bc08      	pop	{r3}
 800c84c:	469e      	mov	lr, r3
 800c84e:	4770      	bx	lr

0800c850 <_fini>:
 800c850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c852:	bf00      	nop
 800c854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c856:	bc08      	pop	{r3}
 800c858:	469e      	mov	lr, r3
 800c85a:	4770      	bx	lr
