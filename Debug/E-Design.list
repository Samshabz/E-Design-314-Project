
E-Design.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f53c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800f6e0  0800f6e0  0001f6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc68  0800fc68  00020290  2**0
                  CONTENTS
  4 .ARM          00000000  0800fc68  0800fc68  00020290  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fc68  0800fc68  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc68  0800fc68  0001fc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc6c  0800fc6c  0001fc6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800fc70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020290  2**0
                  CONTENTS
 10 .bss          000004c0  20000290  20000290  00020290  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000750  20000750  00020290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c7f4  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003185  00000000  00000000  0003cab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  0003fc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001420  00000000  00000000  000411a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024341  00000000  00000000  000425c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b9c4  00000000  00000000  00066909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db750  00000000  00000000  000822cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015da1d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007068  00000000  00000000  0015da70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000290 	.word	0x20000290
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f6c4 	.word	0x0800f6c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000294 	.word	0x20000294
 80001dc:	0800f6c4 	.word	0x0800f6c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <set_trackpad_settings>:

volatile double InitialdiffX;
volatile double InitialdiffY;


void set_trackpad_settings() {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	; 0x30
 8000c9c:	af04      	add	r7, sp, #16

	uint8_t transferBytes[30];// Temporary array which holds the bytes to be transferred.

	/* Change the ATI Settings */
	/* Memory Map Position 0x30 - 0x3D */
	transferBytes[0] = TP_ATI_MULTIPLIERS_DIVIDERS_0;
 8000c9e:	23e1      	movs	r3, #225	; 0xe1
 8000ca0:	703b      	strb	r3, [r7, #0]
	transferBytes[1] = TP_ATI_MULTIPLIERS_DIVIDERS_1;
 8000ca2:	2333      	movs	r3, #51	; 0x33
 8000ca4:	707b      	strb	r3, [r7, #1]
	transferBytes[2] = TP_COMPENSATION_DIV_0;
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	70bb      	strb	r3, [r7, #2]
	transferBytes[3] = TP_COMPENSATION_DIV_1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	70fb      	strb	r3, [r7, #3]
	transferBytes[4] = TP_ATI_TARGET_0;
 8000cae:	232c      	movs	r3, #44	; 0x2c
 8000cb0:	713b      	strb	r3, [r7, #4]
	transferBytes[5] = TP_ATI_TARGET_1;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	717b      	strb	r3, [r7, #5]
	transferBytes[6] = TP_REF_DRIFT_LIMIT_0;
 8000cb6:	2332      	movs	r3, #50	; 0x32
 8000cb8:	71bb      	strb	r3, [r7, #6]
	transferBytes[7] = TP_REF_DRIFT_LIMIT_1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	71fb      	strb	r3, [r7, #7]
	transferBytes[8] = TP_MIN_COUNT_REATI_0;
 8000cbe:	2332      	movs	r3, #50	; 0x32
 8000cc0:	723b      	strb	r3, [r7, #8]
	transferBytes[9] = TP_MIN_COUNT_REATI_1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	727b      	strb	r3, [r7, #9]
	transferBytes[10] = REATI_RETRY_TIME_0;
 8000cc6:	2305      	movs	r3, #5
 8000cc8:	72bb      	strb	r3, [r7, #10]
	transferBytes[11] = REATI_RETRY_TIME_1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	72fb      	strb	r3, [r7, #11]
	transferBytes[12] = ALP_ATI_MULTIPLIERS_DIVIDERS_0;
 8000cce:	2323      	movs	r3, #35	; 0x23
 8000cd0:	733b      	strb	r3, [r7, #12]
	transferBytes[13] = ALP_ATI_MULTIPLIERS_DIVIDERS_1;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	737b      	strb	r3, [r7, #13]
	transferBytes[14] = ALP_COMPENSATION_DIV_0;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	73bb      	strb	r3, [r7, #14]
	transferBytes[15] = ALP_COMPENSATION_DIV_1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73fb      	strb	r3, [r7, #15]
	transferBytes[16] = ALP_ATI_TARGET_0;
 8000cde:	23c8      	movs	r3, #200	; 0xc8
 8000ce0:	743b      	strb	r3, [r7, #16]
	transferBytes[17] = ALP_ATI_TARGET_1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	747b      	strb	r3, [r7, #17]
	transferBytes[18] = ALP_LTA_DRIFT_LIMIT_0;
 8000ce6:	2314      	movs	r3, #20
 8000ce8:	74bb      	strb	r3, [r7, #18]
	transferBytes[19] = ALP_LTA_DRIFT_LIMIT_1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	74fb      	strb	r3, [r7, #19]

	/* Change the ALP ATI Compensation */
	/* Memory Map Position 0x3A - 0x3D */
	transferBytes[20] = ALP_COMPENSATION_A_0;
 8000cee:	23e8      	movs	r3, #232	; 0xe8
 8000cf0:	753b      	strb	r3, [r7, #20]
	transferBytes[21] = ALP_COMPENSATION_A_1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	757b      	strb	r3, [r7, #21]
	transferBytes[22] = ALP_COMPENSATION_B_0;
 8000cf6:	23d3      	movs	r3, #211	; 0xd3
 8000cf8:	75bb      	strb	r3, [r7, #22]
	transferBytes[23] = ALP_COMPENSATION_B_1;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	75fb      	strb	r3, [r7, #23]
//	writeRandomBytes(IQS7211A_MM_TP_ATI_MIR, 24, transferBytes, RESTART);
//	HAL_I2C_Master_Transmit(&hi2c1, IQS7211A_MM_TP_ATI_MIR,transferBytes, 24, 100);
	while (azoFlag != 1)
 8000cfe:	bf00      	nop
 8000d00:	4bda      	ldr	r3, [pc, #872]	; (800106c <set_trackpad_settings+0x3d4>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d1fb      	bne.n	8000d00 <set_trackpad_settings+0x68>
		;
	azoFlag = 0;
 8000d08:	4bd8      	ldr	r3, [pc, #864]	; (800106c <set_trackpad_settings+0x3d4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (0x56 << 1), IQS7211A_MM_TP_ATI_MIR, 1,
 8000d0e:	2305      	movs	r3, #5
 8000d10:	9302      	str	r3, [sp, #8]
 8000d12:	2318      	movs	r3, #24
 8000d14:	9301      	str	r3, [sp, #4]
 8000d16:	463b      	mov	r3, r7
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	2230      	movs	r2, #48	; 0x30
 8000d1e:	21ac      	movs	r1, #172	; 0xac
 8000d20:	48d3      	ldr	r0, [pc, #844]	; (8001070 <set_trackpad_settings+0x3d8>)
 8000d22:	f006 f817 	bl	8006d54 <HAL_I2C_Mem_Write>
			transferBytes, 24, 5);

	/* Change the Report Rates and Timing */
	/* Memory Map Position 0x40 - 0x4A */
	transferBytes[0] = ACTIVE_MODE_REPORT_RATE_0;
 8000d26:	230a      	movs	r3, #10
 8000d28:	703b      	strb	r3, [r7, #0]
	transferBytes[1] = ACTIVE_MODE_REPORT_RATE_1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	707b      	strb	r3, [r7, #1]
	transferBytes[2] = IDLE_TOUCH_MODE_REPORT_RATE_0;
 8000d2e:	2332      	movs	r3, #50	; 0x32
 8000d30:	70bb      	strb	r3, [r7, #2]
	transferBytes[3] = IDLE_TOUCH_MODE_REPORT_RATE_1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	70fb      	strb	r3, [r7, #3]
	transferBytes[4] = IDLE_MODE_REPORT_RATE_0;
 8000d36:	2332      	movs	r3, #50	; 0x32
 8000d38:	713b      	strb	r3, [r7, #4]
	transferBytes[5] = IDLE_MODE_REPORT_RATE_1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	717b      	strb	r3, [r7, #5]
	transferBytes[6] = LP1_MODE_REPORT_RATE_0;
 8000d3e:	2350      	movs	r3, #80	; 0x50
 8000d40:	71bb      	strb	r3, [r7, #6]
	transferBytes[7] = LP1_MODE_REPORT_RATE_1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	71fb      	strb	r3, [r7, #7]
	transferBytes[8] = LP2_MODE_REPORT_RATE_0;
 8000d46:	23a0      	movs	r3, #160	; 0xa0
 8000d48:	723b      	strb	r3, [r7, #8]
	transferBytes[9] = LP2_MODE_REPORT_RATE_1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	727b      	strb	r3, [r7, #9]
	transferBytes[10] = ACTIVE_MODE_TIMEOUT_0;
 8000d4e:	230a      	movs	r3, #10
 8000d50:	72bb      	strb	r3, [r7, #10]
	transferBytes[11] = ACTIVE_MODE_TIMEOUT_1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	72fb      	strb	r3, [r7, #11]
	transferBytes[12] = IDLE_TOUCH_MODE_TIMEOUT_0;
 8000d56:	233c      	movs	r3, #60	; 0x3c
 8000d58:	733b      	strb	r3, [r7, #12]
	transferBytes[13] = IDLE_TOUCH_MODE_TIMEOUT_1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	737b      	strb	r3, [r7, #13]
	transferBytes[14] = IDLE_MODE_TIMEOUT_0;
 8000d5e:	2314      	movs	r3, #20
 8000d60:	73bb      	strb	r3, [r7, #14]
	transferBytes[15] = IDLE_MODE_TIMEOUT_1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	73fb      	strb	r3, [r7, #15]
	transferBytes[16] = LP1_MODE_TIMEOUT_0;
 8000d66:	230a      	movs	r3, #10
 8000d68:	743b      	strb	r3, [r7, #16]
	transferBytes[17] = LP1_MODE_TIMEOUT_1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	747b      	strb	r3, [r7, #17]
	transferBytes[18] = REF_UPDATE_TIME_0;
 8000d6e:	2308      	movs	r3, #8
 8000d70:	74bb      	strb	r3, [r7, #18]
	transferBytes[19] = REF_UPDATE_TIME_1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	74fb      	strb	r3, [r7, #19]
	transferBytes[20] = I2C_TIMEOUT_0;
 8000d76:	2364      	movs	r3, #100	; 0x64
 8000d78:	753b      	strb	r3, [r7, #20]
	transferBytes[21] = I2C_TIMEOUT_1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	757b      	strb	r3, [r7, #21]
//	writeRandomBytes(IQS7211A_MM_ACTIVE_MODE_RR, 22, transferBytes, RESTART);
//	HAL_I2C_Master_Transmit(&hi2c1, IQS7211A_MM_ACTIVE_MODE_RR,transferBytes, 22, 100);
	while (azoFlag != 1)
 8000d7e:	bf00      	nop
 8000d80:	4bba      	ldr	r3, [pc, #744]	; (800106c <set_trackpad_settings+0x3d4>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d1fb      	bne.n	8000d80 <set_trackpad_settings+0xe8>
		;
	azoFlag = 0;
 8000d88:	4bb8      	ldr	r3, [pc, #736]	; (800106c <set_trackpad_settings+0x3d4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (0x56 << 1), IQS7211A_MM_ACTIVE_MODE_RR, 1,
 8000d8e:	2305      	movs	r3, #5
 8000d90:	9302      	str	r3, [sp, #8]
 8000d92:	2316      	movs	r3, #22
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	463b      	mov	r3, r7
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	2240      	movs	r2, #64	; 0x40
 8000d9e:	21ac      	movs	r1, #172	; 0xac
 8000da0:	48b3      	ldr	r0, [pc, #716]	; (8001070 <set_trackpad_settings+0x3d8>)
 8000da2:	f005 ffd7 	bl	8006d54 <HAL_I2C_Mem_Write>
			transferBytes, 22, 5);

	/* Change the System Settings */
	/* Memory Map Position 0x50 - 0x5B */
	transferBytes[0] = SYSTEM_CONTROL_0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	703b      	strb	r3, [r7, #0]
	transferBytes[1] = SYSTEM_CONTROL_1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	707b      	strb	r3, [r7, #1]
	transferBytes[2] = CONFIG_SETTINGS0;
 8000dae:	233c      	movs	r3, #60	; 0x3c
 8000db0:	70bb      	strb	r3, [r7, #2]
	transferBytes[3] = CONFIG_SETTINGS1;
 8000db2:	2306      	movs	r3, #6
 8000db4:	70fb      	strb	r3, [r7, #3]
	transferBytes[4] = OTHER_SETTINGS_0;
 8000db6:	2320      	movs	r3, #32
 8000db8:	713b      	strb	r3, [r7, #4]
	transferBytes[5] = OTHER_SETTINGS_1;
 8000dba:	23ff      	movs	r3, #255	; 0xff
 8000dbc:	717b      	strb	r3, [r7, #5]
	transferBytes[6] = TRACKPAD_TOUCH_SET_THRESHOLD;
 8000dbe:	2332      	movs	r3, #50	; 0x32
 8000dc0:	71bb      	strb	r3, [r7, #6]
	transferBytes[7] = TRACKPAD_TOUCH_CLEAR_THRESHOLD;
 8000dc2:	2314      	movs	r3, #20
 8000dc4:	71fb      	strb	r3, [r7, #7]
	transferBytes[8] = ALP_THRESHOLD_0;
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	723b      	strb	r3, [r7, #8]
	transferBytes[9] = ALP_THRESHOLD_1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	727b      	strb	r3, [r7, #9]
	transferBytes[10] = OPEN_0_0;
 8000dce:	23ff      	movs	r3, #255	; 0xff
 8000dd0:	72bb      	strb	r3, [r7, #10]
	transferBytes[11] = OPEN_0_1;
 8000dd2:	23ff      	movs	r3, #255	; 0xff
 8000dd4:	72fb      	strb	r3, [r7, #11]
	transferBytes[12] = ALP_SET_DEBOUNCE;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	733b      	strb	r3, [r7, #12]
	transferBytes[13] = ALP_CLEAR_DEBOUNCE;
 8000dda:	2304      	movs	r3, #4
 8000ddc:	737b      	strb	r3, [r7, #13]
	transferBytes[14] = OPEN_1_0;
 8000dde:	23ff      	movs	r3, #255	; 0xff
 8000de0:	73bb      	strb	r3, [r7, #14]
	transferBytes[15] = OPEN_1_1;
 8000de2:	23ff      	movs	r3, #255	; 0xff
 8000de4:	73fb      	strb	r3, [r7, #15]
	transferBytes[16] = TP_CONVERSION_FREQUENCY_UP_PASS_LENGTH;
 8000de6:	2302      	movs	r3, #2
 8000de8:	743b      	strb	r3, [r7, #16]
	transferBytes[17] = TP_CONVERSION_FREQUENCY_FRACTION_VALUE;
 8000dea:	231a      	movs	r3, #26
 8000dec:	747b      	strb	r3, [r7, #17]
	transferBytes[18] = ALP_CONVERSION_FREQUENCY_UP_PASS_LENGTH;
 8000dee:	2302      	movs	r3, #2
 8000df0:	74bb      	strb	r3, [r7, #18]
	transferBytes[19] = ALP_CONVERSION_FREQUENCY_FRACTION_VALUE;
 8000df2:	231a      	movs	r3, #26
 8000df4:	74fb      	strb	r3, [r7, #19]
	transferBytes[20] = TRACKPAD_HARDWARE_SETTINGS_0;
 8000df6:	2301      	movs	r3, #1
 8000df8:	753b      	strb	r3, [r7, #20]
	transferBytes[21] = TRACKPAD_HARDWARE_SETTINGS_1;
 8000dfa:	238d      	movs	r3, #141	; 0x8d
 8000dfc:	757b      	strb	r3, [r7, #21]
	transferBytes[22] = ALP_HARDWARE_SETTINGS_0;
 8000dfe:	2365      	movs	r3, #101	; 0x65
 8000e00:	75bb      	strb	r3, [r7, #22]
	transferBytes[23] = ALP_HARDWARE_SETTINGS_1;
 8000e02:	239d      	movs	r3, #157	; 0x9d
 8000e04:	75fb      	strb	r3, [r7, #23]
//	writeRandomBytes(IQS7211A_MM_SYSTEM_CONTROL, 24, transferBytes, RESTART);
//	HAL_I2C_Master_Transmit(&hi2c1, IQS7211A_MM_SYSTEM_CONTROL,transferBytes, 24, 100);
	while (azoFlag != 1)
 8000e06:	bf00      	nop
 8000e08:	4b98      	ldr	r3, [pc, #608]	; (800106c <set_trackpad_settings+0x3d4>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d1fb      	bne.n	8000e08 <set_trackpad_settings+0x170>
		;
	azoFlag = 0;
 8000e10:	4b96      	ldr	r3, [pc, #600]	; (800106c <set_trackpad_settings+0x3d4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (0x56 << 1), IQS7211A_MM_SYSTEM_CONTROL, 1,
 8000e16:	2305      	movs	r3, #5
 8000e18:	9302      	str	r3, [sp, #8]
 8000e1a:	2318      	movs	r3, #24
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	463b      	mov	r3, r7
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2301      	movs	r3, #1
 8000e24:	2250      	movs	r2, #80	; 0x50
 8000e26:	21ac      	movs	r1, #172	; 0xac
 8000e28:	4891      	ldr	r0, [pc, #580]	; (8001070 <set_trackpad_settings+0x3d8>)
 8000e2a:	f005 ff93 	bl	8006d54 <HAL_I2C_Mem_Write>
			transferBytes, 24, 5);

	/* Change the Trackpad Settings */
	/* Memory Map Position 0x60 - 0x69 */
	transferBytes[0] = TRACKPAD_SETTINGS_0_0;
 8000e2e:	2328      	movs	r3, #40	; 0x28
 8000e30:	703b      	strb	r3, [r7, #0]
	transferBytes[1] = TRACKPAD_SETTINGS_0_1;
 8000e32:	2308      	movs	r3, #8
 8000e34:	707b      	strb	r3, [r7, #1]
	transferBytes[2] = TRACKPAD_SETTINGS_1_0;
 8000e36:	2304      	movs	r3, #4
 8000e38:	70bb      	strb	r3, [r7, #2]
	transferBytes[3] = TRACKPAD_SETTINGS_1_1;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	70fb      	strb	r3, [r7, #3]
	transferBytes[4] = X_RESOLUTION_0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	713b      	strb	r3, [r7, #4]
	transferBytes[5] = X_RESOLUTION_1;
 8000e42:	2307      	movs	r3, #7
 8000e44:	717b      	strb	r3, [r7, #5]
	transferBytes[6] = Y_RESOLUTION_0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	71bb      	strb	r3, [r7, #6]
	transferBytes[7] = Y_RESOLUTION_1;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	71fb      	strb	r3, [r7, #7]
	transferBytes[8] = XY_DYNAMIC_FILTER_BOTTOM_SPEED_0;
 8000e4e:	2306      	movs	r3, #6
 8000e50:	723b      	strb	r3, [r7, #8]
	transferBytes[9] = XY_DYNAMIC_FILTER_BOTTOM_SPEED_1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	727b      	strb	r3, [r7, #9]
	transferBytes[10] = XY_DYNAMIC_FILTER_TOP_SPEED_0;
 8000e56:	237c      	movs	r3, #124	; 0x7c
 8000e58:	72bb      	strb	r3, [r7, #10]
	transferBytes[11] = XY_DYNAMIC_FILTER_TOP_SPEED_1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	72fb      	strb	r3, [r7, #11]
	transferBytes[12] = XY_DYNAMIC_FILTER_BOTTOM_BETA;
 8000e5e:	2307      	movs	r3, #7
 8000e60:	733b      	strb	r3, [r7, #12]
	transferBytes[13] = XY_DYNAMIC_FILTER_STATIC_FILTER_BETA;
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	737b      	strb	r3, [r7, #13]
	transferBytes[14] = STATIONARY_TOUCH_MOV_THRESHOLD;
 8000e66:	2314      	movs	r3, #20
 8000e68:	73bb      	strb	r3, [r7, #14]
	transferBytes[15] = FINGER_SPLIT_FACTOR;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	73fb      	strb	r3, [r7, #15]
	transferBytes[16] = X_TRIM_VALUE_0;
 8000e6e:	2314      	movs	r3, #20
 8000e70:	743b      	strb	r3, [r7, #16]
	transferBytes[17] = X_TRIM_VALUE_1;
 8000e72:	2300      	movs	r3, #0
 8000e74:	747b      	strb	r3, [r7, #17]
	transferBytes[18] = Y_TRIM_VALUE_0;
 8000e76:	2314      	movs	r3, #20
 8000e78:	74bb      	strb	r3, [r7, #18]
	transferBytes[19] = Y_TRIM_VALUE_1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	74fb      	strb	r3, [r7, #19]
//	writeRandomBytes(IQS7211A_MM_TP_SETTINGS_0, 20, transferBytes, RESTART);
//	HAL_I2C_Master_Transmit(&hi2c1, IQS7211A_MM_TP_SETTINGS_0,transferBytes, 20, 100);
	while (azoFlag != 1)
 8000e7e:	bf00      	nop
 8000e80:	4b7a      	ldr	r3, [pc, #488]	; (800106c <set_trackpad_settings+0x3d4>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d1fb      	bne.n	8000e80 <set_trackpad_settings+0x1e8>
		;
	azoFlag = 0;
 8000e88:	4b78      	ldr	r3, [pc, #480]	; (800106c <set_trackpad_settings+0x3d4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (0x56 << 1), IQS7211A_MM_TP_SETTINGS_0, 1,
 8000e8e:	2305      	movs	r3, #5
 8000e90:	9302      	str	r3, [sp, #8]
 8000e92:	2314      	movs	r3, #20
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	463b      	mov	r3, r7
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	2260      	movs	r2, #96	; 0x60
 8000e9e:	21ac      	movs	r1, #172	; 0xac
 8000ea0:	4873      	ldr	r0, [pc, #460]	; (8001070 <set_trackpad_settings+0x3d8>)
 8000ea2:	f005 ff57 	bl	8006d54 <HAL_I2C_Mem_Write>
			transferBytes, 20, 5);

	/* Change the ALP Settings */
	/* Memory Map Position 0x70 - 0x74 */
	transferBytes[0] = ALP_COUNT_FILTER_BETA_0;
 8000ea6:	23b4      	movs	r3, #180	; 0xb4
 8000ea8:	703b      	strb	r3, [r7, #0]
	transferBytes[1] = OPEN_0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	707b      	strb	r3, [r7, #1]
	transferBytes[2] = ALP_LTA_BETA_LP1;
 8000eae:	2306      	movs	r3, #6
 8000eb0:	70bb      	strb	r3, [r7, #2]
	transferBytes[3] = ALP_LTA_BETA_LP2;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	70fb      	strb	r3, [r7, #3]
	transferBytes[4] = ALP_SETUP_0;
 8000eb6:	23aa      	movs	r3, #170	; 0xaa
 8000eb8:	713b      	strb	r3, [r7, #4]
	transferBytes[5] = ALP_SETUP_1;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	717b      	strb	r3, [r7, #5]
	transferBytes[6] = ALP_TX_ENABLE_0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	71bb      	strb	r3, [r7, #6]
	transferBytes[7] = ALP_TX_ENABLE_1;
 8000ec2:	230f      	movs	r3, #15
 8000ec4:	71fb      	strb	r3, [r7, #7]

	/* Change the Settings Version Numbers */
	/* Memory Map Position 0x74 - 0x75 */
	transferBytes[8] = MINOR_VERSION;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	723b      	strb	r3, [r7, #8]
	transferBytes[9] = MAJOR_VERSION;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	727b      	strb	r3, [r7, #9]
//	writeRandomBytes(IQS7211A_MM_ALP_COUNT_FILTER_BETA, 10, transferBytes, RESTART);
//	HAL_I2C_Master_Transmit(&hi2c1, IQS7211A_MM_ALP_COUNT_FILTER_BETA,transferBytes, 10, 100);
	while (azoFlag != 1)
 8000ece:	bf00      	nop
 8000ed0:	4b66      	ldr	r3, [pc, #408]	; (800106c <set_trackpad_settings+0x3d4>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d1fb      	bne.n	8000ed0 <set_trackpad_settings+0x238>
		;
	azoFlag = 0;
 8000ed8:	4b64      	ldr	r3, [pc, #400]	; (800106c <set_trackpad_settings+0x3d4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (0x56 << 1), IQS7211A_MM_ALP_COUNT_FILTER_BETA, 1,
 8000ede:	2305      	movs	r3, #5
 8000ee0:	9302      	str	r3, [sp, #8]
 8000ee2:	230a      	movs	r3, #10
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2301      	movs	r3, #1
 8000eec:	2270      	movs	r2, #112	; 0x70
 8000eee:	21ac      	movs	r1, #172	; 0xac
 8000ef0:	485f      	ldr	r0, [pc, #380]	; (8001070 <set_trackpad_settings+0x3d8>)
 8000ef2:	f005 ff2f 	bl	8006d54 <HAL_I2C_Mem_Write>
			transferBytes, 10, 5);

	/* Change the Gesture Settings */
	/* Memory Map Position 0x80 - 0x8F */
	transferBytes[0] = GESTURE_ENABLE_0;
 8000ef6:	233f      	movs	r3, #63	; 0x3f
 8000ef8:	703b      	strb	r3, [r7, #0]
	transferBytes[1] = GESTURE_ENABLE_1;
 8000efa:	230f      	movs	r3, #15
 8000efc:	707b      	strb	r3, [r7, #1]
	transferBytes[2] = TAP_TIME_0;
 8000efe:	2396      	movs	r3, #150	; 0x96
 8000f00:	70bb      	strb	r3, [r7, #2]
	transferBytes[3] = TAP_TIME_1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	70fb      	strb	r3, [r7, #3]
	transferBytes[4] = TAP_DISTANCE_0;
 8000f06:	2332      	movs	r3, #50	; 0x32
 8000f08:	713b      	strb	r3, [r7, #4]
	transferBytes[5] = TAP_DISTANCE_1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	717b      	strb	r3, [r7, #5]
	transferBytes[6] = HOLD_TIME_0;
 8000f0e:	232c      	movs	r3, #44	; 0x2c
 8000f10:	71bb      	strb	r3, [r7, #6]
	transferBytes[7] = HOLD_TIME_1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	71fb      	strb	r3, [r7, #7]
	transferBytes[8] = SWIPE_TIME_0;
 8000f16:	2396      	movs	r3, #150	; 0x96
 8000f18:	723b      	strb	r3, [r7, #8]
	transferBytes[9] = SWIPE_TIME_1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	727b      	strb	r3, [r7, #9]
	transferBytes[10] = SWIPE_X_DISTANCE_0;
 8000f1e:	23c8      	movs	r3, #200	; 0xc8
 8000f20:	72bb      	strb	r3, [r7, #10]
	transferBytes[11] = SWIPE_X_DISTANCE_1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	72fb      	strb	r3, [r7, #11]
	transferBytes[12] = SWIPE_Y_DISTANCE_0;
 8000f26:	23c8      	movs	r3, #200	; 0xc8
 8000f28:	733b      	strb	r3, [r7, #12]
	transferBytes[13] = SWIPE_Y_DISTANCE_1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	737b      	strb	r3, [r7, #13]
	transferBytes[14] = SWIPE_ANGLE_0;
 8000f2e:	2317      	movs	r3, #23
 8000f30:	73bb      	strb	r3, [r7, #14]
	transferBytes[15] = GESTURE_OPEN_0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
//	writeRandomBytes(IQS7211A_MM_GESTURE_ENABLE, 16, transferBytes, RESTART);
//	HAL_I2C_Master_Transmit(&hi2c1, IQS7211A_MM_GESTURE_ENABLE,transferBytes, 16, 100);
	while (azoFlag != 1)
 8000f36:	bf00      	nop
 8000f38:	4b4c      	ldr	r3, [pc, #304]	; (800106c <set_trackpad_settings+0x3d4>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d1fb      	bne.n	8000f38 <set_trackpad_settings+0x2a0>
		;
	azoFlag = 0;
 8000f40:	4b4a      	ldr	r3, [pc, #296]	; (800106c <set_trackpad_settings+0x3d4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (0x56 << 1), IQS7211A_MM_GESTURE_ENABLE, 1,
 8000f46:	2305      	movs	r3, #5
 8000f48:	9302      	str	r3, [sp, #8]
 8000f4a:	2310      	movs	r3, #16
 8000f4c:	9301      	str	r3, [sp, #4]
 8000f4e:	463b      	mov	r3, r7
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2301      	movs	r3, #1
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	21ac      	movs	r1, #172	; 0xac
 8000f58:	4845      	ldr	r0, [pc, #276]	; (8001070 <set_trackpad_settings+0x3d8>)
 8000f5a:	f005 fefb 	bl	8006d54 <HAL_I2C_Mem_Write>
			transferBytes, 16, 5);

	/* Change the RxTx Mapping */
	/* Memory Map Position 0x90 - 0x9C */
	transferBytes[0] = RX_TX_MAP_0;
 8000f5e:	2307      	movs	r3, #7
 8000f60:	703b      	strb	r3, [r7, #0]
	transferBytes[1] = RX_TX_MAP_1;
 8000f62:	2306      	movs	r3, #6
 8000f64:	707b      	strb	r3, [r7, #1]
	transferBytes[2] = RX_TX_MAP_2;
 8000f66:	2305      	movs	r3, #5
 8000f68:	70bb      	strb	r3, [r7, #2]
	transferBytes[3] = RX_TX_MAP_3;
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	70fb      	strb	r3, [r7, #3]
	transferBytes[4] = RX_TX_MAP_4;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	713b      	strb	r3, [r7, #4]
	transferBytes[5] = RX_TX_MAP_5;
 8000f72:	2302      	movs	r3, #2
 8000f74:	717b      	strb	r3, [r7, #5]
	transferBytes[6] = RX_TX_MAP_6;
 8000f76:	2301      	movs	r3, #1
 8000f78:	71bb      	strb	r3, [r7, #6]
	transferBytes[7] = RX_TX_MAP_7;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	71fb      	strb	r3, [r7, #7]
	transferBytes[8] = RX_TX_MAP_8;
 8000f7e:	2308      	movs	r3, #8
 8000f80:	723b      	strb	r3, [r7, #8]
	transferBytes[9] = RX_TX_MAP_9;
 8000f82:	2309      	movs	r3, #9
 8000f84:	727b      	strb	r3, [r7, #9]
	transferBytes[10] = RX_TX_MAP_10;
 8000f86:	230a      	movs	r3, #10
 8000f88:	72bb      	strb	r3, [r7, #10]
	transferBytes[11] = RX_TX_MAP_11;
 8000f8a:	230b      	movs	r3, #11
 8000f8c:	72fb      	strb	r3, [r7, #11]
	transferBytes[12] = RX_TX_MAP_12;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	733b      	strb	r3, [r7, #12]
//	writeRandomBytes(IQS7211A_MM_RXTX_MAPPING_1_0, 13, transferBytes, RESTART);
//	HAL_I2C_Master_Transmit(&hi2c1, IQS7211A_MM_RXTX_MAPPING_1_0,transferBytes, 13, 100);
	while (azoFlag != 1)
 8000f92:	bf00      	nop
 8000f94:	4b35      	ldr	r3, [pc, #212]	; (800106c <set_trackpad_settings+0x3d4>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d1fb      	bne.n	8000f94 <set_trackpad_settings+0x2fc>
		;
	azoFlag = 0;
 8000f9c:	4b33      	ldr	r3, [pc, #204]	; (800106c <set_trackpad_settings+0x3d4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (0x56 << 1), IQS7211A_MM_RXTX_MAPPING_1_0, 1,
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	9302      	str	r3, [sp, #8]
 8000fa6:	230d      	movs	r3, #13
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	463b      	mov	r3, r7
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	2290      	movs	r2, #144	; 0x90
 8000fb2:	21ac      	movs	r1, #172	; 0xac
 8000fb4:	482e      	ldr	r0, [pc, #184]	; (8001070 <set_trackpad_settings+0x3d8>)
 8000fb6:	f005 fecd 	bl	8006d54 <HAL_I2C_Mem_Write>
			transferBytes, 13, 5);
	/* Change the Allocation of channels into cycles 0-9 */
	/* Memory Map Position 0xA0 - 0xBD */
	transferBytes[0] = PLACEHOLDER_0;
 8000fba:	2305      	movs	r3, #5
 8000fbc:	703b      	strb	r3, [r7, #0]
	transferBytes[1] = CH_1_CYCLE_0;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	707b      	strb	r3, [r7, #1]
	transferBytes[2] = CH_2_CYCLE_0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	70bb      	strb	r3, [r7, #2]
	transferBytes[3] = PLACEHOLDER_1;
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	70fb      	strb	r3, [r7, #3]
	transferBytes[4] = CH_1_CYCLE_1;
 8000fca:	2305      	movs	r3, #5
 8000fcc:	713b      	strb	r3, [r7, #4]
	transferBytes[5] = CH_2_CYCLE_1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	717b      	strb	r3, [r7, #5]
	transferBytes[6] = PLACEHOLDER_2;
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	71bb      	strb	r3, [r7, #6]
	transferBytes[7] = CH_1_CYCLE_2;
 8000fd6:	2306      	movs	r3, #6
 8000fd8:	71fb      	strb	r3, [r7, #7]
	transferBytes[8] = CH_2_CYCLE_2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	723b      	strb	r3, [r7, #8]
	transferBytes[9] = PLACEHOLDER_3;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	727b      	strb	r3, [r7, #9]
	transferBytes[10] = CH_1_CYCLE_3;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	72bb      	strb	r3, [r7, #10]
	transferBytes[11] = CH_2_CYCLE_3;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	72fb      	strb	r3, [r7, #11]
	transferBytes[12] = PLACEHOLDER_4;
 8000fea:	2305      	movs	r3, #5
 8000fec:	733b      	strb	r3, [r7, #12]
	transferBytes[13] = CH_1_CYCLE_4;
 8000fee:	230c      	movs	r3, #12
 8000ff0:	737b      	strb	r3, [r7, #13]
	transferBytes[14] = CH_2_CYCLE_4;
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	73bb      	strb	r3, [r7, #14]
	transferBytes[15] = PLACEHOLDER_5;
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	73fb      	strb	r3, [r7, #15]
	transferBytes[16] = CH_1_CYCLE_5;
 8000ffa:	230d      	movs	r3, #13
 8000ffc:	743b      	strb	r3, [r7, #16]
	transferBytes[17] = CH_2_CYCLE_5;
 8000ffe:	2309      	movs	r3, #9
 8001000:	747b      	strb	r3, [r7, #17]
	transferBytes[18] = PLACEHOLDER_6;
 8001002:	2305      	movs	r3, #5
 8001004:	74bb      	strb	r3, [r7, #18]
	transferBytes[19] = CH_1_CYCLE_6;
 8001006:	230e      	movs	r3, #14
 8001008:	74fb      	strb	r3, [r7, #19]
	transferBytes[20] = CH_2_CYCLE_6;
 800100a:	230a      	movs	r3, #10
 800100c:	753b      	strb	r3, [r7, #20]
	transferBytes[21] = PLACEHOLDER_7;
 800100e:	2305      	movs	r3, #5
 8001010:	757b      	strb	r3, [r7, #21]
	transferBytes[22] = CH_1_CYCLE_7;
 8001012:	230f      	movs	r3, #15
 8001014:	75bb      	strb	r3, [r7, #22]
	transferBytes[23] = CH_2_CYCLE_7;
 8001016:	230b      	movs	r3, #11
 8001018:	75fb      	strb	r3, [r7, #23]
	transferBytes[24] = PLACEHOLDER_8;
 800101a:	2305      	movs	r3, #5
 800101c:	763b      	strb	r3, [r7, #24]
	transferBytes[25] = CH_1_CYCLE_8;
 800101e:	2314      	movs	r3, #20
 8001020:	767b      	strb	r3, [r7, #25]
	transferBytes[26] = CH_2_CYCLE_8;
 8001022:	2310      	movs	r3, #16
 8001024:	76bb      	strb	r3, [r7, #26]
	transferBytes[27] = PLACEHOLDER_9;
 8001026:	2305      	movs	r3, #5
 8001028:	76fb      	strb	r3, [r7, #27]
	transferBytes[28] = CH_1_CYCLE_9;
 800102a:	2315      	movs	r3, #21
 800102c:	773b      	strb	r3, [r7, #28]
	transferBytes[29] = CH_2_CYCLE_9;
 800102e:	2311      	movs	r3, #17
 8001030:	777b      	strb	r3, [r7, #29]
//	writeRandomBytes(IQS7211A_MM_CYCLE_SETUP_0_9, 30, transferBytes, RESTART);
//	HAL_I2C_Master_Transmit(&hi2c1, IQS7211A_MM_CYCLE_SETUP_0_9,transferBytes, 30, 100);
	while (azoFlag != 1)
 8001032:	bf00      	nop
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <set_trackpad_settings+0x3d4>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d1fb      	bne.n	8001034 <set_trackpad_settings+0x39c>
		;
	azoFlag = 0;
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <set_trackpad_settings+0x3d4>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (0x56 << 1), IQS7211A_MM_CYCLE_SETUP_0_9, 1,
 8001042:	2305      	movs	r3, #5
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	231e      	movs	r3, #30
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	463b      	mov	r3, r7
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	22a0      	movs	r2, #160	; 0xa0
 8001052:	21ac      	movs	r1, #172	; 0xac
 8001054:	4806      	ldr	r0, [pc, #24]	; (8001070 <set_trackpad_settings+0x3d8>)
 8001056:	f005 fe7d 	bl	8006d54 <HAL_I2C_Mem_Write>
			transferBytes, 30, 5);

	/* Change the Allocation of channels into cycles 10-17 */
	/* Memory Map Position 0xB0 - 0xCA */
	transferBytes[0] = PLACEHOLDER_10;
 800105a:	2305      	movs	r3, #5
 800105c:	703b      	strb	r3, [r7, #0]
	transferBytes[1] = CH_1_CYCLE_10;
 800105e:	2316      	movs	r3, #22
 8001060:	707b      	strb	r3, [r7, #1]
	transferBytes[2] = CH_2_CYCLE_10;
 8001062:	2312      	movs	r3, #18
 8001064:	70bb      	strb	r3, [r7, #2]
	transferBytes[3] = PLACEHOLDER_11;
 8001066:	2305      	movs	r3, #5
 8001068:	e004      	b.n	8001074 <set_trackpad_settings+0x3dc>
 800106a:	bf00      	nop
 800106c:	200000b0 	.word	0x200000b0
 8001070:	20000388 	.word	0x20000388
 8001074:	70fb      	strb	r3, [r7, #3]
	transferBytes[4] = CH_1_CYCLE_11;
 8001076:	2317      	movs	r3, #23
 8001078:	713b      	strb	r3, [r7, #4]
	transferBytes[5] = CH_2_CYCLE_11;
 800107a:	2313      	movs	r3, #19
 800107c:	717b      	strb	r3, [r7, #5]
	transferBytes[6] = PLACEHOLDER_12;
 800107e:	2305      	movs	r3, #5
 8001080:	71bb      	strb	r3, [r7, #6]
	transferBytes[7] = CH_1_CYCLE_12;
 8001082:	231c      	movs	r3, #28
 8001084:	71fb      	strb	r3, [r7, #7]
	transferBytes[8] = CH_2_CYCLE_12;
 8001086:	2318      	movs	r3, #24
 8001088:	723b      	strb	r3, [r7, #8]
	transferBytes[9] = PLACEHOLDER_13;
 800108a:	2305      	movs	r3, #5
 800108c:	727b      	strb	r3, [r7, #9]
	transferBytes[10] = CH_1_CYCLE_13;
 800108e:	231d      	movs	r3, #29
 8001090:	72bb      	strb	r3, [r7, #10]
	transferBytes[11] = CH_2_CYCLE_13;
 8001092:	2319      	movs	r3, #25
 8001094:	72fb      	strb	r3, [r7, #11]
	transferBytes[12] = PLACEHOLDER_14;
 8001096:	2305      	movs	r3, #5
 8001098:	733b      	strb	r3, [r7, #12]
	transferBytes[13] = CH_1_CYCLE_14;
 800109a:	231e      	movs	r3, #30
 800109c:	737b      	strb	r3, [r7, #13]
	transferBytes[14] = CH_2_CYCLE_14;
 800109e:	231a      	movs	r3, #26
 80010a0:	73bb      	strb	r3, [r7, #14]
	transferBytes[15] = PLACEHOLDER_15;
 80010a2:	2305      	movs	r3, #5
 80010a4:	73fb      	strb	r3, [r7, #15]
	transferBytes[16] = CH_1_CYCLE_15;
 80010a6:	231f      	movs	r3, #31
 80010a8:	743b      	strb	r3, [r7, #16]
	transferBytes[17] = CH_2_CYCLE_15;
 80010aa:	231b      	movs	r3, #27
 80010ac:	747b      	strb	r3, [r7, #17]
	transferBytes[18] = PLACEHOLDER_16;
 80010ae:	2305      	movs	r3, #5
 80010b0:	74bb      	strb	r3, [r7, #18]
	transferBytes[19] = CH_1_CYCLE_16;
 80010b2:	23ff      	movs	r3, #255	; 0xff
 80010b4:	74fb      	strb	r3, [r7, #19]
	transferBytes[20] = CH_2_CYCLE_16;
 80010b6:	23ff      	movs	r3, #255	; 0xff
 80010b8:	753b      	strb	r3, [r7, #20]
	transferBytes[21] = PLACEHOLDER_17;
 80010ba:	2305      	movs	r3, #5
 80010bc:	757b      	strb	r3, [r7, #21]
	transferBytes[22] = CH_1_CYCLE_17;
 80010be:	23ff      	movs	r3, #255	; 0xff
 80010c0:	75bb      	strb	r3, [r7, #22]
	transferBytes[23] = CH_2_CYCLE_17;
 80010c2:	23ff      	movs	r3, #255	; 0xff
 80010c4:	75fb      	strb	r3, [r7, #23]
//	writeRandomBytes(IQS7211A_MM_CYCLE_SETUP_10_17, 24, transferBytes, stopOrRestart);
//	HAL_I2C_Master_Transmit(&hi2c1, IQS7211A_MM_CYCLE_SETUP_10_17,transferBytes, 24, 100);
	while (azoFlag != 1)
 80010c6:	bf00      	nop
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <set_trackpad_settings+0x460>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d1fb      	bne.n	80010c8 <set_trackpad_settings+0x430>
		;
	azoFlag = 0;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <set_trackpad_settings+0x460>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
//	HAL_I2C_Mem_Write(&hi2c1, (0x56<<1), IQS7211A_MM_CYCLE_SETUP_10_17,1, transferBytes, 24, 5);
	HAL_I2C_Mem_Write(&hi2c1, 0x56 << 1, IQS7211A_MM_CYCLE_SETUP_10_17,
 80010d6:	2364      	movs	r3, #100	; 0x64
 80010d8:	9302      	str	r3, [sp, #8]
 80010da:	2318      	movs	r3, #24
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	463b      	mov	r3, r7
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2301      	movs	r3, #1
 80010e4:	22b0      	movs	r2, #176	; 0xb0
 80010e6:	21ac      	movs	r1, #172	; 0xac
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <set_trackpad_settings+0x464>)
 80010ea:	f005 fe33 	bl	8006d54 <HAL_I2C_Mem_Write>
			I2C_MEMADD_SIZE_8BIT, transferBytes, 24, 100);

}
 80010ee:	bf00      	nop
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200000b0 	.word	0x200000b0
 80010fc:	20000388 	.word	0x20000388

08001100 <make_reset_certain>:

void make_reset_certain() {
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16
	uint8_t transferBytes[2];// The array which will hold the bytes to be transferred.
	uint8_t software_reset[2];

	while (azoFlag != 1)
 8001106:	bf00      	nop
 8001108:	4b51      	ldr	r3, [pc, #324]	; (8001250 <make_reset_certain+0x150>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d1fb      	bne.n	8001108 <make_reset_certain+0x8>
		;
	azoFlag = 0;
 8001110:	4b4f      	ldr	r3, [pc, #316]	; (8001250 <make_reset_certain+0x150>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, (0x56 << 1), 0x10, 1, transferBytes, 2, 10);// read info flags
 8001116:	230a      	movs	r3, #10
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2302      	movs	r3, #2
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2210      	movs	r2, #16
 8001126:	21ac      	movs	r1, #172	; 0xac
 8001128:	484a      	ldr	r0, [pc, #296]	; (8001254 <make_reset_certain+0x154>)
 800112a:	f005 ff27 	bl	8006f7c <HAL_I2C_Mem_Read>
	if ((transferBytes[0] & 0x80) == 0b10000000) { //if reset bit is set
 800112e:	793b      	ldrb	r3, [r7, #4]
 8001130:	b25b      	sxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	da2d      	bge.n	8001192 <make_reset_certain+0x92>
		//remember to acknowledge reset
		while (azoFlag != 1)
 8001136:	bf00      	nop
 8001138:	4b45      	ldr	r3, [pc, #276]	; (8001250 <make_reset_certain+0x150>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d1fb      	bne.n	8001138 <make_reset_certain+0x38>
			;
		azoFlag = 0;
 8001140:	4b43      	ldr	r3, [pc, #268]	; (8001250 <make_reset_certain+0x150>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c1, (0x56 << 1), 0x50, 1, software_reset, 2, 10);
 8001146:	230a      	movs	r3, #10
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	2302      	movs	r3, #2
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	463b      	mov	r3, r7
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2301      	movs	r3, #1
 8001154:	2250      	movs	r2, #80	; 0x50
 8001156:	21ac      	movs	r1, #172	; 0xac
 8001158:	483e      	ldr	r0, [pc, #248]	; (8001254 <make_reset_certain+0x154>)
 800115a:	f005 ff0f 	bl	8006f7c <HAL_I2C_Mem_Read>
		software_reset[0] |= 0x80;
 800115e:	783b      	ldrb	r3, [r7, #0]
 8001160:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001164:	b2db      	uxtb	r3, r3
 8001166:	703b      	strb	r3, [r7, #0]
		while (azoFlag != 1)
 8001168:	bf00      	nop
 800116a:	4b39      	ldr	r3, [pc, #228]	; (8001250 <make_reset_certain+0x150>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d1fb      	bne.n	800116a <make_reset_certain+0x6a>
			;
		azoFlag = 0;
 8001172:	4b37      	ldr	r3, [pc, #220]	; (8001250 <make_reset_certain+0x150>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, (0x56 << 1), 50, 1, software_reset, 1, 5);
 8001178:	2305      	movs	r3, #5
 800117a:	9302      	str	r3, [sp, #8]
 800117c:	2301      	movs	r3, #1
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	463b      	mov	r3, r7
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	2232      	movs	r2, #50	; 0x32
 8001188:	21ac      	movs	r1, #172	; 0xac
 800118a:	4832      	ldr	r0, [pc, #200]	; (8001254 <make_reset_certain+0x154>)
 800118c:	f005 fde2 	bl	8006d54 <HAL_I2C_Mem_Write>
			;
		azoFlag = 0;
		HAL_I2C_Mem_Write(&hi2c1, (0x56 << 1), 50, 1, software_reset, 1, 5);

	}
}
 8001190:	e059      	b.n	8001246 <make_reset_certain+0x146>
		while (azoFlag != 1)
 8001192:	bf00      	nop
 8001194:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <make_reset_certain+0x150>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d1fb      	bne.n	8001194 <make_reset_certain+0x94>
		azoFlag = 0;
 800119c:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <make_reset_certain+0x150>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c1, (0x56 << 1), 0x50, 1, software_reset, 2, 10);
 80011a2:	230a      	movs	r3, #10
 80011a4:	9302      	str	r3, [sp, #8]
 80011a6:	2302      	movs	r3, #2
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	463b      	mov	r3, r7
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2301      	movs	r3, #1
 80011b0:	2250      	movs	r2, #80	; 0x50
 80011b2:	21ac      	movs	r1, #172	; 0xac
 80011b4:	4827      	ldr	r0, [pc, #156]	; (8001254 <make_reset_certain+0x154>)
 80011b6:	f005 fee1 	bl	8006f7c <HAL_I2C_Mem_Read>
		software_reset[1] |= 0x02;
 80011ba:	787b      	ldrb	r3, [r7, #1]
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	707b      	strb	r3, [r7, #1]
		while (azoFlag != 1)
 80011c4:	bf00      	nop
 80011c6:	4b22      	ldr	r3, [pc, #136]	; (8001250 <make_reset_certain+0x150>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d1fb      	bne.n	80011c6 <make_reset_certain+0xc6>
		azoFlag = 0;
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <make_reset_certain+0x150>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, (0x56 << 1), 50, 1, software_reset, 1, 5);//write the software reset bit
 80011d4:	2305      	movs	r3, #5
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2301      	movs	r3, #1
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	463b      	mov	r3, r7
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	2232      	movs	r2, #50	; 0x32
 80011e4:	21ac      	movs	r1, #172	; 0xac
 80011e6:	481b      	ldr	r0, [pc, #108]	; (8001254 <make_reset_certain+0x154>)
 80011e8:	f005 fdb4 	bl	8006d54 <HAL_I2C_Mem_Write>
		while (azoFlag != 1)
 80011ec:	bf00      	nop
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <make_reset_certain+0x150>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d1fb      	bne.n	80011ee <make_reset_certain+0xee>
		azoFlag = 0;
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <make_reset_certain+0x150>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c1, (0x56 << 1), 0x50, 1, software_reset, 2, 10);
 80011fc:	230a      	movs	r3, #10
 80011fe:	9302      	str	r3, [sp, #8]
 8001200:	2302      	movs	r3, #2
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	463b      	mov	r3, r7
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	2250      	movs	r2, #80	; 0x50
 800120c:	21ac      	movs	r1, #172	; 0xac
 800120e:	4811      	ldr	r0, [pc, #68]	; (8001254 <make_reset_certain+0x154>)
 8001210:	f005 feb4 	bl	8006f7c <HAL_I2C_Mem_Read>
		software_reset[0] |= 0x80;
 8001214:	783b      	ldrb	r3, [r7, #0]
 8001216:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800121a:	b2db      	uxtb	r3, r3
 800121c:	703b      	strb	r3, [r7, #0]
		while (azoFlag != 1)
 800121e:	bf00      	nop
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <make_reset_certain+0x150>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d1fb      	bne.n	8001220 <make_reset_certain+0x120>
		azoFlag = 0;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <make_reset_certain+0x150>)
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, (0x56 << 1), 50, 1, software_reset, 1, 5);
 800122e:	2305      	movs	r3, #5
 8001230:	9302      	str	r3, [sp, #8]
 8001232:	2301      	movs	r3, #1
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	463b      	mov	r3, r7
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	2232      	movs	r2, #50	; 0x32
 800123e:	21ac      	movs	r1, #172	; 0xac
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <make_reset_certain+0x154>)
 8001242:	f005 fd87 	bl	8006d54 <HAL_I2C_Mem_Write>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200000b0 	.word	0x200000b0
 8001254:	20000388 	.word	0x20000388

08001258 <TP_ReATI>:
//	}
//	HAL_I2C_Mem_Write(&hi2c1, 0x56 << 1, 0x60,
//	I2C_MEMADD_SIZE_8BIT, transferBytes, 2, 100);
//}

void TP_ReATI() {
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af04      	add	r7, sp, #16
	uint8_t transferBytes[2]; // Array to store the bytes transferred.
							  // Use an array to be consistent with other methods in this class.
	//  readRandomBytes(IQS7211A_MM_SYSTEM_CONTROL, 1, transferByte, RESTART);
	while (azoFlag != 1)
 800125e:	bf00      	nop
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <TP_ReATI+0x68>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d1fb      	bne.n	8001260 <TP_ReATI+0x8>
		;
	azoFlag = 0;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <TP_ReATI+0x68>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, (0x56 << 1), 0x50, 1, transferBytes, 2, 5);
 800126e:	2305      	movs	r3, #5
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	2302      	movs	r3, #2
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	2250      	movs	r2, #80	; 0x50
 800127e:	21ac      	movs	r1, #172	; 0xac
 8001280:	4810      	ldr	r0, [pc, #64]	; (80012c4 <TP_ReATI+0x6c>)
 8001282:	f005 fe7b 	bl	8006f7c <HAL_I2C_Mem_Read>
	// Mask the settings with the REDO_ATI_BIT.
	transferBytes[0] |= 0x20; // This is the bit required to start an ATI routine.
 8001286:	793b      	ldrb	r3, [r7, #4]
 8001288:	f043 0320 	orr.w	r3, r3, #32
 800128c:	b2db      	uxtb	r3, r3
 800128e:	713b      	strb	r3, [r7, #4]
	// Write the new byte to the required device.
	//  writeRandomBytes(IQS7211A_MM_SYSTEM_CONTROL, 1, transferByte, stopOrRestart);
	while (azoFlag != 1)
 8001290:	bf00      	nop
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <TP_ReATI+0x68>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d1fb      	bne.n	8001292 <TP_ReATI+0x3a>
		;
	azoFlag = 0;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <TP_ReATI+0x68>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (0x56 << 1), 0x50, 1, transferBytes, 2, 5);
 80012a0:	2305      	movs	r3, #5
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	2302      	movs	r3, #2
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	2250      	movs	r2, #80	; 0x50
 80012b0:	21ac      	movs	r1, #172	; 0xac
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <TP_ReATI+0x6c>)
 80012b4:	f005 fd4e 	bl	8006d54 <HAL_I2C_Mem_Write>
//		  HAL_I2C_Mem_Write(&hi2c1, 0x56 << 1, IQS7211A_MM_SYSTEM_CONTROL,I2C_MEMADD_SIZE_8BIT, transferBytes, 1, 100);
	//	I2C_MEMADD_SIZE_8BIT, transferBytes, 24, 100);
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200000b0 	.word	0x200000b0
 80012c4:	20000388 	.word	0x20000388

080012c8 <updateTrackpad>:
//	HAL_Delay(1);
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
//}
//
//
void updateTrackpad() {
 80012c8:	b5b0      	push	{r4, r5, r7, lr}
 80012ca:	b090      	sub	sp, #64	; 0x40
 80012cc:	af04      	add	r7, sp, #16


	 if (azoFlag == 1) {
 80012ce:	4b4f      	ldr	r3, [pc, #316]	; (800140c <updateTrackpad+0x144>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	f040 817a 	bne.w	80015cc <updateTrackpad+0x304>
		//duration = HAL_GetTick() - startTime;

		uint8_t Gesture = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint8_t xCoordLow = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		uint8_t xCoordHigh = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		uint8_t yCoordLow = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		uint8_t yCoordHigh = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b



		uint8_t transferBytes[10];
		HAL_I2C_Mem_Read(&hi2c1, (0x56 << 1), IQS7211A_MM_GESTURES,
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	230a      	movs	r3, #10
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	f107 0320 	add.w	r3, r7, #32
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	2211      	movs	r2, #17
 800130a:	21ac      	movs	r1, #172	; 0xac
 800130c:	4840      	ldr	r0, [pc, #256]	; (8001410 <updateTrackpad+0x148>)
 800130e:	f005 fe35 	bl	8006f7c <HAL_I2C_Mem_Read>
				I2C_MEMADD_SIZE_8BIT, (uint8_t*) &transferBytes, 10,
				HAL_MAX_DELAY);
		Gesture = transferBytes[0];
 8001312:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		xCoordLow = transferBytes[6];
 800131a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800131e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		xCoordHigh = transferBytes[7];
 8001322:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001326:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		yCoordLow = transferBytes[8];
 800132a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800132e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		yCoordHigh = transferBytes[9];
 8001332:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		xCoord = (uint16_t) (xCoordLow);
 800133a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800133e:	b29a      	uxth	r2, r3
 8001340:	4b34      	ldr	r3, [pc, #208]	; (8001414 <updateTrackpad+0x14c>)
 8001342:	801a      	strh	r2, [r3, #0]
		xCoord |= (uint16_t) (xCoordHigh << 8);
 8001344:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001348:	b29b      	uxth	r3, r3
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	b29a      	uxth	r2, r3
 800134e:	4b31      	ldr	r3, [pc, #196]	; (8001414 <updateTrackpad+0x14c>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	b29b      	uxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b29a      	uxth	r2, r3
 8001358:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <updateTrackpad+0x14c>)
 800135a:	801a      	strh	r2, [r3, #0]
		yCoord = (uint16_t) (yCoordLow);
 800135c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001360:	b29a      	uxth	r2, r3
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <updateTrackpad+0x150>)
 8001364:	801a      	strh	r2, [r3, #0]
		yCoord |= (uint16_t) (yCoordHigh << 8);
 8001366:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800136a:	b29b      	uxth	r3, r3
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b29a      	uxth	r2, r3
 8001370:	4b29      	ldr	r3, [pc, #164]	; (8001418 <updateTrackpad+0x150>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	b29b      	uxth	r3, r3
 8001376:	4313      	orrs	r3, r2
 8001378:	b29a      	uxth	r2, r3
 800137a:	4b27      	ldr	r3, [pc, #156]	; (8001418 <updateTrackpad+0x150>)
 800137c:	801a      	strh	r2, [r3, #0]


		if ((xCoord != 65535) && (yCoord != 65535)) {
 800137e:	4b25      	ldr	r3, [pc, #148]	; (8001414 <updateTrackpad+0x14c>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001388:	4293      	cmp	r3, r2
 800138a:	f000 8119 	beq.w	80015c0 <updateTrackpad+0x2f8>
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <updateTrackpad+0x150>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	b29b      	uxth	r3, r3
 8001394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001398:	4293      	cmp	r3, r2
 800139a:	f000 8111 	beq.w	80015c0 <updateTrackpad+0x2f8>


			yCoord=768-yCoord;
 800139e:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <updateTrackpad+0x150>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	f5c3 7340 	rsb	r3, r3, #768	; 0x300
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <updateTrackpad+0x150>)
 80013ac:	801a      	strh	r2, [r3, #0]

			char Coord_x[7];
			char Coord_y[7];

			sprintf(&Coord_x, "%05d  ", xCoord);
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <updateTrackpad+0x14c>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	461a      	mov	r2, r3
 80013b6:	f107 0318 	add.w	r3, r7, #24
 80013ba:	4918      	ldr	r1, [pc, #96]	; (800141c <updateTrackpad+0x154>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f00b f831 	bl	800c424 <siprintf>
			sprintf(&Coord_y, "%05d\n", yCoord);
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <updateTrackpad+0x150>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	461a      	mov	r2, r3
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	4914      	ldr	r1, [pc, #80]	; (8001420 <updateTrackpad+0x158>)
 80013d0:	4618      	mov	r0, r3
 80013d2:	f00b f827 	bl	800c424 <siprintf>


			char initCoX[7];
			char initCoY[7];

			if (PrevDownpressFlag == 0) {
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <updateTrackpad+0x15c>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d12b      	bne.n	8001438 <updateTrackpad+0x170>
				InitialxCoord = xCoord;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <updateTrackpad+0x14c>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <updateTrackpad+0x160>)
 80013e8:	801a      	strh	r2, [r3, #0]
				InitialyCoord = yCoord;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <updateTrackpad+0x150>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <updateTrackpad+0x164>)
 80013f2:	801a      	strh	r2, [r3, #0]

					initialstate_intensity=out_new;
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <updateTrackpad+0x168>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f89b 	bl	8000534 <__aeabi_i2d>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	490c      	ldr	r1, [pc, #48]	; (8001434 <updateTrackpad+0x16c>)
 8001404:	e9c1 2300 	strd	r2, r3, [r1]
 8001408:	e023      	b.n	8001452 <updateTrackpad+0x18a>
 800140a:	bf00      	nop
 800140c:	200000b0 	.word	0x200000b0
 8001410:	20000388 	.word	0x20000388
 8001414:	200002ac 	.word	0x200002ac
 8001418:	200002ae 	.word	0x200002ae
 800141c:	0800f6e0 	.word	0x0800f6e0
 8001420:	0800f6e8 	.word	0x0800f6e8
 8001424:	200002b7 	.word	0x200002b7
 8001428:	200002c0 	.word	0x200002c0
 800142c:	200002c2 	.word	0x200002c2
 8001430:	20000604 	.word	0x20000604
 8001434:	200002c8 	.word	0x200002c8

			}
			else if (PrevDownpressFlag == 1){
 8001438:	4b71      	ldr	r3, [pc, #452]	; (8001600 <updateTrackpad+0x338>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b01      	cmp	r3, #1
 8001440:	d107      	bne.n	8001452 <updateTrackpad+0x18a>
				volconflag = 1;
 8001442:	4b70      	ldr	r3, [pc, #448]	; (8001604 <updateTrackpad+0x33c>)
 8001444:	2201      	movs	r2, #1
 8001446:	601a      	str	r2, [r3, #0]
				slideroldtrack = output_voltage;
 8001448:	4b6f      	ldr	r3, [pc, #444]	; (8001608 <updateTrackpad+0x340>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4b6f      	ldr	r3, [pc, #444]	; (800160c <updateTrackpad+0x344>)
 8001450:	601a      	str	r2, [r3, #0]
			}


			InitialdiffX = xCoord - InitialxCoord;
 8001452:	4b6f      	ldr	r3, [pc, #444]	; (8001610 <updateTrackpad+0x348>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	4b6e      	ldr	r3, [pc, #440]	; (8001614 <updateTrackpad+0x34c>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	b29b      	uxth	r3, r3
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f866 	bl	8000534 <__aeabi_i2d>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	496a      	ldr	r1, [pc, #424]	; (8001618 <updateTrackpad+0x350>)
 800146e:	e9c1 2300 	strd	r2, r3, [r1]
			InitialdiffY = yCoord - InitialyCoord;
 8001472:	4b6a      	ldr	r3, [pc, #424]	; (800161c <updateTrackpad+0x354>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	4b69      	ldr	r3, [pc, #420]	; (8001620 <updateTrackpad+0x358>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f856 	bl	8000534 <__aeabi_i2d>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4965      	ldr	r1, [pc, #404]	; (8001624 <updateTrackpad+0x35c>)
 800148e:	e9c1 2300 	strd	r2, r3, [r1]

			InitialdiffX=(InitialdiffX/1783)*4255.0;
 8001492:	4b61      	ldr	r3, [pc, #388]	; (8001618 <updateTrackpad+0x350>)
 8001494:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001498:	a351      	add	r3, pc, #324	; (adr r3, 80015e0 <updateTrackpad+0x318>)
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	f7ff f9dd 	bl	800085c <__aeabi_ddiv>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	a34f      	add	r3, pc, #316	; (adr r3, 80015e8 <updateTrackpad+0x320>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f8aa 	bl	8000608 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4957      	ldr	r1, [pc, #348]	; (8001618 <updateTrackpad+0x350>)
 80014ba:	e9c1 2300 	strd	r2, r3, [r1]
			InitialdiffY=(InitialdiffY/745)*4095.0;
 80014be:	4b59      	ldr	r3, [pc, #356]	; (8001624 <updateTrackpad+0x35c>)
 80014c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	4b57      	ldr	r3, [pc, #348]	; (8001628 <updateTrackpad+0x360>)
 80014ca:	f7ff f9c7 	bl	800085c <__aeabi_ddiv>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	a346      	add	r3, pc, #280	; (adr r3, 80015f0 <updateTrackpad+0x328>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7ff f894 	bl	8000608 <__aeabi_dmul>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	494f      	ldr	r1, [pc, #316]	; (8001624 <updateTrackpad+0x35c>)
 80014e6:	e9c1 2300 	strd	r2, r3, [r1]

			distance = sqrt(pow((int)InitialdiffX, 2) + pow((int)InitialdiffY, 2));
 80014ea:	4b4b      	ldr	r3, [pc, #300]	; (8001618 <updateTrackpad+0x350>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f7ff fb38 	bl	8000b68 <__aeabi_d2iz>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f81a 	bl	8000534 <__aeabi_i2d>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 80015f8 <updateTrackpad+0x330>
 8001508:	ec43 2b10 	vmov	d0, r2, r3
 800150c:	f00d f992 	bl	800e834 <pow>
 8001510:	ec55 4b10 	vmov	r4, r5, d0
 8001514:	4b43      	ldr	r3, [pc, #268]	; (8001624 <updateTrackpad+0x35c>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff fb23 	bl	8000b68 <__aeabi_d2iz>
 8001522:	4603      	mov	r3, r0
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f805 	bl	8000534 <__aeabi_i2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	ed9f 1b32 	vldr	d1, [pc, #200]	; 80015f8 <updateTrackpad+0x330>
 8001532:	ec43 2b10 	vmov	d0, r2, r3
 8001536:	f00d f97d 	bl	800e834 <pow>
 800153a:	ec53 2b10 	vmov	r2, r3, d0
 800153e:	4620      	mov	r0, r4
 8001540:	4629      	mov	r1, r5
 8001542:	f7fe feab 	bl	800029c <__adddf3>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	ec43 2b17 	vmov	d7, r2, r3
 800154e:	eeb0 0a47 	vmov.f32	s0, s14
 8001552:	eef0 0a67 	vmov.f32	s1, s15
 8001556:	f00d f9dd 	bl	800e914 <sqrt>
 800155a:	ec53 2b10 	vmov	r2, r3, d0
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f7ff fb29 	bl	8000bb8 <__aeabi_d2uiz>
 8001566:	4603      	mov	r3, r0
 8001568:	4a30      	ldr	r2, [pc, #192]	; (800162c <updateTrackpad+0x364>)
 800156a:	6013      	str	r3, [r2, #0]



			if (distance > 130) {
 800156c:	4b2f      	ldr	r3, [pc, #188]	; (800162c <updateTrackpad+0x364>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b82      	cmp	r3, #130	; 0x82
 8001572:	d902      	bls.n	800157a <updateTrackpad+0x2b2>

				SlideFlag=1;
 8001574:	4b2e      	ldr	r3, [pc, #184]	; (8001630 <updateTrackpad+0x368>)
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
			}




			if (Gesture == 0b00000001) {
 800157a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800157e:	2b01      	cmp	r3, #1
 8001580:	d102      	bne.n	8001588 <updateTrackpad+0x2c0>


				TapFlag = 1;
 8001582:	4b2c      	ldr	r3, [pc, #176]	; (8001634 <updateTrackpad+0x36c>)
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
			}
			if (Gesture == 0b00000010) {
 8001588:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800158c:	2b02      	cmp	r3, #2
 800158e:	d110      	bne.n	80015b2 <updateTrackpad+0x2ea>
				if (pressAndHoldFlag == 0 && PrevpressAndHoldFlag == 0) {
 8001590:	4b29      	ldr	r3, [pc, #164]	; (8001638 <updateTrackpad+0x370>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d107      	bne.n	80015aa <updateTrackpad+0x2e2>
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <updateTrackpad+0x374>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <updateTrackpad+0x2e2>
					pressAndHoldFlag = 1;
 80015a4:	4b24      	ldr	r3, [pc, #144]	; (8001638 <updateTrackpad+0x370>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
				}
				PrevpressAndHoldFlag = 1;
 80015aa:	4b24      	ldr	r3, [pc, #144]	; (800163c <updateTrackpad+0x374>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	701a      	strb	r2, [r3, #0]
 80015b0:	e002      	b.n	80015b8 <updateTrackpad+0x2f0>
			} else {
				PrevpressAndHoldFlag = 0;
 80015b2:	4b22      	ldr	r3, [pc, #136]	; (800163c <updateTrackpad+0x374>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
			}

			PrevDownpressFlag = 1;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <updateTrackpad+0x338>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
		if ((xCoord != 65535) && (yCoord != 65535)) {
 80015be:	e005      	b.n	80015cc <updateTrackpad+0x304>
		} else {
			SlideFlag=0;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <updateTrackpad+0x368>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
			PrevDownpressFlag = 0;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <updateTrackpad+0x338>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
		}


	}
	azoFlag = 0;
 80015cc:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <updateTrackpad+0x378>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
}
 80015d2:	bf00      	nop
 80015d4:	3730      	adds	r7, #48	; 0x30
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bdb0      	pop	{r4, r5, r7, pc}
 80015da:	bf00      	nop
 80015dc:	f3af 8000 	nop.w
 80015e0:	00000000 	.word	0x00000000
 80015e4:	409bdc00 	.word	0x409bdc00
 80015e8:	00000000 	.word	0x00000000
 80015ec:	40b09f00 	.word	0x40b09f00
 80015f0:	00000000 	.word	0x00000000
 80015f4:	40affe00 	.word	0x40affe00
 80015f8:	00000000 	.word	0x00000000
 80015fc:	40000000 	.word	0x40000000
 8001600:	200002b7 	.word	0x200002b7
 8001604:	200005c4 	.word	0x200005c4
 8001608:	200006a8 	.word	0x200006a8
 800160c:	200002b0 	.word	0x200002b0
 8001610:	200002ac 	.word	0x200002ac
 8001614:	200002c0 	.word	0x200002c0
 8001618:	200002d0 	.word	0x200002d0
 800161c:	200002ae 	.word	0x200002ae
 8001620:	200002c2 	.word	0x200002c2
 8001624:	200002d8 	.word	0x200002d8
 8001628:	40874800 	.word	0x40874800
 800162c:	200002bc 	.word	0x200002bc
 8001630:	200002b8 	.word	0x200002b8
 8001634:	200002b4 	.word	0x200002b4
 8001638:	200002b5 	.word	0x200002b5
 800163c:	200002b6 	.word	0x200002b6
 8001640:	200000b0 	.word	0x200000b0

08001644 <HAL_UART_TxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	   __HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_UART_TxCpltCallback+0x24>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_UART_TxCpltCallback+0x24>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800165a:	601a      	str	r2, [r3, #0]
	   //HAL_UART_Receive_IT(&huart2, (uint8_t *) rx_data, 1);

}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	200004fc 	.word	0x200004fc

0800166c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 800166c:	b5b0      	push	{r4, r5, r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]

	dmaflag=0;
 8001678:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <HAL_UARTEx_RxEventCallback+0xfc>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
	//firston=1;
	rcnt=0;
 800167e:	4b3b      	ldr	r3, [pc, #236]	; (800176c <HAL_UARTEx_RxEventCallback+0x100>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
	//calltime = HAL_GetTick();
	 sliderold=vinadj;
 8001684:	4b3a      	ldr	r3, [pc, #232]	; (8001770 <HAL_UARTEx_RxEventCallback+0x104>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	493a      	ldr	r1, [pc, #232]	; (8001774 <HAL_UARTEx_RxEventCallback+0x108>)
 800168c:	e9c1 2300 	strd	r2, r3, [r1]
	  if (huart->Instance == USART2) {
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a38      	ldr	r2, [pc, #224]	; (8001778 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d161      	bne.n	800175e <HAL_UARTEx_RxEventCallback+0xf2>
	        while (dmaflag != 1 && rcnt < Size+2) { // Loop while there are unread bytes in the buffer
 800169a:	e046      	b.n	800172a <HAL_UARTEx_RxEventCallback+0xbe>
	            if (rxdata[rcnt] == '$' && rcnt <= 5) {
 800169c:	4b33      	ldr	r3, [pc, #204]	; (800176c <HAL_UARTEx_RxEventCallback+0x100>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a36      	ldr	r2, [pc, #216]	; (800177c <HAL_UARTEx_RxEventCallback+0x110>)
 80016a2:	5cd3      	ldrb	r3, [r2, r3]
 80016a4:	2b24      	cmp	r3, #36	; 0x24
 80016a6:	d114      	bne.n	80016d2 <HAL_UARTEx_RxEventCallback+0x66>
 80016a8:	4b30      	ldr	r3, [pc, #192]	; (800176c <HAL_UARTEx_RxEventCallback+0x100>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	dc10      	bgt.n	80016d2 <HAL_UARTEx_RxEventCallback+0x66>

	            	//req
	                memcpy(rxReqBuf, rxdata, 7);
 80016b0:	4b33      	ldr	r3, [pc, #204]	; (8001780 <HAL_UARTEx_RxEventCallback+0x114>)
 80016b2:	4a32      	ldr	r2, [pc, #200]	; (800177c <HAL_UARTEx_RxEventCallback+0x110>)
 80016b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016b8:	6018      	str	r0, [r3, #0]
 80016ba:	3304      	adds	r3, #4
 80016bc:	8019      	strh	r1, [r3, #0]
 80016be:	3302      	adds	r3, #2
 80016c0:	0c0a      	lsrs	r2, r1, #16
 80016c2:	701a      	strb	r2, [r3, #0]
	                uartmode = 2;
 80016c4:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <HAL_UARTEx_RxEventCallback+0x118>)
 80016c6:	2202      	movs	r2, #2
 80016c8:	701a      	strb	r2, [r3, #0]
	                dmaflag = 1;
 80016ca:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_UARTEx_RxEventCallback+0xfc>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	e02b      	b.n	800172a <HAL_UARTEx_RxEventCallback+0xbe>

	            } else if (rxdata[rcnt] == '$' && rcnt> 5) {
 80016d2:	4b26      	ldr	r3, [pc, #152]	; (800176c <HAL_UARTEx_RxEventCallback+0x100>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a29      	ldr	r2, [pc, #164]	; (800177c <HAL_UARTEx_RxEventCallback+0x110>)
 80016d8:	5cd3      	ldrb	r3, [r2, r3]
 80016da:	2b24      	cmp	r3, #36	; 0x24
 80016dc:	d120      	bne.n	8001720 <HAL_UARTEx_RxEventCallback+0xb4>
 80016de:	4b23      	ldr	r3, [pc, #140]	; (800176c <HAL_UARTEx_RxEventCallback+0x100>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b05      	cmp	r3, #5
 80016e4:	dd1c      	ble.n	8001720 <HAL_UARTEx_RxEventCallback+0xb4>

	            	//set
	            	if (ps==0){
 80016e6:	4b28      	ldr	r3, [pc, #160]	; (8001788 <HAL_UARTEx_RxEventCallback+0x11c>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d105      	bne.n	80016fa <HAL_UARTEx_RxEventCallback+0x8e>
	            	ps=1;
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <HAL_UARTEx_RxEventCallback+0x11c>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
	            	firston=1;
 80016f4:	4b25      	ldr	r3, [pc, #148]	; (800178c <HAL_UARTEx_RxEventCallback+0x120>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	701a      	strb	r2, [r3, #0]

	            	}


	                memcpy(rxSetBuf, rxdata, 19);
 80016fa:	4a25      	ldr	r2, [pc, #148]	; (8001790 <HAL_UARTEx_RxEventCallback+0x124>)
 80016fc:	4b1f      	ldr	r3, [pc, #124]	; (800177c <HAL_UARTEx_RxEventCallback+0x110>)
 80016fe:	4614      	mov	r4, r2
 8001700:	461d      	mov	r5, r3
 8001702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001706:	682b      	ldr	r3, [r5, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	8022      	strh	r2, [r4, #0]
 800170c:	3402      	adds	r4, #2
 800170e:	0c1b      	lsrs	r3, r3, #16
 8001710:	7023      	strb	r3, [r4, #0]
	                uartmode = 1;
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <HAL_UARTEx_RxEventCallback+0x118>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]

	                dmaflag = 1;
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <HAL_UARTEx_RxEventCallback+0xfc>)
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
 800171e:	e004      	b.n	800172a <HAL_UARTEx_RxEventCallback+0xbe>

	            } else {
	                rcnt++;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_UARTEx_RxEventCallback+0x100>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	3301      	adds	r3, #1
 8001726:	4a11      	ldr	r2, [pc, #68]	; (800176c <HAL_UARTEx_RxEventCallback+0x100>)
 8001728:	6013      	str	r3, [r2, #0]
	        while (dmaflag != 1 && rcnt < Size+2) { // Loop while there are unread bytes in the buffer
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <HAL_UARTEx_RxEventCallback+0xfc>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d005      	beq.n	800173e <HAL_UARTEx_RxEventCallback+0xd2>
 8001732:	887b      	ldrh	r3, [r7, #2]
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <HAL_UARTEx_RxEventCallback+0x100>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	daae      	bge.n	800169c <HAL_UARTEx_RxEventCallback+0x30>
	            }
	        }
	        //sliderold = vinadj;
	        __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_UARTEx_RxEventCallback+0x128>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_UARTEx_RxEventCallback+0x128>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0204 	bic.w	r2, r2, #4
 800174c:	601a      	str	r2, [r3, #0]
	        HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxdata, 50);
 800174e:	2232      	movs	r2, #50	; 0x32
 8001750:	490a      	ldr	r1, [pc, #40]	; (800177c <HAL_UARTEx_RxEventCallback+0x110>)
 8001752:	4811      	ldr	r0, [pc, #68]	; (8001798 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001754:	f00a f85c 	bl	800b810 <HAL_UARTEx_ReceiveToIdle_DMA>
	        volconflag =0;
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_UARTEx_RxEventCallback+0x130>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
	    }
	}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bdb0      	pop	{r4, r5, r7, pc}
 8001766:	bf00      	nop
 8001768:	200005db 	.word	0x200005db
 800176c:	200005dc 	.word	0x200005dc
 8001770:	20000698 	.word	0x20000698
 8001774:	20000728 	.word	0x20000728
 8001778:	40004400 	.word	0x40004400
 800177c:	20000648 	.word	0x20000648
 8001780:	20000708 	.word	0x20000708
 8001784:	200006f2 	.word	0x200006f2
 8001788:	200005da 	.word	0x200005da
 800178c:	200005e0 	.word	0x200005e0
 8001790:	20000710 	.word	0x20000710
 8001794:	20000580 	.word	0x20000580
 8001798:	200004fc 	.word	0x200004fc
 800179c:	200005c4 	.word	0x200005c4

080017a0 <buttonpressed>:





void buttonpressed()  {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0

probincr++;
 80017a4:	4b41      	ldr	r3, [pc, #260]	; (80018ac <buttonpressed+0x10c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <buttonpressed+0x10c>)
 80017ae:	701a      	strb	r2, [r3, #0]
//button A9 middle
	 if (midbut ==0){
 80017b0:	4b3f      	ldr	r3, [pc, #252]	; (80018b0 <buttonpressed+0x110>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d110      	bne.n	80017da <buttonpressed+0x3a>
        if (ps==1){
 80017b8:	4b3e      	ldr	r3, [pc, #248]	; (80018b4 <buttonpressed+0x114>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d103      	bne.n	80017c8 <buttonpressed+0x28>
        ps=0;
 80017c0:	4b3c      	ldr	r3, [pc, #240]	; (80018b4 <buttonpressed+0x114>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
 80017c6:	e005      	b.n	80017d4 <buttonpressed+0x34>
                  }

        else      {
        ps =1;
 80017c8:	4b3a      	ldr	r3, [pc, #232]	; (80018b4 <buttonpressed+0x114>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
        butencode=1;
 80017ce:	4b3a      	ldr	r3, [pc, #232]	; (80018b8 <buttonpressed+0x118>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
                  }
        stateok=0;
 80017d4:	4b39      	ldr	r3, [pc, #228]	; (80018bc <buttonpressed+0x11c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
	 	 	 	 	  }



//button A6 top
     if (topbut==0)   {
 80017da:	4b39      	ldr	r3, [pc, #228]	; (80018c0 <buttonpressed+0x120>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d105      	bne.n	80017ee <buttonpressed+0x4e>
      butencode=1;
 80017e2:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <buttonpressed+0x118>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	701a      	strb	r2, [r3, #0]
      stateok=1;
 80017e8:	4b34      	ldr	r3, [pc, #208]	; (80018bc <buttonpressed+0x11c>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
//end A6 top


//button B9 bottom

     if (botbut == 0) {
 80017ee:	4b35      	ldr	r3, [pc, #212]	; (80018c4 <buttonpressed+0x124>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d105      	bne.n	8001802 <buttonpressed+0x62>
	 butencode=1;
 80017f6:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <buttonpressed+0x118>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
	 stateok=1;
 80017fc:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <buttonpressed+0x11c>)
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
        			  }
 //end B9 bottom


//button B8 left
     if (letbut == 0) {
 8001802:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <buttonpressed+0x128>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d131      	bne.n	800186e <buttonpressed+0xce>
    	   butencode=1;
 800180a:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <buttonpressed+0x118>)
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]
    	   ps=0;
 8001810:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <buttonpressed+0x114>)
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
    	   p1timeval=0;
 8001816:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <buttonpressed+0x12c>)
 8001818:	2200      	movs	r2, #0
 800181a:	801a      	strh	r2, [r3, #0]
    	   cntB8++;
 800181c:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <buttonpressed+0x130>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	3301      	adds	r3, #1
 8001822:	b29a      	uxth	r2, r3
 8001824:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <buttonpressed+0x130>)
 8001826:	801a      	strh	r2, [r3, #0]
    	   emmode=0;
 8001828:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <buttonpressed+0x134>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]

           MODE = cntB8%3;
 800182e:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <buttonpressed+0x130>)
 8001830:	881a      	ldrh	r2, [r3, #0]
 8001832:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <buttonpressed+0x138>)
 8001834:	fba3 1302 	umull	r1, r3, r3, r2
 8001838:	0859      	lsrs	r1, r3, #1
 800183a:	460b      	mov	r3, r1
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	440b      	add	r3, r1
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	b29b      	uxth	r3, r3
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4b25      	ldr	r3, [pc, #148]	; (80018dc <buttonpressed+0x13c>)
 8001848:	701a      	strb	r2, [r3, #0]
           ii=0;
 800184a:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <buttonpressed+0x140>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
           jj=0;
 8001850:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <buttonpressed+0x144>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
           rchan =128;
 8001856:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <buttonpressed+0x148>)
 8001858:	2280      	movs	r2, #128	; 0x80
 800185a:	601a      	str	r2, [r3, #0]
           gchan =128;
 800185c:	4b23      	ldr	r3, [pc, #140]	; (80018ec <buttonpressed+0x14c>)
 800185e:	2280      	movs	r2, #128	; 0x80
 8001860:	601a      	str	r2, [r3, #0]
           bchan =128;
 8001862:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <buttonpressed+0x150>)
 8001864:	2280      	movs	r2, #128	; 0x80
 8001866:	601a      	str	r2, [r3, #0]
           stateok=1;
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <buttonpressed+0x11c>)
 800186a:	2201      	movs	r2, #1
 800186c:	701a      	strb	r2, [r3, #0]
            	  	  }
//end B8 left


//button A7 right
     if (ritbut == 0){
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <buttonpressed+0x154>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d115      	bne.n	80018a2 <buttonpressed+0x102>

		butencode=1;
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <buttonpressed+0x118>)
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
        emmode++;
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <buttonpressed+0x134>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <buttonpressed+0x134>)
 8001886:	701a      	strb	r2, [r3, #0]
        p1timeval=0;
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <buttonpressed+0x12c>)
 800188a:	2200      	movs	r2, #0
 800188c:	801a      	strh	r2, [r3, #0]

        if(emmode==3) {
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <buttonpressed+0x134>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b03      	cmp	r3, #3
 8001894:	d102      	bne.n	800189c <buttonpressed+0xfc>
          emmode=0;
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <buttonpressed+0x134>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]


    	 	    	   }

        stateok=1;}
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <buttonpressed+0x11c>)
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
//end A7 right

 modeset();
 80018a2:	f000 fa3f 	bl	8001d24 <modeset>

//end button code
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200005fc 	.word	0x200005fc
 80018b0:	2000068c 	.word	0x2000068c
 80018b4:	200005da 	.word	0x200005da
 80018b8:	200006d8 	.word	0x200006d8
 80018bc:	200005d8 	.word	0x200005d8
 80018c0:	2000068b 	.word	0x2000068b
 80018c4:	2000068a 	.word	0x2000068a
 80018c8:	20000688 	.word	0x20000688
 80018cc:	200006ee 	.word	0x200006ee
 80018d0:	20000686 	.word	0x20000686
 80018d4:	200006ad 	.word	0x200006ad
 80018d8:	aaaaaaab 	.word	0xaaaaaaab
 80018dc:	200006ac 	.word	0x200006ac
 80018e0:	2000060c 	.word	0x2000060c
 80018e4:	20000610 	.word	0x20000610
 80018e8:	200005c8 	.word	0x200005c8
 80018ec:	200005cc 	.word	0x200005cc
 80018f0:	200005d0 	.word	0x200005d0
 80018f4:	20000689 	.word	0x20000689

080018f8 <dacset>:





void dacset(){
 80018f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018fc:	af00      	add	r7, sp, #0

	strobeon=1;
 80018fe:	4bc0      	ldr	r3, [pc, #768]	; (8001c00 <dacset+0x308>)
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
	//start
	  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001904:	2100      	movs	r1, #0
 8001906:	48bf      	ldr	r0, [pc, #764]	; (8001c04 <dacset+0x30c>)
 8001908:	f004 fc92 	bl	8006230 <HAL_DAC_Start>
	  HAL_ADC_Start_DMA(&hadc1, &val, 1);
 800190c:	2201      	movs	r2, #1
 800190e:	49be      	ldr	r1, [pc, #760]	; (8001c08 <dacset+0x310>)
 8001910:	48be      	ldr	r0, [pc, #760]	; (8001c0c <dacset+0x314>)
 8001912:	f003 f8b1 	bl	8004a78 <HAL_ADC_Start_DMA>


	  vin = val * (3.3) / (pow(2,12)-1);
 8001916:	4bbc      	ldr	r3, [pc, #752]	; (8001c08 <dacset+0x310>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fdfa 	bl	8000514 <__aeabi_ui2d>
 8001920:	a3a1      	add	r3, pc, #644	; (adr r3, 8001ba8 <dacset+0x2b0>)
 8001922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001926:	f7fe fe6f 	bl	8000608 <__aeabi_dmul>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4610      	mov	r0, r2
 8001930:	4619      	mov	r1, r3
 8001932:	a39f      	add	r3, pc, #636	; (adr r3, 8001bb0 <dacset+0x2b8>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe ff90 	bl	800085c <__aeabi_ddiv>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f7ff f958 	bl	8000bf8 <__aeabi_d2f>
 8001948:	4603      	mov	r3, r0
 800194a:	4ab1      	ldr	r2, [pc, #708]	; (8001c10 <dacset+0x318>)
 800194c:	6013      	str	r3, [r2, #0]

	  //scale ADC
	  //vinadj = vin*(1.18 - 0.0436*vin + 1.72*(pow(vin,2))/1000);
	  vinadj = vin*(1.17 - 0.0456*vin + 1.70*(pow(vin,2))/1000);
 800194e:	4bb0      	ldr	r3, [pc, #704]	; (8001c10 <dacset+0x318>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe00 	bl	8000558 <__aeabi_f2d>
 8001958:	4604      	mov	r4, r0
 800195a:	460d      	mov	r5, r1
 800195c:	4bac      	ldr	r3, [pc, #688]	; (8001c10 <dacset+0x318>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fdf9 	bl	8000558 <__aeabi_f2d>
 8001966:	a394      	add	r3, pc, #592	; (adr r3, 8001bb8 <dacset+0x2c0>)
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	f7fe fe4c 	bl	8000608 <__aeabi_dmul>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	a192      	add	r1, pc, #584	; (adr r1, 8001bc0 <dacset+0x2c8>)
 8001976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800197a:	f7fe fc8d 	bl	8000298 <__aeabi_dsub>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4690      	mov	r8, r2
 8001984:	4699      	mov	r9, r3
 8001986:	4ba2      	ldr	r3, [pc, #648]	; (8001c10 <dacset+0x318>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fde4 	bl	8000558 <__aeabi_f2d>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 8001bc8 <dacset+0x2d0>
 8001998:	ec43 2b10 	vmov	d0, r2, r3
 800199c:	f00c ff4a 	bl	800e834 <pow>
 80019a0:	ec51 0b10 	vmov	r0, r1, d0
 80019a4:	a38a      	add	r3, pc, #552	; (adr r3, 8001bd0 <dacset+0x2d8>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	f7fe fe2d 	bl	8000608 <__aeabi_dmul>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	4b96      	ldr	r3, [pc, #600]	; (8001c14 <dacset+0x31c>)
 80019bc:	f7fe ff4e 	bl	800085c <__aeabi_ddiv>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4640      	mov	r0, r8
 80019c6:	4649      	mov	r1, r9
 80019c8:	f7fe fc68 	bl	800029c <__adddf3>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4620      	mov	r0, r4
 80019d2:	4629      	mov	r1, r5
 80019d4:	f7fe fe18 	bl	8000608 <__aeabi_dmul>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	498e      	ldr	r1, [pc, #568]	; (8001c18 <dacset+0x320>)
 80019de:	e9c1 2300 	strd	r2, r3, [r1]


	 if (vinadj>3.28){
 80019e2:	4b8d      	ldr	r3, [pc, #564]	; (8001c18 <dacset+0x320>)
 80019e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019e8:	a37b      	add	r3, pc, #492	; (adr r3, 8001bd8 <dacset+0x2e0>)
 80019ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ee:	f7ff f89b 	bl	8000b28 <__aeabi_dcmpgt>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <dacset+0x10c>
		 vinadj=3.30;
 80019f8:	4987      	ldr	r1, [pc, #540]	; (8001c18 <dacset+0x320>)
 80019fa:	a36b      	add	r3, pc, #428	; (adr r3, 8001ba8 <dacset+0x2b0>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	e9c1 2300 	strd	r2, r3, [r1]


	  //DAC out:

	  //scale dac val
	  dacout = vinadj *( 1.01 + 0.0184*vinadj - 5.15*pow(vinadj,2)/1000);
 8001a04:	4b84      	ldr	r3, [pc, #528]	; (8001c18 <dacset+0x320>)
 8001a06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a0a:	a375      	add	r3, pc, #468	; (adr r3, 8001be0 <dacset+0x2e8>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe fdfa 	bl	8000608 <__aeabi_dmul>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	a372      	add	r3, pc, #456	; (adr r3, 8001be8 <dacset+0x2f0>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fc3b 	bl	800029c <__adddf3>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4614      	mov	r4, r2
 8001a2c:	461d      	mov	r5, r3
 8001a2e:	4b7a      	ldr	r3, [pc, #488]	; (8001c18 <dacset+0x320>)
 8001a30:	ed93 7b00 	vldr	d7, [r3]
 8001a34:	ed9f 1b64 	vldr	d1, [pc, #400]	; 8001bc8 <dacset+0x2d0>
 8001a38:	eeb0 0a47 	vmov.f32	s0, s14
 8001a3c:	eef0 0a67 	vmov.f32	s1, s15
 8001a40:	f00c fef8 	bl	800e834 <pow>
 8001a44:	ec51 0b10 	vmov	r0, r1, d0
 8001a48:	a369      	add	r3, pc, #420	; (adr r3, 8001bf0 <dacset+0x2f8>)
 8001a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4e:	f7fe fddb 	bl	8000608 <__aeabi_dmul>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	4b6d      	ldr	r3, [pc, #436]	; (8001c14 <dacset+0x31c>)
 8001a60:	f7fe fefc 	bl	800085c <__aeabi_ddiv>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4620      	mov	r0, r4
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	f7fe fc14 	bl	8000298 <__aeabi_dsub>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	4b67      	ldr	r3, [pc, #412]	; (8001c18 <dacset+0x320>)
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	f7fe fdc3 	bl	8000608 <__aeabi_dmul>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4965      	ldr	r1, [pc, #404]	; (8001c1c <dacset+0x324>)
 8001a88:	e9c1 2300 	strd	r2, r3, [r1]

	  //dac to digital value
	  if (flagstat!=1){
 8001a8c:	4b64      	ldr	r3, [pc, #400]	; (8001c20 <dacset+0x328>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d010      	beq.n	8001ab6 <dacset+0x1be>
	  output_voltage = (uint32_t)((4095.0/3.30)*dacout);
 8001a94:	4b61      	ldr	r3, [pc, #388]	; (8001c1c <dacset+0x324>)
 8001a96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a9a:	a357      	add	r3, pc, #348	; (adr r3, 8001bf8 <dacset+0x300>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f7fe fdb2 	bl	8000608 <__aeabi_dmul>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f884 	bl	8000bb8 <__aeabi_d2uiz>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a5c      	ldr	r2, [pc, #368]	; (8001c24 <dacset+0x32c>)
 8001ab4:	6013      	str	r3, [r2, #0]
	  }

	  if (flagstat==1){
 8001ab6:	4b5a      	ldr	r3, [pc, #360]	; (8001c20 <dacset+0x328>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d11c      	bne.n	8001af8 <dacset+0x200>
		  	output_voltage =(uint32_t) (4095*(((double)(stateval))/512.0));
 8001abe:	4b5a      	ldr	r3, [pc, #360]	; (8001c28 <dacset+0x330>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fd26 	bl	8000514 <__aeabi_ui2d>
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001ad0:	f7fe fec4 	bl	800085c <__aeabi_ddiv>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	a334      	add	r3, pc, #208	; (adr r3, 8001bb0 <dacset+0x2b8>)
 8001ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae2:	f7fe fd91 	bl	8000608 <__aeabi_dmul>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	f7ff f863 	bl	8000bb8 <__aeabi_d2uiz>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4a4b      	ldr	r2, [pc, #300]	; (8001c24 <dacset+0x32c>)
 8001af6:	6013      	str	r3, [r2, #0]
	  }
	  //truncate digital out
	  if (output_voltage > 4095){
 8001af8:	4b4a      	ldr	r3, [pc, #296]	; (8001c24 <dacset+0x32c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b00:	d303      	bcc.n	8001b0a <dacset+0x212>
		  output_voltage =4095;
 8001b02:	4b48      	ldr	r3, [pc, #288]	; (8001c24 <dacset+0x32c>)
 8001b04:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001b08:	601a      	str	r2, [r3, #0]
	  }
	  if  (alternator ==0 && strobeflag ==1){
 8001b0a:	4b48      	ldr	r3, [pc, #288]	; (8001c2c <dacset+0x334>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <dacset+0x228>
 8001b12:	4b47      	ldr	r3, [pc, #284]	; (8001c30 <dacset+0x338>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d102      	bne.n	8001b20 <dacset+0x228>
	  		 //output_voltage =0;
		  strobeon =0;
 8001b1a:	4b39      	ldr	r3, [pc, #228]	; (8001c00 <dacset+0x308>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
	  	  }

	  if (MODE!=2){
 8001b20:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <dacset+0x33c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	f000 8094 	beq.w	8001c52 <dacset+0x35a>
	  //output dac

		  if (volconflag ==0 ){
 8001b2a:	4b43      	ldr	r3, [pc, #268]	; (8001c38 <dacset+0x340>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <dacset+0x24e>
			  initialstate_intensity = output_voltage;
 8001b32:	4b3c      	ldr	r3, [pc, #240]	; (8001c24 <dacset+0x32c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fcec 	bl	8000514 <__aeabi_ui2d>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	493e      	ldr	r1, [pc, #248]	; (8001c3c <dacset+0x344>)
 8001b42:	e9c1 2300 	strd	r2, r3, [r1]
		  }

		out_new = initialstate_intensity + InitialdiffX; // last state plus last difference
 8001b46:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <dacset+0x344>)
 8001b48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b4c:	4b3c      	ldr	r3, [pc, #240]	; (8001c40 <dacset+0x348>)
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	f7fe fba3 	bl	800029c <__adddf3>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f7ff f803 	bl	8000b68 <__aeabi_d2iz>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4a37      	ldr	r2, [pc, #220]	; (8001c44 <dacset+0x34c>)
 8001b66:	6013      	str	r3, [r2, #0]
		if (out_new<0){
 8001b68:	4b36      	ldr	r3, [pc, #216]	; (8001c44 <dacset+0x34c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	da02      	bge.n	8001b76 <dacset+0x27e>
			out_new =0;
 8001b70:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <dacset+0x34c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]

		}
		if (out_new>=4095){
 8001b76:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <dacset+0x34c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	dd03      	ble.n	8001b8a <dacset+0x292>
					out_new =4095;
 8001b82:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <dacset+0x34c>)
 8001b84:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001b88:	601a      	str	r2, [r3, #0]

				}


	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, out_new*strobeon*ps);
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <dacset+0x308>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <dacset+0x34c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	fb02 f303 	mul.w	r3, r2, r3
 8001b98:	4a2b      	ldr	r2, [pc, #172]	; (8001c48 <dacset+0x350>)
 8001b9a:	7812      	ldrb	r2, [r2, #0]
 8001b9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	e052      	b.n	8001c4c <dacset+0x354>
 8001ba6:	bf00      	nop
 8001ba8:	66666666 	.word	0x66666666
 8001bac:	400a6666 	.word	0x400a6666
 8001bb0:	00000000 	.word	0x00000000
 8001bb4:	40affe00 	.word	0x40affe00
 8001bb8:	19652bd4 	.word	0x19652bd4
 8001bbc:	3fa758e2 	.word	0x3fa758e2
 8001bc0:	eb851eb8 	.word	0xeb851eb8
 8001bc4:	3ff2b851 	.word	0x3ff2b851
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	40000000 	.word	0x40000000
 8001bd0:	33333333 	.word	0x33333333
 8001bd4:	3ffb3333 	.word	0x3ffb3333
 8001bd8:	a3d70a3d 	.word	0xa3d70a3d
 8001bdc:	400a3d70 	.word	0x400a3d70
 8001be0:	18fc5048 	.word	0x18fc5048
 8001be4:	3f92d773 	.word	0x3f92d773
 8001be8:	c28f5c29 	.word	0xc28f5c29
 8001bec:	3ff028f5 	.word	0x3ff028f5
 8001bf0:	9999999a 	.word	0x9999999a
 8001bf4:	40149999 	.word	0x40149999
 8001bf8:	e8ba2e8c 	.word	0xe8ba2e8c
 8001bfc:	409363a2 	.word	0x409363a2
 8001c00:	200005d9 	.word	0x200005d9
 8001c04:	20000374 	.word	0x20000374
 8001c08:	20000690 	.word	0x20000690
 8001c0c:	200002e0 	.word	0x200002e0
 8001c10:	20000694 	.word	0x20000694
 8001c14:	408f4000 	.word	0x408f4000
 8001c18:	20000698 	.word	0x20000698
 8001c1c:	200006a0 	.word	0x200006a0
 8001c20:	200006f0 	.word	0x200006f0
 8001c24:	200006a8 	.word	0x200006a8
 8001c28:	200006e8 	.word	0x200006e8
 8001c2c:	20000638 	.word	0x20000638
 8001c30:	20000640 	.word	0x20000640
 8001c34:	200006ac 	.word	0x200006ac
 8001c38:	200005c4 	.word	0x200005c4
 8001c3c:	200002c8 	.word	0x200002c8
 8001c40:	200002d0 	.word	0x200002d0
 8001c44:	20000604 	.word	0x20000604
 8001c48:	200005da 	.word	0x200005da
 8001c4c:	4804      	ldr	r0, [pc, #16]	; (8001c60 <dacset+0x368>)
 8001c4e:	f004 faca 	bl	80061e6 <HAL_DAC_SetValue>


	 // HAL_ADC_Stop(&hadc1)
	  }
	  HAL_ADC_Stop_DMA(&hadc1);
 8001c52:	4804      	ldr	r0, [pc, #16]	; (8001c64 <dacset+0x36c>)
 8001c54:	f003 f82c 	bl	8004cb0 <HAL_ADC_Stop_DMA>
}
 8001c58:	bf00      	nop
 8001c5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000374 	.word	0x20000374
 8001c64:	200002e0 	.word	0x200002e0

08001c68 <pwmset>:

//end dac
void pwmset(){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	strobeon=1;
 8001c6c:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <pwmset+0x98>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
	if  (alternator ==0 && strobeflag ==1){
 8001c72:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <pwmset+0x9c>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <pwmset+0x20>
 8001c7a:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <pwmset+0xa0>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d102      	bne.n	8001c88 <pwmset+0x20>
			  strobeon =0;
 8001c82:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <pwmset+0x98>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
		  }

	  pwmval=(uint32_t)(((double)out_new)*1000.0/4095.0);
 8001c88:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <pwmset+0xa4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fc51 	bl	8000534 <__aeabi_i2d>
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <pwmset+0xa8>)
 8001c98:	f7fe fcb6 	bl	8000608 <__aeabi_dmul>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	a314      	add	r3, pc, #80	; (adr r3, 8001cf8 <pwmset+0x90>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	f7fe fdd7 	bl	800085c <__aeabi_ddiv>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe ff7f 	bl	8000bb8 <__aeabi_d2uiz>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <pwmset+0xac>)
 8001cc0:	801a      	strh	r2, [r3, #0]
	  if (emmode !=2 && emmode !=1){
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <pwmset+0xb0>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d011      	beq.n	8001cee <pwmset+0x86>
 8001cca:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <pwmset+0xb0>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d00d      	beq.n	8001cee <pwmset+0x86>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwmval*strobeon*ps);
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <pwmset+0xac>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <pwmset+0x98>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	fb02 f303 	mul.w	r3, r2, r3
 8001ce0:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <pwmset+0xb4>)
 8001ce2:	7812      	ldrb	r2, [r2, #0]
 8001ce4:	fb03 f202 	mul.w	r2, r3, r2
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <pwmset+0xb8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40
	  }

}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	00000000 	.word	0x00000000
 8001cfc:	40affe00 	.word	0x40affe00
 8001d00:	200005d9 	.word	0x200005d9
 8001d04:	20000638 	.word	0x20000638
 8001d08:	20000640 	.word	0x20000640
 8001d0c:	20000604 	.word	0x20000604
 8001d10:	408f4000 	.word	0x408f4000
 8001d14:	200006ae 	.word	0x200006ae
 8001d18:	200006ad 	.word	0x200006ad
 8001d1c:	200005da 	.word	0x200005da
 8001d20:	20000418 	.word	0x20000418

08001d24 <modeset>:




void modeset(){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0

	if (MODE ==0){
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <modeset+0xa4>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d116      	bne.n	8001d5e <modeset+0x3a>
		//PA10 position 1 from left
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001d30:	2201      	movs	r2, #1
 8001d32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3a:	f004 ff41 	bl	8006bc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d44:	4821      	ldr	r0, [pc, #132]	; (8001dcc <modeset+0xa8>)
 8001d46:	f004 ff3b 	bl	8006bc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2110      	movs	r1, #16
 8001d4e:	481f      	ldr	r0, [pc, #124]	; (8001dcc <modeset+0xa8>)
 8001d50:	f004 ff36 	bl	8006bc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2120      	movs	r1, #32
 8001d58:	481c      	ldr	r0, [pc, #112]	; (8001dcc <modeset+0xa8>)
 8001d5a:	f004 ff31 	bl	8006bc0 <HAL_GPIO_WritePin>

	}

	if (MODE ==1){
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <modeset+0xa4>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d113      	bne.n	8001d8e <modeset+0x6a>
		//PB4 position 3 from left
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d70:	f004 ff26 	bl	8006bc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001d74:	2201      	movs	r2, #1
 8001d76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d7a:	4814      	ldr	r0, [pc, #80]	; (8001dcc <modeset+0xa8>)
 8001d7c:	f004 ff20 	bl	8006bc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2110      	movs	r1, #16
 8001d84:	4811      	ldr	r0, [pc, #68]	; (8001dcc <modeset+0xa8>)
 8001d86:	f004 ff1b 	bl	8006bc0 <HAL_GPIO_WritePin>


	    emergencyset();  //if mode 2nd on else off
 8001d8a:	f000 f821 	bl	8001dd0 <emergencyset>


		}


	if (MODE ==2){
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <modeset+0xa4>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d116      	bne.n	8001dc4 <modeset+0xa0>
		//PB10 position 2 from left
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d96:	2200      	movs	r2, #0
 8001d98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da0:	f004 ff0e 	bl	8006bc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001da4:	2200      	movs	r2, #0
 8001da6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001daa:	4808      	ldr	r0, [pc, #32]	; (8001dcc <modeset+0xa8>)
 8001dac:	f004 ff08 	bl	8006bc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001db0:	2201      	movs	r2, #1
 8001db2:	2110      	movs	r1, #16
 8001db4:	4805      	ldr	r0, [pc, #20]	; (8001dcc <modeset+0xa8>)
 8001db6:	f004 ff03 	bl	8006bc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2120      	movs	r1, #32
 8001dbe:	4803      	ldr	r0, [pc, #12]	; (8001dcc <modeset+0xa8>)
 8001dc0:	f004 fefe 	bl	8006bc0 <HAL_GPIO_WritePin>

		}


}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	200006ac 	.word	0x200006ac
 8001dcc:	48000400 	.word	0x48000400

08001dd0 <emergencyset>:


void emergencyset(){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
	if (emmode==2 || emmode==1){
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <emergencyset+0x30>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d003      	beq.n	8001de4 <emergencyset+0x14>
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <emergencyset+0x30>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d105      	bne.n	8001df0 <emergencyset+0x20>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001de4:	2201      	movs	r2, #1
 8001de6:	2120      	movs	r1, #32
 8001de8:	4806      	ldr	r0, [pc, #24]	; (8001e04 <emergencyset+0x34>)
 8001dea:	f004 fee9 	bl	8006bc0 <HAL_GPIO_WritePin>
 8001dee:	e005      	b.n	8001dfc <emergencyset+0x2c>

	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2120      	movs	r1, #32
 8001df4:	4803      	ldr	r0, [pc, #12]	; (8001e04 <emergencyset+0x34>)
 8001df6:	f004 fee3 	bl	8006bc0 <HAL_GPIO_WritePin>
	}



}
 8001dfa:	bf00      	nop
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	200006ad 	.word	0x200006ad
 8001e04:	48000400 	.word	0x48000400

08001e08 <uartdecode>:




void uartdecode(){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
	//size 14
	ps=1;
 8001e0e:	4b9c      	ldr	r3, [pc, #624]	; (8002080 <uartdecode+0x278>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
	  probincr++;
 8001e14:	4b9b      	ldr	r3, [pc, #620]	; (8002084 <uartdecode+0x27c>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	4b99      	ldr	r3, [pc, #612]	; (8002084 <uartdecode+0x27c>)
 8001e1e:	701a      	strb	r2, [r3, #0]
	//param flags
	  firston =1;
 8001e20:	4b99      	ldr	r3, [pc, #612]	; (8002088 <uartdecode+0x280>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]



	flagstat=1;
 8001e26:	4b99      	ldr	r3, [pc, #612]	; (800208c <uartdecode+0x284>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	801a      	strh	r2, [r3, #0]

	flagstatcopy=1;
 8001e2c:	4b98      	ldr	r3, [pc, #608]	; (8002090 <uartdecode+0x288>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	701a      	strb	r2, [r3, #0]

//set all values
	//mode is not stored - held in rxsetbuf

		memcpy(statepara, &rxSetBuf[5], 3); // state para is first
 8001e32:	2203      	movs	r2, #3
 8001e34:	4997      	ldr	r1, [pc, #604]	; (8002094 <uartdecode+0x28c>)
 8001e36:	4898      	ldr	r0, [pc, #608]	; (8002098 <uartdecode+0x290>)
 8001e38:	f009 fd84 	bl	800b944 <memcpy>
	statepara[3] = '\0';
 8001e3c:	4b96      	ldr	r3, [pc, #600]	; (8002098 <uartdecode+0x290>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	70da      	strb	r2, [r3, #3]
	stateval = (uint16_t)(atoi(statepara));
 8001e42:	4895      	ldr	r0, [pc, #596]	; (8002098 <uartdecode+0x290>)
 8001e44:	f009 fd3f 	bl	800b8c6 <atoi>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	4b93      	ldr	r3, [pc, #588]	; (800209c <uartdecode+0x294>)
 8001e4e:	801a      	strh	r2, [r3, #0]



		memcpy(par1, &rxSetBuf[9], 3);   //here is para1
 8001e50:	2203      	movs	r2, #3
 8001e52:	4993      	ldr	r1, [pc, #588]	; (80020a0 <uartdecode+0x298>)
 8001e54:	4893      	ldr	r0, [pc, #588]	; (80020a4 <uartdecode+0x29c>)
 8001e56:	f009 fd75 	bl	800b944 <memcpy>
		par1[3] = '\0';
 8001e5a:	4b92      	ldr	r3, [pc, #584]	; (80020a4 <uartdecode+0x29c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	70da      	strb	r2, [r3, #3]
			p1val = ((double)atoi(par1));
 8001e60:	4890      	ldr	r0, [pc, #576]	; (80020a4 <uartdecode+0x29c>)
 8001e62:	f009 fd30 	bl	800b8c6 <atoi>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fb63 	bl	8000534 <__aeabi_i2d>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	f7fe fe9f 	bl	8000bb8 <__aeabi_d2uiz>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	4b8a      	ldr	r3, [pc, #552]	; (80020a8 <uartdecode+0x2a0>)
 8001e80:	801a      	strh	r2, [r3, #0]
			p1timeval = p1val;
 8001e82:	4b89      	ldr	r3, [pc, #548]	; (80020a8 <uartdecode+0x2a0>)
 8001e84:	881a      	ldrh	r2, [r3, #0]
 8001e86:	4b89      	ldr	r3, [pc, #548]	; (80020ac <uartdecode+0x2a4>)
 8001e88:	801a      	strh	r2, [r3, #0]


			memcpy(par2, &rxSetBuf[13], 3);   //here is para2
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	4988      	ldr	r1, [pc, #544]	; (80020b0 <uartdecode+0x2a8>)
 8001e8e:	4889      	ldr	r0, [pc, #548]	; (80020b4 <uartdecode+0x2ac>)
 8001e90:	f009 fd58 	bl	800b944 <memcpy>
			par2[3] = '\0';
 8001e94:	4b87      	ldr	r3, [pc, #540]	; (80020b4 <uartdecode+0x2ac>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	70da      	strb	r2, [r3, #3]
			//snprintf((char*)statepara_str, 5, "%s", (char*)statepara);
			strcpy(p2val, par2);
 8001e9a:	4986      	ldr	r1, [pc, #536]	; (80020b4 <uartdecode+0x2ac>)
 8001e9c:	4886      	ldr	r0, [pc, #536]	; (80020b8 <uartdecode+0x2b0>)
 8001e9e:	f00a fae1 	bl	800c464 <strcpy>
			p2bchan = ((double)atoi(par2));
 8001ea2:	4884      	ldr	r0, [pc, #528]	; (80020b4 <uartdecode+0x2ac>)
 8001ea4:	f009 fd0f 	bl	800b8c6 <atoi>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fb42 	bl	8000534 <__aeabi_i2d>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f7fe fe7e 	bl	8000bb8 <__aeabi_d2uiz>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4b7e      	ldr	r3, [pc, #504]	; (80020bc <uartdecode+0x2b4>)
 8001ec2:	801a      	strh	r2, [r3, #0]
//NOTE statepar and par1 are switched when decoding. Con


	//MODE 1

	if(rxSetBuf[3] == 'F' ){
 8001ec4:	4b7e      	ldr	r3, [pc, #504]	; (80020c0 <uartdecode+0x2b8>)
 8001ec6:	78db      	ldrb	r3, [r3, #3]
 8001ec8:	2b46      	cmp	r3, #70	; 0x46
 8001eca:	d144      	bne.n	8001f56 <uartdecode+0x14e>
	MODE =0; //flash
 8001ecc:	4b7d      	ldr	r3, [pc, #500]	; (80020c4 <uartdecode+0x2bc>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
	emmode=0;
 8001ed2:	4b7d      	ldr	r3, [pc, #500]	; (80020c8 <uartdecode+0x2c0>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]

	output_voltage =(uint32_t) (4095*(((double)(stateval))/512.0));
 8001ed8:	4b70      	ldr	r3, [pc, #448]	; (800209c <uartdecode+0x294>)
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fb19 	bl	8000514 <__aeabi_ui2d>
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001eea:	f7fe fcb7 	bl	800085c <__aeabi_ddiv>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	a360      	add	r3, pc, #384	; (adr r3, 8002078 <uartdecode+0x270>)
 8001ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efc:	f7fe fb84 	bl	8000608 <__aeabi_dmul>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	f7fe fe56 	bl	8000bb8 <__aeabi_d2uiz>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4a6f      	ldr	r2, [pc, #444]	; (80020cc <uartdecode+0x2c4>)
 8001f10:	6013      	str	r3, [r2, #0]
	out_new =(uint32_t) (4095*(((double)(stateval))/512.0));
 8001f12:	4b62      	ldr	r3, [pc, #392]	; (800209c <uartdecode+0x294>)
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fafc 	bl	8000514 <__aeabi_ui2d>
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001f24:	f7fe fc9a 	bl	800085c <__aeabi_ddiv>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	a351      	add	r3, pc, #324	; (adr r3, 8002078 <uartdecode+0x270>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	f7fe fb67 	bl	8000608 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	f7fe fe39 	bl	8000bb8 <__aeabi_d2uiz>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b61      	ldr	r3, [pc, #388]	; (80020d0 <uartdecode+0x2c8>)
 8001f4c:	601a      	str	r2, [r3, #0]

	dacset();
 8001f4e:	f7ff fcd3 	bl	80018f8 <dacset>
	pwmset();
 8001f52:	f7ff fe89 	bl	8001c68 <pwmset>


	}

	//MODE 2
	if(rxSetBuf[3] == 'E' ){
 8001f56:	4b5a      	ldr	r3, [pc, #360]	; (80020c0 <uartdecode+0x2b8>)
 8001f58:	78db      	ldrb	r3, [r3, #3]
 8001f5a:	2b45      	cmp	r3, #69	; 0x45
 8001f5c:	f040 80c9 	bne.w	80020f2 <uartdecode+0x2ea>
		output_voltage =(uint32_t) (4095*(((double)(stateval))/512.0));
 8001f60:	4b4e      	ldr	r3, [pc, #312]	; (800209c <uartdecode+0x294>)
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe fad5 	bl	8000514 <__aeabi_ui2d>
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001f72:	f7fe fc73 	bl	800085c <__aeabi_ddiv>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	a33e      	add	r3, pc, #248	; (adr r3, 8002078 <uartdecode+0x270>)
 8001f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f84:	f7fe fb40 	bl	8000608 <__aeabi_dmul>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f7fe fe12 	bl	8000bb8 <__aeabi_d2uiz>
 8001f94:	4603      	mov	r3, r0
 8001f96:	4a4d      	ldr	r2, [pc, #308]	; (80020cc <uartdecode+0x2c4>)
 8001f98:	6013      	str	r3, [r2, #0]
		out_new =(uint32_t) (4095*(((double)(stateval))/512.0));
 8001f9a:	4b40      	ldr	r3, [pc, #256]	; (800209c <uartdecode+0x294>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fab8 	bl	8000514 <__aeabi_ui2d>
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001fac:	f7fe fc56 	bl	800085c <__aeabi_ddiv>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	a32f      	add	r3, pc, #188	; (adr r3, 8002078 <uartdecode+0x270>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	f7fe fb23 	bl	8000608 <__aeabi_dmul>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f7fe fdf5 	bl	8000bb8 <__aeabi_d2uiz>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b3f      	ldr	r3, [pc, #252]	; (80020d0 <uartdecode+0x2c8>)
 8001fd4:	601a      	str	r2, [r3, #0]

	MODE =1; //strobe
 8001fd6:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <uartdecode+0x2bc>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]

	if (p1val==0){
 8001fdc:	4b32      	ldr	r3, [pc, #200]	; (80020a8 <uartdecode+0x2a0>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d17b      	bne.n	80020dc <uartdecode+0x2d4>

		//its in morse custom mode
		emmode=2;
 8001fe4:	4b38      	ldr	r3, [pc, #224]	; (80020c8 <uartdecode+0x2c0>)
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	701a      	strb	r2, [r3, #0]



		if (p2val[0] == '0' && p2val[1] == '0' && p2val[2] == '0'){
 8001fea:	4b33      	ldr	r3, [pc, #204]	; (80020b8 <uartdecode+0x2b0>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b30      	cmp	r3, #48	; 0x30
 8001ff0:	d10b      	bne.n	800200a <uartdecode+0x202>
 8001ff2:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <uartdecode+0x2b0>)
 8001ff4:	785b      	ldrb	r3, [r3, #1]
 8001ff6:	2b30      	cmp	r3, #48	; 0x30
 8001ff8:	d107      	bne.n	800200a <uartdecode+0x202>
 8001ffa:	4b2f      	ldr	r3, [pc, #188]	; (80020b8 <uartdecode+0x2b0>)
 8001ffc:	789b      	ldrb	r3, [r3, #2]
 8001ffe:	2b30      	cmp	r3, #48	; 0x30
 8002000:	d103      	bne.n	800200a <uartdecode+0x202>

			message[3]= '\0';
 8002002:	4b34      	ldr	r3, [pc, #208]	; (80020d4 <uartdecode+0x2cc>)
 8002004:	2200      	movs	r2, #0
 8002006:	70da      	strb	r2, [r3, #3]
 8002008:	e073      	b.n	80020f2 <uartdecode+0x2ea>
		}
		else{


			//declare my message array as para2
			for(int i=0;i<3;i++){
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	e00e      	b.n	800202e <uartdecode+0x226>
			message[i]= p2val[i];
 8002010:	4a29      	ldr	r2, [pc, #164]	; (80020b8 <uartdecode+0x2b0>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	7819      	ldrb	r1, [r3, #0]
 8002018:	4a2e      	ldr	r2, [pc, #184]	; (80020d4 <uartdecode+0x2cc>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	460a      	mov	r2, r1
 8002020:	701a      	strb	r2, [r3, #0]
			message[3]= '\0';
 8002022:	4b2c      	ldr	r3, [pc, #176]	; (80020d4 <uartdecode+0x2cc>)
 8002024:	2200      	movs	r2, #0
 8002026:	70da      	strb	r2, [r3, #3]
			for(int i=0;i<3;i++){
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3301      	adds	r3, #1
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	dded      	ble.n	8002010 <uartdecode+0x208>

			}
			if ( p2val[0]=='0' && p2val[1]=='0' && p2val[2]=='0'){
 8002034:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <uartdecode+0x2b0>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b30      	cmp	r3, #48	; 0x30
 800203a:	d15a      	bne.n	80020f2 <uartdecode+0x2ea>
 800203c:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <uartdecode+0x2b0>)
 800203e:	785b      	ldrb	r3, [r3, #1]
 8002040:	2b30      	cmp	r3, #48	; 0x30
 8002042:	d156      	bne.n	80020f2 <uartdecode+0x2ea>
 8002044:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <uartdecode+0x2b0>)
 8002046:	789b      	ldrb	r3, [r3, #2]
 8002048:	2b30      	cmp	r3, #48	; 0x30
 800204a:	d152      	bne.n	80020f2 <uartdecode+0x2ea>
				for(int i=0;i<3;i++){
 800204c:	2300      	movs	r3, #0
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	e00e      	b.n	8002070 <uartdecode+0x268>
							message[i]= defmes[i];
 8002052:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <uartdecode+0x2d0>)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4413      	add	r3, r2
 8002058:	7819      	ldrb	r1, [r3, #0]
 800205a:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <uartdecode+0x2cc>)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	4413      	add	r3, r2
 8002060:	460a      	mov	r2, r1
 8002062:	701a      	strb	r2, [r3, #0]
							message[3]= '\0';
 8002064:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <uartdecode+0x2cc>)
 8002066:	2200      	movs	r2, #0
 8002068:	70da      	strb	r2, [r3, #3]
				for(int i=0;i<3;i++){
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	3301      	adds	r3, #1
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2b02      	cmp	r3, #2
 8002074:	dded      	ble.n	8002052 <uartdecode+0x24a>
 8002076:	e03c      	b.n	80020f2 <uartdecode+0x2ea>
 8002078:	00000000 	.word	0x00000000
 800207c:	40affe00 	.word	0x40affe00
 8002080:	200005da 	.word	0x200005da
 8002084:	200005fc 	.word	0x200005fc
 8002088:	200005e0 	.word	0x200005e0
 800208c:	200006f0 	.word	0x200006f0
 8002090:	20000614 	.word	0x20000614
 8002094:	20000715 	.word	0x20000715
 8002098:	200006dc 	.word	0x200006dc
 800209c:	200006e8 	.word	0x200006e8
 80020a0:	20000719 	.word	0x20000719
 80020a4:	200006e0 	.word	0x200006e0
 80020a8:	200006ea 	.word	0x200006ea
 80020ac:	200006ee 	.word	0x200006ee
 80020b0:	2000071d 	.word	0x2000071d
 80020b4:	200006e4 	.word	0x200006e4
 80020b8:	200000ac 	.word	0x200000ac
 80020bc:	200006ec 	.word	0x200006ec
 80020c0:	20000710 	.word	0x20000710
 80020c4:	200006ac 	.word	0x200006ac
 80020c8:	200006ad 	.word	0x200006ad
 80020cc:	200006a8 	.word	0x200006a8
 80020d0:	20000604 	.word	0x20000604
 80020d4:	20000008 	.word	0x20000008
 80020d8:	20000004 	.word	0x20000004


		}


	else if (p1val !=0){
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <uartdecode+0x33c>)
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d006      	beq.n	80020f2 <uartdecode+0x2ea>
		//probincr++;
					//its in strobe mode
					// output_voltage = stateval;
							dacset();
 80020e4:	f7ff fc08 	bl	80018f8 <dacset>
							pwmset();
 80020e8:	f7ff fdbe 	bl	8001c68 <pwmset>
							//customized for when mode =1
							emmode=0;
 80020ec:	4b16      	ldr	r3, [pc, #88]	; (8002148 <uartdecode+0x340>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]

	}


	//MODE 3
	if(rxSetBuf[3] == 'M' ){
 80020f2:	4b16      	ldr	r3, [pc, #88]	; (800214c <uartdecode+0x344>)
 80020f4:	78db      	ldrb	r3, [r3, #3]
 80020f6:	2b4d      	cmp	r3, #77	; 0x4d
 80020f8:	d111      	bne.n	800211e <uartdecode+0x316>
	MODE =2;
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <uartdecode+0x348>)
 80020fc:	2202      	movs	r2, #2
 80020fe:	701a      	strb	r2, [r3, #0]

	rchan =stateval;
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <uartdecode+0x34c>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	4b14      	ldr	r3, [pc, #80]	; (8002158 <uartdecode+0x350>)
 8002108:	601a      	str	r2, [r3, #0]
	gchan = p1val;
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <uartdecode+0x33c>)
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <uartdecode+0x354>)
 8002112:	601a      	str	r2, [r3, #0]
	bchan = p2bchan;
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <uartdecode+0x358>)
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	4b12      	ldr	r3, [pc, #72]	; (8002164 <uartdecode+0x35c>)
 800211c:	601a      	str	r2, [r3, #0]
	}




firston=1;
 800211e:	4b12      	ldr	r3, [pc, #72]	; (8002168 <uartdecode+0x360>)
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
	sliderold = vinadj;
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <uartdecode+0x364>)
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	4911      	ldr	r1, [pc, #68]	; (8002170 <uartdecode+0x368>)
 800212c:	e9c1 2300 	strd	r2, r3, [r1]
	ps=1;
 8002130:	4b10      	ldr	r3, [pc, #64]	; (8002174 <uartdecode+0x36c>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
modeset();
 8002136:	f7ff fdf5 	bl	8001d24 <modeset>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200006ea 	.word	0x200006ea
 8002148:	200006ad 	.word	0x200006ad
 800214c:	20000710 	.word	0x20000710
 8002150:	200006ac 	.word	0x200006ac
 8002154:	200006e8 	.word	0x200006e8
 8002158:	200005c8 	.word	0x200005c8
 800215c:	200005cc 	.word	0x200005cc
 8002160:	200006ec 	.word	0x200006ec
 8002164:	200005d0 	.word	0x200005d0
 8002168:	200005e0 	.word	0x200005e0
 800216c:	20000698 	.word	0x20000698
 8002170:	20000728 	.word	0x20000728
 8002174:	200005da 	.word	0x200005da

08002178 <uartencode>:

void uartencode(){
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0


//if flagstat 0??

		stateval = (uint32_t)((double)(out_new)*512.0/4095.0 + 0.5);
 800217c:	4b6c      	ldr	r3, [pc, #432]	; (8002330 <uartencode+0x1b8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe f9d7 	bl	8000534 <__aeabi_i2d>
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800218e:	f7fe fa3b 	bl	8000608 <__aeabi_dmul>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	a363      	add	r3, pc, #396	; (adr r3, 8002328 <uartencode+0x1b0>)
 800219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a0:	f7fe fb5c 	bl	800085c <__aeabi_ddiv>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	4b60      	ldr	r3, [pc, #384]	; (8002334 <uartencode+0x1bc>)
 80021b2:	f7fe f873 	bl	800029c <__adddf3>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	f7fe fcfb 	bl	8000bb8 <__aeabi_d2uiz>
 80021c2:	4603      	mov	r3, r0
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	4b5c      	ldr	r3, [pc, #368]	; (8002338 <uartencode+0x1c0>)
 80021c8:	801a      	strh	r2, [r3, #0]

	if (emmode==0 && MODE ==1){ // if switched to manual input then  act accordingly flagstat==0 &&
 80021ca:	4b5c      	ldr	r3, [pc, #368]	; (800233c <uartencode+0x1c4>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <uartencode+0x68>
 80021d2:	4b5b      	ldr	r3, [pc, #364]	; (8002340 <uartencode+0x1c8>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d102      	bne.n	80021e0 <uartencode+0x68>


		strcpy(p2val, "SOS");
 80021da:	4b5a      	ldr	r3, [pc, #360]	; (8002344 <uartencode+0x1cc>)
 80021dc:	4a5a      	ldr	r2, [pc, #360]	; (8002348 <uartencode+0x1d0>)
 80021de:	601a      	str	r2, [r3, #0]

	}

	if (MODE==1 && (emmode==1 )  && p2val[0]=='0' && p2val[1]=='0' && p2val[2]=='0'){
 80021e0:	4b57      	ldr	r3, [pc, #348]	; (8002340 <uartencode+0x1c8>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d113      	bne.n	8002210 <uartencode+0x98>
 80021e8:	4b54      	ldr	r3, [pc, #336]	; (800233c <uartencode+0x1c4>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d10f      	bne.n	8002210 <uartencode+0x98>
 80021f0:	4b54      	ldr	r3, [pc, #336]	; (8002344 <uartencode+0x1cc>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b30      	cmp	r3, #48	; 0x30
 80021f6:	d10b      	bne.n	8002210 <uartencode+0x98>
 80021f8:	4b52      	ldr	r3, [pc, #328]	; (8002344 <uartencode+0x1cc>)
 80021fa:	785b      	ldrb	r3, [r3, #1]
 80021fc:	2b30      	cmp	r3, #48	; 0x30
 80021fe:	d107      	bne.n	8002210 <uartencode+0x98>
 8002200:	4b50      	ldr	r3, [pc, #320]	; (8002344 <uartencode+0x1cc>)
 8002202:	789b      	ldrb	r3, [r3, #2]
 8002204:	2b30      	cmp	r3, #48	; 0x30
 8002206:	d103      	bne.n	8002210 <uartencode+0x98>
 8002208:	4b50      	ldr	r3, [pc, #320]	; (800234c <uartencode+0x1d4>)
 800220a:	681b      	ldr	r3, [r3, #0]
		 memcpy(p2val, defmes, 4);
 800220c:	4a4d      	ldr	r2, [pc, #308]	; (8002344 <uartencode+0x1cc>)
 800220e:	6013      	str	r3, [r2, #0]
	}

	if (MODE==1 && emmode==2 && p2val[0]=='0' && p2val[1]=='0' && p2val[2]=='0'){
 8002210:	4b4b      	ldr	r3, [pc, #300]	; (8002340 <uartencode+0x1c8>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d113      	bne.n	8002240 <uartencode+0xc8>
 8002218:	4b48      	ldr	r3, [pc, #288]	; (800233c <uartencode+0x1c4>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d10f      	bne.n	8002240 <uartencode+0xc8>
 8002220:	4b48      	ldr	r3, [pc, #288]	; (8002344 <uartencode+0x1cc>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b30      	cmp	r3, #48	; 0x30
 8002226:	d10b      	bne.n	8002240 <uartencode+0xc8>
 8002228:	4b46      	ldr	r3, [pc, #280]	; (8002344 <uartencode+0x1cc>)
 800222a:	785b      	ldrb	r3, [r3, #1]
 800222c:	2b30      	cmp	r3, #48	; 0x30
 800222e:	d107      	bne.n	8002240 <uartencode+0xc8>
 8002230:	4b44      	ldr	r3, [pc, #272]	; (8002344 <uartencode+0x1cc>)
 8002232:	789b      	ldrb	r3, [r3, #2]
 8002234:	2b30      	cmp	r3, #48	; 0x30
 8002236:	d103      	bne.n	8002240 <uartencode+0xc8>
 8002238:	4b45      	ldr	r3, [pc, #276]	; (8002350 <uartencode+0x1d8>)
 800223a:	681b      	ldr	r3, [r3, #0]
		 memcpy(p2val, message, 4);
 800223c:	4a41      	ldr	r2, [pc, #260]	; (8002344 <uartencode+0x1cc>)
 800223e:	6013      	str	r3, [r2, #0]

		}

	if (MODE ==2 ){
 8002240:	4b3f      	ldr	r3, [pc, #252]	; (8002340 <uartencode+0x1c8>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d110      	bne.n	800226a <uartencode+0xf2>
		stateval = rchan;
 8002248:	4b42      	ldr	r3, [pc, #264]	; (8002354 <uartencode+0x1dc>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	b29a      	uxth	r2, r3
 800224e:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <uartencode+0x1c0>)
 8002250:	801a      	strh	r2, [r3, #0]
		p1timeval = gchan;
 8002252:	4b41      	ldr	r3, [pc, #260]	; (8002358 <uartencode+0x1e0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	b29a      	uxth	r2, r3
 8002258:	4b40      	ldr	r3, [pc, #256]	; (800235c <uartencode+0x1e4>)
 800225a:	801a      	strh	r2, [r3, #0]
		sprintf(p2val, "%03d", bchan);
 800225c:	4b40      	ldr	r3, [pc, #256]	; (8002360 <uartencode+0x1e8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	4940      	ldr	r1, [pc, #256]	; (8002364 <uartencode+0x1ec>)
 8002264:	4837      	ldr	r0, [pc, #220]	; (8002344 <uartencode+0x1cc>)
 8002266:	f00a f8dd 	bl	800c424 <siprintf>



	}
	if (ps ==0 && MODE !=2){
 800226a:	4b3f      	ldr	r3, [pc, #252]	; (8002368 <uartencode+0x1f0>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <uartencode+0x108>
 8002272:	4b33      	ldr	r3, [pc, #204]	; (8002340 <uartencode+0x1c8>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d002      	beq.n	8002280 <uartencode+0x108>
		stateval =0;
 800227a:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <uartencode+0x1c0>)
 800227c:	2200      	movs	r2, #0
 800227e:	801a      	strh	r2, [r3, #0]
	}

	// Use sprintf() to format the integer as a string and store it in the totransmit array

	sprintf((char*)(intptr_t)&statusarr[9], "%03d", p1timeval);
 8002280:	4b36      	ldr	r3, [pc, #216]	; (800235c <uartencode+0x1e4>)
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	4937      	ldr	r1, [pc, #220]	; (8002364 <uartencode+0x1ec>)
 8002288:	4838      	ldr	r0, [pc, #224]	; (800236c <uartencode+0x1f4>)
 800228a:	f00a f8cb 	bl	800c424 <siprintf>
	//sprintf((char*)(intptr_t)&statusarr[13], "%03d", p2val);
	sprintf((char*)(intptr_t)&statusarr[13], "%s", p2val);
 800228e:	4a2d      	ldr	r2, [pc, #180]	; (8002344 <uartencode+0x1cc>)
 8002290:	4937      	ldr	r1, [pc, #220]	; (8002370 <uartencode+0x1f8>)
 8002292:	4838      	ldr	r0, [pc, #224]	; (8002374 <uartencode+0x1fc>)
 8002294:	f00a f8c6 	bl	800c424 <siprintf>
	//	sprintf(&statusarr[9], "%03d", p2val);
	sprintf(&statusarr[5], "%03d", stateval);
 8002298:	4b27      	ldr	r3, [pc, #156]	; (8002338 <uartencode+0x1c0>)
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	4931      	ldr	r1, [pc, #196]	; (8002364 <uartencode+0x1ec>)
 80022a0:	4835      	ldr	r0, [pc, #212]	; (8002378 <uartencode+0x200>)
 80022a2:	f00a f8bf 	bl	800c424 <siprintf>
	statusarr[0] = '#';
 80022a6:	4b35      	ldr	r3, [pc, #212]	; (800237c <uartencode+0x204>)
 80022a8:	2223      	movs	r2, #35	; 0x23
 80022aa:	701a      	strb	r2, [r3, #0]
	sprintf((char*)(intptr_t)&statusarr[1], "%03d", ':');
 80022ac:	223a      	movs	r2, #58	; 0x3a
 80022ae:	492d      	ldr	r1, [pc, #180]	; (8002364 <uartencode+0x1ec>)
 80022b0:	4833      	ldr	r0, [pc, #204]	; (8002380 <uartencode+0x208>)
 80022b2:	f00a f8b7 	bl	800c424 <siprintf>
	statusarr[2] = 'M';
 80022b6:	4b31      	ldr	r3, [pc, #196]	; (800237c <uartencode+0x204>)
 80022b8:	224d      	movs	r2, #77	; 0x4d
 80022ba:	709a      	strb	r2, [r3, #2]
	statusarr[1] = ':';
 80022bc:	4b2f      	ldr	r3, [pc, #188]	; (800237c <uartencode+0x204>)
 80022be:	223a      	movs	r2, #58	; 0x3a
 80022c0:	705a      	strb	r2, [r3, #1]
	statusarr[4] = ':';
 80022c2:	4b2e      	ldr	r3, [pc, #184]	; (800237c <uartencode+0x204>)
 80022c4:	223a      	movs	r2, #58	; 0x3a
 80022c6:	711a      	strb	r2, [r3, #4]
	statusarr[8] = ':';
 80022c8:	4b2c      	ldr	r3, [pc, #176]	; (800237c <uartencode+0x204>)
 80022ca:	223a      	movs	r2, #58	; 0x3a
 80022cc:	721a      	strb	r2, [r3, #8]
	statusarr[12] = ':';
 80022ce:	4b2b      	ldr	r3, [pc, #172]	; (800237c <uartencode+0x204>)
 80022d0:	223a      	movs	r2, #58	; 0x3a
 80022d2:	731a      	strb	r2, [r3, #12]
	statusarr[16] = ':';
 80022d4:	4b29      	ldr	r3, [pc, #164]	; (800237c <uartencode+0x204>)
 80022d6:	223a      	movs	r2, #58	; 0x3a
 80022d8:	741a      	strb	r2, [r3, #16]
	statusarr[17] = '$';
 80022da:	4b28      	ldr	r3, [pc, #160]	; (800237c <uartencode+0x204>)
 80022dc:	2224      	movs	r2, #36	; 0x24
 80022de:	745a      	strb	r2, [r3, #17]
	statusarr[18] = 10;
 80022e0:	4b26      	ldr	r3, [pc, #152]	; (800237c <uartencode+0x204>)
 80022e2:	220a      	movs	r2, #10
 80022e4:	749a      	strb	r2, [r3, #18]
	//sprintf(&statusarr[9], "%03d", p2val);

	if (MODE==0){
 80022e6:	4b16      	ldr	r3, [pc, #88]	; (8002340 <uartencode+0x1c8>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <uartencode+0x17c>

		statusarr[3] = 'F';
 80022ee:	4b23      	ldr	r3, [pc, #140]	; (800237c <uartencode+0x204>)
 80022f0:	2246      	movs	r2, #70	; 0x46
 80022f2:	70da      	strb	r2, [r3, #3]
	}
	if (MODE==1){
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <uartencode+0x1c8>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d102      	bne.n	8002302 <uartencode+0x18a>

		statusarr[3] = 'E';
 80022fc:	4b1f      	ldr	r3, [pc, #124]	; (800237c <uartencode+0x204>)
 80022fe:	2245      	movs	r2, #69	; 0x45
 8002300:	70da      	strb	r2, [r3, #3]
	}
	if (MODE==2){
 8002302:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <uartencode+0x1c8>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d102      	bne.n	8002310 <uartencode+0x198>

		statusarr[3] = 'M';
 800230a:	4b1c      	ldr	r3, [pc, #112]	; (800237c <uartencode+0x204>)
 800230c:	224d      	movs	r2, #77	; 0x4d
 800230e:	70da      	strb	r2, [r3, #3]
	}

	HAL_UART_Transmit(&huart2, statusarr, 19, 500);
 8002310:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002314:	2213      	movs	r2, #19
 8002316:	4919      	ldr	r1, [pc, #100]	; (800237c <uartencode+0x204>)
 8002318:	481a      	ldr	r0, [pc, #104]	; (8002384 <uartencode+0x20c>)
 800231a:	f008 f905 	bl	800a528 <HAL_UART_Transmit>





}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	f3af 8000 	nop.w
 8002328:	00000000 	.word	0x00000000
 800232c:	40affe00 	.word	0x40affe00
 8002330:	20000604 	.word	0x20000604
 8002334:	3fe00000 	.word	0x3fe00000
 8002338:	200006e8 	.word	0x200006e8
 800233c:	200006ad 	.word	0x200006ad
 8002340:	200006ac 	.word	0x200006ac
 8002344:	200000ac 	.word	0x200000ac
 8002348:	00534f53 	.word	0x00534f53
 800234c:	20000004 	.word	0x20000004
 8002350:	20000008 	.word	0x20000008
 8002354:	200005c8 	.word	0x200005c8
 8002358:	200005cc 	.word	0x200005cc
 800235c:	200006ee 	.word	0x200006ee
 8002360:	200005d0 	.word	0x200005d0
 8002364:	0800f7d8 	.word	0x0800f7d8
 8002368:	200005da 	.word	0x200005da
 800236c:	200006fd 	.word	0x200006fd
 8002370:	0800f7e0 	.word	0x0800f7e0
 8002374:	20000701 	.word	0x20000701
 8002378:	200006f9 	.word	0x200006f9
 800237c:	200006f4 	.word	0x200006f4
 8002380:	200006f5 	.word	0x200006f5
 8002384:	200004fc 	.word	0x200004fc

08002388 <strobeset>:




void strobeset(){
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0

// Start the PWM signal
strobeflag =1;
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <strobeset+0x44>)
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]


if (alternator ==0){
 8002392:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <strobeset+0x48>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d107      	bne.n	80023aa <strobeset+0x22>

dacset();
 800239a:	f7ff faad 	bl	80018f8 <dacset>
pwmset();
 800239e:	f7ff fc63 	bl	8001c68 <pwmset>
alternator =1;
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <strobeset+0x48>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	e006      	b.n	80023b8 <strobeset+0x30>
}
else{

dacset();
 80023aa:	f7ff faa5 	bl	80018f8 <dacset>
pwmset();
 80023ae:	f7ff fc5b 	bl	8001c68 <pwmset>
alternator =0;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <strobeset+0x48>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]

}


strobetime = HAL_GetTick();
 80023b8:	f001 fff6 	bl	80043a8 <HAL_GetTick>
 80023bc:	4603      	mov	r3, r0
 80023be:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <strobeset+0x4c>)
 80023c0:	6013      	str	r3, [r2, #0]

strobeflag=0;
 80023c2:	4b02      	ldr	r3, [pc, #8]	; (80023cc <strobeset+0x44>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]



}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000640 	.word	0x20000640
 80023d0:	20000638 	.word	0x20000638
 80023d4:	2000063c 	.word	0x2000063c

080023d8 <convertToMorse>:
//declare

void convertToMorse() {
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0


    for (int i = 0; i < 3; i++) {
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	e0ba      	b.n	800255a <convertToMorse+0x182>
        // Convert current character to uppercase
    	if (emmode==2){
 80023e4:	4b61      	ldr	r3, [pc, #388]	; (800256c <convertToMorse+0x194>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d105      	bne.n	80023f8 <convertToMorse+0x20>
         c = (message[i]);
 80023ec:	4a60      	ldr	r2, [pc, #384]	; (8002570 <convertToMorse+0x198>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	781a      	ldrb	r2, [r3, #0]
 80023f4:	4b5f      	ldr	r3, [pc, #380]	; (8002574 <convertToMorse+0x19c>)
 80023f6:	701a      	strb	r2, [r3, #0]
    	}
    	if (emmode==1){
 80023f8:	4b5c      	ldr	r3, [pc, #368]	; (800256c <convertToMorse+0x194>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d105      	bne.n	800240c <convertToMorse+0x34>
    		c = defmes[i];
 8002400:	4a5d      	ldr	r2, [pc, #372]	; (8002578 <convertToMorse+0x1a0>)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	781a      	ldrb	r2, [r3, #0]
 8002408:	4b5a      	ldr	r3, [pc, #360]	; (8002574 <convertToMorse+0x19c>)
 800240a:	701a      	strb	r2, [r3, #0]
    	}

        // Find Morse code for current character
        //const char* morse = NULL;
        if (c >= 'A' && c <= 'Z') {
 800240c:	4b59      	ldr	r3, [pc, #356]	; (8002574 <convertToMorse+0x19c>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b40      	cmp	r3, #64	; 0x40
 8002412:	d90c      	bls.n	800242e <convertToMorse+0x56>
 8002414:	4b57      	ldr	r3, [pc, #348]	; (8002574 <convertToMorse+0x19c>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b5a      	cmp	r3, #90	; 0x5a
 800241a:	d808      	bhi.n	800242e <convertToMorse+0x56>
            morse = morseTable[c - 'A']; //morse is current morse char ie S
 800241c:	4b55      	ldr	r3, [pc, #340]	; (8002574 <convertToMorse+0x19c>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	3b41      	subs	r3, #65	; 0x41
 8002422:	4a56      	ldr	r2, [pc, #344]	; (800257c <convertToMorse+0x1a4>)
 8002424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002428:	4a55      	ldr	r2, [pc, #340]	; (8002580 <convertToMorse+0x1a8>)
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	e00f      	b.n	800244e <convertToMorse+0x76>
        } else if (c >= '0' && c <= '9') {
 800242e:	4b51      	ldr	r3, [pc, #324]	; (8002574 <convertToMorse+0x19c>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b2f      	cmp	r3, #47	; 0x2f
 8002434:	d90b      	bls.n	800244e <convertToMorse+0x76>
 8002436:	4b4f      	ldr	r3, [pc, #316]	; (8002574 <convertToMorse+0x19c>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b39      	cmp	r3, #57	; 0x39
 800243c:	d807      	bhi.n	800244e <convertToMorse+0x76>
            morse = morseTable[c - '0' + 26];
 800243e:	4b4d      	ldr	r3, [pc, #308]	; (8002574 <convertToMorse+0x19c>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	3b16      	subs	r3, #22
 8002444:	4a4d      	ldr	r2, [pc, #308]	; (800257c <convertToMorse+0x1a4>)
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	4a4d      	ldr	r2, [pc, #308]	; (8002580 <convertToMorse+0x1a8>)
 800244c:	6013      	str	r3, [r2, #0]
        }

        // Convert Morse code to binary and store in appropriate output array

        if (i == 0) {
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d11c      	bne.n	800248e <convertToMorse+0xb6>
    		len1 = strlen(morse) ;
 8002454:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <convertToMorse+0x1a8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7fd fec1 	bl	80001e0 <strlen>
 800245e:	4603      	mov	r3, r0
 8002460:	461a      	mov	r2, r3
 8002462:	4b48      	ldr	r3, [pc, #288]	; (8002584 <convertToMorse+0x1ac>)
 8002464:	601a      	str	r2, [r3, #0]
        	output = output1 = (int*) malloc(strlen(morse) * sizeof(int)+1);
 8002466:	4b46      	ldr	r3, [pc, #280]	; (8002580 <convertToMorse+0x1a8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fd feb8 	bl	80001e0 <strlen>
 8002470:	4603      	mov	r3, r0
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	3301      	adds	r3, #1
 8002476:	4618      	mov	r0, r3
 8002478:	f009 fa54 	bl	800b924 <malloc>
 800247c:	4603      	mov	r3, r0
 800247e:	461a      	mov	r2, r3
 8002480:	4b41      	ldr	r3, [pc, #260]	; (8002588 <convertToMorse+0x1b0>)
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	4b40      	ldr	r3, [pc, #256]	; (8002588 <convertToMorse+0x1b0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a40      	ldr	r2, [pc, #256]	; (800258c <convertToMorse+0x1b4>)
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	e03b      	b.n	8002506 <convertToMorse+0x12e>




        } else if (i == 1) {
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d11c      	bne.n	80024ce <convertToMorse+0xf6>
        	len2 = strlen(morse) ;
 8002494:	4b3a      	ldr	r3, [pc, #232]	; (8002580 <convertToMorse+0x1a8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7fd fea1 	bl	80001e0 <strlen>
 800249e:	4603      	mov	r3, r0
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <convertToMorse+0x1b8>)
 80024a4:	601a      	str	r2, [r3, #0]
            output = output2 = (int*) malloc(strlen(morse) * sizeof(int)+1);
 80024a6:	4b36      	ldr	r3, [pc, #216]	; (8002580 <convertToMorse+0x1a8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fd fe98 	bl	80001e0 <strlen>
 80024b0:	4603      	mov	r3, r0
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	3301      	adds	r3, #1
 80024b6:	4618      	mov	r0, r3
 80024b8:	f009 fa34 	bl	800b924 <malloc>
 80024bc:	4603      	mov	r3, r0
 80024be:	461a      	mov	r2, r3
 80024c0:	4b34      	ldr	r3, [pc, #208]	; (8002594 <convertToMorse+0x1bc>)
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	4b33      	ldr	r3, [pc, #204]	; (8002594 <convertToMorse+0x1bc>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a30      	ldr	r2, [pc, #192]	; (800258c <convertToMorse+0x1b4>)
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	e01b      	b.n	8002506 <convertToMorse+0x12e>
        } else {
        	len3 = strlen(morse) ;
 80024ce:	4b2c      	ldr	r3, [pc, #176]	; (8002580 <convertToMorse+0x1a8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fd fe84 	bl	80001e0 <strlen>
 80024d8:	4603      	mov	r3, r0
 80024da:	461a      	mov	r2, r3
 80024dc:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <convertToMorse+0x1c0>)
 80024de:	601a      	str	r2, [r3, #0]
            output = output3 = (int*) malloc(strlen(morse) * sizeof(int)+1);
 80024e0:	4b27      	ldr	r3, [pc, #156]	; (8002580 <convertToMorse+0x1a8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fd fe7b 	bl	80001e0 <strlen>
 80024ea:	4603      	mov	r3, r0
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	3301      	adds	r3, #1
 80024f0:	4618      	mov	r0, r3
 80024f2:	f009 fa17 	bl	800b924 <malloc>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b28      	ldr	r3, [pc, #160]	; (800259c <convertToMorse+0x1c4>)
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	4b27      	ldr	r3, [pc, #156]	; (800259c <convertToMorse+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a22      	ldr	r2, [pc, #136]	; (800258c <convertToMorse+0x1b4>)
 8002504:	6013      	str	r3, [r2, #0]
        }
        //varno++;
         k = 0;
 8002506:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <convertToMorse+0x1c8>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
        while (*morse) {
 800250c:	e015      	b.n	800253a <convertToMorse+0x162>
            output[k++] = (*morse++ == '.') ? 0 : 1;
 800250e:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <convertToMorse+0x1a8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	491a      	ldr	r1, [pc, #104]	; (8002580 <convertToMorse+0x1a8>)
 8002516:	600a      	str	r2, [r1, #0]
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b2e      	cmp	r3, #46	; 0x2e
 800251c:	bf14      	ite	ne
 800251e:	2301      	movne	r3, #1
 8002520:	2300      	moveq	r3, #0
 8002522:	b2dc      	uxtb	r4, r3
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <convertToMorse+0x1b4>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <convertToMorse+0x1c8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	1c59      	adds	r1, r3, #1
 800252e:	481c      	ldr	r0, [pc, #112]	; (80025a0 <convertToMorse+0x1c8>)
 8002530:	6001      	str	r1, [r0, #0]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	4622      	mov	r2, r4
 8002538:	601a      	str	r2, [r3, #0]
        while (*morse) {
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <convertToMorse+0x1a8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1e4      	bne.n	800250e <convertToMorse+0x136>
        }
        output[k] = '\0';
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <convertToMorse+0x1b4>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <convertToMorse+0x1c8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3301      	adds	r3, #1
 8002558:	607b      	str	r3, [r7, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b02      	cmp	r3, #2
 800255e:	f77f af41 	ble.w	80023e4 <convertToMorse+0xc>

    }



}
 8002562:	bf00      	nop
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	bd90      	pop	{r4, r7, pc}
 800256c:	200006ad 	.word	0x200006ad
 8002570:	20000008 	.word	0x20000008
 8002574:	2000062c 	.word	0x2000062c
 8002578:	20000004 	.word	0x20000004
 800257c:	2000000c 	.word	0x2000000c
 8002580:	20000630 	.word	0x20000630
 8002584:	200005f0 	.word	0x200005f0
 8002588:	20000620 	.word	0x20000620
 800258c:	20000634 	.word	0x20000634
 8002590:	200005f4 	.word	0x200005f4
 8002594:	20000624 	.word	0x20000624
 8002598:	200005f8 	.word	0x200005f8
 800259c:	20000628 	.word	0x20000628
 80025a0:	20000644 	.word	0x20000644
 80025a4:	00000000 	.word	0x00000000

080025a8 <sendoutmorse>:

void sendoutmorse(){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0


	if ((HAL_GetTick()-morsesent)>=reqwait){
 80025ac:	f001 fefc 	bl	80043a8 <HAL_GetTick>
 80025b0:	4603      	mov	r3, r0
 80025b2:	4a89      	ldr	r2, [pc, #548]	; (80027d8 <sendoutmorse+0x230>)
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	1a9b      	subs	r3, r3, r2
 80025b8:	4a88      	ldr	r2, [pc, #544]	; (80027dc <sendoutmorse+0x234>)
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	4293      	cmp	r3, r2
 80025be:	f0c0 8196 	bcc.w	80028ee <sendoutmorse+0x346>

		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80025c2:	2300      	movs	r3, #0
 80025c4:	2200      	movs	r2, #0
 80025c6:	2100      	movs	r1, #0
 80025c8:	4885      	ldr	r0, [pc, #532]	; (80027e0 <sendoutmorse+0x238>)
 80025ca:	f003 fe0c 	bl	80061e6 <HAL_DAC_SetValue>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80025ce:	4b85      	ldr	r3, [pc, #532]	; (80027e4 <sendoutmorse+0x23c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2200      	movs	r2, #0
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40

		if ((HAL_GetTick()-morsesent)>=(reqwait+timuni + reqwait2)){
 80025d6:	f001 fee7 	bl	80043a8 <HAL_GetTick>
 80025da:	4603      	mov	r3, r0
 80025dc:	4a7e      	ldr	r2, [pc, #504]	; (80027d8 <sendoutmorse+0x230>)
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	4a7e      	ldr	r2, [pc, #504]	; (80027dc <sendoutmorse+0x234>)
 80025e4:	6811      	ldr	r1, [r2, #0]
 80025e6:	4a80      	ldr	r2, [pc, #512]	; (80027e8 <sendoutmorse+0x240>)
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	4411      	add	r1, r2
 80025ec:	4a7f      	ldr	r2, [pc, #508]	; (80027ec <sendoutmorse+0x244>)
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	440a      	add	r2, r1
 80025f2:	4293      	cmp	r3, r2
 80025f4:	f0c0 817b 	bcc.w	80028ee <sendoutmorse+0x346>

			voltlev = out_new;
 80025f8:	4b7d      	ldr	r3, [pc, #500]	; (80027f0 <sendoutmorse+0x248>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a7d      	ldr	r2, [pc, #500]	; (80027f4 <sendoutmorse+0x24c>)
 80025fe:	6013      	str	r3, [r2, #0]

			//fix here
			pwmvoltlev = ((double)voltlev)*1000/4095;
 8002600:	4b7c      	ldr	r3, [pc, #496]	; (80027f4 <sendoutmorse+0x24c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7fd ff95 	bl	8000534 <__aeabi_i2d>
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	4b7a      	ldr	r3, [pc, #488]	; (80027f8 <sendoutmorse+0x250>)
 8002610:	f7fd fffa 	bl	8000608 <__aeabi_dmul>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	a36c      	add	r3, pc, #432	; (adr r3, 80027d0 <sendoutmorse+0x228>)
 800261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002622:	f7fe f91b 	bl	800085c <__aeabi_ddiv>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4610      	mov	r0, r2
 800262c:	4619      	mov	r1, r3
 800262e:	f7fe fac3 	bl	8000bb8 <__aeabi_d2uiz>
 8002632:	4603      	mov	r3, r0
 8002634:	4a71      	ldr	r2, [pc, #452]	; (80027fc <sendoutmorse+0x254>)
 8002636:	6013      	str	r3, [r2, #0]
			reqwait2 =0;
 8002638:	4b6c      	ldr	r3, [pc, #432]	; (80027ec <sendoutmorse+0x244>)
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]


	if (ii ==0){
 800263e:	4b70      	ldr	r3, [pc, #448]	; (8002800 <sendoutmorse+0x258>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d15a      	bne.n	80026fc <sendoutmorse+0x154>
		//output1[i]!='\0'
		if (output1[jj]==1){
 8002646:	4b6f      	ldr	r3, [pc, #444]	; (8002804 <sendoutmorse+0x25c>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4b6f      	ldr	r3, [pc, #444]	; (8002808 <sendoutmorse+0x260>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d11d      	bne.n	8002694 <sendoutmorse+0xec>


			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, voltlev*ps);
 8002658:	4b6c      	ldr	r3, [pc, #432]	; (800280c <sendoutmorse+0x264>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	4b65      	ldr	r3, [pc, #404]	; (80027f4 <sendoutmorse+0x24c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	485d      	ldr	r0, [pc, #372]	; (80027e0 <sendoutmorse+0x238>)
 800266c:	f003 fdbb 	bl	80061e6 <HAL_DAC_SetValue>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwmvoltlev*ps);
 8002670:	4b66      	ldr	r3, [pc, #408]	; (800280c <sendoutmorse+0x264>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	4b61      	ldr	r3, [pc, #388]	; (80027fc <sendoutmorse+0x254>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4b5a      	ldr	r3, [pc, #360]	; (80027e4 <sendoutmorse+0x23c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	fb01 f202 	mul.w	r2, r1, r2
 8002682:	641a      	str	r2, [r3, #64]	; 0x40
			 //databuf[i] = '1';
			reqwait = 3*timuni;
 8002684:	4b58      	ldr	r3, [pc, #352]	; (80027e8 <sendoutmorse+0x240>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	4a53      	ldr	r2, [pc, #332]	; (80027dc <sendoutmorse+0x234>)
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e019      	b.n	80026c8 <sendoutmorse+0x120>

		else{

			//databuf[i] = '0';

			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, voltlev*ps);
 8002694:	4b5d      	ldr	r3, [pc, #372]	; (800280c <sendoutmorse+0x264>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	4b56      	ldr	r3, [pc, #344]	; (80027f4 <sendoutmorse+0x24c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	fb02 f303 	mul.w	r3, r2, r3
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	484e      	ldr	r0, [pc, #312]	; (80027e0 <sendoutmorse+0x238>)
 80026a8:	f003 fd9d 	bl	80061e6 <HAL_DAC_SetValue>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwmvoltlev*ps);
 80026ac:	4b57      	ldr	r3, [pc, #348]	; (800280c <sendoutmorse+0x264>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	4619      	mov	r1, r3
 80026b2:	4b52      	ldr	r3, [pc, #328]	; (80027fc <sendoutmorse+0x254>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	4b4b      	ldr	r3, [pc, #300]	; (80027e4 <sendoutmorse+0x23c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	fb01 f202 	mul.w	r2, r1, r2
 80026be:	641a      	str	r2, [r3, #64]	; 0x40
			reqwait = timuni;
 80026c0:	4b49      	ldr	r3, [pc, #292]	; (80027e8 <sendoutmorse+0x240>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a45      	ldr	r2, [pc, #276]	; (80027dc <sendoutmorse+0x234>)
 80026c6:	6013      	str	r3, [r2, #0]
		}
		jj++;
 80026c8:	4b4f      	ldr	r3, [pc, #316]	; (8002808 <sendoutmorse+0x260>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3301      	adds	r3, #1
 80026ce:	4a4e      	ldr	r2, [pc, #312]	; (8002808 <sendoutmorse+0x260>)
 80026d0:	6013      	str	r3, [r2, #0]
		if (jj==len1){
 80026d2:	4b4d      	ldr	r3, [pc, #308]	; (8002808 <sendoutmorse+0x260>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b4e      	ldr	r3, [pc, #312]	; (8002810 <sendoutmorse+0x268>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	f040 8101 	bne.w	80028e2 <sendoutmorse+0x33a>
			reqwait2  = 2*timuni;
 80026e0:	4b41      	ldr	r3, [pc, #260]	; (80027e8 <sendoutmorse+0x240>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4a41      	ldr	r2, [pc, #260]	; (80027ec <sendoutmorse+0x244>)
 80026e8:	6013      	str	r3, [r2, #0]

			ii++;
 80026ea:	4b45      	ldr	r3, [pc, #276]	; (8002800 <sendoutmorse+0x258>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3301      	adds	r3, #1
 80026f0:	4a43      	ldr	r2, [pc, #268]	; (8002800 <sendoutmorse+0x258>)
 80026f2:	6013      	str	r3, [r2, #0]
			jj=0;
 80026f4:	4b44      	ldr	r3, [pc, #272]	; (8002808 <sendoutmorse+0x260>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e0f2      	b.n	80028e2 <sendoutmorse+0x33a>
		}

	}

	else if (ii ==1){
 80026fc:	4b40      	ldr	r3, [pc, #256]	; (8002800 <sendoutmorse+0x258>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b01      	cmp	r3, #1
 8002702:	f040 808f 	bne.w	8002824 <sendoutmorse+0x27c>
		//output1[i]!='\0'
		if (output2[jj]==1 ){
 8002706:	4b43      	ldr	r3, [pc, #268]	; (8002814 <sendoutmorse+0x26c>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4b3f      	ldr	r3, [pc, #252]	; (8002808 <sendoutmorse+0x260>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d11d      	bne.n	8002754 <sendoutmorse+0x1ac>


			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, voltlev*ps);
 8002718:	4b3c      	ldr	r3, [pc, #240]	; (800280c <sendoutmorse+0x264>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	4b35      	ldr	r3, [pc, #212]	; (80027f4 <sendoutmorse+0x24c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	fb02 f303 	mul.w	r3, r2, r3
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	482d      	ldr	r0, [pc, #180]	; (80027e0 <sendoutmorse+0x238>)
 800272c:	f003 fd5b 	bl	80061e6 <HAL_DAC_SetValue>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwmvoltlev*ps);
 8002730:	4b36      	ldr	r3, [pc, #216]	; (800280c <sendoutmorse+0x264>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	4b31      	ldr	r3, [pc, #196]	; (80027fc <sendoutmorse+0x254>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4b2a      	ldr	r3, [pc, #168]	; (80027e4 <sendoutmorse+0x23c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	fb01 f202 	mul.w	r2, r1, r2
 8002742:	641a      	str	r2, [r3, #64]	; 0x40

			reqwait = 3*timuni;
 8002744:	4b28      	ldr	r3, [pc, #160]	; (80027e8 <sendoutmorse+0x240>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	4a23      	ldr	r2, [pc, #140]	; (80027dc <sendoutmorse+0x234>)
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e019      	b.n	8002788 <sendoutmorse+0x1e0>
		}


		else{

			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, voltlev*ps);
 8002754:	4b2d      	ldr	r3, [pc, #180]	; (800280c <sendoutmorse+0x264>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <sendoutmorse+0x24c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	2200      	movs	r2, #0
 8002764:	2100      	movs	r1, #0
 8002766:	481e      	ldr	r0, [pc, #120]	; (80027e0 <sendoutmorse+0x238>)
 8002768:	f003 fd3d 	bl	80061e6 <HAL_DAC_SetValue>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwmvoltlev*ps);
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <sendoutmorse+0x264>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	4619      	mov	r1, r3
 8002772:	4b22      	ldr	r3, [pc, #136]	; (80027fc <sendoutmorse+0x254>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <sendoutmorse+0x23c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	fb01 f202 	mul.w	r2, r1, r2
 800277e:	641a      	str	r2, [r3, #64]	; 0x40
			reqwait = timuni;
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <sendoutmorse+0x240>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a15      	ldr	r2, [pc, #84]	; (80027dc <sendoutmorse+0x234>)
 8002786:	6013      	str	r3, [r2, #0]
		}
		test1=jj;
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <sendoutmorse+0x260>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a22      	ldr	r2, [pc, #136]	; (8002818 <sendoutmorse+0x270>)
 800278e:	6013      	str	r3, [r2, #0]
		jj++;
 8002790:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <sendoutmorse+0x260>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3301      	adds	r3, #1
 8002796:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <sendoutmorse+0x260>)
 8002798:	6013      	str	r3, [r2, #0]
		if (jj==len2){
 800279a:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <sendoutmorse+0x260>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b1f      	ldr	r3, [pc, #124]	; (800281c <sendoutmorse+0x274>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	f040 809d 	bne.w	80028e2 <sendoutmorse+0x33a>
			test2=jj;
 80027a8:	4b17      	ldr	r3, [pc, #92]	; (8002808 <sendoutmorse+0x260>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1c      	ldr	r2, [pc, #112]	; (8002820 <sendoutmorse+0x278>)
 80027ae:	6013      	str	r3, [r2, #0]
			ii++;
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <sendoutmorse+0x258>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	3301      	adds	r3, #1
 80027b6:	4a12      	ldr	r2, [pc, #72]	; (8002800 <sendoutmorse+0x258>)
 80027b8:	6013      	str	r3, [r2, #0]
			jj=0;
 80027ba:	4b13      	ldr	r3, [pc, #76]	; (8002808 <sendoutmorse+0x260>)
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
			reqwait2  = 2*timuni;
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <sendoutmorse+0x240>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4a09      	ldr	r2, [pc, #36]	; (80027ec <sendoutmorse+0x244>)
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e08a      	b.n	80028e2 <sendoutmorse+0x33a>
 80027cc:	f3af 8000 	nop.w
 80027d0:	00000000 	.word	0x00000000
 80027d4:	40affe00 	.word	0x40affe00
 80027d8:	20000608 	.word	0x20000608
 80027dc:	200005e4 	.word	0x200005e4
 80027e0:	20000374 	.word	0x20000374
 80027e4:	20000418 	.word	0x20000418
 80027e8:	20000000 	.word	0x20000000
 80027ec:	200005e8 	.word	0x200005e8
 80027f0:	20000604 	.word	0x20000604
 80027f4:	200005ec 	.word	0x200005ec
 80027f8:	408f4000 	.word	0x408f4000
 80027fc:	20000600 	.word	0x20000600
 8002800:	2000060c 	.word	0x2000060c
 8002804:	20000620 	.word	0x20000620
 8002808:	20000610 	.word	0x20000610
 800280c:	200005da 	.word	0x200005da
 8002810:	200005f0 	.word	0x200005f0
 8002814:	20000624 	.word	0x20000624
 8002818:	20000618 	.word	0x20000618
 800281c:	200005f4 	.word	0x200005f4
 8002820:	2000061c 	.word	0x2000061c
		}

	}

	else if (ii ==2){
 8002824:	4b33      	ldr	r3, [pc, #204]	; (80028f4 <sendoutmorse+0x34c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d15a      	bne.n	80028e2 <sendoutmorse+0x33a>
		//output1[i]!='\0'
		if (output3[jj]==1){
 800282c:	4b32      	ldr	r3, [pc, #200]	; (80028f8 <sendoutmorse+0x350>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b32      	ldr	r3, [pc, #200]	; (80028fc <sendoutmorse+0x354>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d11d      	bne.n	800287a <sendoutmorse+0x2d2>
			reqwait = 3*timuni;
 800283e:	4b30      	ldr	r3, [pc, #192]	; (8002900 <sendoutmorse+0x358>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	4a2e      	ldr	r2, [pc, #184]	; (8002904 <sendoutmorse+0x35c>)
 800284a:	6013      	str	r3, [r2, #0]

			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, voltlev*ps);
 800284c:	4b2e      	ldr	r3, [pc, #184]	; (8002908 <sendoutmorse+0x360>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	4b2e      	ldr	r3, [pc, #184]	; (800290c <sendoutmorse+0x364>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fb02 f303 	mul.w	r3, r2, r3
 800285a:	2200      	movs	r2, #0
 800285c:	2100      	movs	r1, #0
 800285e:	482c      	ldr	r0, [pc, #176]	; (8002910 <sendoutmorse+0x368>)
 8002860:	f003 fcc1 	bl	80061e6 <HAL_DAC_SetValue>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwmvoltlev*ps);
 8002864:	4b28      	ldr	r3, [pc, #160]	; (8002908 <sendoutmorse+0x360>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	4619      	mov	r1, r3
 800286a:	4b2a      	ldr	r3, [pc, #168]	; (8002914 <sendoutmorse+0x36c>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4b2a      	ldr	r3, [pc, #168]	; (8002918 <sendoutmorse+0x370>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	fb01 f202 	mul.w	r2, r1, r2
 8002876:	641a      	str	r2, [r3, #64]	; 0x40
 8002878:	e019      	b.n	80028ae <sendoutmorse+0x306>


		else{
			//databuf[i] = '0';

			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, voltlev*ps);
 800287a:	4b23      	ldr	r3, [pc, #140]	; (8002908 <sendoutmorse+0x360>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	4b22      	ldr	r3, [pc, #136]	; (800290c <sendoutmorse+0x364>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	fb02 f303 	mul.w	r3, r2, r3
 8002888:	2200      	movs	r2, #0
 800288a:	2100      	movs	r1, #0
 800288c:	4820      	ldr	r0, [pc, #128]	; (8002910 <sendoutmorse+0x368>)
 800288e:	f003 fcaa 	bl	80061e6 <HAL_DAC_SetValue>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwmvoltlev*ps);
 8002892:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <sendoutmorse+0x360>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	4619      	mov	r1, r3
 8002898:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <sendoutmorse+0x36c>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <sendoutmorse+0x370>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	fb01 f202 	mul.w	r2, r1, r2
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
			reqwait = timuni;
 80028a6:	4b16      	ldr	r3, [pc, #88]	; (8002900 <sendoutmorse+0x358>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a16      	ldr	r2, [pc, #88]	; (8002904 <sendoutmorse+0x35c>)
 80028ac:	6013      	str	r3, [r2, #0]
		}
		jj++;
 80028ae:	4b13      	ldr	r3, [pc, #76]	; (80028fc <sendoutmorse+0x354>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	4a11      	ldr	r2, [pc, #68]	; (80028fc <sendoutmorse+0x354>)
 80028b6:	6013      	str	r3, [r2, #0]
		if (jj==len3){
 80028b8:	4b10      	ldr	r3, [pc, #64]	; (80028fc <sendoutmorse+0x354>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4b17      	ldr	r3, [pc, #92]	; (800291c <sendoutmorse+0x374>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d10e      	bne.n	80028e2 <sendoutmorse+0x33a>
			ii=0;
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <sendoutmorse+0x34c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
			jj=0;
 80028ca:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <sendoutmorse+0x354>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
			reqwait2  = 6*timuni;
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <sendoutmorse+0x358>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	461a      	mov	r2, r3
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <sendoutmorse+0x378>)
 80028e0:	601a      	str	r2, [r3, #0]


			//HAL_UART_Transmit(&huart2, databuf, len1+1, 5);

	}
		morsesent = HAL_GetTick();
 80028e2:	f001 fd61 	bl	80043a8 <HAL_GetTick>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <sendoutmorse+0x37c>)
 80028ec:	601a      	str	r2, [r3, #0]

}}}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	2000060c 	.word	0x2000060c
 80028f8:	20000628 	.word	0x20000628
 80028fc:	20000610 	.word	0x20000610
 8002900:	20000000 	.word	0x20000000
 8002904:	200005e4 	.word	0x200005e4
 8002908:	200005da 	.word	0x200005da
 800290c:	200005ec 	.word	0x200005ec
 8002910:	20000374 	.word	0x20000374
 8002914:	20000600 	.word	0x20000600
 8002918:	20000418 	.word	0x20000418
 800291c:	200005f8 	.word	0x200005f8
 8002920:	200005e8 	.word	0x200005e8
 8002924:	20000608 	.word	0x20000608

08002928 <buttonselect>:

void buttonselect(){
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0

	midbut = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 800292c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002934:	f004 f92c 	bl	8006b90 <HAL_GPIO_ReadPin>
 8002938:	4603      	mov	r3, r0
 800293a:	461a      	mov	r2, r3
 800293c:	4b2f      	ldr	r3, [pc, #188]	; (80029fc <buttonselect+0xd4>)
 800293e:	701a      	strb	r2, [r3, #0]
        		botbut = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8002940:	2102      	movs	r1, #2
 8002942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002946:	f004 f923 	bl	8006b90 <HAL_GPIO_ReadPin>
 800294a:	4603      	mov	r3, r0
 800294c:	461a      	mov	r2, r3
 800294e:	4b2c      	ldr	r3, [pc, #176]	; (8002a00 <buttonselect+0xd8>)
 8002950:	701a      	strb	r2, [r3, #0]
        		letbut = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 8002952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002956:	482b      	ldr	r0, [pc, #172]	; (8002a04 <buttonselect+0xdc>)
 8002958:	f004 f91a 	bl	8006b90 <HAL_GPIO_ReadPin>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	4b29      	ldr	r3, [pc, #164]	; (8002a08 <buttonselect+0xe0>)
 8002962:	701a      	strb	r2, [r3, #0]
        		ritbut = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8002964:	2180      	movs	r1, #128	; 0x80
 8002966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800296a:	f004 f911 	bl	8006b90 <HAL_GPIO_ReadPin>
 800296e:	4603      	mov	r3, r0
 8002970:	461a      	mov	r2, r3
 8002972:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <buttonselect+0xe4>)
 8002974:	701a      	strb	r2, [r3, #0]
        		topbut =  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8002976:	2140      	movs	r1, #64	; 0x40
 8002978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800297c:	f004 f908 	bl	8006b90 <HAL_GPIO_ReadPin>
 8002980:	4603      	mov	r3, r0
 8002982:	461a      	mov	r2, r3
 8002984:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <buttonselect+0xe8>)
 8002986:	701a      	strb	r2, [r3, #0]

  if ( letbut ==0 || botbut==0 ||  ritbut==0 || topbut==0 || midbut==0){
 8002988:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <buttonselect+0xe0>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00f      	beq.n	80029b0 <buttonselect+0x88>
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <buttonselect+0xd8>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00b      	beq.n	80029b0 <buttonselect+0x88>
 8002998:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <buttonselect+0xe4>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d007      	beq.n	80029b0 <buttonselect+0x88>
 80029a0:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <buttonselect+0xe8>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <buttonselect+0x88>
 80029a8:	4b14      	ldr	r3, [pc, #80]	; (80029fc <buttonselect+0xd4>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d106      	bne.n	80029be <buttonselect+0x96>
	  stateincr++;
 80029b0:	4b18      	ldr	r3, [pc, #96]	; (8002a14 <buttonselect+0xec>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	3301      	adds	r3, #1
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <buttonselect+0xec>)
 80029ba:	701a      	strb	r2, [r3, #0]
 80029bc:	e005      	b.n	80029ca <buttonselect+0xa2>

  }
  else {
	  stateincr=0;
 80029be:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <buttonselect+0xec>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
	  state=0;
 80029c4:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <buttonselect+0xf0>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]
  }


  	  if (stateincr>=170){
 80029ca:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <buttonselect+0xec>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2ba9      	cmp	r3, #169	; 0xa9
 80029d0:	d912      	bls.n	80029f8 <buttonselect+0xd0>
  		  stinlast= stateincr;
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <buttonselect+0xec>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <buttonselect+0xf4>)
 80029da:	601a      	str	r2, [r3, #0]
		  buttonpressed();
 80029dc:	f7fe fee0 	bl	80017a0 <buttonpressed>
  	  stateincr=0;
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <buttonselect+0xec>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
  	state=0;
 80029e6:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <buttonselect+0xf0>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
  	 tickspr = HAL_GetTick();
 80029ec:	f001 fcdc 	bl	80043a8 <HAL_GetTick>
 80029f0:	4603      	mov	r3, r0
 80029f2:	461a      	mov	r2, r3
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <buttonselect+0xf8>)
 80029f6:	601a      	str	r2, [r3, #0]
  	  }

}
 80029f8:	bf00      	nop
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	2000068c 	.word	0x2000068c
 8002a00:	2000068a 	.word	0x2000068a
 8002a04:	48000400 	.word	0x48000400
 8002a08:	20000688 	.word	0x20000688
 8002a0c:	20000689 	.word	0x20000689
 8002a10:	2000068b 	.word	0x2000068b
 8002a14:	20000684 	.word	0x20000684
 8002a18:	20000730 	.word	0x20000730
 8002a1c:	20000680 	.word	0x20000680
 8002a20:	2000067c 	.word	0x2000067c

08002a24 <poweroff>:
//end func

void poweroff(){
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8002a28:	2300      	movs	r3, #0
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4804      	ldr	r0, [pc, #16]	; (8002a40 <poweroff+0x1c>)
 8002a30:	f003 fbd9 	bl	80061e6 <HAL_DAC_SetValue>
				  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <poweroff+0x20>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40

	  }
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20000374 	.word	0x20000374
 8002a44:	20000418 	.word	0x20000418

08002a48 <MODESWITCH>:

//endpower

void MODESWITCH(){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0

		  if (MODE ==0){
 8002a4c:	4b33      	ldr	r3, [pc, #204]	; (8002b1c <MODESWITCH+0xd4>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d103      	bne.n	8002a5c <MODESWITCH+0x14>
				  dacset();
 8002a54:	f7fe ff50 	bl	80018f8 <dacset>
				  pwmset();  // SET PWM AND DAC BASED ON SLIDER VOLTAGE
 8002a58:	f7ff f906 	bl	8001c68 <pwmset>

					  }
			if (MODE ==1 ){
 8002a5c:	4b2f      	ldr	r3, [pc, #188]	; (8002b1c <MODESWITCH+0xd4>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d14b      	bne.n	8002afc <MODESWITCH+0xb4>

							if (emmode==0){
 8002a64:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <MODESWITCH+0xd8>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d128      	bne.n	8002abe <MODESWITCH+0x76>
								//strobe flagstat==1 ||
								if(p1timeval !=0){
 8002a6c:	4b2d      	ldr	r3, [pc, #180]	; (8002b24 <MODESWITCH+0xdc>)
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00c      	beq.n	8002a8e <MODESWITCH+0x46>
								if (HAL_GetTick()-strobetime>=p1timeval){
 8002a74:	f001 fc98 	bl	80043a8 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <MODESWITCH+0xe0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	4a28      	ldr	r2, [pc, #160]	; (8002b24 <MODESWITCH+0xdc>)
 8002a82:	8812      	ldrh	r2, [r2, #0]
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d339      	bcc.n	8002afc <MODESWITCH+0xb4>
									  strobeset();
 8002a88:	f7ff fc7e 	bl	8002388 <strobeset>
 8002a8c:	e036      	b.n	8002afc <MODESWITCH+0xb4>
											  }}
								else if (flagstat==0 || p1timeval==0){
 8002a8e:	4b27      	ldr	r3, [pc, #156]	; (8002b2c <MODESWITCH+0xe4>)
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <MODESWITCH+0x56>
 8002a96:	4b23      	ldr	r3, [pc, #140]	; (8002b24 <MODESWITCH+0xdc>)
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d12e      	bne.n	8002afc <MODESWITCH+0xb4>
									p1timeval=512;
 8002a9e:	4b21      	ldr	r3, [pc, #132]	; (8002b24 <MODESWITCH+0xdc>)
 8002aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa4:	801a      	strh	r2, [r3, #0]

									if (HAL_GetTick()-strobetime>=512){
 8002aa6:	f001 fc7f 	bl	80043a8 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	4b1e      	ldr	r3, [pc, #120]	; (8002b28 <MODESWITCH+0xe0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ab6:	d321      	bcc.n	8002afc <MODESWITCH+0xb4>
									strobeset();
 8002ab8:	f7ff fc66 	bl	8002388 <strobeset>
 8002abc:	e01e      	b.n	8002afc <MODESWITCH+0xb4>
																						  }

								}
							}

							else if (emmode ==1 || emmode ==2){
 8002abe:	4b18      	ldr	r3, [pc, #96]	; (8002b20 <MODESWITCH+0xd8>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d003      	beq.n	8002ace <MODESWITCH+0x86>
 8002ac6:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <MODESWITCH+0xd8>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d116      	bne.n	8002afc <MODESWITCH+0xb4>

								//morse

								dacset();
 8002ace:	f7fe ff13 	bl	80018f8 <dacset>
								  pwmset();
 8002ad2:	f7ff f8c9 	bl	8001c68 <pwmset>
						  convertToMorse();
 8002ad6:	f7ff fc7f 	bl	80023d8 <convertToMorse>
								sendoutmorse();
 8002ada:	f7ff fd65 	bl	80025a8 <sendoutmorse>




							free(output1);
 8002ade:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <MODESWITCH+0xe8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f008 ff26 	bl	800b934 <free>
							free(output2);
 8002ae8:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <MODESWITCH+0xec>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f008 ff21 	bl	800b934 <free>
							free(output3);
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <MODESWITCH+0xf0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f008 ff1c 	bl	800b934 <free>
			}}

			if (MODE==2){
 8002afc:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <MODESWITCH+0xd4>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d109      	bne.n	8002b18 <MODESWITCH+0xd0>
//					gchan =128;
//					bchan =128;
//					modechangedflag=0;
//				}

				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8002b04:	2300      	movs	r3, #0
 8002b06:	2200      	movs	r2, #0
 8002b08:	2100      	movs	r1, #0
 8002b0a:	480c      	ldr	r0, [pc, #48]	; (8002b3c <MODESWITCH+0xf4>)
 8002b0c:	f003 fb6b 	bl	80061e6 <HAL_DAC_SetValue>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <MODESWITCH+0xf8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2200      	movs	r2, #0
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40


			}

}
 8002b18:	bf00      	nop
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	200006ac 	.word	0x200006ac
 8002b20:	200006ad 	.word	0x200006ad
 8002b24:	200006ee 	.word	0x200006ee
 8002b28:	2000063c 	.word	0x2000063c
 8002b2c:	200006f0 	.word	0x200006f0
 8002b30:	20000620 	.word	0x20000620
 8002b34:	20000624 	.word	0x20000624
 8002b38:	20000628 	.word	0x20000628
 8002b3c:	20000374 	.word	0x20000374
 8002b40:	20000418 	.word	0x20000418

08002b44 <uartselect>:
//end modeswitch

void uartselect(){
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
probincr += uartmode;
 8002b48:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <uartselect+0x3c>)
 8002b4a:	781a      	ldrb	r2, [r3, #0]
 8002b4c:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <uartselect+0x40>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	4413      	add	r3, r2
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <uartselect+0x3c>)
 8002b56:	701a      	strb	r2, [r3, #0]
		if (uartmode==1){
 8002b58:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <uartselect+0x40>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d104      	bne.n	8002b6a <uartselect+0x26>
			  	  	  //mode 1 is a set command

			  uartdecode();
 8002b60:	f7ff f952 	bl	8001e08 <uartdecode>

				//uartencode();


			 uartmode=0;
 8002b64:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <uartselect+0x40>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
		  }

		  if (uartmode==2){
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <uartselect+0x40>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d104      	bne.n	8002b7c <uartselect+0x38>

			  //mode 2 is a request command


			  uartencode();
 8002b72:	f7ff fb01 	bl	8002178 <uartencode>
			  uartmode=0;  //mode 0 is no decode or encode
 8002b76:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <uartselect+0x40>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
	  }

}
 8002b7c:	bf00      	nop
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	200005fc 	.word	0x200005fc
 8002b84:	200006f2 	.word	0x200006f2

08002b88 <hitthelights>:

void hitthelights(){
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08e      	sub	sp, #56	; 0x38
 8002b8c:	af00      	add	r7, sp, #0

	// x 0-  1792  y 0- 768
	int streng = (int)((float)yCoord/740.0*572);
 8002b8e:	4b41      	ldr	r3, [pc, #260]	; (8002c94 <hitthelights+0x10c>)
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	ee07 3a90 	vmov	s15, r3
 8002b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b9a:	ee17 0a90 	vmov	r0, s15
 8002b9e:	f7fd fcdb 	bl	8000558 <__aeabi_f2d>
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	4b3c      	ldr	r3, [pc, #240]	; (8002c98 <hitthelights+0x110>)
 8002ba8:	f7fd fe58 	bl	800085c <__aeabi_ddiv>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	4b38      	ldr	r3, [pc, #224]	; (8002c9c <hitthelights+0x114>)
 8002bba:	f7fd fd25 	bl	8000608 <__aeabi_dmul>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f7fd ffcf 	bl	8000b68 <__aeabi_d2iz>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	637b      	str	r3, [r7, #52]	; 0x34
	if (streng >512){
 8002bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd4:	dd02      	ble.n	8002bdc <hitthelights+0x54>
		streng =512;
 8002bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bda:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if(xCoord <(1783.0/3) && xCoord >0){
 8002bdc:	4b30      	ldr	r3, [pc, #192]	; (8002ca0 <hitthelights+0x118>)
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	f240 2252 	movw	r2, #594	; 0x252
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d815      	bhi.n	8002c14 <hitthelights+0x8c>
 8002be8:	4b2d      	ldr	r3, [pc, #180]	; (8002ca0 <hitthelights+0x118>)
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d011      	beq.n	8002c14 <hitthelights+0x8c>
		rchan = streng;  // r mapped pc8 3,3
 8002bf0:	4a2c      	ldr	r2, [pc, #176]	; (8002ca4 <hitthelights+0x11c>)
 8002bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf4:	6013      	str	r3, [r2, #0]
		char* msg = "red channel: ";
 8002bf6:	4b2c      	ldr	r3, [pc, #176]	; (8002ca8 <hitthelights+0x120>)
 8002bf8:	633b      	str	r3, [r7, #48]	; 0x30
		int len = strlen(msg);
 8002bfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bfc:	f7fd faf0 	bl	80001e0 <strlen>
 8002c00:	4603      	mov	r3, r0
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
		//HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, 100);
		char statey[5];
								sprintf(&statey, "%03d\n", rchan);
 8002c04:	4b27      	ldr	r3, [pc, #156]	; (8002ca4 <hitthelights+0x11c>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	f107 0314 	add.w	r3, r7, #20
 8002c0c:	4927      	ldr	r1, [pc, #156]	; (8002cac <hitthelights+0x124>)
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f009 fc08 	bl	800c424 <siprintf>
								//HAL_UART_Transmit(&huart2, (uint8_t*)statey, 3, 100);
		//HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, 100);

	}
	if(xCoord >(1783.0/3) && xCoord <(1783.0*2/3)){
 8002c14:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <hitthelights+0x118>)
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	f240 2252 	movw	r2, #594	; 0x252
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d917      	bls.n	8002c50 <hitthelights+0xc8>
 8002c20:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <hitthelights+0x118>)
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	f240 42a4 	movw	r2, #1188	; 0x4a4
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d811      	bhi.n	8002c50 <hitthelights+0xc8>
			gchan = streng; // g mapped pa12 4,2
 8002c2c:	4a20      	ldr	r2, [pc, #128]	; (8002cb0 <hitthelights+0x128>)
 8002c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c30:	6013      	str	r3, [r2, #0]
			char* msg = "green channel: ";
 8002c32:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <hitthelights+0x12c>)
 8002c34:	62bb      	str	r3, [r7, #40]	; 0x28
			int len = strlen(msg);
 8002c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c38:	f7fd fad2 	bl	80001e0 <strlen>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
			//HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, 100);

			char statey[5];
			sprintf(&statey, "%03d\n", gchan);
 8002c40:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <hitthelights+0x128>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	f107 030c 	add.w	r3, r7, #12
 8002c48:	4918      	ldr	r1, [pc, #96]	; (8002cac <hitthelights+0x124>)
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f009 fbea 	bl	800c424 <siprintf>
			//HAL_UART_Transmit(&huart2, (uint8_t*)statey, 3, 100);

			//HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, 100);

		}
	if(xCoord >(1783.0*2/3) && xCoord <(1783.0)){
 8002c50:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <hitthelights+0x118>)
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	f240 42a4 	movw	r2, #1188	; 0x4a4
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d916      	bls.n	8002c8a <hitthelights+0x102>
 8002c5c:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <hitthelights+0x118>)
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	f240 62f6 	movw	r2, #1782	; 0x6f6
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d810      	bhi.n	8002c8a <hitthelights+0x102>
			bchan =(int) streng;   // blue mapped pc6 tim3 chan 1
 8002c68:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <hitthelights+0x130>)
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6c:	6013      	str	r3, [r2, #0]

			char* msg = "blue channel: ";
 8002c6e:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <hitthelights+0x134>)
 8002c70:	623b      	str	r3, [r7, #32]
			int len = strlen(msg);
 8002c72:	6a38      	ldr	r0, [r7, #32]
 8002c74:	f7fd fab4 	bl	80001e0 <strlen>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	61fb      	str	r3, [r7, #28]
			//HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, 100);
			//transmit message
			char statey[5];
						sprintf(&statey, "%03d\n", bchan);
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <hitthelights+0x130>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	1d3b      	adds	r3, r7, #4
 8002c82:	490a      	ldr	r1, [pc, #40]	; (8002cac <hitthelights+0x124>)
 8002c84:	4618      	mov	r0, r3
 8002c86:	f009 fbcd 	bl	800c424 <siprintf>

		}



}
 8002c8a:	bf00      	nop
 8002c8c:	3738      	adds	r7, #56	; 0x38
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200002ae 	.word	0x200002ae
 8002c98:	40872000 	.word	0x40872000
 8002c9c:	4081e000 	.word	0x4081e000
 8002ca0:	200002ac 	.word	0x200002ac
 8002ca4:	200005c8 	.word	0x200005c8
 8002ca8:	0800f7e4 	.word	0x0800f7e4
 8002cac:	0800f7f4 	.word	0x0800f7f4
 8002cb0:	200005cc 	.word	0x200005cc
 8002cb4:	0800f7fc 	.word	0x0800f7fc
 8002cb8:	200005d0 	.word	0x200005d0
 8002cbc:	0800f80c 	.word	0x0800f80c

08002cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cc0:	b5b0      	push	{r4, r5, r7, lr}
 8002cc2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8002cc4:	f001 fb16 	bl	80042f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cc8:	f000 fae8 	bl	800329c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ccc:	f000 fdfc 	bl	80038c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002cd0:	f000 fdcc 	bl	800386c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002cd4:	f000 fd98 	bl	8003808 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002cd8:	f000 fb4a 	bl	8003370 <MX_ADC1_Init>
  MX_DAC1_Init();
 8002cdc:	f000 fbb8 	bl	8003450 <MX_DAC1_Init>
  MX_TIM2_Init();
 8002ce0:	f000 fc1e 	bl	8003520 <MX_TIM2_Init>
  MX_I2C1_Init();
 8002ce4:	f000 fbde 	bl	80034a4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002ce8:	f000 fc92 	bl	8003610 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002cec:	f000 fd14 	bl	8003718 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart2, rxdata, sizeof(rxdata));
HAL_Delay(150);
 8002cf0:	2096      	movs	r0, #150	; 0x96
 8002cf2:	f001 fb65 	bl	80043c0 <HAL_Delay>
HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxdata, 50);
 8002cf6:	2232      	movs	r2, #50	; 0x32
 8002cf8:	4965      	ldr	r1, [pc, #404]	; (8002e90 <main+0x1d0>)
 8002cfa:	4866      	ldr	r0, [pc, #408]	; (8002e94 <main+0x1d4>)
 8002cfc:	f008 fd88 	bl	800b810 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002d00:	4b65      	ldr	r3, [pc, #404]	; (8002e98 <main+0x1d8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4b64      	ldr	r3, [pc, #400]	; (8002e98 <main+0x1d8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0204 	bic.w	r2, r2, #4
 8002d0e:	601a      	str	r2, [r3, #0]
HAL_UART_Transmit(&huart2, (uint8_t*)txData, 13, 500);
 8002d10:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d14:	220d      	movs	r2, #13
 8002d16:	4961      	ldr	r1, [pc, #388]	; (8002e9c <main+0x1dc>)
 8002d18:	485e      	ldr	r0, [pc, #376]	; (8002e94 <main+0x1d4>)
 8002d1a:	f007 fc05 	bl	800a528 <HAL_UART_Transmit>
//char buffer[] = "helloworld";
//strcpy(buffer, "helloworld");
//
//HAL_UART_Transmit(&huart2, (uint8_t*)buffer, 11, 500);

  modeset();
 8002d1e:	f7ff f801 	bl	8001d24 <modeset>
 // HAL_Delay(10);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // 42 33 31
 8002d22:	210c      	movs	r1, #12
 8002d24:	485e      	ldr	r0, [pc, #376]	; (8002ea0 <main+0x1e0>)
 8002d26:	f006 fa67 	bl	80091f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002d2a:	2104      	movs	r1, #4
 8002d2c:	485d      	ldr	r0, [pc, #372]	; (8002ea4 <main+0x1e4>)
 8002d2e:	f006 fa63 	bl	80091f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002d32:	2108      	movs	r1, #8
 8002d34:	485c      	ldr	r0, [pc, #368]	; (8002ea8 <main+0x1e8>)
 8002d36:	f006 fa5f 	bl	80091f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	485a      	ldr	r0, [pc, #360]	; (8002ea8 <main+0x1e8>)
 8002d3e:	f006 fa5b 	bl	80091f8 <HAL_TIM_PWM_Start>

  HAL_ADC_Start(&hadc1);
 8002d42:	485a      	ldr	r0, [pc, #360]	; (8002eac <main+0x1ec>)
 8002d44:	f001 fd82 	bl	800484c <HAL_ADC_Start>
  HAL_ADC_Start_DMA(&hadc1, &val, 1);
 8002d48:	2201      	movs	r2, #1
 8002d4a:	4959      	ldr	r1, [pc, #356]	; (8002eb0 <main+0x1f0>)
 8002d4c:	4857      	ldr	r0, [pc, #348]	; (8002eac <main+0x1ec>)
 8002d4e:	f001 fe93 	bl	8004a78 <HAL_ADC_Start_DMA>
  //HAL_Delay(10);


  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002d52:	2200      	movs	r2, #0
 8002d54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d58:	4856      	ldr	r0, [pc, #344]	; (8002eb4 <main+0x1f4>)
 8002d5a:	f003 ff31 	bl	8006bc0 <HAL_GPIO_WritePin>
  	HAL_Delay(10);
 8002d5e:	200a      	movs	r0, #10
 8002d60:	f001 fb2e 	bl	80043c0 <HAL_Delay>
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8002d64:	2201      	movs	r2, #1
 8002d66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d6a:	4852      	ldr	r0, [pc, #328]	; (8002eb4 <main+0x1f4>)
 8002d6c:	f003 ff28 	bl	8006bc0 <HAL_GPIO_WritePin>
  //	HAL_Delay(10);
  	make_reset_certain();
 8002d70:	f7fe f9c6 	bl	8001100 <make_reset_certain>
  	set_trackpad_settings();
 8002d74:	f7fd ff90 	bl	8000c98 <set_trackpad_settings>
  //	HAL_Delay(10);
  	TP_ReATI();
 8002d78:	f7fe fa6e 	bl	8001258 <TP_ReATI>

  	//HAL_Delay(10);

firston =1;
 8002d7c:	4b4e      	ldr	r3, [pc, #312]	; (8002eb8 <main+0x1f8>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (MODE ==2){
 8002d82:	4b4e      	ldr	r3, [pc, #312]	; (8002ebc <main+0x1fc>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	f040 80a4 	bne.w	8002ed4 <main+0x214>

			 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (int)(((float)rchan)*ps*1000.0/512.0));
 8002d8c:	4b4c      	ldr	r3, [pc, #304]	; (8002ec0 <main+0x200>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	ee07 3a90 	vmov	s15, r3
 8002d94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d98:	4b4a      	ldr	r3, [pc, #296]	; (8002ec4 <main+0x204>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	ee07 3a90 	vmov	s15, r3
 8002da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002da8:	ee17 0a90 	vmov	r0, s15
 8002dac:	f7fd fbd4 	bl	8000558 <__aeabi_f2d>
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	4b44      	ldr	r3, [pc, #272]	; (8002ec8 <main+0x208>)
 8002db6:	f7fd fc27 	bl	8000608 <__aeabi_dmul>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8002dca:	f7fd fd47 	bl	800085c <__aeabi_ddiv>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f7fd fec7 	bl	8000b68 <__aeabi_d2iz>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	4b32      	ldr	r3, [pc, #200]	; (8002ea8 <main+0x1e8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	63da      	str	r2, [r3, #60]	; 0x3c
			 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, (int)(((float)bchan)*ps*1000.0/512.0));
 8002de2:	4b3a      	ldr	r3, [pc, #232]	; (8002ecc <main+0x20c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	ee07 3a90 	vmov	s15, r3
 8002dea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dee:	4b35      	ldr	r3, [pc, #212]	; (8002ec4 <main+0x204>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	ee07 3a90 	vmov	s15, r3
 8002df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dfe:	ee17 0a90 	vmov	r0, s15
 8002e02:	f7fd fba9 	bl	8000558 <__aeabi_f2d>
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	4b2f      	ldr	r3, [pc, #188]	; (8002ec8 <main+0x208>)
 8002e0c:	f7fd fbfc 	bl	8000608 <__aeabi_dmul>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4610      	mov	r0, r2
 8002e16:	4619      	mov	r1, r3
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8002e20:	f7fd fd1c 	bl	800085c <__aeabi_ddiv>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4610      	mov	r0, r2
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	f7fd fe9c 	bl	8000b68 <__aeabi_d2iz>
 8002e30:	4602      	mov	r2, r0
 8002e32:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <main+0x1e4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (int)(((float)gchan)*ps*1000.0/512.0));
 8002e38:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <main+0x210>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	ee07 3a90 	vmov	s15, r3
 8002e40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e44:	4b1f      	ldr	r3, [pc, #124]	; (8002ec4 <main+0x204>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	ee07 3a90 	vmov	s15, r3
 8002e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e54:	ee17 0a90 	vmov	r0, s15
 8002e58:	f7fd fb7e 	bl	8000558 <__aeabi_f2d>
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <main+0x208>)
 8002e62:	f7fd fbd1 	bl	8000608 <__aeabi_dmul>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8002e76:	f7fd fcf1 	bl	800085c <__aeabi_ddiv>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	f7fd fe71 	bl	8000b68 <__aeabi_d2iz>
 8002e86:	4602      	mov	r2, r0
 8002e88:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <main+0x1e8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e8e:	e084      	b.n	8002f9a <main+0x2da>
 8002e90:	20000648 	.word	0x20000648
 8002e94:	200004fc 	.word	0x200004fc
 8002e98:	20000580 	.word	0x20000580
 8002e9c:	2000009c 	.word	0x2000009c
 8002ea0:	20000418 	.word	0x20000418
 8002ea4:	200004b0 	.word	0x200004b0
 8002ea8:	20000464 	.word	0x20000464
 8002eac:	200002e0 	.word	0x200002e0
 8002eb0:	20000690 	.word	0x20000690
 8002eb4:	48000400 	.word	0x48000400
 8002eb8:	200005e0 	.word	0x200005e0
 8002ebc:	200006ac 	.word	0x200006ac
 8002ec0:	200005c8 	.word	0x200005c8
 8002ec4:	200005da 	.word	0x200005da
 8002ec8:	408f4000 	.word	0x408f4000
 8002ecc:	200005d0 	.word	0x200005d0
 8002ed0:	200005cc 	.word	0x200005cc
	  }
	  else {
		  rchan=128;
 8002ed4:	4bac      	ldr	r3, [pc, #688]	; (8003188 <main+0x4c8>)
 8002ed6:	2280      	movs	r2, #128	; 0x80
 8002ed8:	601a      	str	r2, [r3, #0]
		  bchan=128;
 8002eda:	4bac      	ldr	r3, [pc, #688]	; (800318c <main+0x4cc>)
 8002edc:	2280      	movs	r2, #128	; 0x80
 8002ede:	601a      	str	r2, [r3, #0]
		  gchan=128;
 8002ee0:	4bab      	ldr	r3, [pc, #684]	; (8003190 <main+0x4d0>)
 8002ee2:	2280      	movs	r2, #128	; 0x80
 8002ee4:	601a      	str	r2, [r3, #0]
			 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (int)(((float)rchan)*0/512.0));
 8002ee6:	4ba8      	ldr	r3, [pc, #672]	; (8003188 <main+0x4c8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	ee07 3a90 	vmov	s15, r3
 8002eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ef2:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8003194 <main+0x4d4>
 8002ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002efa:	ee17 0a90 	vmov	r0, s15
 8002efe:	f7fd fb2b 	bl	8000558 <__aeabi_f2d>
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8002f0a:	f7fd fca7 	bl	800085c <__aeabi_ddiv>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	f7fd fe27 	bl	8000b68 <__aeabi_d2iz>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	4b9e      	ldr	r3, [pc, #632]	; (8003198 <main+0x4d8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	63da      	str	r2, [r3, #60]	; 0x3c
			 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, (int)(((float)gchan)*0/512.0));
 8002f22:	4b9b      	ldr	r3, [pc, #620]	; (8003190 <main+0x4d0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	ee07 3a90 	vmov	s15, r3
 8002f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f2e:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8003194 <main+0x4d4>
 8002f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f36:	ee17 0a90 	vmov	r0, s15
 8002f3a:	f7fd fb0d 	bl	8000558 <__aeabi_f2d>
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8002f46:	f7fd fc89 	bl	800085c <__aeabi_ddiv>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4610      	mov	r0, r2
 8002f50:	4619      	mov	r1, r3
 8002f52:	f7fd fe09 	bl	8000b68 <__aeabi_d2iz>
 8002f56:	4602      	mov	r2, r0
 8002f58:	4b90      	ldr	r3, [pc, #576]	; (800319c <main+0x4dc>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (int)(((float)bchan)*0/512.0));
 8002f5e:	4b8b      	ldr	r3, [pc, #556]	; (800318c <main+0x4cc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	ee07 3a90 	vmov	s15, r3
 8002f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f6a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003194 <main+0x4d4>
 8002f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f72:	ee17 0a90 	vmov	r0, s15
 8002f76:	f7fd faef 	bl	8000558 <__aeabi_f2d>
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8002f82:	f7fd fc6b 	bl	800085c <__aeabi_ddiv>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f7fd fdeb 	bl	8000b68 <__aeabi_d2iz>
 8002f92:	4602      	mov	r2, r0
 8002f94:	4b80      	ldr	r3, [pc, #512]	; (8003198 <main+0x4d8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  vinadjsum[io] = vinadj;
 8002f9a:	4b81      	ldr	r3, [pc, #516]	; (80031a0 <main+0x4e0>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4b80      	ldr	r3, [pc, #512]	; (80031a4 <main+0x4e4>)
 8002fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa6:	4880      	ldr	r0, [pc, #512]	; (80031a8 <main+0x4e8>)
 8002fa8:	00c9      	lsls	r1, r1, #3
 8002faa:	4401      	add	r1, r0
 8002fac:	e9c1 2300 	strd	r2, r3, [r1]
	  vinadjav = 	( vinadjsum[0]+vinadjsum[2]+vinadjsum[1])/(io+1);
 8002fb0:	4b7d      	ldr	r3, [pc, #500]	; (80031a8 <main+0x4e8>)
 8002fb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fb6:	4b7c      	ldr	r3, [pc, #496]	; (80031a8 <main+0x4e8>)
 8002fb8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002fbc:	f7fd f96e 	bl	800029c <__adddf3>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4b77      	ldr	r3, [pc, #476]	; (80031a8 <main+0x4e8>)
 8002fca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002fce:	f7fd f965 	bl	800029c <__adddf3>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4614      	mov	r4, r2
 8002fd8:	461d      	mov	r5, r3
 8002fda:	4b71      	ldr	r3, [pc, #452]	; (80031a0 <main+0x4e0>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd faa7 	bl	8000534 <__aeabi_i2d>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4620      	mov	r0, r4
 8002fec:	4629      	mov	r1, r5
 8002fee:	f7fd fc35 	bl	800085c <__aeabi_ddiv>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	496d      	ldr	r1, [pc, #436]	; (80031ac <main+0x4ec>)
 8002ff8:	e9c1 2300 	strd	r2, r3, [r1]
	  io++;
 8002ffc:	4b68      	ldr	r3, [pc, #416]	; (80031a0 <main+0x4e0>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	3301      	adds	r3, #1
 8003002:	b2da      	uxtb	r2, r3
 8003004:	4b66      	ldr	r3, [pc, #408]	; (80031a0 <main+0x4e0>)
 8003006:	701a      	strb	r2, [r3, #0]
	  if (io==3){
 8003008:	4b65      	ldr	r3, [pc, #404]	; (80031a0 <main+0x4e0>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d117      	bne.n	8003040 <main+0x380>
		  io=0;
 8003010:	4b63      	ldr	r3, [pc, #396]	; (80031a0 <main+0x4e0>)
 8003012:	2200      	movs	r2, #0
 8003014:	701a      	strb	r2, [r3, #0]
		  vinadjsum[0]=0;
 8003016:	4964      	ldr	r1, [pc, #400]	; (80031a8 <main+0x4e8>)
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	e9c1 2300 	strd	r2, r3, [r1]
		  vinadjsum[1]=0;
 8003024:	4960      	ldr	r1, [pc, #384]	; (80031a8 <main+0x4e8>)
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  vinadjsum[2]=0;
 8003032:	495d      	ldr	r1, [pc, #372]	; (80031a8 <main+0x4e8>)
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  //ensures slider old not set to 0 before vinadj initialized


	  //uart protocol set or request function

	  uartselect();
 8003040:	f7ff fd80 	bl	8002b44 <uartselect>

	  //find out which mode and call its operations
		  MODESWITCH();
 8003044:	f7ff fd00 	bl	8002a48 <MODESWITCH>


	if (flagstat==0){
 8003048:	4b59      	ldr	r3, [pc, #356]	; (80031b0 <main+0x4f0>)
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d105      	bne.n	800305c <main+0x39c>
		sliderold=vinadj;
 8003050:	4b54      	ldr	r3, [pc, #336]	; (80031a4 <main+0x4e4>)
 8003052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003056:	4957      	ldr	r1, [pc, #348]	; (80031b4 <main+0x4f4>)
 8003058:	e9c1 2300 	strd	r2, r3, [r1]
	}
	  if (ps==0){
 800305c:	4b56      	ldr	r3, [pc, #344]	; (80031b8 <main+0x4f8>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <main+0x3a8>

		 poweroff();
 8003064:	f7ff fcde 	bl	8002a24 <poweroff>
	  //button press and operations



	// send out button press state
	  if (state==1 && HAL_GetTick()-tickspr>=28){  //button pressed
 8003068:	4b54      	ldr	r3, [pc, #336]	; (80031bc <main+0x4fc>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d109      	bne.n	8003084 <main+0x3c4>
 8003070:	f001 f99a 	bl	80043a8 <HAL_GetTick>
 8003074:	4603      	mov	r3, r0
 8003076:	4a52      	ldr	r2, [pc, #328]	; (80031c0 <main+0x500>)
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	2b1b      	cmp	r3, #27
 800307e:	d901      	bls.n	8003084 <main+0x3c4>
	buttonselect();
 8003080:	f7ff fc52 	bl	8002928 <buttonselect>


		 	  }
	  if (butencode==1){
 8003084:	4b4f      	ldr	r3, [pc, #316]	; (80031c4 <main+0x504>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d10a      	bne.n	80030a2 <main+0x3e2>

		  probincr++;
 800308c:	4b4e      	ldr	r3, [pc, #312]	; (80031c8 <main+0x508>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	3301      	adds	r3, #1
 8003092:	b2da      	uxtb	r2, r3
 8003094:	4b4c      	ldr	r3, [pc, #304]	; (80031c8 <main+0x508>)
 8003096:	701a      	strb	r2, [r3, #0]
		  uartencode();
 8003098:	f7ff f86e 	bl	8002178 <uartencode>
		  butencode=0;
 800309c:	4b49      	ldr	r3, [pc, #292]	; (80031c4 <main+0x504>)
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
	  }


	  updateTrackpad();
 80030a2:	f7fe f911 	bl	80012c8 <updateTrackpad>

	  if (TapFlag==1){
 80030a6:	4b49      	ldr	r3, [pc, #292]	; (80031cc <main+0x50c>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d12d      	bne.n	800310a <main+0x44a>
		  sliderold = vinadj;
 80030ae:	4b3d      	ldr	r3, [pc, #244]	; (80031a4 <main+0x4e4>)
 80030b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b4:	493f      	ldr	r1, [pc, #252]	; (80031b4 <main+0x4f4>)
 80030b6:	e9c1 2300 	strd	r2, r3, [r1]
		  stateok=0;
 80030ba:	4b45      	ldr	r3, [pc, #276]	; (80031d0 <main+0x510>)
 80030bc:	2200      	movs	r2, #0
 80030be:	701a      	strb	r2, [r3, #0]
		  firston=1;
 80030c0:	4b44      	ldr	r3, [pc, #272]	; (80031d4 <main+0x514>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
		 // cantruntime =HAL_GetTick();
		  if (MODE ==2 ){
 80030c6:	4b44      	ldr	r3, [pc, #272]	; (80031d8 <main+0x518>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d101      	bne.n	80030d2 <main+0x412>
			  //modes go from 0-2
			  hitthelights();
 80030ce:	f7ff fd5b 	bl	8002b88 <hitthelights>

		  }
		  if (MODE ==1){
 80030d2:	4b41      	ldr	r3, [pc, #260]	; (80031d8 <main+0x518>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d111      	bne.n	80030fe <main+0x43e>
			  emmode++;
 80030da:	4b40      	ldr	r3, [pc, #256]	; (80031dc <main+0x51c>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	3301      	adds	r3, #1
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4b3e      	ldr	r3, [pc, #248]	; (80031dc <main+0x51c>)
 80030e4:	701a      	strb	r2, [r3, #0]
			        p1timeval=0;
 80030e6:	4b3e      	ldr	r3, [pc, #248]	; (80031e0 <main+0x520>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	801a      	strh	r2, [r3, #0]

			        if(emmode==3) {
 80030ec:	4b3b      	ldr	r3, [pc, #236]	; (80031dc <main+0x51c>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d102      	bne.n	80030fa <main+0x43a>
			          emmode=0;
 80030f4:	4b39      	ldr	r3, [pc, #228]	; (80031dc <main+0x51c>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	701a      	strb	r2, [r3, #0]

			    	 	    	   }
			       modeset();
 80030fa:	f7fe fe13 	bl	8001d24 <modeset>
		  }
		  flagstatcopy = 1;
 80030fe:	4b39      	ldr	r3, [pc, #228]	; (80031e4 <main+0x524>)
 8003100:	2201      	movs	r2, #1
 8003102:	701a      	strb	r2, [r3, #0]


		  TapFlag=0;
 8003104:	4b31      	ldr	r3, [pc, #196]	; (80031cc <main+0x50c>)
 8003106:	2200      	movs	r2, #0
 8003108:	701a      	strb	r2, [r3, #0]
	  }

		  if (flagstat==1 && firston !=1 && (  abs((int32_t)(1000.0*
 800310a:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <main+0x4f0>)
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d12b      	bne.n	800316a <main+0x4aa>
 8003112:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <main+0x514>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d027      	beq.n	800316a <main+0x4aa>
				  (sliderold - vinadjav)))>150  || ((stateok ==1) && state==1)))
 800311a:	4b26      	ldr	r3, [pc, #152]	; (80031b4 <main+0x4f4>)
 800311c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003120:	4b22      	ldr	r3, [pc, #136]	; (80031ac <main+0x4ec>)
 8003122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003126:	f7fd f8b7 	bl	8000298 <__aeabi_dsub>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4610      	mov	r0, r2
 8003130:	4619      	mov	r1, r3
		  if (flagstat==1 && firston !=1 && (  abs((int32_t)(1000.0*
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	4b2c      	ldr	r3, [pc, #176]	; (80031e8 <main+0x528>)
 8003138:	f7fd fa66 	bl	8000608 <__aeabi_dmul>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4610      	mov	r0, r2
 8003142:	4619      	mov	r1, r3
 8003144:	f7fd fd10 	bl	8000b68 <__aeabi_d2iz>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	bfb8      	it	lt
 800314e:	425b      	neglt	r3, r3
 8003150:	2b96      	cmp	r3, #150	; 0x96
 8003152:	dc07      	bgt.n	8003164 <main+0x4a4>
				  (sliderold - vinadjav)))>150  || ((stateok ==1) && state==1)))
 8003154:	4b1e      	ldr	r3, [pc, #120]	; (80031d0 <main+0x510>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d106      	bne.n	800316a <main+0x4aa>
 800315c:	4b17      	ldr	r3, [pc, #92]	; (80031bc <main+0x4fc>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d102      	bne.n	800316a <main+0x4aa>
				  {

			  flagstat=0;  //revert to analog in
 8003164:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <main+0x4f0>)
 8003166:	2200      	movs	r2, #0
 8003168:	801a      	strh	r2, [r3, #0]



		  }
		   rrr = (abs((int32_t)((int32_t)slideroldtrack - (int32_t)output_voltage) ));
 800316a:	4b20      	ldr	r3, [pc, #128]	; (80031ec <main+0x52c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a20      	ldr	r2, [pc, #128]	; (80031f0 <main+0x530>)
 8003170:	6812      	ldr	r2, [r2, #0]
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	bfb8      	it	lt
 8003178:	425b      	neglt	r3, r3
 800317a:	4a1e      	ldr	r2, [pc, #120]	; (80031f4 <main+0x534>)
 800317c:	6013      	str	r3, [r2, #0]

		  if (  rrr>300  || flagstatcopy==1){
 800317e:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <main+0x534>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003186:	e037      	b.n	80031f8 <main+0x538>
 8003188:	200005c8 	.word	0x200005c8
 800318c:	200005d0 	.word	0x200005d0
 8003190:	200005cc 	.word	0x200005cc
 8003194:	00000000 	.word	0x00000000
 8003198:	20000464 	.word	0x20000464
 800319c:	200004b0 	.word	0x200004b0
 80031a0:	200006c8 	.word	0x200006c8
 80031a4:	20000698 	.word	0x20000698
 80031a8:	200006b0 	.word	0x200006b0
 80031ac:	200006d0 	.word	0x200006d0
 80031b0:	200006f0 	.word	0x200006f0
 80031b4:	20000728 	.word	0x20000728
 80031b8:	200005da 	.word	0x200005da
 80031bc:	20000730 	.word	0x20000730
 80031c0:	2000067c 	.word	0x2000067c
 80031c4:	200006d8 	.word	0x200006d8
 80031c8:	200005fc 	.word	0x200005fc
 80031cc:	200002b4 	.word	0x200002b4
 80031d0:	200005d8 	.word	0x200005d8
 80031d4:	200005e0 	.word	0x200005e0
 80031d8:	200006ac 	.word	0x200006ac
 80031dc:	200006ad 	.word	0x200006ad
 80031e0:	200006ee 	.word	0x200006ee
 80031e4:	20000614 	.word	0x20000614
 80031e8:	408f4000 	.word	0x408f4000
 80031ec:	200002b0 	.word	0x200002b0
 80031f0:	200006a8 	.word	0x200006a8
 80031f4:	200005d4 	.word	0x200005d4
 80031f8:	dc03      	bgt.n	8003202 <main+0x542>
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <main+0x5b4>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d11b      	bne.n	800323a <main+0x57a>

			  //sumdiff=0;
			 // resinitflag =1;
			  out_new = output_voltage;
 8003202:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <main+0x5b8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	4b1c      	ldr	r3, [pc, #112]	; (800327c <main+0x5bc>)
 800320a:	601a      	str	r2, [r3, #0]
			  initialstate_intensity = output_voltage;
 800320c:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <main+0x5b8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f7fd f97f 	bl	8000514 <__aeabi_ui2d>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4919      	ldr	r1, [pc, #100]	; (8003280 <main+0x5c0>)
 800321c:	e9c1 2300 	strd	r2, r3, [r1]
			  InitialdiffX = 0;
 8003220:	4918      	ldr	r1, [pc, #96]	; (8003284 <main+0x5c4>)
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	e9c1 2300 	strd	r2, r3, [r1]
			  volconflag=0;
 800322e:	4b16      	ldr	r3, [pc, #88]	; (8003288 <main+0x5c8>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
			  flagstatcopy=0;
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <main+0x5b4>)
 8003236:	2200      	movs	r2, #0
 8003238:	701a      	strb	r2, [r3, #0]
		  }

		  if (pressAndHoldFlag==1){
 800323a:	4b14      	ldr	r3, [pc, #80]	; (800328c <main+0x5cc>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d113      	bne.n	800326a <main+0x5aa>
			  if (ps==1){
 8003242:	4b13      	ldr	r3, [pc, #76]	; (8003290 <main+0x5d0>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d109      	bne.n	800325e <main+0x59e>
				  probincr++;
 800324a:	4b12      	ldr	r3, [pc, #72]	; (8003294 <main+0x5d4>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	3301      	adds	r3, #1
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <main+0x5d4>)
 8003254:	701a      	strb	r2, [r3, #0]
				  ps=0;
 8003256:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <main+0x5d0>)
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e002      	b.n	8003264 <main+0x5a4>

			  }
			  else{ps=1;}
 800325e:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <main+0x5d0>)
 8003260:	2201      	movs	r2, #1
 8003262:	701a      	strb	r2, [r3, #0]
			  pressAndHoldFlag=0;
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <main+0x5cc>)
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]

//		  if (firston==1){
//			  azoFlag =1;
//		  }

		  firston=0;
 800326a:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <main+0x5d8>)
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
	  if (MODE ==2){
 8003270:	e587      	b.n	8002d82 <main+0xc2>
 8003272:	bf00      	nop
 8003274:	20000614 	.word	0x20000614
 8003278:	200006a8 	.word	0x200006a8
 800327c:	20000604 	.word	0x20000604
 8003280:	200002c8 	.word	0x200002c8
 8003284:	200002d0 	.word	0x200002d0
 8003288:	200005c4 	.word	0x200005c4
 800328c:	200002b5 	.word	0x200002b5
 8003290:	200005da 	.word	0x200005da
 8003294:	200005fc 	.word	0x200005fc
 8003298:	200005e0 	.word	0x200005e0

0800329c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b0a6      	sub	sp, #152	; 0x98
 80032a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80032a6:	2228      	movs	r2, #40	; 0x28
 80032a8:	2100      	movs	r1, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f008 fb58 	bl	800b960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032c0:	1d3b      	adds	r3, r7, #4
 80032c2:	2258      	movs	r2, #88	; 0x58
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f008 fb4a 	bl	800b960 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80032cc:	2302      	movs	r3, #2
 80032ce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032d0:	2301      	movs	r3, #1
 80032d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032d4:	2310      	movs	r3, #16
 80032d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032da:	2302      	movs	r3, #2
 80032dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80032e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80032e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80032ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80032f0:	2300      	movs	r3, #0
 80032f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80032fa:	4618      	mov	r0, r3
 80032fc:	f004 fa1c 	bl	8007738 <HAL_RCC_OscConfig>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8003306:	f000 fba7 	bl	8003a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800330a:	230f      	movs	r3, #15
 800330c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800330e:	2302      	movs	r3, #2
 8003310:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003312:	2300      	movs	r3, #0
 8003314:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800331a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800331c:	2300      	movs	r3, #0
 800331e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003320:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003324:	2102      	movs	r1, #2
 8003326:	4618      	mov	r0, r3
 8003328:	f005 fa5a 	bl	80087e0 <HAL_RCC_ClockConfig>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003332:	f000 fb91 	bl	8003a58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <SystemClock_Config+0xd0>)
 8003338:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800333e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003342:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003344:	2300      	movs	r3, #0
 8003346:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8003348:	2300      	movs	r3, #0
 800334a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800334c:	2300      	movs	r3, #0
 800334e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003350:	1d3b      	adds	r3, r7, #4
 8003352:	4618      	mov	r0, r3
 8003354:	f005 fc7a 	bl	8008c4c <HAL_RCCEx_PeriphCLKConfig>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800335e:	f000 fb7b 	bl	8003a58 <Error_Handler>
  }
}
 8003362:	bf00      	nop
 8003364:	3798      	adds	r7, #152	; 0x98
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	003000a2 	.word	0x003000a2

08003370 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08a      	sub	sp, #40	; 0x28
 8003374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003376:	f107 031c 	add.w	r3, r7, #28
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	605a      	str	r2, [r3, #4]
 8003380:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003382:	1d3b      	adds	r3, r7, #4
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	60da      	str	r2, [r3, #12]
 800338e:	611a      	str	r2, [r3, #16]
 8003390:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003392:	4b2e      	ldr	r3, [pc, #184]	; (800344c <MX_ADC1_Init+0xdc>)
 8003394:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003398:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800339a:	4b2c      	ldr	r3, [pc, #176]	; (800344c <MX_ADC1_Init+0xdc>)
 800339c:	2200      	movs	r2, #0
 800339e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80033a0:	4b2a      	ldr	r3, [pc, #168]	; (800344c <MX_ADC1_Init+0xdc>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80033a6:	4b29      	ldr	r3, [pc, #164]	; (800344c <MX_ADC1_Init+0xdc>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80033ac:	4b27      	ldr	r3, [pc, #156]	; (800344c <MX_ADC1_Init+0xdc>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80033b2:	4b26      	ldr	r3, [pc, #152]	; (800344c <MX_ADC1_Init+0xdc>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80033ba:	4b24      	ldr	r3, [pc, #144]	; (800344c <MX_ADC1_Init+0xdc>)
 80033bc:	2200      	movs	r2, #0
 80033be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033c0:	4b22      	ldr	r3, [pc, #136]	; (800344c <MX_ADC1_Init+0xdc>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033c6:	4b21      	ldr	r3, [pc, #132]	; (800344c <MX_ADC1_Init+0xdc>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80033cc:	4b1f      	ldr	r3, [pc, #124]	; (800344c <MX_ADC1_Init+0xdc>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80033d2:	4b1e      	ldr	r3, [pc, #120]	; (800344c <MX_ADC1_Init+0xdc>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033da:	4b1c      	ldr	r3, [pc, #112]	; (800344c <MX_ADC1_Init+0xdc>)
 80033dc:	2204      	movs	r2, #4
 80033de:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80033e0:	4b1a      	ldr	r3, [pc, #104]	; (800344c <MX_ADC1_Init+0xdc>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80033e6:	4b19      	ldr	r3, [pc, #100]	; (800344c <MX_ADC1_Init+0xdc>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80033ec:	4817      	ldr	r0, [pc, #92]	; (800344c <MX_ADC1_Init+0xdc>)
 80033ee:	f001 f833 	bl	8004458 <HAL_ADC_Init>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80033f8:	f000 fb2e 	bl	8003a58 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003400:	f107 031c 	add.w	r3, r7, #28
 8003404:	4619      	mov	r1, r3
 8003406:	4811      	ldr	r0, [pc, #68]	; (800344c <MX_ADC1_Init+0xdc>)
 8003408:	f002 fad8 	bl	80059bc <HAL_ADCEx_MultiModeConfigChannel>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8003412:	f000 fb21 	bl	8003a58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003416:	2301      	movs	r3, #1
 8003418:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800341a:	2301      	movs	r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800341e:	2300      	movs	r3, #0
 8003420:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800342e:	1d3b      	adds	r3, r7, #4
 8003430:	4619      	mov	r1, r3
 8003432:	4806      	ldr	r0, [pc, #24]	; (800344c <MX_ADC1_Init+0xdc>)
 8003434:	f001 ffd6 	bl	80053e4 <HAL_ADC_ConfigChannel>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800343e:	f000 fb0b 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003442:	bf00      	nop
 8003444:	3728      	adds	r7, #40	; 0x28
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	200002e0 	.word	0x200002e0

08003450 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003460:	4b0e      	ldr	r3, [pc, #56]	; (800349c <MX_DAC1_Init+0x4c>)
 8003462:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <MX_DAC1_Init+0x50>)
 8003464:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003466:	480d      	ldr	r0, [pc, #52]	; (800349c <MX_DAC1_Init+0x4c>)
 8003468:	f002 fe91 	bl	800618e <HAL_DAC_Init>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8003472:	f000 faf1 	bl	8003a58 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003476:	2300      	movs	r3, #0
 8003478:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800347e:	1d3b      	adds	r3, r7, #4
 8003480:	2200      	movs	r2, #0
 8003482:	4619      	mov	r1, r3
 8003484:	4805      	ldr	r0, [pc, #20]	; (800349c <MX_DAC1_Init+0x4c>)
 8003486:	f002 ff78 	bl	800637a <HAL_DAC_ConfigChannel>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8003490:	f000 fae2 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003494:	bf00      	nop
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	20000374 	.word	0x20000374
 80034a0:	40007400 	.word	0x40007400

080034a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80034a8:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <MX_I2C1_Init+0x74>)
 80034aa:	4a1c      	ldr	r2, [pc, #112]	; (800351c <MX_I2C1_Init+0x78>)
 80034ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80034ae:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <MX_I2C1_Init+0x74>)
 80034b0:	f240 220b 	movw	r2, #523	; 0x20b
 80034b4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80034b6:	4b18      	ldr	r3, [pc, #96]	; (8003518 <MX_I2C1_Init+0x74>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034bc:	4b16      	ldr	r3, [pc, #88]	; (8003518 <MX_I2C1_Init+0x74>)
 80034be:	2201      	movs	r2, #1
 80034c0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034c2:	4b15      	ldr	r3, [pc, #84]	; (8003518 <MX_I2C1_Init+0x74>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80034c8:	4b13      	ldr	r3, [pc, #76]	; (8003518 <MX_I2C1_Init+0x74>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <MX_I2C1_Init+0x74>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034d4:	4b10      	ldr	r3, [pc, #64]	; (8003518 <MX_I2C1_Init+0x74>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034da:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <MX_I2C1_Init+0x74>)
 80034dc:	2200      	movs	r2, #0
 80034de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034e0:	480d      	ldr	r0, [pc, #52]	; (8003518 <MX_I2C1_Init+0x74>)
 80034e2:	f003 fba8 	bl	8006c36 <HAL_I2C_Init>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80034ec:	f000 fab4 	bl	8003a58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034f0:	2100      	movs	r1, #0
 80034f2:	4809      	ldr	r0, [pc, #36]	; (8003518 <MX_I2C1_Init+0x74>)
 80034f4:	f004 f888 	bl	8007608 <HAL_I2CEx_ConfigAnalogFilter>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80034fe:	f000 faab 	bl	8003a58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003502:	2100      	movs	r1, #0
 8003504:	4804      	ldr	r0, [pc, #16]	; (8003518 <MX_I2C1_Init+0x74>)
 8003506:	f004 f8ca 	bl	800769e <HAL_I2CEx_ConfigDigitalFilter>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003510:	f000 faa2 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003514:	bf00      	nop
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000388 	.word	0x20000388
 800351c:	40005400 	.word	0x40005400

08003520 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08e      	sub	sp, #56	; 0x38
 8003524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	605a      	str	r2, [r3, #4]
 8003530:	609a      	str	r2, [r3, #8]
 8003532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003534:	f107 031c 	add.w	r3, r7, #28
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003540:	463b      	mov	r3, r7
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	605a      	str	r2, [r3, #4]
 8003548:	609a      	str	r2, [r3, #8]
 800354a:	60da      	str	r2, [r3, #12]
 800354c:	611a      	str	r2, [r3, #16]
 800354e:	615a      	str	r2, [r3, #20]
 8003550:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003552:	4b2e      	ldr	r3, [pc, #184]	; (800360c <MX_TIM2_Init+0xec>)
 8003554:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003558:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 800355a:	4b2c      	ldr	r3, [pc, #176]	; (800360c <MX_TIM2_Init+0xec>)
 800355c:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8003560:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003562:	4b2a      	ldr	r3, [pc, #168]	; (800360c <MX_TIM2_Init+0xec>)
 8003564:	2200      	movs	r2, #0
 8003566:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003568:	4b28      	ldr	r3, [pc, #160]	; (800360c <MX_TIM2_Init+0xec>)
 800356a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800356e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003570:	4b26      	ldr	r3, [pc, #152]	; (800360c <MX_TIM2_Init+0xec>)
 8003572:	2200      	movs	r2, #0
 8003574:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003576:	4b25      	ldr	r3, [pc, #148]	; (800360c <MX_TIM2_Init+0xec>)
 8003578:	2200      	movs	r2, #0
 800357a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800357c:	4823      	ldr	r0, [pc, #140]	; (800360c <MX_TIM2_Init+0xec>)
 800357e:	f005 fd83 	bl	8009088 <HAL_TIM_Base_Init>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8003588:	f000 fa66 	bl	8003a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800358c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003590:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003596:	4619      	mov	r1, r3
 8003598:	481c      	ldr	r0, [pc, #112]	; (800360c <MX_TIM2_Init+0xec>)
 800359a:	f006 f96d 	bl	8009878 <HAL_TIM_ConfigClockSource>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80035a4:	f000 fa58 	bl	8003a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80035a8:	4818      	ldr	r0, [pc, #96]	; (800360c <MX_TIM2_Init+0xec>)
 80035aa:	f005 fdc4 	bl	8009136 <HAL_TIM_PWM_Init>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80035b4:	f000 fa50 	bl	8003a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035bc:	2300      	movs	r3, #0
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80035c0:	f107 031c 	add.w	r3, r7, #28
 80035c4:	4619      	mov	r1, r3
 80035c6:	4811      	ldr	r0, [pc, #68]	; (800360c <MX_TIM2_Init+0xec>)
 80035c8:	f006 feb6 	bl	800a338 <HAL_TIMEx_MasterConfigSynchronization>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80035d2:	f000 fa41 	bl	8003a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035d6:	2360      	movs	r3, #96	; 0x60
 80035d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80035da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80035de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035e4:	2300      	movs	r3, #0
 80035e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80035e8:	463b      	mov	r3, r7
 80035ea:	220c      	movs	r2, #12
 80035ec:	4619      	mov	r1, r3
 80035ee:	4807      	ldr	r0, [pc, #28]	; (800360c <MX_TIM2_Init+0xec>)
 80035f0:	f006 f82e 	bl	8009650 <HAL_TIM_PWM_ConfigChannel>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 80035fa:	f000 fa2d 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80035fe:	4803      	ldr	r0, [pc, #12]	; (800360c <MX_TIM2_Init+0xec>)
 8003600:	f000 fbcc 	bl	8003d9c <HAL_TIM_MspPostInit>

}
 8003604:	bf00      	nop
 8003606:	3738      	adds	r7, #56	; 0x38
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	20000418 	.word	0x20000418

08003610 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08e      	sub	sp, #56	; 0x38
 8003614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	605a      	str	r2, [r3, #4]
 8003620:	609a      	str	r2, [r3, #8]
 8003622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003624:	f107 031c 	add.w	r3, r7, #28
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003630:	463b      	mov	r3, r7
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	605a      	str	r2, [r3, #4]
 8003638:	609a      	str	r2, [r3, #8]
 800363a:	60da      	str	r2, [r3, #12]
 800363c:	611a      	str	r2, [r3, #16]
 800363e:	615a      	str	r2, [r3, #20]
 8003640:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003642:	4b33      	ldr	r3, [pc, #204]	; (8003710 <MX_TIM3_Init+0x100>)
 8003644:	4a33      	ldr	r2, [pc, #204]	; (8003714 <MX_TIM3_Init+0x104>)
 8003646:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720;
 8003648:	4b31      	ldr	r3, [pc, #196]	; (8003710 <MX_TIM3_Init+0x100>)
 800364a:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800364e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003650:	4b2f      	ldr	r3, [pc, #188]	; (8003710 <MX_TIM3_Init+0x100>)
 8003652:	2200      	movs	r2, #0
 8003654:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8003656:	4b2e      	ldr	r3, [pc, #184]	; (8003710 <MX_TIM3_Init+0x100>)
 8003658:	f240 32e7 	movw	r2, #999	; 0x3e7
 800365c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800365e:	4b2c      	ldr	r3, [pc, #176]	; (8003710 <MX_TIM3_Init+0x100>)
 8003660:	2200      	movs	r2, #0
 8003662:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003664:	4b2a      	ldr	r3, [pc, #168]	; (8003710 <MX_TIM3_Init+0x100>)
 8003666:	2200      	movs	r2, #0
 8003668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800366a:	4829      	ldr	r0, [pc, #164]	; (8003710 <MX_TIM3_Init+0x100>)
 800366c:	f005 fd0c 	bl	8009088 <HAL_TIM_Base_Init>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8003676:	f000 f9ef 	bl	8003a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800367a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800367e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003680:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003684:	4619      	mov	r1, r3
 8003686:	4822      	ldr	r0, [pc, #136]	; (8003710 <MX_TIM3_Init+0x100>)
 8003688:	f006 f8f6 	bl	8009878 <HAL_TIM_ConfigClockSource>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8003692:	f000 f9e1 	bl	8003a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003696:	481e      	ldr	r0, [pc, #120]	; (8003710 <MX_TIM3_Init+0x100>)
 8003698:	f005 fd4d 	bl	8009136 <HAL_TIM_PWM_Init>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80036a2:	f000 f9d9 	bl	8003a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80036ae:	f107 031c 	add.w	r3, r7, #28
 80036b2:	4619      	mov	r1, r3
 80036b4:	4816      	ldr	r0, [pc, #88]	; (8003710 <MX_TIM3_Init+0x100>)
 80036b6:	f006 fe3f 	bl	800a338 <HAL_TIMEx_MasterConfigSynchronization>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80036c0:	f000 f9ca 	bl	8003a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036c4:	2360      	movs	r3, #96	; 0x60
 80036c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036d4:	463b      	mov	r3, r7
 80036d6:	2200      	movs	r2, #0
 80036d8:	4619      	mov	r1, r3
 80036da:	480d      	ldr	r0, [pc, #52]	; (8003710 <MX_TIM3_Init+0x100>)
 80036dc:	f005 ffb8 	bl	8009650 <HAL_TIM_PWM_ConfigChannel>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80036e6:	f000 f9b7 	bl	8003a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80036ea:	463b      	mov	r3, r7
 80036ec:	2208      	movs	r2, #8
 80036ee:	4619      	mov	r1, r3
 80036f0:	4807      	ldr	r0, [pc, #28]	; (8003710 <MX_TIM3_Init+0x100>)
 80036f2:	f005 ffad 	bl	8009650 <HAL_TIM_PWM_ConfigChannel>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80036fc:	f000 f9ac 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003700:	4803      	ldr	r0, [pc, #12]	; (8003710 <MX_TIM3_Init+0x100>)
 8003702:	f000 fb4b 	bl	8003d9c <HAL_TIM_MspPostInit>

}
 8003706:	bf00      	nop
 8003708:	3738      	adds	r7, #56	; 0x38
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000464 	.word	0x20000464
 8003714:	40000400 	.word	0x40000400

08003718 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08e      	sub	sp, #56	; 0x38
 800371c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800371e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	605a      	str	r2, [r3, #4]
 8003728:	609a      	str	r2, [r3, #8]
 800372a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800372c:	f107 031c 	add.w	r3, r7, #28
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003738:	463b      	mov	r3, r7
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	605a      	str	r2, [r3, #4]
 8003740:	609a      	str	r2, [r3, #8]
 8003742:	60da      	str	r2, [r3, #12]
 8003744:	611a      	str	r2, [r3, #16]
 8003746:	615a      	str	r2, [r3, #20]
 8003748:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800374a:	4b2d      	ldr	r3, [pc, #180]	; (8003800 <MX_TIM4_Init+0xe8>)
 800374c:	4a2d      	ldr	r2, [pc, #180]	; (8003804 <MX_TIM4_Init+0xec>)
 800374e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 720;
 8003750:	4b2b      	ldr	r3, [pc, #172]	; (8003800 <MX_TIM4_Init+0xe8>)
 8003752:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8003756:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003758:	4b29      	ldr	r3, [pc, #164]	; (8003800 <MX_TIM4_Init+0xe8>)
 800375a:	2200      	movs	r2, #0
 800375c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800375e:	4b28      	ldr	r3, [pc, #160]	; (8003800 <MX_TIM4_Init+0xe8>)
 8003760:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003764:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003766:	4b26      	ldr	r3, [pc, #152]	; (8003800 <MX_TIM4_Init+0xe8>)
 8003768:	2200      	movs	r2, #0
 800376a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800376c:	4b24      	ldr	r3, [pc, #144]	; (8003800 <MX_TIM4_Init+0xe8>)
 800376e:	2200      	movs	r2, #0
 8003770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003772:	4823      	ldr	r0, [pc, #140]	; (8003800 <MX_TIM4_Init+0xe8>)
 8003774:	f005 fc88 	bl	8009088 <HAL_TIM_Base_Init>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 800377e:	f000 f96b 	bl	8003a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003786:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003788:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800378c:	4619      	mov	r1, r3
 800378e:	481c      	ldr	r0, [pc, #112]	; (8003800 <MX_TIM4_Init+0xe8>)
 8003790:	f006 f872 	bl	8009878 <HAL_TIM_ConfigClockSource>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800379a:	f000 f95d 	bl	8003a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800379e:	4818      	ldr	r0, [pc, #96]	; (8003800 <MX_TIM4_Init+0xe8>)
 80037a0:	f005 fcc9 	bl	8009136 <HAL_TIM_PWM_Init>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80037aa:	f000 f955 	bl	8003a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037b2:	2300      	movs	r3, #0
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80037b6:	f107 031c 	add.w	r3, r7, #28
 80037ba:	4619      	mov	r1, r3
 80037bc:	4810      	ldr	r0, [pc, #64]	; (8003800 <MX_TIM4_Init+0xe8>)
 80037be:	f006 fdbb 	bl	800a338 <HAL_TIMEx_MasterConfigSynchronization>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80037c8:	f000 f946 	bl	8003a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037cc:	2360      	movs	r3, #96	; 0x60
 80037ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037d8:	2300      	movs	r3, #0
 80037da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037dc:	463b      	mov	r3, r7
 80037de:	2204      	movs	r2, #4
 80037e0:	4619      	mov	r1, r3
 80037e2:	4807      	ldr	r0, [pc, #28]	; (8003800 <MX_TIM4_Init+0xe8>)
 80037e4:	f005 ff34 	bl	8009650 <HAL_TIM_PWM_ConfigChannel>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80037ee:	f000 f933 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80037f2:	4803      	ldr	r0, [pc, #12]	; (8003800 <MX_TIM4_Init+0xe8>)
 80037f4:	f000 fad2 	bl	8003d9c <HAL_TIM_MspPostInit>

}
 80037f8:	bf00      	nop
 80037fa:	3738      	adds	r7, #56	; 0x38
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	200004b0 	.word	0x200004b0
 8003804:	40000800 	.word	0x40000800

08003808 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800380c:	4b15      	ldr	r3, [pc, #84]	; (8003864 <MX_USART2_UART_Init+0x5c>)
 800380e:	4a16      	ldr	r2, [pc, #88]	; (8003868 <MX_USART2_UART_Init+0x60>)
 8003810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8003812:	4b14      	ldr	r3, [pc, #80]	; (8003864 <MX_USART2_UART_Init+0x5c>)
 8003814:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800381a:	4b12      	ldr	r3, [pc, #72]	; (8003864 <MX_USART2_UART_Init+0x5c>)
 800381c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003820:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <MX_USART2_UART_Init+0x5c>)
 8003824:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800382a:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <MX_USART2_UART_Init+0x5c>)
 800382c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003830:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003832:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <MX_USART2_UART_Init+0x5c>)
 8003834:	220c      	movs	r2, #12
 8003836:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <MX_USART2_UART_Init+0x5c>)
 800383a:	2200      	movs	r2, #0
 800383c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800383e:	4b09      	ldr	r3, [pc, #36]	; (8003864 <MX_USART2_UART_Init+0x5c>)
 8003840:	2200      	movs	r2, #0
 8003842:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003844:	4b07      	ldr	r3, [pc, #28]	; (8003864 <MX_USART2_UART_Init+0x5c>)
 8003846:	2200      	movs	r2, #0
 8003848:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <MX_USART2_UART_Init+0x5c>)
 800384c:	2200      	movs	r2, #0
 800384e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003850:	4804      	ldr	r0, [pc, #16]	; (8003864 <MX_USART2_UART_Init+0x5c>)
 8003852:	f006 fe1b 	bl	800a48c <HAL_UART_Init>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800385c:	f000 f8fc 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003860:	bf00      	nop
 8003862:	bd80      	pop	{r7, pc}
 8003864:	200004fc 	.word	0x200004fc
 8003868:	40004400 	.word	0x40004400

0800386c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003872:	4b14      	ldr	r3, [pc, #80]	; (80038c4 <MX_DMA_Init+0x58>)
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	4a13      	ldr	r2, [pc, #76]	; (80038c4 <MX_DMA_Init+0x58>)
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	6153      	str	r3, [r2, #20]
 800387e:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <MX_DMA_Init+0x58>)
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	607b      	str	r3, [r7, #4]
 8003888:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800388a:	2200      	movs	r2, #0
 800388c:	2100      	movs	r1, #0
 800388e:	200b      	movs	r0, #11
 8003890:	f002 fc47 	bl	8006122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003894:	200b      	movs	r0, #11
 8003896:	f002 fc60 	bl	800615a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800389a:	2200      	movs	r2, #0
 800389c:	2100      	movs	r1, #0
 800389e:	2010      	movs	r0, #16
 80038a0:	f002 fc3f 	bl	8006122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80038a4:	2010      	movs	r0, #16
 80038a6:	f002 fc58 	bl	800615a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80038aa:	2200      	movs	r2, #0
 80038ac:	2100      	movs	r1, #0
 80038ae:	2011      	movs	r0, #17
 80038b0:	f002 fc37 	bl	8006122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80038b4:	2011      	movs	r0, #17
 80038b6:	f002 fc50 	bl	800615a <HAL_NVIC_EnableIRQ>

}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000

080038c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	; 0x28
 80038cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ce:	f107 0314 	add.w	r3, r7, #20
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	605a      	str	r2, [r3, #4]
 80038d8:	609a      	str	r2, [r3, #8]
 80038da:	60da      	str	r2, [r3, #12]
 80038dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038de:	4b5b      	ldr	r3, [pc, #364]	; (8003a4c <MX_GPIO_Init+0x184>)
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	4a5a      	ldr	r2, [pc, #360]	; (8003a4c <MX_GPIO_Init+0x184>)
 80038e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038e8:	6153      	str	r3, [r2, #20]
 80038ea:	4b58      	ldr	r3, [pc, #352]	; (8003a4c <MX_GPIO_Init+0x184>)
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80038f6:	4b55      	ldr	r3, [pc, #340]	; (8003a4c <MX_GPIO_Init+0x184>)
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	4a54      	ldr	r2, [pc, #336]	; (8003a4c <MX_GPIO_Init+0x184>)
 80038fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003900:	6153      	str	r3, [r2, #20]
 8003902:	4b52      	ldr	r3, [pc, #328]	; (8003a4c <MX_GPIO_Init+0x184>)
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800390e:	4b4f      	ldr	r3, [pc, #316]	; (8003a4c <MX_GPIO_Init+0x184>)
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	4a4e      	ldr	r2, [pc, #312]	; (8003a4c <MX_GPIO_Init+0x184>)
 8003914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003918:	6153      	str	r3, [r2, #20]
 800391a:	4b4c      	ldr	r3, [pc, #304]	; (8003a4c <MX_GPIO_Init+0x184>)
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	60bb      	str	r3, [r7, #8]
 8003924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003926:	4b49      	ldr	r3, [pc, #292]	; (8003a4c <MX_GPIO_Init+0x184>)
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	4a48      	ldr	r2, [pc, #288]	; (8003a4c <MX_GPIO_Init+0x184>)
 800392c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003930:	6153      	str	r3, [r2, #20]
 8003932:	4b46      	ldr	r3, [pc, #280]	; (8003a4c <MX_GPIO_Init+0x184>)
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800393a:	607b      	str	r3, [r7, #4]
 800393c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 800393e:	2200      	movs	r2, #0
 8003940:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003948:	f003 f93a 	bl	8006bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800394c:	2200      	movs	r2, #0
 800394e:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8003952:	483f      	ldr	r0, [pc, #252]	; (8003a50 <MX_GPIO_Init+0x188>)
 8003954:	f003 f934 	bl	8006bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8003958:	2201      	movs	r2, #1
 800395a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800395e:	483c      	ldr	r0, [pc, #240]	; (8003a50 <MX_GPIO_Init+0x188>)
 8003960:	f003 f92e 	bl	8006bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800396a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800396e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003974:	f107 0314 	add.w	r3, r7, #20
 8003978:	4619      	mov	r1, r3
 800397a:	4836      	ldr	r0, [pc, #216]	; (8003a54 <MX_GPIO_Init+0x18c>)
 800397c:	f002 ff7e 	bl	800687c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_9;
 8003980:	f240 2382 	movw	r3, #642	; 0x282
 8003984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003986:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800398a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800398c:	2301      	movs	r3, #1
 800398e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003990:	f107 0314 	add.w	r3, r7, #20
 8003994:	4619      	mov	r1, r3
 8003996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800399a:	f002 ff6f 	bl	800687c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 800399e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80039a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039a4:	2301      	movs	r3, #1
 80039a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ac:	2300      	movs	r3, #0
 80039ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b0:	f107 0314 	add.w	r3, r7, #20
 80039b4:	4619      	mov	r1, r3
 80039b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039ba:	f002 ff5f 	bl	800687c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB14 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5;
 80039be:	f244 4330 	movw	r3, #17456	; 0x4430
 80039c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039c4:	2301      	movs	r3, #1
 80039c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039cc:	2300      	movs	r3, #0
 80039ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039d0:	f107 0314 	add.w	r3, r7, #20
 80039d4:	4619      	mov	r1, r3
 80039d6:	481e      	ldr	r0, [pc, #120]	; (8003a50 <MX_GPIO_Init+0x188>)
 80039d8:	f002 ff50 	bl	800687c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80039dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80039e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039e8:	2301      	movs	r3, #1
 80039ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ec:	f107 0314 	add.w	r3, r7, #20
 80039f0:	4619      	mov	r1, r3
 80039f2:	4817      	ldr	r0, [pc, #92]	; (8003a50 <MX_GPIO_Init+0x188>)
 80039f4:	f002 ff42 	bl	800687c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80039f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80039fe:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a04:	2301      	movs	r3, #1
 8003a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a08:	f107 0314 	add.w	r3, r7, #20
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4810      	ldr	r0, [pc, #64]	; (8003a50 <MX_GPIO_Init+0x188>)
 8003a10:	f002 ff34 	bl	800687c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003a14:	2200      	movs	r2, #0
 8003a16:	2100      	movs	r1, #0
 8003a18:	2007      	movs	r0, #7
 8003a1a:	f002 fb82 	bl	8006122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003a1e:	2007      	movs	r0, #7
 8003a20:	f002 fb9b 	bl	800615a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003a24:	2200      	movs	r2, #0
 8003a26:	2100      	movs	r1, #0
 8003a28:	2017      	movs	r0, #23
 8003a2a:	f002 fb7a 	bl	8006122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003a2e:	2017      	movs	r0, #23
 8003a30:	f002 fb93 	bl	800615a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003a34:	2200      	movs	r2, #0
 8003a36:	2100      	movs	r1, #0
 8003a38:	2028      	movs	r0, #40	; 0x28
 8003a3a:	f002 fb72 	bl	8006122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003a3e:	2028      	movs	r0, #40	; 0x28
 8003a40:	f002 fb8b 	bl	800615a <HAL_NVIC_EnableIRQ>

}
 8003a44:	bf00      	nop
 8003a46:	3728      	adds	r7, #40	; 0x28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	48000400 	.word	0x48000400
 8003a54:	48000800 	.word	0x48000800

08003a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a5c:	b672      	cpsid	i
}
 8003a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a60:	e7fe      	b.n	8003a60 <Error_Handler+0x8>
	...

08003a64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a6a:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <HAL_MspInit+0x44>)
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	4a0e      	ldr	r2, [pc, #56]	; (8003aa8 <HAL_MspInit+0x44>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	6193      	str	r3, [r2, #24]
 8003a76:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <HAL_MspInit+0x44>)
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	607b      	str	r3, [r7, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_MspInit+0x44>)
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	4a08      	ldr	r2, [pc, #32]	; (8003aa8 <HAL_MspInit+0x44>)
 8003a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	61d3      	str	r3, [r2, #28]
 8003a8e:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <HAL_MspInit+0x44>)
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003a9a:	2007      	movs	r0, #7
 8003a9c:	f002 fb36 	bl	800610c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40021000 	.word	0x40021000

08003aac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab4:	f107 0314 	add.w	r3, r7, #20
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	60da      	str	r2, [r3, #12]
 8003ac2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003acc:	d154      	bne.n	8003b78 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003ace:	4b2c      	ldr	r3, [pc, #176]	; (8003b80 <HAL_ADC_MspInit+0xd4>)
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	4a2b      	ldr	r2, [pc, #172]	; (8003b80 <HAL_ADC_MspInit+0xd4>)
 8003ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	6153      	str	r3, [r2, #20]
 8003ada:	4b29      	ldr	r3, [pc, #164]	; (8003b80 <HAL_ADC_MspInit+0xd4>)
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae6:	4b26      	ldr	r3, [pc, #152]	; (8003b80 <HAL_ADC_MspInit+0xd4>)
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	4a25      	ldr	r2, [pc, #148]	; (8003b80 <HAL_ADC_MspInit+0xd4>)
 8003aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af0:	6153      	str	r3, [r2, #20]
 8003af2:	4b23      	ldr	r3, [pc, #140]	; (8003b80 <HAL_ADC_MspInit+0xd4>)
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003afe:	2301      	movs	r3, #1
 8003b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b02:	2303      	movs	r3, #3
 8003b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0a:	f107 0314 	add.w	r3, r7, #20
 8003b0e:	4619      	mov	r1, r3
 8003b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b14:	f002 feb2 	bl	800687c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003b18:	4b1a      	ldr	r3, [pc, #104]	; (8003b84 <HAL_ADC_MspInit+0xd8>)
 8003b1a:	4a1b      	ldr	r2, [pc, #108]	; (8003b88 <HAL_ADC_MspInit+0xdc>)
 8003b1c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b1e:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <HAL_ADC_MspInit+0xd8>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b24:	4b17      	ldr	r3, [pc, #92]	; (8003b84 <HAL_ADC_MspInit+0xd8>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b2a:	4b16      	ldr	r3, [pc, #88]	; (8003b84 <HAL_ADC_MspInit+0xd8>)
 8003b2c:	2280      	movs	r2, #128	; 0x80
 8003b2e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b30:	4b14      	ldr	r3, [pc, #80]	; (8003b84 <HAL_ADC_MspInit+0xd8>)
 8003b32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b36:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b38:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <HAL_ADC_MspInit+0xd8>)
 8003b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b3e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003b40:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <HAL_ADC_MspInit+0xd8>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003b46:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <HAL_ADC_MspInit+0xd8>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b4c:	480d      	ldr	r0, [pc, #52]	; (8003b84 <HAL_ADC_MspInit+0xd8>)
 8003b4e:	f002 fc6b 	bl	8006428 <HAL_DMA_Init>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8003b58:	f7ff ff7e 	bl	8003a58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <HAL_ADC_MspInit+0xd8>)
 8003b60:	639a      	str	r2, [r3, #56]	; 0x38
 8003b62:	4a08      	ldr	r2, [pc, #32]	; (8003b84 <HAL_ADC_MspInit+0xd8>)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	2012      	movs	r0, #18
 8003b6e:	f002 fad8 	bl	8006122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003b72:	2012      	movs	r0, #18
 8003b74:	f002 faf1 	bl	800615a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b78:	bf00      	nop
 8003b7a:	3728      	adds	r7, #40	; 0x28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000
 8003b84:	20000330 	.word	0x20000330
 8003b88:	40020008 	.word	0x40020008

08003b8c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b08a      	sub	sp, #40	; 0x28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b94:	f107 0314 	add.w	r3, r7, #20
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	609a      	str	r2, [r3, #8]
 8003ba0:	60da      	str	r2, [r3, #12]
 8003ba2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a19      	ldr	r2, [pc, #100]	; (8003c10 <HAL_DAC_MspInit+0x84>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d12c      	bne.n	8003c08 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003bae:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <HAL_DAC_MspInit+0x88>)
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	4a18      	ldr	r2, [pc, #96]	; (8003c14 <HAL_DAC_MspInit+0x88>)
 8003bb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003bb8:	61d3      	str	r3, [r2, #28]
 8003bba:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <HAL_DAC_MspInit+0x88>)
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc6:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <HAL_DAC_MspInit+0x88>)
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	4a12      	ldr	r2, [pc, #72]	; (8003c14 <HAL_DAC_MspInit+0x88>)
 8003bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd0:	6153      	str	r3, [r2, #20]
 8003bd2:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <HAL_DAC_MspInit+0x88>)
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003bde:	2310      	movs	r3, #16
 8003be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003be2:	2303      	movs	r3, #3
 8003be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bea:	f107 0314 	add.w	r3, r7, #20
 8003bee:	4619      	mov	r1, r3
 8003bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bf4:	f002 fe42 	bl	800687c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	2036      	movs	r0, #54	; 0x36
 8003bfe:	f002 fa90 	bl	8006122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c02:	2036      	movs	r0, #54	; 0x36
 8003c04:	f002 faa9 	bl	800615a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003c08:	bf00      	nop
 8003c0a:	3728      	adds	r7, #40	; 0x28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40007400 	.word	0x40007400
 8003c14:	40021000 	.word	0x40021000

08003c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08a      	sub	sp, #40	; 0x28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
 8003c2c:	60da      	str	r2, [r3, #12]
 8003c2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a2a      	ldr	r2, [pc, #168]	; (8003ce0 <HAL_I2C_MspInit+0xc8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d14d      	bne.n	8003cd6 <HAL_I2C_MspInit+0xbe>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c3a:	4b2a      	ldr	r3, [pc, #168]	; (8003ce4 <HAL_I2C_MspInit+0xcc>)
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	4a29      	ldr	r2, [pc, #164]	; (8003ce4 <HAL_I2C_MspInit+0xcc>)
 8003c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c44:	6153      	str	r3, [r2, #20]
 8003c46:	4b27      	ldr	r3, [pc, #156]	; (8003ce4 <HAL_I2C_MspInit+0xcc>)
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c52:	23c0      	movs	r3, #192	; 0xc0
 8003c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c56:	2312      	movs	r3, #18
 8003c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c62:	2304      	movs	r3, #4
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c66:	f107 0314 	add.w	r3, r7, #20
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	481e      	ldr	r0, [pc, #120]	; (8003ce8 <HAL_I2C_MspInit+0xd0>)
 8003c6e:	f002 fe05 	bl	800687c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c72:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <HAL_I2C_MspInit+0xcc>)
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	4a1b      	ldr	r2, [pc, #108]	; (8003ce4 <HAL_I2C_MspInit+0xcc>)
 8003c78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c7c:	61d3      	str	r3, [r2, #28]
 8003c7e:	4b19      	ldr	r3, [pc, #100]	; (8003ce4 <HAL_I2C_MspInit+0xcc>)
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8003c8a:	4b18      	ldr	r3, [pc, #96]	; (8003cec <HAL_I2C_MspInit+0xd4>)
 8003c8c:	4a18      	ldr	r2, [pc, #96]	; (8003cf0 <HAL_I2C_MspInit+0xd8>)
 8003c8e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c90:	4b16      	ldr	r3, [pc, #88]	; (8003cec <HAL_I2C_MspInit+0xd4>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <HAL_I2C_MspInit+0xd4>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c9c:	4b13      	ldr	r3, [pc, #76]	; (8003cec <HAL_I2C_MspInit+0xd4>)
 8003c9e:	2280      	movs	r2, #128	; 0x80
 8003ca0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ca2:	4b12      	ldr	r3, [pc, #72]	; (8003cec <HAL_I2C_MspInit+0xd4>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ca8:	4b10      	ldr	r3, [pc, #64]	; (8003cec <HAL_I2C_MspInit+0xd4>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003cae:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <HAL_I2C_MspInit+0xd4>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cb4:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <HAL_I2C_MspInit+0xd4>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003cba:	480c      	ldr	r0, [pc, #48]	; (8003cec <HAL_I2C_MspInit+0xd4>)
 8003cbc:	f002 fbb4 	bl	8006428 <HAL_DMA_Init>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_I2C_MspInit+0xb2>
    {
      Error_Handler();
 8003cc6:	f7ff fec7 	bl	8003a58 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a07      	ldr	r2, [pc, #28]	; (8003cec <HAL_I2C_MspInit+0xd4>)
 8003cce:	63da      	str	r2, [r3, #60]	; 0x3c
 8003cd0:	4a06      	ldr	r2, [pc, #24]	; (8003cec <HAL_I2C_MspInit+0xd4>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003cd6:	bf00      	nop
 8003cd8:	3728      	adds	r7, #40	; 0x28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40005400 	.word	0x40005400
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	48000400 	.word	0x48000400
 8003cec:	200003d4 	.word	0x200003d4
 8003cf0:	40020080 	.word	0x40020080

08003cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d04:	d114      	bne.n	8003d30 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d06:	4b22      	ldr	r3, [pc, #136]	; (8003d90 <HAL_TIM_Base_MspInit+0x9c>)
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	4a21      	ldr	r2, [pc, #132]	; (8003d90 <HAL_TIM_Base_MspInit+0x9c>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	61d3      	str	r3, [r2, #28]
 8003d12:	4b1f      	ldr	r3, [pc, #124]	; (8003d90 <HAL_TIM_Base_MspInit+0x9c>)
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2100      	movs	r1, #0
 8003d22:	201c      	movs	r0, #28
 8003d24:	f002 f9fd 	bl	8006122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d28:	201c      	movs	r0, #28
 8003d2a:	f002 fa16 	bl	800615a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003d2e:	e02a      	b.n	8003d86 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a17      	ldr	r2, [pc, #92]	; (8003d94 <HAL_TIM_Base_MspInit+0xa0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d114      	bne.n	8003d64 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <HAL_TIM_Base_MspInit+0x9c>)
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	4a14      	ldr	r2, [pc, #80]	; (8003d90 <HAL_TIM_Base_MspInit+0x9c>)
 8003d40:	f043 0302 	orr.w	r3, r3, #2
 8003d44:	61d3      	str	r3, [r2, #28]
 8003d46:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <HAL_TIM_Base_MspInit+0x9c>)
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003d52:	2200      	movs	r2, #0
 8003d54:	2100      	movs	r1, #0
 8003d56:	201d      	movs	r0, #29
 8003d58:	f002 f9e3 	bl	8006122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003d5c:	201d      	movs	r0, #29
 8003d5e:	f002 f9fc 	bl	800615a <HAL_NVIC_EnableIRQ>
}
 8003d62:	e010      	b.n	8003d86 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a0b      	ldr	r2, [pc, #44]	; (8003d98 <HAL_TIM_Base_MspInit+0xa4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d10b      	bne.n	8003d86 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d6e:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <HAL_TIM_Base_MspInit+0x9c>)
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	4a07      	ldr	r2, [pc, #28]	; (8003d90 <HAL_TIM_Base_MspInit+0x9c>)
 8003d74:	f043 0304 	orr.w	r3, r3, #4
 8003d78:	61d3      	str	r3, [r2, #28]
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <HAL_TIM_Base_MspInit+0x9c>)
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
}
 8003d86:	bf00      	nop
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40000400 	.word	0x40000400
 8003d98:	40000800 	.word	0x40000800

08003d9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08a      	sub	sp, #40	; 0x28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da4:	f107 0314 	add.w	r3, r7, #20
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	609a      	str	r2, [r3, #8]
 8003db0:	60da      	str	r2, [r3, #12]
 8003db2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dbc:	d11d      	bne.n	8003dfa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dbe:	4b34      	ldr	r3, [pc, #208]	; (8003e90 <HAL_TIM_MspPostInit+0xf4>)
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	4a33      	ldr	r2, [pc, #204]	; (8003e90 <HAL_TIM_MspPostInit+0xf4>)
 8003dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dc8:	6153      	str	r3, [r2, #20]
 8003dca:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <HAL_TIM_MspPostInit+0xf4>)
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003dd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de4:	2300      	movs	r3, #0
 8003de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003de8:	2301      	movs	r3, #1
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dec:	f107 0314 	add.w	r3, r7, #20
 8003df0:	4619      	mov	r1, r3
 8003df2:	4828      	ldr	r0, [pc, #160]	; (8003e94 <HAL_TIM_MspPostInit+0xf8>)
 8003df4:	f002 fd42 	bl	800687c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003df8:	e045      	b.n	8003e86 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM3)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a26      	ldr	r2, [pc, #152]	; (8003e98 <HAL_TIM_MspPostInit+0xfc>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d11d      	bne.n	8003e40 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e04:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <HAL_TIM_MspPostInit+0xf4>)
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	4a21      	ldr	r2, [pc, #132]	; (8003e90 <HAL_TIM_MspPostInit+0xf4>)
 8003e0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e0e:	6153      	str	r3, [r2, #20]
 8003e10:	4b1f      	ldr	r3, [pc, #124]	; (8003e90 <HAL_TIM_MspPostInit+0xf4>)
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8003e1c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e22:	2302      	movs	r3, #2
 8003e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e32:	f107 0314 	add.w	r3, r7, #20
 8003e36:	4619      	mov	r1, r3
 8003e38:	4818      	ldr	r0, [pc, #96]	; (8003e9c <HAL_TIM_MspPostInit+0x100>)
 8003e3a:	f002 fd1f 	bl	800687c <HAL_GPIO_Init>
}
 8003e3e:	e022      	b.n	8003e86 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM4)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a16      	ldr	r2, [pc, #88]	; (8003ea0 <HAL_TIM_MspPostInit+0x104>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d11d      	bne.n	8003e86 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e4a:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <HAL_TIM_MspPostInit+0xf4>)
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	4a10      	ldr	r2, [pc, #64]	; (8003e90 <HAL_TIM_MspPostInit+0xf4>)
 8003e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e54:	6153      	str	r3, [r2, #20]
 8003e56:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <HAL_TIM_MspPostInit+0xf4>)
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	60bb      	str	r3, [r7, #8]
 8003e60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e70:	2300      	movs	r3, #0
 8003e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003e74:	230a      	movs	r3, #10
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e78:	f107 0314 	add.w	r3, r7, #20
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e82:	f002 fcfb 	bl	800687c <HAL_GPIO_Init>
}
 8003e86:	bf00      	nop
 8003e88:	3728      	adds	r7, #40	; 0x28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
 8003e94:	48000400 	.word	0x48000400
 8003e98:	40000400 	.word	0x40000400
 8003e9c:	48000800 	.word	0x48000800
 8003ea0:	40000800 	.word	0x40000800

08003ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08a      	sub	sp, #40	; 0x28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eac:	f107 0314 	add.w	r3, r7, #20
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	60da      	str	r2, [r3, #12]
 8003eba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a2e      	ldr	r2, [pc, #184]	; (8003f7c <HAL_UART_MspInit+0xd8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d156      	bne.n	8003f74 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ec6:	4b2e      	ldr	r3, [pc, #184]	; (8003f80 <HAL_UART_MspInit+0xdc>)
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	4a2d      	ldr	r2, [pc, #180]	; (8003f80 <HAL_UART_MspInit+0xdc>)
 8003ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed0:	61d3      	str	r3, [r2, #28]
 8003ed2:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <HAL_UART_MspInit+0xdc>)
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ede:	4b28      	ldr	r3, [pc, #160]	; (8003f80 <HAL_UART_MspInit+0xdc>)
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	4a27      	ldr	r2, [pc, #156]	; (8003f80 <HAL_UART_MspInit+0xdc>)
 8003ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ee8:	6153      	str	r3, [r2, #20]
 8003eea:	4b25      	ldr	r3, [pc, #148]	; (8003f80 <HAL_UART_MspInit+0xdc>)
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003ef6:	230c      	movs	r3, #12
 8003ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003efa:	2302      	movs	r3, #2
 8003efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f02:	2300      	movs	r3, #0
 8003f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f06:	2307      	movs	r3, #7
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f0a:	f107 0314 	add.w	r3, r7, #20
 8003f0e:	4619      	mov	r1, r3
 8003f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f14:	f002 fcb2 	bl	800687c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003f18:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <HAL_UART_MspInit+0xe0>)
 8003f1a:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <HAL_UART_MspInit+0xe4>)
 8003f1c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f1e:	4b19      	ldr	r3, [pc, #100]	; (8003f84 <HAL_UART_MspInit+0xe0>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f24:	4b17      	ldr	r3, [pc, #92]	; (8003f84 <HAL_UART_MspInit+0xe0>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f2a:	4b16      	ldr	r3, [pc, #88]	; (8003f84 <HAL_UART_MspInit+0xe0>)
 8003f2c:	2280      	movs	r2, #128	; 0x80
 8003f2e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f30:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <HAL_UART_MspInit+0xe0>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f36:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <HAL_UART_MspInit+0xe0>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003f3c:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <HAL_UART_MspInit+0xe0>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f42:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <HAL_UART_MspInit+0xe0>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003f48:	480e      	ldr	r0, [pc, #56]	; (8003f84 <HAL_UART_MspInit+0xe0>)
 8003f4a:	f002 fa6d 	bl	8006428 <HAL_DMA_Init>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8003f54:	f7ff fd80 	bl	8003a58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <HAL_UART_MspInit+0xe0>)
 8003f5c:	671a      	str	r2, [r3, #112]	; 0x70
 8003f5e:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <HAL_UART_MspInit+0xe0>)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003f64:	2200      	movs	r2, #0
 8003f66:	2100      	movs	r1, #0
 8003f68:	2026      	movs	r0, #38	; 0x26
 8003f6a:	f002 f8da 	bl	8006122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f6e:	2026      	movs	r0, #38	; 0x26
 8003f70:	f002 f8f3 	bl	800615a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003f74:	bf00      	nop
 8003f76:	3728      	adds	r7, #40	; 0x28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40004400 	.word	0x40004400
 8003f80:	40021000 	.word	0x40021000
 8003f84:	20000580 	.word	0x20000580
 8003f88:	4002006c 	.word	0x4002006c

08003f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f90:	e7fe      	b.n	8003f90 <NMI_Handler+0x4>

08003f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f92:	b480      	push	{r7}
 8003f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f96:	e7fe      	b.n	8003f96 <HardFault_Handler+0x4>

08003f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f9c:	e7fe      	b.n	8003f9c <MemManage_Handler+0x4>

08003f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fa2:	e7fe      	b.n	8003fa2 <BusFault_Handler+0x4>

08003fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fa8:	e7fe      	b.n	8003fa8 <UsageFault_Handler+0x4>

08003faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003faa:	b480      	push	{r7}
 8003fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fae:	bf00      	nop
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fbc:	bf00      	nop
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fca:	bf00      	nop
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fd8:	f000 f9d2 	bl	8004380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fdc:	bf00      	nop
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	state=1;
 8003fe4:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <EXTI1_IRQHandler+0x14>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	701a      	strb	r2, [r3, #0]
	//stateincr++;
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003fea:	2002      	movs	r0, #2
 8003fec:	f002 fe00 	bl	8006bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003ff0:	bf00      	nop
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20000730 	.word	0x20000730

08003ff8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ffc:	4802      	ldr	r0, [pc, #8]	; (8004008 <DMA1_Channel1_IRQHandler+0x10>)
 8003ffe:	f002 fb30 	bl	8006662 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20000330 	.word	0x20000330

0800400c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004010:	4802      	ldr	r0, [pc, #8]	; (800401c <DMA1_Channel6_IRQHandler+0x10>)
 8004012:	f002 fb26 	bl	8006662 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000580 	.word	0x20000580

08004020 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004024:	4802      	ldr	r0, [pc, #8]	; (8004030 <DMA1_Channel7_IRQHandler+0x10>)
 8004026:	f002 fb1c 	bl	8006662 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800402a:	bf00      	nop
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	200003d4 	.word	0x200003d4

08004034 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004038:	4802      	ldr	r0, [pc, #8]	; (8004044 <ADC1_2_IRQHandler+0x10>)
 800403a:	f000 fe9b 	bl	8004d74 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	200002e0 	.word	0x200002e0

08004048 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */


		  //buttonpressed();
	state=1;
 800404c:	4b07      	ldr	r3, [pc, #28]	; (800406c <EXTI9_5_IRQHandler+0x24>)
 800404e:	2201      	movs	r2, #1
 8004050:	701a      	strb	r2, [r3, #0]




  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004052:	2080      	movs	r0, #128	; 0x80
 8004054:	f002 fdcc 	bl	8006bf0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004058:	f44f 7080 	mov.w	r0, #256	; 0x100
 800405c:	f002 fdc8 	bl	8006bf0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004060:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004064:	f002 fdc4 	bl	8006bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004068:	bf00      	nop
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20000730 	.word	0x20000730

08004070 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004074:	4802      	ldr	r0, [pc, #8]	; (8004080 <TIM2_IRQHandler+0x10>)
 8004076:	f005 f9cb 	bl	8009410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000418 	.word	0x20000418

08004084 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004088:	4802      	ldr	r0, [pc, #8]	; (8004094 <TIM3_IRQHandler+0x10>)
 800408a:	f005 f9c1 	bl	8009410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20000464 	.word	0x20000464

08004098 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800409c:	4802      	ldr	r0, [pc, #8]	; (80040a8 <USART2_IRQHandler+0x10>)
 800409e:	f006 fad7 	bl	800a650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80040a2:	bf00      	nop
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	200004fc 	.word	0x200004fc

080040ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80040b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80040b4:	f002 fd9c 	bl	8006bf0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80040b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80040bc:	f002 fd98 	bl	8006bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */


			azoFlag =1 ;
 80040c0:	4b04      	ldr	r3, [pc, #16]	; (80040d4 <EXTI15_10_IRQHandler+0x28>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]
			azoincr++;
 80040c6:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <EXTI15_10_IRQHandler+0x2c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3301      	adds	r3, #1
 80040cc:	4a02      	ldr	r2, [pc, #8]	; (80040d8 <EXTI15_10_IRQHandler+0x2c>)
 80040ce:	6013      	str	r3, [r2, #0]
//      // do something here
//    	azoFlag =1 ;
//    }
//  }
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80040d0:	bf00      	nop
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	200000b0 	.word	0x200000b0
 80040d8:	20000734 	.word	0x20000734

080040dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80040e0:	4802      	ldr	r0, [pc, #8]	; (80040ec <TIM6_DAC_IRQHandler+0x10>)
 80040e2:	f002 f8f0 	bl	80062c6 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000374 	.word	0x20000374

080040f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return 1;
 80040f4:	2301      	movs	r3, #1
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <_kill>:

int _kill(int pid, int sig)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800410a:	f007 fbe1 	bl	800b8d0 <__errno>
 800410e:	4603      	mov	r3, r0
 8004110:	2216      	movs	r2, #22
 8004112:	601a      	str	r2, [r3, #0]
  return -1;
 8004114:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <_exit>:

void _exit (int status)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004128:	f04f 31ff 	mov.w	r1, #4294967295
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7ff ffe7 	bl	8004100 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004132:	e7fe      	b.n	8004132 <_exit+0x12>

08004134 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	e00a      	b.n	800415c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004146:	f3af 8000 	nop.w
 800414a:	4601      	mov	r1, r0
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	60ba      	str	r2, [r7, #8]
 8004152:	b2ca      	uxtb	r2, r1
 8004154:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	3301      	adds	r3, #1
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	429a      	cmp	r2, r3
 8004162:	dbf0      	blt.n	8004146 <_read+0x12>
  }

  return len;
 8004164:	687b      	ldr	r3, [r7, #4]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b086      	sub	sp, #24
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	e009      	b.n	8004194 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	60ba      	str	r2, [r7, #8]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	3301      	adds	r3, #1
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	429a      	cmp	r2, r3
 800419a:	dbf1      	blt.n	8004180 <_write+0x12>
  }
  return len;
 800419c:	687b      	ldr	r3, [r7, #4]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <_close>:

int _close(int file)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80041ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041ce:	605a      	str	r2, [r3, #4]
  return 0;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <_isatty>:

int _isatty(int file)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80041e6:	2301      	movs	r3, #1
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
	...

08004210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004218:	4a14      	ldr	r2, [pc, #80]	; (800426c <_sbrk+0x5c>)
 800421a:	4b15      	ldr	r3, [pc, #84]	; (8004270 <_sbrk+0x60>)
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004224:	4b13      	ldr	r3, [pc, #76]	; (8004274 <_sbrk+0x64>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d102      	bne.n	8004232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800422c:	4b11      	ldr	r3, [pc, #68]	; (8004274 <_sbrk+0x64>)
 800422e:	4a12      	ldr	r2, [pc, #72]	; (8004278 <_sbrk+0x68>)
 8004230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004232:	4b10      	ldr	r3, [pc, #64]	; (8004274 <_sbrk+0x64>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4413      	add	r3, r2
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	429a      	cmp	r2, r3
 800423e:	d207      	bcs.n	8004250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004240:	f007 fb46 	bl	800b8d0 <__errno>
 8004244:	4603      	mov	r3, r0
 8004246:	220c      	movs	r2, #12
 8004248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800424a:	f04f 33ff 	mov.w	r3, #4294967295
 800424e:	e009      	b.n	8004264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004250:	4b08      	ldr	r3, [pc, #32]	; (8004274 <_sbrk+0x64>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004256:	4b07      	ldr	r3, [pc, #28]	; (8004274 <_sbrk+0x64>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4413      	add	r3, r2
 800425e:	4a05      	ldr	r2, [pc, #20]	; (8004274 <_sbrk+0x64>)
 8004260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004262:	68fb      	ldr	r3, [r7, #12]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20010000 	.word	0x20010000
 8004270:	00000400 	.word	0x00000400
 8004274:	20000738 	.word	0x20000738
 8004278:	20000750 	.word	0x20000750

0800427c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004280:	4b06      	ldr	r3, [pc, #24]	; (800429c <SystemInit+0x20>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	4a05      	ldr	r2, [pc, #20]	; (800429c <SystemInit+0x20>)
 8004288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800428c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004290:	bf00      	nop
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80042a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042a4:	480d      	ldr	r0, [pc, #52]	; (80042dc <LoopForever+0x6>)
  ldr r1, =_edata
 80042a6:	490e      	ldr	r1, [pc, #56]	; (80042e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80042a8:	4a0e      	ldr	r2, [pc, #56]	; (80042e4 <LoopForever+0xe>)
  movs r3, #0
 80042aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042ac:	e002      	b.n	80042b4 <LoopCopyDataInit>

080042ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042b2:	3304      	adds	r3, #4

080042b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042b8:	d3f9      	bcc.n	80042ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042ba:	4a0b      	ldr	r2, [pc, #44]	; (80042e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80042bc:	4c0b      	ldr	r4, [pc, #44]	; (80042ec <LoopForever+0x16>)
  movs r3, #0
 80042be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042c0:	e001      	b.n	80042c6 <LoopFillZerobss>

080042c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042c4:	3204      	adds	r2, #4

080042c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042c8:	d3fb      	bcc.n	80042c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80042ca:	f7ff ffd7 	bl	800427c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042ce:	f007 fb05 	bl	800b8dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80042d2:	f7fe fcf5 	bl	8002cc0 <main>

080042d6 <LoopForever>:

LoopForever:
    b LoopForever
 80042d6:	e7fe      	b.n	80042d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80042d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80042dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042e0:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 80042e4:	0800fc70 	.word	0x0800fc70
  ldr r2, =_sbss
 80042e8:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 80042ec:	20000750 	.word	0x20000750

080042f0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80042f0:	e7fe      	b.n	80042f0 <ADC3_IRQHandler>
	...

080042f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042f8:	4b08      	ldr	r3, [pc, #32]	; (800431c <HAL_Init+0x28>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a07      	ldr	r2, [pc, #28]	; (800431c <HAL_Init+0x28>)
 80042fe:	f043 0310 	orr.w	r3, r3, #16
 8004302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004304:	2003      	movs	r0, #3
 8004306:	f001 ff01 	bl	800610c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800430a:	2000      	movs	r0, #0
 800430c:	f000 f808 	bl	8004320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004310:	f7ff fba8 	bl	8003a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40022000 	.word	0x40022000

08004320 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004328:	4b12      	ldr	r3, [pc, #72]	; (8004374 <HAL_InitTick+0x54>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	4b12      	ldr	r3, [pc, #72]	; (8004378 <HAL_InitTick+0x58>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	4619      	mov	r1, r3
 8004332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004336:	fbb3 f3f1 	udiv	r3, r3, r1
 800433a:	fbb2 f3f3 	udiv	r3, r2, r3
 800433e:	4618      	mov	r0, r3
 8004340:	f001 ff19 	bl	8006176 <HAL_SYSTICK_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e00e      	b.n	800436c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b0f      	cmp	r3, #15
 8004352:	d80a      	bhi.n	800436a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004354:	2200      	movs	r2, #0
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	f04f 30ff 	mov.w	r0, #4294967295
 800435c:	f001 fee1 	bl	8006122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004360:	4a06      	ldr	r2, [pc, #24]	; (800437c <HAL_InitTick+0x5c>)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	e000      	b.n	800436c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	200000b4 	.word	0x200000b4
 8004378:	200000bc 	.word	0x200000bc
 800437c:	200000b8 	.word	0x200000b8

08004380 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004384:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <HAL_IncTick+0x20>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <HAL_IncTick+0x24>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4413      	add	r3, r2
 8004390:	4a04      	ldr	r2, [pc, #16]	; (80043a4 <HAL_IncTick+0x24>)
 8004392:	6013      	str	r3, [r2, #0]
}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	200000bc 	.word	0x200000bc
 80043a4:	2000073c 	.word	0x2000073c

080043a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80043ac:	4b03      	ldr	r3, [pc, #12]	; (80043bc <HAL_GetTick+0x14>)
 80043ae:	681b      	ldr	r3, [r3, #0]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	2000073c 	.word	0x2000073c

080043c0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043c8:	f7ff ffee 	bl	80043a8 <HAL_GetTick>
 80043cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d8:	d005      	beq.n	80043e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043da:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <HAL_Delay+0x44>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4413      	add	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80043e6:	bf00      	nop
 80043e8:	f7ff ffde 	bl	80043a8 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d8f7      	bhi.n	80043e8 <HAL_Delay+0x28>
  {
  }
}
 80043f8:	bf00      	nop
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	200000bc 	.word	0x200000bc

08004408 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b09a      	sub	sp, #104	; 0x68
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e1e3      	b.n	8004840 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	2b00      	cmp	r3, #0
 8004488:	d176      	bne.n	8004578 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	2b00      	cmp	r3, #0
 8004490:	d152      	bne.n	8004538 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff fafd 	bl	8003aac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d13b      	bne.n	8004538 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f001 fc37 	bl	8005d34 <ADC_Disable>
 80044c6:	4603      	mov	r3, r0
 80044c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d12f      	bne.n	8004538 <HAL_ADC_Init+0xe0>
 80044d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d12b      	bne.n	8004538 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80044e8:	f023 0302 	bic.w	r3, r3, #2
 80044ec:	f043 0202 	orr.w	r2, r3, #2
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004502:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004512:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004514:	4b92      	ldr	r3, [pc, #584]	; (8004760 <HAL_ADC_Init+0x308>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a92      	ldr	r2, [pc, #584]	; (8004764 <HAL_ADC_Init+0x30c>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	0c9a      	lsrs	r2, r3, #18
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800452a:	e002      	b.n	8004532 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	3b01      	subs	r3, #1
 8004530:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f9      	bne.n	800452c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d007      	beq.n	8004556 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004554:	d110      	bne.n	8004578 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f023 0312 	bic.w	r3, r3, #18
 800455e:	f043 0210 	orr.w	r2, r3, #16
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456a:	f043 0201 	orr.w	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b00      	cmp	r3, #0
 8004582:	f040 8150 	bne.w	8004826 <HAL_ADC_Init+0x3ce>
 8004586:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800458a:	2b00      	cmp	r3, #0
 800458c:	f040 814b 	bne.w	8004826 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800459a:	2b00      	cmp	r3, #0
 800459c:	f040 8143 	bne.w	8004826 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80045a8:	f043 0202 	orr.w	r2, r3, #2
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045b8:	d004      	beq.n	80045c4 <HAL_ADC_Init+0x16c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a6a      	ldr	r2, [pc, #424]	; (8004768 <HAL_ADC_Init+0x310>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d101      	bne.n	80045c8 <HAL_ADC_Init+0x170>
 80045c4:	4b69      	ldr	r3, [pc, #420]	; (800476c <HAL_ADC_Init+0x314>)
 80045c6:	e000      	b.n	80045ca <HAL_ADC_Init+0x172>
 80045c8:	4b69      	ldr	r3, [pc, #420]	; (8004770 <HAL_ADC_Init+0x318>)
 80045ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045d4:	d102      	bne.n	80045dc <HAL_ADC_Init+0x184>
 80045d6:	4b64      	ldr	r3, [pc, #400]	; (8004768 <HAL_ADC_Init+0x310>)
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	e01a      	b.n	8004612 <HAL_ADC_Init+0x1ba>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a61      	ldr	r2, [pc, #388]	; (8004768 <HAL_ADC_Init+0x310>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d103      	bne.n	80045ee <HAL_ADC_Init+0x196>
 80045e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	e011      	b.n	8004612 <HAL_ADC_Init+0x1ba>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a60      	ldr	r2, [pc, #384]	; (8004774 <HAL_ADC_Init+0x31c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d102      	bne.n	80045fe <HAL_ADC_Init+0x1a6>
 80045f8:	4b5f      	ldr	r3, [pc, #380]	; (8004778 <HAL_ADC_Init+0x320>)
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	e009      	b.n	8004612 <HAL_ADC_Init+0x1ba>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a5d      	ldr	r2, [pc, #372]	; (8004778 <HAL_ADC_Init+0x320>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d102      	bne.n	800460e <HAL_ADC_Init+0x1b6>
 8004608:	4b5a      	ldr	r3, [pc, #360]	; (8004774 <HAL_ADC_Init+0x31c>)
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	e001      	b.n	8004612 <HAL_ADC_Init+0x1ba>
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	2b01      	cmp	r3, #1
 800461e:	d108      	bne.n	8004632 <HAL_ADC_Init+0x1da>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b01      	cmp	r3, #1
 800462c:	d101      	bne.n	8004632 <HAL_ADC_Init+0x1da>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <HAL_ADC_Init+0x1dc>
 8004632:	2300      	movs	r3, #0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d11c      	bne.n	8004672 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004638:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800463a:	2b00      	cmp	r3, #0
 800463c:	d010      	beq.n	8004660 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b01      	cmp	r3, #1
 8004648:	d107      	bne.n	800465a <HAL_ADC_Init+0x202>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_ADC_Init+0x202>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <HAL_ADC_Init+0x204>
 800465a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800465c:	2b00      	cmp	r3, #0
 800465e:	d108      	bne.n	8004672 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	431a      	orrs	r2, r3
 800466e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004670:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	7e5b      	ldrb	r3, [r3, #25]
 8004676:	035b      	lsls	r3, r3, #13
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800467c:	2a01      	cmp	r2, #1
 800467e:	d002      	beq.n	8004686 <HAL_ADC_Init+0x22e>
 8004680:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004684:	e000      	b.n	8004688 <HAL_ADC_Init+0x230>
 8004686:	2200      	movs	r2, #0
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	4313      	orrs	r3, r2
 8004696:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004698:	4313      	orrs	r3, r2
 800469a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d11b      	bne.n	80046de <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	7e5b      	ldrb	r3, [r3, #25]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	3b01      	subs	r3, #1
 80046b4:	045a      	lsls	r2, r3, #17
 80046b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046be:	663b      	str	r3, [r7, #96]	; 0x60
 80046c0:	e00d      	b.n	80046de <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80046ca:	f043 0220 	orr.w	r2, r3, #32
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d6:	f043 0201 	orr.w	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d054      	beq.n	8004790 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a22      	ldr	r2, [pc, #136]	; (8004774 <HAL_ADC_Init+0x31c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d004      	beq.n	80046fa <HAL_ADC_Init+0x2a2>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a20      	ldr	r2, [pc, #128]	; (8004778 <HAL_ADC_Init+0x320>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d140      	bne.n	800477c <HAL_ADC_Init+0x324>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004702:	d02a      	beq.n	800475a <HAL_ADC_Init+0x302>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800470c:	d022      	beq.n	8004754 <HAL_ADC_Init+0x2fc>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004716:	d01a      	beq.n	800474e <HAL_ADC_Init+0x2f6>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8004720:	d012      	beq.n	8004748 <HAL_ADC_Init+0x2f0>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800472a:	d00a      	beq.n	8004742 <HAL_ADC_Init+0x2ea>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004730:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8004734:	d002      	beq.n	800473c <HAL_ADC_Init+0x2e4>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	e023      	b.n	8004784 <HAL_ADC_Init+0x32c>
 800473c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004740:	e020      	b.n	8004784 <HAL_ADC_Init+0x32c>
 8004742:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004746:	e01d      	b.n	8004784 <HAL_ADC_Init+0x32c>
 8004748:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800474c:	e01a      	b.n	8004784 <HAL_ADC_Init+0x32c>
 800474e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004752:	e017      	b.n	8004784 <HAL_ADC_Init+0x32c>
 8004754:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004758:	e014      	b.n	8004784 <HAL_ADC_Init+0x32c>
 800475a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800475e:	e011      	b.n	8004784 <HAL_ADC_Init+0x32c>
 8004760:	200000b4 	.word	0x200000b4
 8004764:	431bde83 	.word	0x431bde83
 8004768:	50000100 	.word	0x50000100
 800476c:	50000300 	.word	0x50000300
 8004770:	50000700 	.word	0x50000700
 8004774:	50000400 	.word	0x50000400
 8004778:	50000500 	.word	0x50000500
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004788:	4313      	orrs	r3, r2
 800478a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800478c:	4313      	orrs	r3, r2
 800478e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 030c 	and.w	r3, r3, #12
 800479a:	2b00      	cmp	r3, #0
 800479c:	d114      	bne.n	80047c8 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6812      	ldr	r2, [r2, #0]
 80047a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ac:	f023 0302 	bic.w	r3, r3, #2
 80047b0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	7e1b      	ldrb	r3, [r3, #24]
 80047b6:	039a      	lsls	r2, r3, #14
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	4313      	orrs	r3, r2
 80047c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047c4:	4313      	orrs	r3, r2
 80047c6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	4b1e      	ldr	r3, [pc, #120]	; (8004848 <HAL_ADC_Init+0x3f0>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6812      	ldr	r2, [r2, #0]
 80047d6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80047d8:	430b      	orrs	r3, r1
 80047da:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d10c      	bne.n	80047fe <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	f023 010f 	bic.w	r1, r3, #15
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	1e5a      	subs	r2, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	631a      	str	r2, [r3, #48]	; 0x30
 80047fc:	e007      	b.n	800480e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 020f 	bic.w	r2, r2, #15
 800480c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	f023 0303 	bic.w	r3, r3, #3
 800481c:	f043 0201 	orr.w	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	641a      	str	r2, [r3, #64]	; 0x40
 8004824:	e00a      	b.n	800483c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f023 0312 	bic.w	r3, r3, #18
 800482e:	f043 0210 	orr.w	r2, r3, #16
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8004836:	2301      	movs	r3, #1
 8004838:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800483c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004840:	4618      	mov	r0, r3
 8004842:	3768      	adds	r7, #104	; 0x68
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	fff0c007 	.word	0xfff0c007

0800484c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	2b00      	cmp	r3, #0
 8004864:	f040 80f9 	bne.w	8004a5a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <HAL_ADC_Start+0x2a>
 8004872:	2302      	movs	r3, #2
 8004874:	e0f4      	b.n	8004a60 <HAL_ADC_Start+0x214>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f001 f9f4 	bl	8005c6c <ADC_Enable>
 8004884:	4603      	mov	r3, r0
 8004886:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f040 80e0 	bne.w	8004a50 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004898:	f023 0301 	bic.w	r3, r3, #1
 800489c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048ac:	d004      	beq.n	80048b8 <HAL_ADC_Start+0x6c>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a6d      	ldr	r2, [pc, #436]	; (8004a68 <HAL_ADC_Start+0x21c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d106      	bne.n	80048c6 <HAL_ADC_Start+0x7a>
 80048b8:	4b6c      	ldr	r3, [pc, #432]	; (8004a6c <HAL_ADC_Start+0x220>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d010      	beq.n	80048e6 <HAL_ADC_Start+0x9a>
 80048c4:	e005      	b.n	80048d2 <HAL_ADC_Start+0x86>
 80048c6:	4b6a      	ldr	r3, [pc, #424]	; (8004a70 <HAL_ADC_Start+0x224>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <HAL_ADC_Start+0x9a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048da:	d004      	beq.n	80048e6 <HAL_ADC_Start+0x9a>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a64      	ldr	r2, [pc, #400]	; (8004a74 <HAL_ADC_Start+0x228>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d115      	bne.n	8004912 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d036      	beq.n	800496e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004908:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004910:	e02d      	b.n	800496e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004926:	d004      	beq.n	8004932 <HAL_ADC_Start+0xe6>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a4e      	ldr	r2, [pc, #312]	; (8004a68 <HAL_ADC_Start+0x21c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d10a      	bne.n	8004948 <HAL_ADC_Start+0xfc>
 8004932:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf14      	ite	ne
 8004940:	2301      	movne	r3, #1
 8004942:	2300      	moveq	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	e008      	b.n	800495a <HAL_ADC_Start+0x10e>
 8004948:	4b4a      	ldr	r3, [pc, #296]	; (8004a74 <HAL_ADC_Start+0x228>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf14      	ite	ne
 8004954:	2301      	movne	r3, #1
 8004956:	2300      	moveq	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004966:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497a:	d106      	bne.n	800498a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004980:	f023 0206 	bic.w	r2, r3, #6
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	645a      	str	r2, [r3, #68]	; 0x44
 8004988:	e002      	b.n	8004990 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	221c      	movs	r2, #28
 800499e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049a8:	d004      	beq.n	80049b4 <HAL_ADC_Start+0x168>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a2e      	ldr	r2, [pc, #184]	; (8004a68 <HAL_ADC_Start+0x21c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d106      	bne.n	80049c2 <HAL_ADC_Start+0x176>
 80049b4:	4b2d      	ldr	r3, [pc, #180]	; (8004a6c <HAL_ADC_Start+0x220>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 031f 	and.w	r3, r3, #31
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d03e      	beq.n	8004a3e <HAL_ADC_Start+0x1f2>
 80049c0:	e005      	b.n	80049ce <HAL_ADC_Start+0x182>
 80049c2:	4b2b      	ldr	r3, [pc, #172]	; (8004a70 <HAL_ADC_Start+0x224>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 031f 	and.w	r3, r3, #31
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d037      	beq.n	8004a3e <HAL_ADC_Start+0x1f2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049d6:	d004      	beq.n	80049e2 <HAL_ADC_Start+0x196>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a22      	ldr	r2, [pc, #136]	; (8004a68 <HAL_ADC_Start+0x21c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d106      	bne.n	80049f0 <HAL_ADC_Start+0x1a4>
 80049e2:	4b22      	ldr	r3, [pc, #136]	; (8004a6c <HAL_ADC_Start+0x220>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	2b05      	cmp	r3, #5
 80049ec:	d027      	beq.n	8004a3e <HAL_ADC_Start+0x1f2>
 80049ee:	e005      	b.n	80049fc <HAL_ADC_Start+0x1b0>
 80049f0:	4b1f      	ldr	r3, [pc, #124]	; (8004a70 <HAL_ADC_Start+0x224>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	2b05      	cmp	r3, #5
 80049fa:	d020      	beq.n	8004a3e <HAL_ADC_Start+0x1f2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a04:	d004      	beq.n	8004a10 <HAL_ADC_Start+0x1c4>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a17      	ldr	r2, [pc, #92]	; (8004a68 <HAL_ADC_Start+0x21c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d106      	bne.n	8004a1e <HAL_ADC_Start+0x1d2>
 8004a10:	4b16      	ldr	r3, [pc, #88]	; (8004a6c <HAL_ADC_Start+0x220>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 031f 	and.w	r3, r3, #31
 8004a18:	2b09      	cmp	r3, #9
 8004a1a:	d010      	beq.n	8004a3e <HAL_ADC_Start+0x1f2>
 8004a1c:	e005      	b.n	8004a2a <HAL_ADC_Start+0x1de>
 8004a1e:	4b14      	ldr	r3, [pc, #80]	; (8004a70 <HAL_ADC_Start+0x224>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 031f 	and.w	r3, r3, #31
 8004a26:	2b09      	cmp	r3, #9
 8004a28:	d009      	beq.n	8004a3e <HAL_ADC_Start+0x1f2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a32:	d004      	beq.n	8004a3e <HAL_ADC_Start+0x1f2>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a0e      	ldr	r2, [pc, #56]	; (8004a74 <HAL_ADC_Start+0x228>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d10f      	bne.n	8004a5e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f042 0204 	orr.w	r2, r2, #4
 8004a4c:	609a      	str	r2, [r3, #8]
 8004a4e:	e006      	b.n	8004a5e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a58:	e001      	b.n	8004a5e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	50000100 	.word	0x50000100
 8004a6c:	50000300 	.word	0x50000300
 8004a70:	50000700 	.word	0x50000700
 8004a74:	50000400 	.word	0x50000400

08004a78 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f040 80f7 	bne.w	8004c86 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_ADC_Start_DMA+0x2e>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e0f2      	b.n	8004c8c <HAL_ADC_Start_DMA+0x214>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ab6:	d004      	beq.n	8004ac2 <HAL_ADC_Start_DMA+0x4a>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a75      	ldr	r2, [pc, #468]	; (8004c94 <HAL_ADC_Start_DMA+0x21c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d109      	bne.n	8004ad6 <HAL_ADC_Start_DMA+0x5e>
 8004ac2:	4b75      	ldr	r3, [pc, #468]	; (8004c98 <HAL_ADC_Start_DMA+0x220>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 031f 	and.w	r3, r3, #31
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bf0c      	ite	eq
 8004ace:	2301      	moveq	r3, #1
 8004ad0:	2300      	movne	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	e008      	b.n	8004ae8 <HAL_ADC_Start_DMA+0x70>
 8004ad6:	4b71      	ldr	r3, [pc, #452]	; (8004c9c <HAL_ADC_Start_DMA+0x224>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 031f 	and.w	r3, r3, #31
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bf0c      	ite	eq
 8004ae2:	2301      	moveq	r3, #1
 8004ae4:	2300      	movne	r3, #0
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80c5 	beq.w	8004c78 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f001 f8bc 	bl	8005c6c <ADC_Enable>
 8004af4:	4603      	mov	r3, r0
 8004af6:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f040 80b7 	bne.w	8004c6e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b1c:	d004      	beq.n	8004b28 <HAL_ADC_Start_DMA+0xb0>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a5c      	ldr	r2, [pc, #368]	; (8004c94 <HAL_ADC_Start_DMA+0x21c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d106      	bne.n	8004b36 <HAL_ADC_Start_DMA+0xbe>
 8004b28:	4b5b      	ldr	r3, [pc, #364]	; (8004c98 <HAL_ADC_Start_DMA+0x220>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 031f 	and.w	r3, r3, #31
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d010      	beq.n	8004b56 <HAL_ADC_Start_DMA+0xde>
 8004b34:	e005      	b.n	8004b42 <HAL_ADC_Start_DMA+0xca>
 8004b36:	4b59      	ldr	r3, [pc, #356]	; (8004c9c <HAL_ADC_Start_DMA+0x224>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 031f 	and.w	r3, r3, #31
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <HAL_ADC_Start_DMA+0xde>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b4a:	d004      	beq.n	8004b56 <HAL_ADC_Start_DMA+0xde>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a53      	ldr	r2, [pc, #332]	; (8004ca0 <HAL_ADC_Start_DMA+0x228>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d115      	bne.n	8004b82 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d036      	beq.n	8004bde <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004b80:	e02d      	b.n	8004bde <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b96:	d004      	beq.n	8004ba2 <HAL_ADC_Start_DMA+0x12a>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a3d      	ldr	r2, [pc, #244]	; (8004c94 <HAL_ADC_Start_DMA+0x21c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d10a      	bne.n	8004bb8 <HAL_ADC_Start_DMA+0x140>
 8004ba2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	bf14      	ite	ne
 8004bb0:	2301      	movne	r3, #1
 8004bb2:	2300      	moveq	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	e008      	b.n	8004bca <HAL_ADC_Start_DMA+0x152>
 8004bb8:	4b39      	ldr	r3, [pc, #228]	; (8004ca0 <HAL_ADC_Start_DMA+0x228>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	bf14      	ite	ne
 8004bc4:	2301      	movne	r3, #1
 8004bc6:	2300      	moveq	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d007      	beq.n	8004bde <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004bd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bea:	d106      	bne.n	8004bfa <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf0:	f023 0206 	bic.w	r2, r3, #6
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	645a      	str	r2, [r3, #68]	; 0x44
 8004bf8:	e002      	b.n	8004c00 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	4a25      	ldr	r2, [pc, #148]	; (8004ca4 <HAL_ADC_Start_DMA+0x22c>)
 8004c0e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	4a24      	ldr	r2, [pc, #144]	; (8004ca8 <HAL_ADC_Start_DMA+0x230>)
 8004c16:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	4a23      	ldr	r2, [pc, #140]	; (8004cac <HAL_ADC_Start_DMA+0x234>)
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	221c      	movs	r2, #28
 8004c26:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0210 	orr.w	r2, r2, #16
 8004c36:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3340      	adds	r3, #64	; 0x40
 8004c52:	4619      	mov	r1, r3
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f001 fc2d 	bl	80064b6 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0204 	orr.w	r2, r2, #4
 8004c6a:	609a      	str	r2, [r3, #8]
 8004c6c:	e00d      	b.n	8004c8a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c76:	e008      	b.n	8004c8a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c84:	e001      	b.n	8004c8a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004c86:	2302      	movs	r3, #2
 8004c88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	50000100 	.word	0x50000100
 8004c98:	50000300 	.word	0x50000300
 8004c9c:	50000700 	.word	0x50000700
 8004ca0:	50000400 	.word	0x50000400
 8004ca4:	08005ba1 	.word	0x08005ba1
 8004ca8:	08005c1b 	.word	0x08005c1b
 8004cac:	08005c37 	.word	0x08005c37

08004cb0 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_ADC_Stop_DMA+0x1a>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e050      	b.n	8004d6c <HAL_ADC_Stop_DMA+0xbc>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004cd2:	216c      	movs	r1, #108	; 0x6c
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f001 f893 	bl	8005e00 <ADC_ConversionStop>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d13e      	bne.n	8004d62 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0201 	bic.w	r2, r2, #1
 8004cf2:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d10f      	bne.n	8004d20 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	4618      	mov	r0, r3
 8004d06:	f001 fc35 	bl	8006574 <HAL_DMA_Abort>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0210 	bic.w	r2, r2, #16
 8004d2e:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d105      	bne.n	8004d42 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fffc 	bl	8005d34 <ADC_Disable>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	73fb      	strb	r3, [r7, #15]
 8004d40:	e002      	b.n	8004d48 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fff6 	bl	8005d34 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004d56:	f023 0301 	bic.w	r3, r3, #1
 8004d5a:	f043 0201 	orr.w	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d106      	bne.n	8004da4 <HAL_ADC_IRQHandler+0x30>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d00f      	beq.n	8004dc4 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004dae:	2b08      	cmp	r3, #8
 8004db0:	f040 80c0 	bne.w	8004f34 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	f040 80b8 	bne.w	8004f34 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d105      	bne.n	8004ddc <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004de4:	d004      	beq.n	8004df0 <HAL_ADC_IRQHandler+0x7c>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a8e      	ldr	r2, [pc, #568]	; (8005024 <HAL_ADC_IRQHandler+0x2b0>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d106      	bne.n	8004dfe <HAL_ADC_IRQHandler+0x8a>
 8004df0:	4b8d      	ldr	r3, [pc, #564]	; (8005028 <HAL_ADC_IRQHandler+0x2b4>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 031f 	and.w	r3, r3, #31
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d03e      	beq.n	8004e7a <HAL_ADC_IRQHandler+0x106>
 8004dfc:	e005      	b.n	8004e0a <HAL_ADC_IRQHandler+0x96>
 8004dfe:	4b8b      	ldr	r3, [pc, #556]	; (800502c <HAL_ADC_IRQHandler+0x2b8>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d037      	beq.n	8004e7a <HAL_ADC_IRQHandler+0x106>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e12:	d004      	beq.n	8004e1e <HAL_ADC_IRQHandler+0xaa>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a82      	ldr	r2, [pc, #520]	; (8005024 <HAL_ADC_IRQHandler+0x2b0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d106      	bne.n	8004e2c <HAL_ADC_IRQHandler+0xb8>
 8004e1e:	4b82      	ldr	r3, [pc, #520]	; (8005028 <HAL_ADC_IRQHandler+0x2b4>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 031f 	and.w	r3, r3, #31
 8004e26:	2b05      	cmp	r3, #5
 8004e28:	d027      	beq.n	8004e7a <HAL_ADC_IRQHandler+0x106>
 8004e2a:	e005      	b.n	8004e38 <HAL_ADC_IRQHandler+0xc4>
 8004e2c:	4b7f      	ldr	r3, [pc, #508]	; (800502c <HAL_ADC_IRQHandler+0x2b8>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	2b05      	cmp	r3, #5
 8004e36:	d020      	beq.n	8004e7a <HAL_ADC_IRQHandler+0x106>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e40:	d004      	beq.n	8004e4c <HAL_ADC_IRQHandler+0xd8>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a77      	ldr	r2, [pc, #476]	; (8005024 <HAL_ADC_IRQHandler+0x2b0>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d106      	bne.n	8004e5a <HAL_ADC_IRQHandler+0xe6>
 8004e4c:	4b76      	ldr	r3, [pc, #472]	; (8005028 <HAL_ADC_IRQHandler+0x2b4>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 031f 	and.w	r3, r3, #31
 8004e54:	2b09      	cmp	r3, #9
 8004e56:	d010      	beq.n	8004e7a <HAL_ADC_IRQHandler+0x106>
 8004e58:	e005      	b.n	8004e66 <HAL_ADC_IRQHandler+0xf2>
 8004e5a:	4b74      	ldr	r3, [pc, #464]	; (800502c <HAL_ADC_IRQHandler+0x2b8>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 031f 	and.w	r3, r3, #31
 8004e62:	2b09      	cmp	r3, #9
 8004e64:	d009      	beq.n	8004e7a <HAL_ADC_IRQHandler+0x106>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e6e:	d004      	beq.n	8004e7a <HAL_ADC_IRQHandler+0x106>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a6e      	ldr	r2, [pc, #440]	; (8005030 <HAL_ADC_IRQHandler+0x2bc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d104      	bne.n	8004e84 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	613b      	str	r3, [r7, #16]
 8004e82:	e00f      	b.n	8004ea4 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e8c:	d004      	beq.n	8004e98 <HAL_ADC_IRQHandler+0x124>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a64      	ldr	r2, [pc, #400]	; (8005024 <HAL_ADC_IRQHandler+0x2b0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d102      	bne.n	8004e9e <HAL_ADC_IRQHandler+0x12a>
 8004e98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004e9c:	e000      	b.n	8004ea0 <HAL_ADC_IRQHandler+0x12c>
 8004e9e:	4b64      	ldr	r3, [pc, #400]	; (8005030 <HAL_ADC_IRQHandler+0x2bc>)
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d139      	bne.n	8004f26 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d134      	bne.n	8004f26 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d12d      	bne.n	8004f26 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d11a      	bne.n	8004f0e <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 020c 	bic.w	r2, r2, #12
 8004ee6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d112      	bne.n	8004f26 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	f043 0201 	orr.w	r2, r3, #1
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	641a      	str	r2, [r3, #64]	; 0x40
 8004f0c:	e00b      	b.n	8004f26 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	f043 0210 	orr.w	r2, r3, #16
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1e:	f043 0201 	orr.w	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff fa6e 	bl	8004408 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	220c      	movs	r2, #12
 8004f32:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d106      	bne.n	8004f50 <HAL_ADC_IRQHandler+0x1dc>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d00f      	beq.n	8004f70 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8004f5a:	2b40      	cmp	r3, #64	; 0x40
 8004f5c:	f040 8143 	bne.w	80051e6 <HAL_ADC_IRQHandler+0x472>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6a:	2b40      	cmp	r3, #64	; 0x40
 8004f6c:	f040 813b 	bne.w	80051e6 <HAL_ADC_IRQHandler+0x472>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f84:	d004      	beq.n	8004f90 <HAL_ADC_IRQHandler+0x21c>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a26      	ldr	r2, [pc, #152]	; (8005024 <HAL_ADC_IRQHandler+0x2b0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d106      	bne.n	8004f9e <HAL_ADC_IRQHandler+0x22a>
 8004f90:	4b25      	ldr	r3, [pc, #148]	; (8005028 <HAL_ADC_IRQHandler+0x2b4>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 031f 	and.w	r3, r3, #31
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d03e      	beq.n	800501a <HAL_ADC_IRQHandler+0x2a6>
 8004f9c:	e005      	b.n	8004faa <HAL_ADC_IRQHandler+0x236>
 8004f9e:	4b23      	ldr	r3, [pc, #140]	; (800502c <HAL_ADC_IRQHandler+0x2b8>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 031f 	and.w	r3, r3, #31
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d037      	beq.n	800501a <HAL_ADC_IRQHandler+0x2a6>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fb2:	d004      	beq.n	8004fbe <HAL_ADC_IRQHandler+0x24a>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a1a      	ldr	r2, [pc, #104]	; (8005024 <HAL_ADC_IRQHandler+0x2b0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d106      	bne.n	8004fcc <HAL_ADC_IRQHandler+0x258>
 8004fbe:	4b1a      	ldr	r3, [pc, #104]	; (8005028 <HAL_ADC_IRQHandler+0x2b4>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	2b05      	cmp	r3, #5
 8004fc8:	d027      	beq.n	800501a <HAL_ADC_IRQHandler+0x2a6>
 8004fca:	e005      	b.n	8004fd8 <HAL_ADC_IRQHandler+0x264>
 8004fcc:	4b17      	ldr	r3, [pc, #92]	; (800502c <HAL_ADC_IRQHandler+0x2b8>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 031f 	and.w	r3, r3, #31
 8004fd4:	2b05      	cmp	r3, #5
 8004fd6:	d020      	beq.n	800501a <HAL_ADC_IRQHandler+0x2a6>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fe0:	d004      	beq.n	8004fec <HAL_ADC_IRQHandler+0x278>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a0f      	ldr	r2, [pc, #60]	; (8005024 <HAL_ADC_IRQHandler+0x2b0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d106      	bne.n	8004ffa <HAL_ADC_IRQHandler+0x286>
 8004fec:	4b0e      	ldr	r3, [pc, #56]	; (8005028 <HAL_ADC_IRQHandler+0x2b4>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	2b09      	cmp	r3, #9
 8004ff6:	d010      	beq.n	800501a <HAL_ADC_IRQHandler+0x2a6>
 8004ff8:	e005      	b.n	8005006 <HAL_ADC_IRQHandler+0x292>
 8004ffa:	4b0c      	ldr	r3, [pc, #48]	; (800502c <HAL_ADC_IRQHandler+0x2b8>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	2b09      	cmp	r3, #9
 8005004:	d009      	beq.n	800501a <HAL_ADC_IRQHandler+0x2a6>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800500e:	d004      	beq.n	800501a <HAL_ADC_IRQHandler+0x2a6>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a06      	ldr	r2, [pc, #24]	; (8005030 <HAL_ADC_IRQHandler+0x2bc>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d10c      	bne.n	8005034 <HAL_ADC_IRQHandler+0x2c0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	e017      	b.n	8005054 <HAL_ADC_IRQHandler+0x2e0>
 8005024:	50000100 	.word	0x50000100
 8005028:	50000300 	.word	0x50000300
 800502c:	50000700 	.word	0x50000700
 8005030:	50000400 	.word	0x50000400
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800503c:	d004      	beq.n	8005048 <HAL_ADC_IRQHandler+0x2d4>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a5b      	ldr	r2, [pc, #364]	; (80051b0 <HAL_ADC_IRQHandler+0x43c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d102      	bne.n	800504e <HAL_ADC_IRQHandler+0x2da>
 8005048:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800504c:	e000      	b.n	8005050 <HAL_ADC_IRQHandler+0x2dc>
 800504e:	4b59      	ldr	r3, [pc, #356]	; (80051b4 <HAL_ADC_IRQHandler+0x440>)
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800505e:	2b00      	cmp	r3, #0
 8005060:	f040 80ba 	bne.w	80051d8 <HAL_ADC_IRQHandler+0x464>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00d      	beq.n	800508a <HAL_ADC_IRQHandler+0x316>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8005078:	2b00      	cmp	r3, #0
 800507a:	f040 80ad 	bne.w	80051d8 <HAL_ADC_IRQHandler+0x464>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8005084:	2b00      	cmp	r3, #0
 8005086:	f040 80a7 	bne.w	80051d8 <HAL_ADC_IRQHandler+0x464>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b40      	cmp	r3, #64	; 0x40
 8005096:	f040 809f 	bne.w	80051d8 <HAL_ADC_IRQHandler+0x464>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050a2:	d004      	beq.n	80050ae <HAL_ADC_IRQHandler+0x33a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a41      	ldr	r2, [pc, #260]	; (80051b0 <HAL_ADC_IRQHandler+0x43c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d106      	bne.n	80050bc <HAL_ADC_IRQHandler+0x348>
 80050ae:	4b42      	ldr	r3, [pc, #264]	; (80051b8 <HAL_ADC_IRQHandler+0x444>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 031f 	and.w	r3, r3, #31
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d03e      	beq.n	8005138 <HAL_ADC_IRQHandler+0x3c4>
 80050ba:	e005      	b.n	80050c8 <HAL_ADC_IRQHandler+0x354>
 80050bc:	4b3f      	ldr	r3, [pc, #252]	; (80051bc <HAL_ADC_IRQHandler+0x448>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 031f 	and.w	r3, r3, #31
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d037      	beq.n	8005138 <HAL_ADC_IRQHandler+0x3c4>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050d0:	d004      	beq.n	80050dc <HAL_ADC_IRQHandler+0x368>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a36      	ldr	r2, [pc, #216]	; (80051b0 <HAL_ADC_IRQHandler+0x43c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d106      	bne.n	80050ea <HAL_ADC_IRQHandler+0x376>
 80050dc:	4b36      	ldr	r3, [pc, #216]	; (80051b8 <HAL_ADC_IRQHandler+0x444>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 031f 	and.w	r3, r3, #31
 80050e4:	2b06      	cmp	r3, #6
 80050e6:	d027      	beq.n	8005138 <HAL_ADC_IRQHandler+0x3c4>
 80050e8:	e005      	b.n	80050f6 <HAL_ADC_IRQHandler+0x382>
 80050ea:	4b34      	ldr	r3, [pc, #208]	; (80051bc <HAL_ADC_IRQHandler+0x448>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 031f 	and.w	r3, r3, #31
 80050f2:	2b06      	cmp	r3, #6
 80050f4:	d020      	beq.n	8005138 <HAL_ADC_IRQHandler+0x3c4>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050fe:	d004      	beq.n	800510a <HAL_ADC_IRQHandler+0x396>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a2a      	ldr	r2, [pc, #168]	; (80051b0 <HAL_ADC_IRQHandler+0x43c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d106      	bne.n	8005118 <HAL_ADC_IRQHandler+0x3a4>
 800510a:	4b2b      	ldr	r3, [pc, #172]	; (80051b8 <HAL_ADC_IRQHandler+0x444>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 031f 	and.w	r3, r3, #31
 8005112:	2b07      	cmp	r3, #7
 8005114:	d010      	beq.n	8005138 <HAL_ADC_IRQHandler+0x3c4>
 8005116:	e005      	b.n	8005124 <HAL_ADC_IRQHandler+0x3b0>
 8005118:	4b28      	ldr	r3, [pc, #160]	; (80051bc <HAL_ADC_IRQHandler+0x448>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 031f 	and.w	r3, r3, #31
 8005120:	2b07      	cmp	r3, #7
 8005122:	d009      	beq.n	8005138 <HAL_ADC_IRQHandler+0x3c4>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800512c:	d004      	beq.n	8005138 <HAL_ADC_IRQHandler+0x3c4>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a20      	ldr	r2, [pc, #128]	; (80051b4 <HAL_ADC_IRQHandler+0x440>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d104      	bne.n	8005142 <HAL_ADC_IRQHandler+0x3ce>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	e00f      	b.n	8005162 <HAL_ADC_IRQHandler+0x3ee>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800514a:	d004      	beq.n	8005156 <HAL_ADC_IRQHandler+0x3e2>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a17      	ldr	r2, [pc, #92]	; (80051b0 <HAL_ADC_IRQHandler+0x43c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d102      	bne.n	800515c <HAL_ADC_IRQHandler+0x3e8>
 8005156:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800515a:	e000      	b.n	800515e <HAL_ADC_IRQHandler+0x3ea>
 800515c:	4b15      	ldr	r3, [pc, #84]	; (80051b4 <HAL_ADC_IRQHandler+0x440>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d135      	bne.n	80051d8 <HAL_ADC_IRQHandler+0x464>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d122      	bne.n	80051c0 <HAL_ADC_IRQHandler+0x44c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005188:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d11a      	bne.n	80051d8 <HAL_ADC_IRQHandler+0x464>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f043 0201 	orr.w	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	641a      	str	r2, [r3, #64]	; 0x40
 80051ae:	e013      	b.n	80051d8 <HAL_ADC_IRQHandler+0x464>
 80051b0:	50000100 	.word	0x50000100
 80051b4:	50000400 	.word	0x50000400
 80051b8:	50000300 	.word	0x50000300
 80051bc:	50000700 	.word	0x50000700
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	f043 0210 	orr.w	r2, r3, #16
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d0:	f043 0201 	orr.w	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f8db 	bl	8005394 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2260      	movs	r2, #96	; 0x60
 80051e4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f0:	2b80      	cmp	r3, #128	; 0x80
 80051f2:	d113      	bne.n	800521c <HAL_ADC_IRQHandler+0x4a8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fe:	2b80      	cmp	r3, #128	; 0x80
 8005200:	d10c      	bne.n	800521c <HAL_ADC_IRQHandler+0x4a8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff f90e 	bl	8004430 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2280      	movs	r2, #128	; 0x80
 800521a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522a:	d115      	bne.n	8005258 <HAL_ADC_IRQHandler+0x4e4>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800523a:	d10d      	bne.n	8005258 <HAL_ADC_IRQHandler+0x4e4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f8b7 	bl	80053bc <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005256:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005266:	d115      	bne.n	8005294 <HAL_ADC_IRQHandler+0x520>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005276:	d10d      	bne.n	8005294 <HAL_ADC_IRQHandler+0x520>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f8a3 	bl	80053d0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005292:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b10      	cmp	r3, #16
 80052a0:	d149      	bne.n	8005336 <HAL_ADC_IRQHandler+0x5c2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f003 0310 	and.w	r3, r3, #16
 80052ac:	2b10      	cmp	r3, #16
 80052ae:	d142      	bne.n	8005336 <HAL_ADC_IRQHandler+0x5c2>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d102      	bne.n	80052be <HAL_ADC_IRQHandler+0x54a>
    {
      overrun_error = 1U;
 80052b8:	2301      	movs	r3, #1
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	e025      	b.n	800530a <HAL_ADC_IRQHandler+0x596>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052c6:	d004      	beq.n	80052d2 <HAL_ADC_IRQHandler+0x55e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a2e      	ldr	r2, [pc, #184]	; (8005388 <HAL_ADC_IRQHandler+0x614>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d101      	bne.n	80052d6 <HAL_ADC_IRQHandler+0x562>
 80052d2:	4b2e      	ldr	r3, [pc, #184]	; (800538c <HAL_ADC_IRQHandler+0x618>)
 80052d4:	e000      	b.n	80052d8 <HAL_ADC_IRQHandler+0x564>
 80052d6:	4b2e      	ldr	r3, [pc, #184]	; (8005390 <HAL_ADC_IRQHandler+0x61c>)
 80052d8:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d109      	bne.n	80052fa <HAL_ADC_IRQHandler+0x586>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d10a      	bne.n	800530a <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 80052f4:	2301      	movs	r3, #1
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	e007      	b.n	800530a <HAL_ADC_IRQHandler+0x596>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <HAL_ADC_IRQHandler+0x596>
        {
          overrun_error = 1U;  
 8005306:	2301      	movs	r3, #1
 8005308:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d10e      	bne.n	800532e <HAL_ADC_IRQHandler+0x5ba>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005320:	f043 0202 	orr.w	r2, r3, #2
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff f88b 	bl	8004444 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2210      	movs	r2, #16
 8005334:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005344:	d11b      	bne.n	800537e <HAL_ADC_IRQHandler+0x60a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005354:	d113      	bne.n	800537e <HAL_ADC_IRQHandler+0x60a>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	f043 0208 	orr.w	r2, r3, #8
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005376:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f815 	bl	80053a8 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800537e:	bf00      	nop
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	50000100 	.word	0x50000100
 800538c:	50000300 	.word	0x50000300
 8005390:	50000700 	.word	0x50000700

08005394 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b09b      	sub	sp, #108	; 0x6c
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_ADC_ConfigChannel+0x22>
 8005402:	2302      	movs	r3, #2
 8005404:	e2ca      	b.n	800599c <HAL_ADC_ConfigChannel+0x5b8>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	f040 82ae 	bne.w	800597a <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b04      	cmp	r3, #4
 8005424:	d81c      	bhi.n	8005460 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	4613      	mov	r3, r2
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	4413      	add	r3, r2
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	461a      	mov	r2, r3
 800543a:	231f      	movs	r3, #31
 800543c:	4093      	lsls	r3, r2
 800543e:	43db      	mvns	r3, r3
 8005440:	4019      	ands	r1, r3
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6818      	ldr	r0, [r3, #0]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	4613      	mov	r3, r2
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	4413      	add	r3, r2
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	fa00 f203 	lsl.w	r2, r0, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	631a      	str	r2, [r3, #48]	; 0x30
 800545e:	e063      	b.n	8005528 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2b09      	cmp	r3, #9
 8005466:	d81e      	bhi.n	80054a6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	4613      	mov	r3, r2
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	4413      	add	r3, r2
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	3b1e      	subs	r3, #30
 800547c:	221f      	movs	r2, #31
 800547e:	fa02 f303 	lsl.w	r3, r2, r3
 8005482:	43db      	mvns	r3, r3
 8005484:	4019      	ands	r1, r3
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	4613      	mov	r3, r2
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	4413      	add	r3, r2
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	3b1e      	subs	r3, #30
 8005498:	fa00 f203 	lsl.w	r2, r0, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	635a      	str	r2, [r3, #52]	; 0x34
 80054a4:	e040      	b.n	8005528 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b0e      	cmp	r3, #14
 80054ac:	d81e      	bhi.n	80054ec <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	4613      	mov	r3, r2
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	4413      	add	r3, r2
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	3b3c      	subs	r3, #60	; 0x3c
 80054c2:	221f      	movs	r2, #31
 80054c4:	fa02 f303 	lsl.w	r3, r2, r3
 80054c8:	43db      	mvns	r3, r3
 80054ca:	4019      	ands	r1, r3
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	4613      	mov	r3, r2
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	4413      	add	r3, r2
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	3b3c      	subs	r3, #60	; 0x3c
 80054de:	fa00 f203 	lsl.w	r2, r0, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	639a      	str	r2, [r3, #56]	; 0x38
 80054ea:	e01d      	b.n	8005528 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	4613      	mov	r3, r2
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	4413      	add	r3, r2
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	3b5a      	subs	r3, #90	; 0x5a
 8005500:	221f      	movs	r2, #31
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	43db      	mvns	r3, r3
 8005508:	4019      	ands	r1, r3
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	6818      	ldr	r0, [r3, #0]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	4613      	mov	r3, r2
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	4413      	add	r3, r2
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	3b5a      	subs	r3, #90	; 0x5a
 800551c:	fa00 f203 	lsl.w	r2, r0, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 030c 	and.w	r3, r3, #12
 8005532:	2b00      	cmp	r3, #0
 8005534:	f040 80e5 	bne.w	8005702 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b09      	cmp	r3, #9
 800553e:	d91c      	bls.n	800557a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6999      	ldr	r1, [r3, #24]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4613      	mov	r3, r2
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	4413      	add	r3, r2
 8005550:	3b1e      	subs	r3, #30
 8005552:	2207      	movs	r2, #7
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	43db      	mvns	r3, r3
 800555a:	4019      	ands	r1, r3
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	6898      	ldr	r0, [r3, #8]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	4613      	mov	r3, r2
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	4413      	add	r3, r2
 800556a:	3b1e      	subs	r3, #30
 800556c:	fa00 f203 	lsl.w	r2, r0, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	619a      	str	r2, [r3, #24]
 8005578:	e019      	b.n	80055ae <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6959      	ldr	r1, [r3, #20]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	4613      	mov	r3, r2
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	4413      	add	r3, r2
 800558a:	2207      	movs	r2, #7
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	43db      	mvns	r3, r3
 8005592:	4019      	ands	r1, r3
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	6898      	ldr	r0, [r3, #8]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	4413      	add	r3, r2
 80055a2:	fa00 f203 	lsl.w	r2, r0, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	08db      	lsrs	r3, r3, #3
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	fa02 f303 	lsl.w	r3, r2, r3
 80055c4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d84f      	bhi.n	8005670 <HAL_ADC_ConfigChannel+0x28c>
 80055d0:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <HAL_ADC_ConfigChannel+0x1f4>)
 80055d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d6:	bf00      	nop
 80055d8:	080055e9 	.word	0x080055e9
 80055dc:	0800560b 	.word	0x0800560b
 80055e0:	0800562d 	.word	0x0800562d
 80055e4:	0800564f 	.word	0x0800564f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80055ee:	4b9a      	ldr	r3, [pc, #616]	; (8005858 <HAL_ADC_ConfigChannel+0x474>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	6812      	ldr	r2, [r2, #0]
 80055f6:	0691      	lsls	r1, r2, #26
 80055f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055fa:	430a      	orrs	r2, r1
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005606:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005608:	e07e      	b.n	8005708 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005610:	4b91      	ldr	r3, [pc, #580]	; (8005858 <HAL_ADC_ConfigChannel+0x474>)
 8005612:	4013      	ands	r3, r2
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	6812      	ldr	r2, [r2, #0]
 8005618:	0691      	lsls	r1, r2, #26
 800561a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800561c:	430a      	orrs	r2, r1
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005628:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800562a:	e06d      	b.n	8005708 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005632:	4b89      	ldr	r3, [pc, #548]	; (8005858 <HAL_ADC_ConfigChannel+0x474>)
 8005634:	4013      	ands	r3, r2
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	0691      	lsls	r1, r2, #26
 800563c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800563e:	430a      	orrs	r2, r1
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800564a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800564c:	e05c      	b.n	8005708 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005654:	4b80      	ldr	r3, [pc, #512]	; (8005858 <HAL_ADC_ConfigChannel+0x474>)
 8005656:	4013      	ands	r3, r2
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	6812      	ldr	r2, [r2, #0]
 800565c:	0691      	lsls	r1, r2, #26
 800565e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005660:	430a      	orrs	r2, r1
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800566c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800566e:	e04b      	b.n	8005708 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005676:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	069b      	lsls	r3, r3, #26
 8005680:	429a      	cmp	r2, r3
 8005682:	d107      	bne.n	8005694 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005692:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800569a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	069b      	lsls	r3, r3, #26
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d107      	bne.n	80056b8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056b6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	069b      	lsls	r3, r3, #26
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d107      	bne.n	80056dc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056da:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	069b      	lsls	r3, r3, #26
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d10a      	bne.n	8005706 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056fe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8005700:	e001      	b.n	8005706 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8005702:	bf00      	nop
 8005704:	e000      	b.n	8005708 <HAL_ADC_ConfigChannel+0x324>
      break;
 8005706:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	2b01      	cmp	r3, #1
 8005714:	d108      	bne.n	8005728 <HAL_ADC_ConfigChannel+0x344>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_ADC_ConfigChannel+0x344>
 8005724:	2301      	movs	r3, #1
 8005726:	e000      	b.n	800572a <HAL_ADC_ConfigChannel+0x346>
 8005728:	2300      	movs	r3, #0
 800572a:	2b00      	cmp	r3, #0
 800572c:	f040 8130 	bne.w	8005990 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d00f      	beq.n	8005758 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2201      	movs	r2, #1
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	43da      	mvns	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	400a      	ands	r2, r1
 8005752:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005756:	e049      	b.n	80057ec <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2201      	movs	r2, #1
 8005766:	409a      	lsls	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b09      	cmp	r3, #9
 8005778:	d91c      	bls.n	80057b4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6999      	ldr	r1, [r3, #24]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	4613      	mov	r3, r2
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	4413      	add	r3, r2
 800578a:	3b1b      	subs	r3, #27
 800578c:	2207      	movs	r2, #7
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43db      	mvns	r3, r3
 8005794:	4019      	ands	r1, r3
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	6898      	ldr	r0, [r3, #8]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	4613      	mov	r3, r2
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	4413      	add	r3, r2
 80057a4:	3b1b      	subs	r3, #27
 80057a6:	fa00 f203 	lsl.w	r2, r0, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	619a      	str	r2, [r3, #24]
 80057b2:	e01b      	b.n	80057ec <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6959      	ldr	r1, [r3, #20]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	4613      	mov	r3, r2
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	4413      	add	r3, r2
 80057c6:	2207      	movs	r2, #7
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	43db      	mvns	r3, r3
 80057ce:	4019      	ands	r1, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	6898      	ldr	r0, [r3, #8]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	4613      	mov	r3, r2
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	4413      	add	r3, r2
 80057e0:	fa00 f203 	lsl.w	r2, r0, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057f4:	d004      	beq.n	8005800 <HAL_ADC_ConfigChannel+0x41c>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a18      	ldr	r2, [pc, #96]	; (800585c <HAL_ADC_ConfigChannel+0x478>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d101      	bne.n	8005804 <HAL_ADC_ConfigChannel+0x420>
 8005800:	4b17      	ldr	r3, [pc, #92]	; (8005860 <HAL_ADC_ConfigChannel+0x47c>)
 8005802:	e000      	b.n	8005806 <HAL_ADC_ConfigChannel+0x422>
 8005804:	4b17      	ldr	r3, [pc, #92]	; (8005864 <HAL_ADC_ConfigChannel+0x480>)
 8005806:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b10      	cmp	r3, #16
 800580e:	d105      	bne.n	800581c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005818:	2b00      	cmp	r3, #0
 800581a:	d015      	beq.n	8005848 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005820:	2b11      	cmp	r3, #17
 8005822:	d105      	bne.n	8005830 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00b      	beq.n	8005848 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005834:	2b12      	cmp	r3, #18
 8005836:	f040 80ab 	bne.w	8005990 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800583a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005842:	2b00      	cmp	r3, #0
 8005844:	f040 80a4 	bne.w	8005990 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005850:	d10a      	bne.n	8005868 <HAL_ADC_ConfigChannel+0x484>
 8005852:	4b02      	ldr	r3, [pc, #8]	; (800585c <HAL_ADC_ConfigChannel+0x478>)
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	e022      	b.n	800589e <HAL_ADC_ConfigChannel+0x4ba>
 8005858:	83fff000 	.word	0x83fff000
 800585c:	50000100 	.word	0x50000100
 8005860:	50000300 	.word	0x50000300
 8005864:	50000700 	.word	0x50000700
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a4e      	ldr	r2, [pc, #312]	; (80059a8 <HAL_ADC_ConfigChannel+0x5c4>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d103      	bne.n	800587a <HAL_ADC_ConfigChannel+0x496>
 8005872:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	e011      	b.n	800589e <HAL_ADC_ConfigChannel+0x4ba>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a4b      	ldr	r2, [pc, #300]	; (80059ac <HAL_ADC_ConfigChannel+0x5c8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d102      	bne.n	800588a <HAL_ADC_ConfigChannel+0x4a6>
 8005884:	4b4a      	ldr	r3, [pc, #296]	; (80059b0 <HAL_ADC_ConfigChannel+0x5cc>)
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	e009      	b.n	800589e <HAL_ADC_ConfigChannel+0x4ba>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a48      	ldr	r2, [pc, #288]	; (80059b0 <HAL_ADC_ConfigChannel+0x5cc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d102      	bne.n	800589a <HAL_ADC_ConfigChannel+0x4b6>
 8005894:	4b45      	ldr	r3, [pc, #276]	; (80059ac <HAL_ADC_ConfigChannel+0x5c8>)
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	e001      	b.n	800589e <HAL_ADC_ConfigChannel+0x4ba>
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d108      	bne.n	80058be <HAL_ADC_ConfigChannel+0x4da>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d101      	bne.n	80058be <HAL_ADC_ConfigChannel+0x4da>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <HAL_ADC_ConfigChannel+0x4dc>
 80058be:	2300      	movs	r3, #0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d150      	bne.n	8005966 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80058c4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d010      	beq.n	80058ec <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d107      	bne.n	80058e6 <HAL_ADC_ConfigChannel+0x502>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d101      	bne.n	80058e6 <HAL_ADC_ConfigChannel+0x502>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e000      	b.n	80058e8 <HAL_ADC_ConfigChannel+0x504>
 80058e6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d13c      	bne.n	8005966 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b10      	cmp	r3, #16
 80058f2:	d11d      	bne.n	8005930 <HAL_ADC_ConfigChannel+0x54c>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058fc:	d118      	bne.n	8005930 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80058fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005908:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800590a:	4b2a      	ldr	r3, [pc, #168]	; (80059b4 <HAL_ADC_ConfigChannel+0x5d0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a2a      	ldr	r2, [pc, #168]	; (80059b8 <HAL_ADC_ConfigChannel+0x5d4>)
 8005910:	fba2 2303 	umull	r2, r3, r2, r3
 8005914:	0c9a      	lsrs	r2, r3, #18
 8005916:	4613      	mov	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005920:	e002      	b.n	8005928 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	3b01      	subs	r3, #1
 8005926:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1f9      	bne.n	8005922 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800592e:	e02e      	b.n	800598e <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b11      	cmp	r3, #17
 8005936:	d10b      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x56c>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005940:	d106      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800594a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800594c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800594e:	e01e      	b.n	800598e <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b12      	cmp	r3, #18
 8005956:	d11a      	bne.n	800598e <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005962:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005964:	e013      	b.n	800598e <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	f043 0220 	orr.w	r2, r3, #32
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005978:	e00a      	b.n	8005990 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	f043 0220 	orr.w	r2, r3, #32
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800598c:	e000      	b.n	8005990 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800598e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005998:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800599c:	4618      	mov	r0, r3
 800599e:	376c      	adds	r7, #108	; 0x6c
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	50000100 	.word	0x50000100
 80059ac:	50000400 	.word	0x50000400
 80059b0:	50000500 	.word	0x50000500
 80059b4:	200000b4 	.word	0x200000b4
 80059b8:	431bde83 	.word	0x431bde83

080059bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80059bc:	b480      	push	{r7}
 80059be:	b099      	sub	sp, #100	; 0x64
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059d4:	d102      	bne.n	80059dc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80059d6:	4b6d      	ldr	r3, [pc, #436]	; (8005b8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80059d8:	60bb      	str	r3, [r7, #8]
 80059da:	e01a      	b.n	8005a12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a6a      	ldr	r2, [pc, #424]	; (8005b8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d103      	bne.n	80059ee <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80059e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80059ea:	60bb      	str	r3, [r7, #8]
 80059ec:	e011      	b.n	8005a12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a67      	ldr	r2, [pc, #412]	; (8005b90 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d102      	bne.n	80059fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80059f8:	4b66      	ldr	r3, [pc, #408]	; (8005b94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80059fa:	60bb      	str	r3, [r7, #8]
 80059fc:	e009      	b.n	8005a12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a64      	ldr	r2, [pc, #400]	; (8005b94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d102      	bne.n	8005a0e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005a08:	4b61      	ldr	r3, [pc, #388]	; (8005b90 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005a0a:	60bb      	str	r3, [r7, #8]
 8005a0c:	e001      	b.n	8005a12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0b0      	b.n	8005b7e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8005a26:	2302      	movs	r3, #2
 8005a28:	e0a9      	b.n	8005b7e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f040 808d 	bne.w	8005b5c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 0304 	and.w	r3, r3, #4
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f040 8086 	bne.w	8005b5c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a58:	d004      	beq.n	8005a64 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a4b      	ldr	r2, [pc, #300]	; (8005b8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d101      	bne.n	8005a68 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005a64:	4b4c      	ldr	r3, [pc, #304]	; (8005b98 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8005a66:	e000      	b.n	8005a6a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005a68:	4b4c      	ldr	r3, [pc, #304]	; (8005b9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8005a6a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d040      	beq.n	8005af6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005a74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	6859      	ldr	r1, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a86:	035b      	lsls	r3, r3, #13
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a8e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d108      	bne.n	8005ab0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005aac:	2301      	movs	r3, #1
 8005aae:	e000      	b.n	8005ab2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d15c      	bne.n	8005b70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d107      	bne.n	8005ad2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d101      	bne.n	8005ad2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8005ad2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d14b      	bne.n	8005b70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005ad8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005ae0:	f023 030f 	bic.w	r3, r3, #15
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	6811      	ldr	r1, [r2, #0]
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	6892      	ldr	r2, [r2, #8]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	431a      	orrs	r2, r3
 8005af0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005af2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005af4:	e03c      	b.n	8005b70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005afe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b00:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 0303 	and.w	r3, r3, #3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d108      	bne.n	8005b22 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d101      	bne.n	8005b22 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e000      	b.n	8005b24 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005b22:	2300      	movs	r3, #0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d123      	bne.n	8005b70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d107      	bne.n	8005b44 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005b40:	2301      	movs	r3, #1
 8005b42:	e000      	b.n	8005b46 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8005b44:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d112      	bne.n	8005b70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005b52:	f023 030f 	bic.w	r3, r3, #15
 8005b56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b58:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b5a:	e009      	b.n	8005b70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	f043 0220 	orr.w	r2, r3, #32
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005b6e:	e000      	b.n	8005b72 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b70:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005b7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3764      	adds	r7, #100	; 0x64
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	50000100 	.word	0x50000100
 8005b90:	50000400 	.word	0x50000400
 8005b94:	50000500 	.word	0x50000500
 8005b98:	50000300 	.word	0x50000300
 8005b9c:	50000700 	.word	0x50000700

08005ba0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d126      	bne.n	8005c08 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d115      	bne.n	8005c00 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d111      	bne.n	8005c00 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d105      	bne.n	8005c00 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	f043 0201 	orr.w	r2, r3, #1
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f7fe fc01 	bl	8004408 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005c06:	e004      	b.n	8005c12 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	4798      	blx	r3
}
 8005c12:	bf00      	nop
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f7fe fbf7 	bl	800441c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8005c2e:	bf00      	nop
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b084      	sub	sp, #16
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c54:	f043 0204 	orr.w	r2, r3, #4
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f7fe fbf1 	bl	8004444 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c62:	bf00      	nop
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d108      	bne.n	8005c98 <ADC_Enable+0x2c>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <ADC_Enable+0x2c>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e000      	b.n	8005c9a <ADC_Enable+0x2e>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d143      	bne.n	8005d26 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	4b22      	ldr	r3, [pc, #136]	; (8005d30 <ADC_Enable+0xc4>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00d      	beq.n	8005cc8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb0:	f043 0210 	orr.w	r2, r3, #16
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbc:	f043 0201 	orr.w	r2, r3, #1
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e02f      	b.n	8005d28 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f042 0201 	orr.w	r2, r2, #1
 8005cd6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8005cd8:	f7fe fb66 	bl	80043a8 <HAL_GetTick>
 8005cdc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005cde:	e01b      	b.n	8005d18 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ce0:	f7fe fb62 	bl	80043a8 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d914      	bls.n	8005d18 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d00d      	beq.n	8005d18 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	f043 0210 	orr.w	r2, r3, #16
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0c:	f043 0201 	orr.w	r2, r3, #1
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e007      	b.n	8005d28 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d1dc      	bne.n	8005ce0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	8000003f 	.word	0x8000003f

08005d34 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d108      	bne.n	8005d60 <ADC_Disable+0x2c>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <ADC_Disable+0x2c>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e000      	b.n	8005d62 <ADC_Disable+0x2e>
 8005d60:	2300      	movs	r3, #0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d047      	beq.n	8005df6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f003 030d 	and.w	r3, r3, #13
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d10f      	bne.n	8005d94 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689a      	ldr	r2, [r3, #8]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0202 	orr.w	r2, r2, #2
 8005d82:	609a      	str	r2, [r3, #8]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2203      	movs	r2, #3
 8005d8a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8005d8c:	f7fe fb0c 	bl	80043a8 <HAL_GetTick>
 8005d90:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005d92:	e029      	b.n	8005de8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	f043 0210 	orr.w	r2, r3, #16
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da4:	f043 0201 	orr.w	r2, r3, #1
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e023      	b.n	8005df8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005db0:	f7fe fafa 	bl	80043a8 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d914      	bls.n	8005de8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d10d      	bne.n	8005de8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd0:	f043 0210 	orr.w	r2, r3, #16
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ddc:	f043 0201 	orr.w	r2, r3, #1
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e007      	b.n	8005df8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d0dc      	beq.n	8005db0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f003 030c 	and.w	r3, r3, #12
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 809b 	beq.w	8005f5c <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e34:	d12a      	bne.n	8005e8c <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d126      	bne.n	8005e8c <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d122      	bne.n	8005e8c <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8005e46:	230c      	movs	r3, #12
 8005e48:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005e4a:	e014      	b.n	8005e76 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	4a46      	ldr	r2, [pc, #280]	; (8005f68 <ADC_ConversionStop+0x168>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d90d      	bls.n	8005e70 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	f043 0210 	orr.w	r2, r3, #16
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e64:	f043 0201 	orr.w	r2, r3, #1
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e076      	b.n	8005f5e <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	3301      	adds	r3, #1
 8005e74:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e80:	2b40      	cmp	r3, #64	; 0x40
 8005e82:	d1e3      	bne.n	8005e4c <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2240      	movs	r2, #64	; 0x40
 8005e8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b60      	cmp	r3, #96	; 0x60
 8005e90:	d015      	beq.n	8005ebe <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d10e      	bne.n	8005ebe <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d107      	bne.n	8005ebe <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0210 	orr.w	r2, r2, #16
 8005ebc:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b0c      	cmp	r3, #12
 8005ec2:	d015      	beq.n	8005ef0 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 0308 	and.w	r3, r3, #8
 8005ece:	2b08      	cmp	r3, #8
 8005ed0:	d10e      	bne.n	8005ef0 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d107      	bne.n	8005ef0 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0220 	orr.w	r2, r2, #32
 8005eee:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2b60      	cmp	r3, #96	; 0x60
 8005ef4:	d005      	beq.n	8005f02 <ADC_ConversionStop+0x102>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b6c      	cmp	r3, #108	; 0x6c
 8005efa:	d105      	bne.n	8005f08 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005efc:	230c      	movs	r3, #12
 8005efe:	617b      	str	r3, [r7, #20]
        break;
 8005f00:	e005      	b.n	8005f0e <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005f02:	2308      	movs	r3, #8
 8005f04:	617b      	str	r3, [r7, #20]
        break;
 8005f06:	e002      	b.n	8005f0e <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005f08:	2304      	movs	r3, #4
 8005f0a:	617b      	str	r3, [r7, #20]
        break;
 8005f0c:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005f0e:	f7fe fa4b 	bl	80043a8 <HAL_GetTick>
 8005f12:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005f14:	e01b      	b.n	8005f4e <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005f16:	f7fe fa47 	bl	80043a8 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b0b      	cmp	r3, #11
 8005f22:	d914      	bls.n	8005f4e <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00d      	beq.n	8005f4e <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	f043 0210 	orr.w	r2, r3, #16
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f42:	f043 0201 	orr.w	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e007      	b.n	8005f5e <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	4013      	ands	r3, r2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1dc      	bne.n	8005f16 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	000993ff 	.word	0x000993ff

08005f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f003 0307 	and.w	r3, r3, #7
 8005f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f7c:	4b0c      	ldr	r3, [pc, #48]	; (8005fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f88:	4013      	ands	r3, r2
 8005f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f9e:	4a04      	ldr	r2, [pc, #16]	; (8005fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	60d3      	str	r3, [r2, #12]
}
 8005fa4:	bf00      	nop
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	e000ed00 	.word	0xe000ed00

08005fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fb8:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <__NVIC_GetPriorityGrouping+0x18>)
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	0a1b      	lsrs	r3, r3, #8
 8005fbe:	f003 0307 	and.w	r3, r3, #7
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	e000ed00 	.word	0xe000ed00

08005fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	db0b      	blt.n	8005ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fe2:	79fb      	ldrb	r3, [r7, #7]
 8005fe4:	f003 021f 	and.w	r2, r3, #31
 8005fe8:	4907      	ldr	r1, [pc, #28]	; (8006008 <__NVIC_EnableIRQ+0x38>)
 8005fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	2001      	movs	r0, #1
 8005ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8005ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	e000e100 	.word	0xe000e100

0800600c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	4603      	mov	r3, r0
 8006014:	6039      	str	r1, [r7, #0]
 8006016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800601c:	2b00      	cmp	r3, #0
 800601e:	db0a      	blt.n	8006036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	b2da      	uxtb	r2, r3
 8006024:	490c      	ldr	r1, [pc, #48]	; (8006058 <__NVIC_SetPriority+0x4c>)
 8006026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800602a:	0112      	lsls	r2, r2, #4
 800602c:	b2d2      	uxtb	r2, r2
 800602e:	440b      	add	r3, r1
 8006030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006034:	e00a      	b.n	800604c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	b2da      	uxtb	r2, r3
 800603a:	4908      	ldr	r1, [pc, #32]	; (800605c <__NVIC_SetPriority+0x50>)
 800603c:	79fb      	ldrb	r3, [r7, #7]
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	3b04      	subs	r3, #4
 8006044:	0112      	lsls	r2, r2, #4
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	440b      	add	r3, r1
 800604a:	761a      	strb	r2, [r3, #24]
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	e000e100 	.word	0xe000e100
 800605c:	e000ed00 	.word	0xe000ed00

08006060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006060:	b480      	push	{r7}
 8006062:	b089      	sub	sp, #36	; 0x24
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	f1c3 0307 	rsb	r3, r3, #7
 800607a:	2b04      	cmp	r3, #4
 800607c:	bf28      	it	cs
 800607e:	2304      	movcs	r3, #4
 8006080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	3304      	adds	r3, #4
 8006086:	2b06      	cmp	r3, #6
 8006088:	d902      	bls.n	8006090 <NVIC_EncodePriority+0x30>
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	3b03      	subs	r3, #3
 800608e:	e000      	b.n	8006092 <NVIC_EncodePriority+0x32>
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006094:	f04f 32ff 	mov.w	r2, #4294967295
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	43da      	mvns	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	401a      	ands	r2, r3
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060a8:	f04f 31ff 	mov.w	r1, #4294967295
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	fa01 f303 	lsl.w	r3, r1, r3
 80060b2:	43d9      	mvns	r1, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060b8:	4313      	orrs	r3, r2
         );
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3724      	adds	r7, #36	; 0x24
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
	...

080060c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060d8:	d301      	bcc.n	80060de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060da:	2301      	movs	r3, #1
 80060dc:	e00f      	b.n	80060fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060de:	4a0a      	ldr	r2, [pc, #40]	; (8006108 <SysTick_Config+0x40>)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3b01      	subs	r3, #1
 80060e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060e6:	210f      	movs	r1, #15
 80060e8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ec:	f7ff ff8e 	bl	800600c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060f0:	4b05      	ldr	r3, [pc, #20]	; (8006108 <SysTick_Config+0x40>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060f6:	4b04      	ldr	r3, [pc, #16]	; (8006108 <SysTick_Config+0x40>)
 80060f8:	2207      	movs	r2, #7
 80060fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	e000e010 	.word	0xe000e010

0800610c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff ff29 	bl	8005f6c <__NVIC_SetPriorityGrouping>
}
 800611a:	bf00      	nop
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b086      	sub	sp, #24
 8006126:	af00      	add	r7, sp, #0
 8006128:	4603      	mov	r3, r0
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	607a      	str	r2, [r7, #4]
 800612e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006134:	f7ff ff3e 	bl	8005fb4 <__NVIC_GetPriorityGrouping>
 8006138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	68b9      	ldr	r1, [r7, #8]
 800613e:	6978      	ldr	r0, [r7, #20]
 8006140:	f7ff ff8e 	bl	8006060 <NVIC_EncodePriority>
 8006144:	4602      	mov	r2, r0
 8006146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800614a:	4611      	mov	r1, r2
 800614c:	4618      	mov	r0, r3
 800614e:	f7ff ff5d 	bl	800600c <__NVIC_SetPriority>
}
 8006152:	bf00      	nop
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b082      	sub	sp, #8
 800615e:	af00      	add	r7, sp, #0
 8006160:	4603      	mov	r3, r0
 8006162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006168:	4618      	mov	r0, r3
 800616a:	f7ff ff31 	bl	8005fd0 <__NVIC_EnableIRQ>
}
 800616e:	bf00      	nop
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b082      	sub	sp, #8
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff ffa2 	bl	80060c8 <SysTick_Config>
 8006184:	4603      	mov	r3, r0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800618e:	b580      	push	{r7, lr}
 8006190:	b082      	sub	sp, #8
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e014      	b.n	80061ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	791b      	ldrb	r3, [r3, #4]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d105      	bne.n	80061b6 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7fd fceb 	bl	8003b8c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2202      	movs	r2, #2
 80061ba:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80061e6:	b480      	push	{r7}
 80061e8:	b087      	sub	sp, #28
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	607a      	str	r2, [r7, #4]
 80061f2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d105      	bne.n	8006210 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4413      	add	r3, r2
 800620a:	3308      	adds	r3, #8
 800620c:	617b      	str	r3, [r7, #20]
 800620e:	e004      	b.n	800621a <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4413      	add	r3, r2
 8006216:	3314      	adds	r3, #20
 8006218:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	461a      	mov	r2, r3
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	795b      	ldrb	r3, [r3, #5]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_DAC_Start+0x16>
 8006242:	2302      	movs	r3, #2
 8006244:	e039      	b.n	80062ba <HAL_DAC_Start+0x8a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6819      	ldr	r1, [r3, #0]
 8006258:	2201      	movs	r2, #1
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	409a      	lsls	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10f      	bne.n	800628c <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8006276:	2b3c      	cmp	r3, #60	; 0x3c
 8006278:	d118      	bne.n	80062ac <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0201 	orr.w	r2, r2, #1
 8006288:	605a      	str	r2, [r3, #4]
 800628a:	e00f      	b.n	80062ac <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006296:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 800629a:	d107      	bne.n	80062ac <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0202 	orr.w	r2, r2, #2
 80062aa:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b082      	sub	sp, #8
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062dc:	d120      	bne.n	8006320 <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ec:	d118      	bne.n	8006320 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2204      	movs	r2, #4
 80062f2:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f043 0201 	orr.w	r2, r3, #1
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006308:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006318:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7ff ff59 	bl	80061d2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800632a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800632e:	d120      	bne.n	8006372 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006336:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800633a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800633e:	d118      	bne.n	8006372 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2204      	movs	r2, #4
 8006344:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f043 0202 	orr.w	r2, r3, #2
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800635a:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800636a:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f851 	bl	8006414 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 8006372:	bf00      	nop
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800637a:	b480      	push	{r7}
 800637c:	b087      	sub	sp, #28
 800637e:	af00      	add	r7, sp, #0
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	617b      	str	r3, [r7, #20]
 800638a:	2300      	movs	r3, #0
 800638c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	795b      	ldrb	r3, [r3, #5]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <HAL_DAC_ConfigChannel+0x20>
 8006396:	2302      	movs	r3, #2
 8006398:	e036      	b.n	8006408 <HAL_DAC_ConfigChannel+0x8e>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2202      	movs	r2, #2
 80063a4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80063ae:	f640 72fe 	movw	r2, #4094	; 0xffe
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	fa02 f303 	lsl.w	r3, r2, r3
 80063b8:	43db      	mvns	r3, r3
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	4013      	ands	r3, r2
 80063be:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6819      	ldr	r1, [r3, #0]
 80063e8:	22c0      	movs	r2, #192	; 0xc0
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	43da      	mvns	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	400a      	ands	r2, r1
 80063f8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	371c      	adds	r7, #28
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e037      	b.n	80064ae <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2202      	movs	r2, #2
 8006442:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006454:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006458:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006462:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800646e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800647a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f9b7 	bl	8006804 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}  
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b086      	sub	sp, #24
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	607a      	str	r2, [r7, #4]
 80064c2:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d101      	bne.n	80064d6 <HAL_DMA_Start_IT+0x20>
 80064d2:	2302      	movs	r3, #2
 80064d4:	e04a      	b.n	800656c <HAL_DMA_Start_IT+0xb6>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d13a      	bne.n	800655e <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0201 	bic.w	r2, r2, #1
 8006504:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 f94b 	bl	80067a8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006516:	2b00      	cmp	r3, #0
 8006518:	d008      	beq.n	800652c <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f042 020e 	orr.w	r2, r2, #14
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	e00f      	b.n	800654c <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 020a 	orr.w	r2, r2, #10
 800653a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 0204 	bic.w	r2, r2, #4
 800654a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	e005      	b.n	800656a <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8006566:	2302      	movs	r3, #2
 8006568:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800656a:	7dfb      	ldrb	r3, [r7, #23]
} 
 800656c:	4618      	mov	r0, r3
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006582:	2b02      	cmp	r3, #2
 8006584:	d008      	beq.n	8006598 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2204      	movs	r2, #4
 800658a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e020      	b.n	80065da <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 020e 	bic.w	r2, r2, #14
 80065a6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0201 	bic.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c0:	2101      	movs	r1, #1
 80065c2:	fa01 f202 	lsl.w	r2, r1, r2
 80065c6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b084      	sub	sp, #16
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d005      	beq.n	8006608 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2204      	movs	r2, #4
 8006600:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	73fb      	strb	r3, [r7, #15]
 8006606:	e027      	b.n	8006658 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 020e 	bic.w	r2, r2, #14
 8006616:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0201 	bic.w	r2, r2, #1
 8006626:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006630:	2101      	movs	r1, #1
 8006632:	fa01 f202 	lsl.w	r2, r1, r2
 8006636:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664c:	2b00      	cmp	r3, #0
 800664e:	d003      	beq.n	8006658 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	4798      	blx	r3
    } 
  }
  return status;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	2204      	movs	r2, #4
 8006680:	409a      	lsls	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4013      	ands	r3, r2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d024      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x72>
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d01f      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d107      	bne.n	80066b2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0204 	bic.w	r2, r2, #4
 80066b0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ba:	2104      	movs	r1, #4
 80066bc:	fa01 f202 	lsl.w	r2, r1, r2
 80066c0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d06a      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80066d2:	e065      	b.n	80067a0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	2202      	movs	r2, #2
 80066da:	409a      	lsls	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4013      	ands	r3, r2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d02c      	beq.n	800673e <HAL_DMA_IRQHandler+0xdc>
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d027      	beq.n	800673e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0320 	and.w	r3, r3, #32
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10b      	bne.n	8006714 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 020a 	bic.w	r2, r2, #10
 800670a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671c:	2102      	movs	r1, #2
 800671e:	fa01 f202 	lsl.w	r2, r1, r2
 8006722:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006730:	2b00      	cmp	r3, #0
 8006732:	d035      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800673c:	e030      	b.n	80067a0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	2208      	movs	r2, #8
 8006744:	409a      	lsls	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4013      	ands	r3, r2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d028      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x13e>
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f003 0308 	and.w	r3, r3, #8
 8006754:	2b00      	cmp	r3, #0
 8006756:	d023      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 020e 	bic.w	r2, r2, #14
 8006766:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006770:	2101      	movs	r1, #1
 8006772:	fa01 f202 	lsl.w	r2, r1, r2
 8006776:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006792:	2b00      	cmp	r3, #0
 8006794:	d004      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	4798      	blx	r3
    }
  }
}  
 800679e:	e7ff      	b.n	80067a0 <HAL_DMA_IRQHandler+0x13e>
 80067a0:	bf00      	nop
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067be:	2101      	movs	r1, #1
 80067c0:	fa01 f202 	lsl.w	r2, r1, r2
 80067c4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	2b10      	cmp	r3, #16
 80067d4:	d108      	bne.n	80067e8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80067e6:	e007      	b.n	80067f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	60da      	str	r2, [r3, #12]
}
 80067f8:	bf00      	nop
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	4b14      	ldr	r3, [pc, #80]	; (8006864 <DMA_CalcBaseAndBitshift+0x60>)
 8006814:	429a      	cmp	r2, r3
 8006816:	d80f      	bhi.n	8006838 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	461a      	mov	r2, r3
 800681e:	4b12      	ldr	r3, [pc, #72]	; (8006868 <DMA_CalcBaseAndBitshift+0x64>)
 8006820:	4413      	add	r3, r2
 8006822:	4a12      	ldr	r2, [pc, #72]	; (800686c <DMA_CalcBaseAndBitshift+0x68>)
 8006824:	fba2 2303 	umull	r2, r3, r2, r3
 8006828:	091b      	lsrs	r3, r3, #4
 800682a:	009a      	lsls	r2, r3, #2
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a0f      	ldr	r2, [pc, #60]	; (8006870 <DMA_CalcBaseAndBitshift+0x6c>)
 8006834:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8006836:	e00e      	b.n	8006856 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	461a      	mov	r2, r3
 800683e:	4b0d      	ldr	r3, [pc, #52]	; (8006874 <DMA_CalcBaseAndBitshift+0x70>)
 8006840:	4413      	add	r3, r2
 8006842:	4a0a      	ldr	r2, [pc, #40]	; (800686c <DMA_CalcBaseAndBitshift+0x68>)
 8006844:	fba2 2303 	umull	r2, r3, r2, r3
 8006848:	091b      	lsrs	r3, r3, #4
 800684a:	009a      	lsls	r2, r3, #2
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a09      	ldr	r2, [pc, #36]	; (8006878 <DMA_CalcBaseAndBitshift+0x74>)
 8006854:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	40020407 	.word	0x40020407
 8006868:	bffdfff8 	.word	0xbffdfff8
 800686c:	cccccccd 	.word	0xcccccccd
 8006870:	40020000 	.word	0x40020000
 8006874:	bffdfbf8 	.word	0xbffdfbf8
 8006878:	40020400 	.word	0x40020400

0800687c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006886:	2300      	movs	r3, #0
 8006888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800688a:	e160      	b.n	8006b4e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	2101      	movs	r1, #1
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	fa01 f303 	lsl.w	r3, r1, r3
 8006898:	4013      	ands	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 8152 	beq.w	8006b48 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f003 0303 	and.w	r3, r3, #3
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d005      	beq.n	80068bc <HAL_GPIO_Init+0x40>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f003 0303 	and.w	r3, r3, #3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d130      	bne.n	800691e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	2203      	movs	r2, #3
 80068c8:	fa02 f303 	lsl.w	r3, r2, r3
 80068cc:	43db      	mvns	r3, r3
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	4013      	ands	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68da      	ldr	r2, [r3, #12]
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	fa02 f303 	lsl.w	r3, r2, r3
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80068f2:	2201      	movs	r2, #1
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	fa02 f303 	lsl.w	r3, r2, r3
 80068fa:	43db      	mvns	r3, r3
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	4013      	ands	r3, r2
 8006900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	091b      	lsrs	r3, r3, #4
 8006908:	f003 0201 	and.w	r2, r3, #1
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	fa02 f303 	lsl.w	r3, r2, r3
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	2b03      	cmp	r3, #3
 8006928:	d017      	beq.n	800695a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	2203      	movs	r2, #3
 8006936:	fa02 f303 	lsl.w	r3, r2, r3
 800693a:	43db      	mvns	r3, r3
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	4013      	ands	r3, r2
 8006940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	fa02 f303 	lsl.w	r3, r2, r3
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	4313      	orrs	r3, r2
 8006952:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d123      	bne.n	80069ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	08da      	lsrs	r2, r3, #3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	3208      	adds	r2, #8
 800696e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006972:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f003 0307 	and.w	r3, r3, #7
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	220f      	movs	r2, #15
 800697e:	fa02 f303 	lsl.w	r3, r2, r3
 8006982:	43db      	mvns	r3, r3
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	4013      	ands	r3, r2
 8006988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	691a      	ldr	r2, [r3, #16]
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f003 0307 	and.w	r3, r3, #7
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	fa02 f303 	lsl.w	r3, r2, r3
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	4313      	orrs	r3, r2
 800699e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	08da      	lsrs	r2, r3, #3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3208      	adds	r2, #8
 80069a8:	6939      	ldr	r1, [r7, #16]
 80069aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	005b      	lsls	r3, r3, #1
 80069b8:	2203      	movs	r2, #3
 80069ba:	fa02 f303 	lsl.w	r3, r2, r3
 80069be:	43db      	mvns	r3, r3
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	4013      	ands	r3, r2
 80069c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f003 0203 	and.w	r2, r3, #3
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	005b      	lsls	r3, r3, #1
 80069d2:	fa02 f303 	lsl.w	r3, r2, r3
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	4313      	orrs	r3, r2
 80069da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 80ac 	beq.w	8006b48 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069f0:	4b5e      	ldr	r3, [pc, #376]	; (8006b6c <HAL_GPIO_Init+0x2f0>)
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	4a5d      	ldr	r2, [pc, #372]	; (8006b6c <HAL_GPIO_Init+0x2f0>)
 80069f6:	f043 0301 	orr.w	r3, r3, #1
 80069fa:	6193      	str	r3, [r2, #24]
 80069fc:	4b5b      	ldr	r3, [pc, #364]	; (8006b6c <HAL_GPIO_Init+0x2f0>)
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	60bb      	str	r3, [r7, #8]
 8006a06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006a08:	4a59      	ldr	r2, [pc, #356]	; (8006b70 <HAL_GPIO_Init+0x2f4>)
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	089b      	lsrs	r3, r3, #2
 8006a0e:	3302      	adds	r3, #2
 8006a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f003 0303 	and.w	r3, r3, #3
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	220f      	movs	r2, #15
 8006a20:	fa02 f303 	lsl.w	r3, r2, r3
 8006a24:	43db      	mvns	r3, r3
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006a32:	d025      	beq.n	8006a80 <HAL_GPIO_Init+0x204>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a4f      	ldr	r2, [pc, #316]	; (8006b74 <HAL_GPIO_Init+0x2f8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d01f      	beq.n	8006a7c <HAL_GPIO_Init+0x200>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a4e      	ldr	r2, [pc, #312]	; (8006b78 <HAL_GPIO_Init+0x2fc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d019      	beq.n	8006a78 <HAL_GPIO_Init+0x1fc>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a4d      	ldr	r2, [pc, #308]	; (8006b7c <HAL_GPIO_Init+0x300>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d013      	beq.n	8006a74 <HAL_GPIO_Init+0x1f8>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a4c      	ldr	r2, [pc, #304]	; (8006b80 <HAL_GPIO_Init+0x304>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d00d      	beq.n	8006a70 <HAL_GPIO_Init+0x1f4>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a4b      	ldr	r2, [pc, #300]	; (8006b84 <HAL_GPIO_Init+0x308>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d007      	beq.n	8006a6c <HAL_GPIO_Init+0x1f0>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a4a      	ldr	r2, [pc, #296]	; (8006b88 <HAL_GPIO_Init+0x30c>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d101      	bne.n	8006a68 <HAL_GPIO_Init+0x1ec>
 8006a64:	2306      	movs	r3, #6
 8006a66:	e00c      	b.n	8006a82 <HAL_GPIO_Init+0x206>
 8006a68:	2307      	movs	r3, #7
 8006a6a:	e00a      	b.n	8006a82 <HAL_GPIO_Init+0x206>
 8006a6c:	2305      	movs	r3, #5
 8006a6e:	e008      	b.n	8006a82 <HAL_GPIO_Init+0x206>
 8006a70:	2304      	movs	r3, #4
 8006a72:	e006      	b.n	8006a82 <HAL_GPIO_Init+0x206>
 8006a74:	2303      	movs	r3, #3
 8006a76:	e004      	b.n	8006a82 <HAL_GPIO_Init+0x206>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	e002      	b.n	8006a82 <HAL_GPIO_Init+0x206>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e000      	b.n	8006a82 <HAL_GPIO_Init+0x206>
 8006a80:	2300      	movs	r3, #0
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	f002 0203 	and.w	r2, r2, #3
 8006a88:	0092      	lsls	r2, r2, #2
 8006a8a:	4093      	lsls	r3, r2
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006a92:	4937      	ldr	r1, [pc, #220]	; (8006b70 <HAL_GPIO_Init+0x2f4>)
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	089b      	lsrs	r3, r3, #2
 8006a98:	3302      	adds	r3, #2
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006aa0:	4b3a      	ldr	r3, [pc, #232]	; (8006b8c <HAL_GPIO_Init+0x310>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	43db      	mvns	r3, r3
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4013      	ands	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006ac4:	4a31      	ldr	r2, [pc, #196]	; (8006b8c <HAL_GPIO_Init+0x310>)
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006aca:	4b30      	ldr	r3, [pc, #192]	; (8006b8c <HAL_GPIO_Init+0x310>)
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	43db      	mvns	r3, r3
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006aee:	4a27      	ldr	r2, [pc, #156]	; (8006b8c <HAL_GPIO_Init+0x310>)
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006af4:	4b25      	ldr	r3, [pc, #148]	; (8006b8c <HAL_GPIO_Init+0x310>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	43db      	mvns	r3, r3
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	4013      	ands	r3, r2
 8006b02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d003      	beq.n	8006b18 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006b18:	4a1c      	ldr	r2, [pc, #112]	; (8006b8c <HAL_GPIO_Init+0x310>)
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b1e:	4b1b      	ldr	r3, [pc, #108]	; (8006b8c <HAL_GPIO_Init+0x310>)
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	43db      	mvns	r3, r3
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006b42:	4a12      	ldr	r2, [pc, #72]	; (8006b8c <HAL_GPIO_Init+0x310>)
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	fa22 f303 	lsr.w	r3, r2, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f47f ae97 	bne.w	800688c <HAL_GPIO_Init+0x10>
  }
}
 8006b5e:	bf00      	nop
 8006b60:	bf00      	nop
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	40021000 	.word	0x40021000
 8006b70:	40010000 	.word	0x40010000
 8006b74:	48000400 	.word	0x48000400
 8006b78:	48000800 	.word	0x48000800
 8006b7c:	48000c00 	.word	0x48000c00
 8006b80:	48001000 	.word	0x48001000
 8006b84:	48001400 	.word	0x48001400
 8006b88:	48001800 	.word	0x48001800
 8006b8c:	40010400 	.word	0x40010400

08006b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	460b      	mov	r3, r1
 8006b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	887b      	ldrh	r3, [r7, #2]
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	73fb      	strb	r3, [r7, #15]
 8006bac:	e001      	b.n	8006bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	807b      	strh	r3, [r7, #2]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006bd0:	787b      	ldrb	r3, [r7, #1]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006bd6:	887a      	ldrh	r2, [r7, #2]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006bdc:	e002      	b.n	8006be4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006bde:	887a      	ldrh	r2, [r7, #2]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006bfa:	4b08      	ldr	r3, [pc, #32]	; (8006c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006bfc:	695a      	ldr	r2, [r3, #20]
 8006bfe:	88fb      	ldrh	r3, [r7, #6]
 8006c00:	4013      	ands	r3, r2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d006      	beq.n	8006c14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c06:	4a05      	ldr	r2, [pc, #20]	; (8006c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c08:	88fb      	ldrh	r3, [r7, #6]
 8006c0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c0c:	88fb      	ldrh	r3, [r7, #6]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 f806 	bl	8006c20 <HAL_GPIO_EXTI_Callback>
  }
}
 8006c14:	bf00      	nop
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	40010400 	.word	0x40010400

08006c20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	4603      	mov	r3, r0
 8006c28:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006c2a:	bf00      	nop
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b082      	sub	sp, #8
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e081      	b.n	8006d4c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d106      	bne.n	8006c62 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7fc ffdb 	bl	8003c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2224      	movs	r2, #36	; 0x24
 8006c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 0201 	bic.w	r2, r2, #1
 8006c78:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c86:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c96:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d107      	bne.n	8006cb0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cac:	609a      	str	r2, [r3, #8]
 8006cae:	e006      	b.n	8006cbe <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006cbc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d104      	bne.n	8006cd0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	6812      	ldr	r2, [r2, #0]
 8006cda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006cf2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	691a      	ldr	r2, [r3, #16]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69d9      	ldr	r1, [r3, #28]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1a      	ldr	r2, [r3, #32]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f042 0201 	orr.w	r2, r2, #1
 8006d2c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b088      	sub	sp, #32
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	4608      	mov	r0, r1
 8006d5e:	4611      	mov	r1, r2
 8006d60:	461a      	mov	r2, r3
 8006d62:	4603      	mov	r3, r0
 8006d64:	817b      	strh	r3, [r7, #10]
 8006d66:	460b      	mov	r3, r1
 8006d68:	813b      	strh	r3, [r7, #8]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	f040 80f9 	bne.w	8006f6e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d002      	beq.n	8006d88 <HAL_I2C_Mem_Write+0x34>
 8006d82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d105      	bne.n	8006d94 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e0ed      	b.n	8006f70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d101      	bne.n	8006da2 <HAL_I2C_Mem_Write+0x4e>
 8006d9e:	2302      	movs	r3, #2
 8006da0:	e0e6      	b.n	8006f70 <HAL_I2C_Mem_Write+0x21c>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006daa:	f7fd fafd 	bl	80043a8 <HAL_GetTick>
 8006dae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	2319      	movs	r3, #25
 8006db6:	2201      	movs	r2, #1
 8006db8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 fac3 	bl	8007348 <I2C_WaitOnFlagUntilTimeout>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e0d1      	b.n	8006f70 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2221      	movs	r2, #33	; 0x21
 8006dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2240      	movs	r2, #64	; 0x40
 8006dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6a3a      	ldr	r2, [r7, #32]
 8006de6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006dec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006df4:	88f8      	ldrh	r0, [r7, #6]
 8006df6:	893a      	ldrh	r2, [r7, #8]
 8006df8:	8979      	ldrh	r1, [r7, #10]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	9301      	str	r3, [sp, #4]
 8006dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	4603      	mov	r3, r0
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f000 f9d3 	bl	80071b0 <I2C_RequestMemoryWrite>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d005      	beq.n	8006e1c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e0a9      	b.n	8006f70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	2bff      	cmp	r3, #255	; 0xff
 8006e24:	d90e      	bls.n	8006e44 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	22ff      	movs	r2, #255	; 0xff
 8006e2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	8979      	ldrh	r1, [r7, #10]
 8006e34:	2300      	movs	r3, #0
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 fbb5 	bl	80075ac <I2C_TransferConfig>
 8006e42:	e00f      	b.n	8006e64 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	8979      	ldrh	r1, [r7, #10]
 8006e56:	2300      	movs	r3, #0
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 fba4 	bl	80075ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 faad 	bl	80073c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e07b      	b.n	8006f70 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7c:	781a      	ldrb	r2, [r3, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	1c5a      	adds	r2, r3, #1
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	3b01      	subs	r3, #1
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d034      	beq.n	8006f1c <HAL_I2C_Mem_Write+0x1c8>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d130      	bne.n	8006f1c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	2180      	movs	r1, #128	; 0x80
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 fa3f 	bl	8007348 <I2C_WaitOnFlagUntilTimeout>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e04d      	b.n	8006f70 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	2bff      	cmp	r3, #255	; 0xff
 8006edc:	d90e      	bls.n	8006efc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	22ff      	movs	r2, #255	; 0xff
 8006ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	8979      	ldrh	r1, [r7, #10]
 8006eec:	2300      	movs	r3, #0
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 fb59 	bl	80075ac <I2C_TransferConfig>
 8006efa:	e00f      	b.n	8006f1c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	8979      	ldrh	r1, [r7, #10]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 fb48 	bl	80075ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d19e      	bne.n	8006e64 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 fa8c 	bl	8007448 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e01a      	b.n	8006f70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6859      	ldr	r1, [r3, #4]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <HAL_I2C_Mem_Write+0x224>)
 8006f4e:	400b      	ands	r3, r1
 8006f50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2220      	movs	r2, #32
 8006f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	e000      	b.n	8006f70 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006f6e:	2302      	movs	r3, #2
  }
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3718      	adds	r7, #24
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	fe00e800 	.word	0xfe00e800

08006f7c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	4608      	mov	r0, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	817b      	strh	r3, [r7, #10]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	813b      	strh	r3, [r7, #8]
 8006f92:	4613      	mov	r3, r2
 8006f94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	f040 80fd 	bne.w	800719e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d002      	beq.n	8006fb0 <HAL_I2C_Mem_Read+0x34>
 8006faa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d105      	bne.n	8006fbc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fb6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e0f1      	b.n	80071a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d101      	bne.n	8006fca <HAL_I2C_Mem_Read+0x4e>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	e0ea      	b.n	80071a0 <HAL_I2C_Mem_Read+0x224>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006fd2:	f7fd f9e9 	bl	80043a8 <HAL_GetTick>
 8006fd6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	2319      	movs	r3, #25
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 f9af 	bl	8007348 <I2C_WaitOnFlagUntilTimeout>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d001      	beq.n	8006ff4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e0d5      	b.n	80071a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2222      	movs	r2, #34	; 0x22
 8006ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2240      	movs	r2, #64	; 0x40
 8007000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a3a      	ldr	r2, [r7, #32]
 800700e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007014:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800701c:	88f8      	ldrh	r0, [r7, #6]
 800701e:	893a      	ldrh	r2, [r7, #8]
 8007020:	8979      	ldrh	r1, [r7, #10]
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	9301      	str	r3, [sp, #4]
 8007026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	4603      	mov	r3, r0
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 f913 	bl	8007258 <I2C_RequestMemoryRead>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d005      	beq.n	8007044 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e0ad      	b.n	80071a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007048:	b29b      	uxth	r3, r3
 800704a:	2bff      	cmp	r3, #255	; 0xff
 800704c:	d90e      	bls.n	800706c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	22ff      	movs	r2, #255	; 0xff
 8007052:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007058:	b2da      	uxtb	r2, r3
 800705a:	8979      	ldrh	r1, [r7, #10]
 800705c:	4b52      	ldr	r3, [pc, #328]	; (80071a8 <HAL_I2C_Mem_Read+0x22c>)
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 faa1 	bl	80075ac <I2C_TransferConfig>
 800706a:	e00f      	b.n	800708c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007070:	b29a      	uxth	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800707a:	b2da      	uxtb	r2, r3
 800707c:	8979      	ldrh	r1, [r7, #10]
 800707e:	4b4a      	ldr	r3, [pc, #296]	; (80071a8 <HAL_I2C_Mem_Read+0x22c>)
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f000 fa90 	bl	80075ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007092:	2200      	movs	r2, #0
 8007094:	2104      	movs	r1, #4
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 f956 	bl	8007348 <I2C_WaitOnFlagUntilTimeout>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e07c      	b.n	80071a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b0:	b2d2      	uxtb	r2, r2
 80070b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	3b01      	subs	r3, #1
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070dc:	b29b      	uxth	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d034      	beq.n	800714c <HAL_I2C_Mem_Read+0x1d0>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d130      	bne.n	800714c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	2200      	movs	r2, #0
 80070f2:	2180      	movs	r1, #128	; 0x80
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 f927 	bl	8007348 <I2C_WaitOnFlagUntilTimeout>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e04d      	b.n	80071a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007108:	b29b      	uxth	r3, r3
 800710a:	2bff      	cmp	r3, #255	; 0xff
 800710c:	d90e      	bls.n	800712c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	22ff      	movs	r2, #255	; 0xff
 8007112:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007118:	b2da      	uxtb	r2, r3
 800711a:	8979      	ldrh	r1, [r7, #10]
 800711c:	2300      	movs	r3, #0
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 fa41 	bl	80075ac <I2C_TransferConfig>
 800712a:	e00f      	b.n	800714c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800713a:	b2da      	uxtb	r2, r3
 800713c:	8979      	ldrh	r1, [r7, #10]
 800713e:	2300      	movs	r3, #0
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f000 fa30 	bl	80075ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007150:	b29b      	uxth	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d19a      	bne.n	800708c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 f974 	bl	8007448 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e01a      	b.n	80071a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2220      	movs	r2, #32
 8007170:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6859      	ldr	r1, [r3, #4]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	4b0b      	ldr	r3, [pc, #44]	; (80071ac <HAL_I2C_Mem_Read+0x230>)
 800717e:	400b      	ands	r3, r1
 8007180:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2220      	movs	r2, #32
 8007186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	e000      	b.n	80071a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800719e:	2302      	movs	r3, #2
  }
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	80002400 	.word	0x80002400
 80071ac:	fe00e800 	.word	0xfe00e800

080071b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af02      	add	r7, sp, #8
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	4608      	mov	r0, r1
 80071ba:	4611      	mov	r1, r2
 80071bc:	461a      	mov	r2, r3
 80071be:	4603      	mov	r3, r0
 80071c0:	817b      	strh	r3, [r7, #10]
 80071c2:	460b      	mov	r3, r1
 80071c4:	813b      	strh	r3, [r7, #8]
 80071c6:	4613      	mov	r3, r2
 80071c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80071ca:	88fb      	ldrh	r3, [r7, #6]
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	8979      	ldrh	r1, [r7, #10]
 80071d0:	4b20      	ldr	r3, [pc, #128]	; (8007254 <I2C_RequestMemoryWrite+0xa4>)
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 f9e7 	bl	80075ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071de:	69fa      	ldr	r2, [r7, #28]
 80071e0:	69b9      	ldr	r1, [r7, #24]
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 f8f0 	bl	80073c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e02c      	b.n	800724c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071f2:	88fb      	ldrh	r3, [r7, #6]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d105      	bne.n	8007204 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80071f8:	893b      	ldrh	r3, [r7, #8]
 80071fa:	b2da      	uxtb	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	629a      	str	r2, [r3, #40]	; 0x28
 8007202:	e015      	b.n	8007230 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007204:	893b      	ldrh	r3, [r7, #8]
 8007206:	0a1b      	lsrs	r3, r3, #8
 8007208:	b29b      	uxth	r3, r3
 800720a:	b2da      	uxtb	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007212:	69fa      	ldr	r2, [r7, #28]
 8007214:	69b9      	ldr	r1, [r7, #24]
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f000 f8d6 	bl	80073c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e012      	b.n	800724c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007226:	893b      	ldrh	r3, [r7, #8]
 8007228:	b2da      	uxtb	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	2200      	movs	r2, #0
 8007238:	2180      	movs	r1, #128	; 0x80
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 f884 	bl	8007348 <I2C_WaitOnFlagUntilTimeout>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e000      	b.n	800724c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	80002000 	.word	0x80002000

08007258 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af02      	add	r7, sp, #8
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	4608      	mov	r0, r1
 8007262:	4611      	mov	r1, r2
 8007264:	461a      	mov	r2, r3
 8007266:	4603      	mov	r3, r0
 8007268:	817b      	strh	r3, [r7, #10]
 800726a:	460b      	mov	r3, r1
 800726c:	813b      	strh	r3, [r7, #8]
 800726e:	4613      	mov	r3, r2
 8007270:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007272:	88fb      	ldrh	r3, [r7, #6]
 8007274:	b2da      	uxtb	r2, r3
 8007276:	8979      	ldrh	r1, [r7, #10]
 8007278:	4b20      	ldr	r3, [pc, #128]	; (80072fc <I2C_RequestMemoryRead+0xa4>)
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	2300      	movs	r3, #0
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f000 f994 	bl	80075ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007284:	69fa      	ldr	r2, [r7, #28]
 8007286:	69b9      	ldr	r1, [r7, #24]
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 f89d 	bl	80073c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e02c      	b.n	80072f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007298:	88fb      	ldrh	r3, [r7, #6]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d105      	bne.n	80072aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800729e:	893b      	ldrh	r3, [r7, #8]
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	629a      	str	r2, [r3, #40]	; 0x28
 80072a8:	e015      	b.n	80072d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80072aa:	893b      	ldrh	r3, [r7, #8]
 80072ac:	0a1b      	lsrs	r3, r3, #8
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072b8:	69fa      	ldr	r2, [r7, #28]
 80072ba:	69b9      	ldr	r1, [r7, #24]
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 f883 	bl	80073c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d001      	beq.n	80072cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e012      	b.n	80072f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80072cc:	893b      	ldrh	r3, [r7, #8]
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2200      	movs	r2, #0
 80072de:	2140      	movs	r1, #64	; 0x40
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 f831 	bl	8007348 <I2C_WaitOnFlagUntilTimeout>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e000      	b.n	80072f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	80002000 	.word	0x80002000

08007300 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b02      	cmp	r3, #2
 8007314:	d103      	bne.n	800731e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2200      	movs	r2, #0
 800731c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b01      	cmp	r3, #1
 800732a:	d007      	beq.n	800733c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	699a      	ldr	r2, [r3, #24]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f042 0201 	orr.w	r2, r2, #1
 800733a:	619a      	str	r2, [r3, #24]
  }
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	603b      	str	r3, [r7, #0]
 8007354:	4613      	mov	r3, r2
 8007356:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007358:	e022      	b.n	80073a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007360:	d01e      	beq.n	80073a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007362:	f7fd f821 	bl	80043a8 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	429a      	cmp	r2, r3
 8007370:	d302      	bcc.n	8007378 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d113      	bne.n	80073a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737c:	f043 0220 	orr.w	r2, r3, #32
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2220      	movs	r2, #32
 8007388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e00f      	b.n	80073c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699a      	ldr	r2, [r3, #24]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	4013      	ands	r3, r2
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	bf0c      	ite	eq
 80073b0:	2301      	moveq	r3, #1
 80073b2:	2300      	movne	r3, #0
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	461a      	mov	r2, r3
 80073b8:	79fb      	ldrb	r3, [r7, #7]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d0cd      	beq.n	800735a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80073d4:	e02c      	b.n	8007430 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	68b9      	ldr	r1, [r7, #8]
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 f870 	bl	80074c0 <I2C_IsAcknowledgeFailed>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e02a      	b.n	8007440 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f0:	d01e      	beq.n	8007430 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073f2:	f7fc ffd9 	bl	80043a8 <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d302      	bcc.n	8007408 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d113      	bne.n	8007430 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740c:	f043 0220 	orr.w	r2, r3, #32
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2220      	movs	r2, #32
 8007418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e007      	b.n	8007440 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	f003 0302 	and.w	r3, r3, #2
 800743a:	2b02      	cmp	r3, #2
 800743c:	d1cb      	bne.n	80073d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007454:	e028      	b.n	80074a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	68b9      	ldr	r1, [r7, #8]
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 f830 	bl	80074c0 <I2C_IsAcknowledgeFailed>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e026      	b.n	80074b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800746a:	f7fc ff9d 	bl	80043a8 <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	429a      	cmp	r2, r3
 8007478:	d302      	bcc.n	8007480 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d113      	bne.n	80074a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007484:	f043 0220 	orr.w	r2, r3, #32
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e007      	b.n	80074b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	d1cf      	bne.n	8007456 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	f003 0310 	and.w	r3, r3, #16
 80074d6:	2b10      	cmp	r3, #16
 80074d8:	d161      	bne.n	800759e <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074e8:	d02b      	beq.n	8007542 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074f8:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074fa:	e022      	b.n	8007542 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007502:	d01e      	beq.n	8007542 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007504:	f7fc ff50 	bl	80043a8 <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	429a      	cmp	r2, r3
 8007512:	d302      	bcc.n	800751a <I2C_IsAcknowledgeFailed+0x5a>
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d113      	bne.n	8007542 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751e:	f043 0220 	orr.w	r2, r3, #32
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2220      	movs	r2, #32
 800752a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e02e      	b.n	80075a0 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	f003 0320 	and.w	r3, r3, #32
 800754c:	2b20      	cmp	r3, #32
 800754e:	d1d5      	bne.n	80074fc <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2210      	movs	r2, #16
 8007556:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2220      	movs	r2, #32
 800755e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f7ff fecd 	bl	8007300 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	6859      	ldr	r1, [r3, #4]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	4b0d      	ldr	r3, [pc, #52]	; (80075a8 <I2C_IsAcknowledgeFailed+0xe8>)
 8007572:	400b      	ands	r3, r1
 8007574:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757a:	f043 0204 	orr.w	r2, r3, #4
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2220      	movs	r2, #32
 8007586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e000      	b.n	80075a0 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	fe00e800 	.word	0xfe00e800

080075ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	607b      	str	r3, [r7, #4]
 80075b6:	460b      	mov	r3, r1
 80075b8:	817b      	strh	r3, [r7, #10]
 80075ba:	4613      	mov	r3, r2
 80075bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	0d5b      	lsrs	r3, r3, #21
 80075c8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80075cc:	4b0d      	ldr	r3, [pc, #52]	; (8007604 <I2C_TransferConfig+0x58>)
 80075ce:	430b      	orrs	r3, r1
 80075d0:	43db      	mvns	r3, r3
 80075d2:	ea02 0103 	and.w	r1, r2, r3
 80075d6:	897b      	ldrh	r3, [r7, #10]
 80075d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80075dc:	7a7b      	ldrb	r3, [r7, #9]
 80075de:	041b      	lsls	r3, r3, #16
 80075e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075e4:	431a      	orrs	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	431a      	orrs	r2, r3
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	431a      	orrs	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80075f6:	bf00      	nop
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	03ff63ff 	.word	0x03ff63ff

08007608 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b20      	cmp	r3, #32
 800761c:	d138      	bne.n	8007690 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007624:	2b01      	cmp	r3, #1
 8007626:	d101      	bne.n	800762c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007628:	2302      	movs	r3, #2
 800762a:	e032      	b.n	8007692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2224      	movs	r2, #36	; 0x24
 8007638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0201 	bic.w	r2, r2, #1
 800764a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800765a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6819      	ldr	r1, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	430a      	orrs	r2, r1
 800766a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f042 0201 	orr.w	r2, r2, #1
 800767a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2220      	movs	r2, #32
 8007680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800768c:	2300      	movs	r3, #0
 800768e:	e000      	b.n	8007692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007690:	2302      	movs	r3, #2
  }
}
 8007692:	4618      	mov	r0, r3
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800769e:	b480      	push	{r7}
 80076a0:	b085      	sub	sp, #20
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b20      	cmp	r3, #32
 80076b2:	d139      	bne.n	8007728 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d101      	bne.n	80076c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80076be:	2302      	movs	r3, #2
 80076c0:	e033      	b.n	800772a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2224      	movs	r2, #36	; 0x24
 80076ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f022 0201 	bic.w	r2, r2, #1
 80076e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80076f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	021b      	lsls	r3, r3, #8
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f042 0201 	orr.w	r2, r2, #1
 8007712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2220      	movs	r2, #32
 8007718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007724:	2300      	movs	r3, #0
 8007726:	e000      	b.n	800772a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007728:	2302      	movs	r3, #2
  }
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
	...

08007738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800773e:	af00      	add	r7, sp, #0
 8007740:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007744:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007748:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800774a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800774e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d102      	bne.n	800775e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	f001 b83a 	b.w	80087d2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800775e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007762:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 816f 	beq.w	8007a52 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007774:	4bb5      	ldr	r3, [pc, #724]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f003 030c 	and.w	r3, r3, #12
 800777c:	2b04      	cmp	r3, #4
 800777e:	d00c      	beq.n	800779a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007780:	4bb2      	ldr	r3, [pc, #712]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f003 030c 	and.w	r3, r3, #12
 8007788:	2b08      	cmp	r3, #8
 800778a:	d15c      	bne.n	8007846 <HAL_RCC_OscConfig+0x10e>
 800778c:	4baf      	ldr	r3, [pc, #700]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8007794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007798:	d155      	bne.n	8007846 <HAL_RCC_OscConfig+0x10e>
 800779a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800779e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80077a6:	fa93 f3a3 	rbit	r3, r3
 80077aa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80077ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077b2:	fab3 f383 	clz	r3, r3
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	095b      	lsrs	r3, r3, #5
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	f043 0301 	orr.w	r3, r3, #1
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d102      	bne.n	80077cc <HAL_RCC_OscConfig+0x94>
 80077c6:	4ba1      	ldr	r3, [pc, #644]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	e015      	b.n	80077f8 <HAL_RCC_OscConfig+0xc0>
 80077cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077d0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077d4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80077d8:	fa93 f3a3 	rbit	r3, r3
 80077dc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80077e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077e4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80077e8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80077ec:	fa93 f3a3 	rbit	r3, r3
 80077f0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80077f4:	4b95      	ldr	r3, [pc, #596]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80077fc:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8007800:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8007804:	fa92 f2a2 	rbit	r2, r2
 8007808:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800780c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007810:	fab2 f282 	clz	r2, r2
 8007814:	b2d2      	uxtb	r2, r2
 8007816:	f042 0220 	orr.w	r2, r2, #32
 800781a:	b2d2      	uxtb	r2, r2
 800781c:	f002 021f 	and.w	r2, r2, #31
 8007820:	2101      	movs	r1, #1
 8007822:	fa01 f202 	lsl.w	r2, r1, r2
 8007826:	4013      	ands	r3, r2
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 8111 	beq.w	8007a50 <HAL_RCC_OscConfig+0x318>
 800782e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007832:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	f040 8108 	bne.w	8007a50 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	f000 bfc6 	b.w	80087d2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800784a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007856:	d106      	bne.n	8007866 <HAL_RCC_OscConfig+0x12e>
 8007858:	4b7c      	ldr	r3, [pc, #496]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a7b      	ldr	r2, [pc, #492]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 800785e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007862:	6013      	str	r3, [r2, #0]
 8007864:	e036      	b.n	80078d4 <HAL_RCC_OscConfig+0x19c>
 8007866:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800786a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10c      	bne.n	8007890 <HAL_RCC_OscConfig+0x158>
 8007876:	4b75      	ldr	r3, [pc, #468]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a74      	ldr	r2, [pc, #464]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 800787c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007880:	6013      	str	r3, [r2, #0]
 8007882:	4b72      	ldr	r3, [pc, #456]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a71      	ldr	r2, [pc, #452]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 8007888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	e021      	b.n	80078d4 <HAL_RCC_OscConfig+0x19c>
 8007890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007894:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078a0:	d10c      	bne.n	80078bc <HAL_RCC_OscConfig+0x184>
 80078a2:	4b6a      	ldr	r3, [pc, #424]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a69      	ldr	r2, [pc, #420]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 80078a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	4b67      	ldr	r3, [pc, #412]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a66      	ldr	r2, [pc, #408]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 80078b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078b8:	6013      	str	r3, [r2, #0]
 80078ba:	e00b      	b.n	80078d4 <HAL_RCC_OscConfig+0x19c>
 80078bc:	4b63      	ldr	r3, [pc, #396]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a62      	ldr	r2, [pc, #392]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 80078c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	4b60      	ldr	r3, [pc, #384]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a5f      	ldr	r2, [pc, #380]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 80078ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078d2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80078d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d059      	beq.n	8007998 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078e4:	f7fc fd60 	bl	80043a8 <HAL_GetTick>
 80078e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078ec:	e00a      	b.n	8007904 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078ee:	f7fc fd5b 	bl	80043a8 <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b64      	cmp	r3, #100	; 0x64
 80078fc:	d902      	bls.n	8007904 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	f000 bf67 	b.w	80087d2 <HAL_RCC_OscConfig+0x109a>
 8007904:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007908:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800790c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8007910:	fa93 f3a3 	rbit	r3, r3
 8007914:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8007918:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800791c:	fab3 f383 	clz	r3, r3
 8007920:	b2db      	uxtb	r3, r3
 8007922:	095b      	lsrs	r3, r3, #5
 8007924:	b2db      	uxtb	r3, r3
 8007926:	f043 0301 	orr.w	r3, r3, #1
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b01      	cmp	r3, #1
 800792e:	d102      	bne.n	8007936 <HAL_RCC_OscConfig+0x1fe>
 8007930:	4b46      	ldr	r3, [pc, #280]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	e015      	b.n	8007962 <HAL_RCC_OscConfig+0x22a>
 8007936:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800793a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800793e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007942:	fa93 f3a3 	rbit	r3, r3
 8007946:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800794a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800794e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007952:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007956:	fa93 f3a3 	rbit	r3, r3
 800795a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800795e:	4b3b      	ldr	r3, [pc, #236]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 8007960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007962:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007966:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800796a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800796e:	fa92 f2a2 	rbit	r2, r2
 8007972:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8007976:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800797a:	fab2 f282 	clz	r2, r2
 800797e:	b2d2      	uxtb	r2, r2
 8007980:	f042 0220 	orr.w	r2, r2, #32
 8007984:	b2d2      	uxtb	r2, r2
 8007986:	f002 021f 	and.w	r2, r2, #31
 800798a:	2101      	movs	r1, #1
 800798c:	fa01 f202 	lsl.w	r2, r1, r2
 8007990:	4013      	ands	r3, r2
 8007992:	2b00      	cmp	r3, #0
 8007994:	d0ab      	beq.n	80078ee <HAL_RCC_OscConfig+0x1b6>
 8007996:	e05c      	b.n	8007a52 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007998:	f7fc fd06 	bl	80043a8 <HAL_GetTick>
 800799c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079a0:	e00a      	b.n	80079b8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079a2:	f7fc fd01 	bl	80043a8 <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	2b64      	cmp	r3, #100	; 0x64
 80079b0:	d902      	bls.n	80079b8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	f000 bf0d 	b.w	80087d2 <HAL_RCC_OscConfig+0x109a>
 80079b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079bc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80079c4:	fa93 f3a3 	rbit	r3, r3
 80079c8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80079cc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079d0:	fab3 f383 	clz	r3, r3
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	095b      	lsrs	r3, r3, #5
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	f043 0301 	orr.w	r3, r3, #1
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d102      	bne.n	80079ea <HAL_RCC_OscConfig+0x2b2>
 80079e4:	4b19      	ldr	r3, [pc, #100]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	e015      	b.n	8007a16 <HAL_RCC_OscConfig+0x2de>
 80079ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079ee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80079f6:	fa93 f3a3 	rbit	r3, r3
 80079fa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80079fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a02:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007a06:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007a0a:	fa93 f3a3 	rbit	r3, r3
 8007a0e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007a12:	4b0e      	ldr	r3, [pc, #56]	; (8007a4c <HAL_RCC_OscConfig+0x314>)
 8007a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007a1a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8007a1e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8007a22:	fa92 f2a2 	rbit	r2, r2
 8007a26:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8007a2a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007a2e:	fab2 f282 	clz	r2, r2
 8007a32:	b2d2      	uxtb	r2, r2
 8007a34:	f042 0220 	orr.w	r2, r2, #32
 8007a38:	b2d2      	uxtb	r2, r2
 8007a3a:	f002 021f 	and.w	r2, r2, #31
 8007a3e:	2101      	movs	r1, #1
 8007a40:	fa01 f202 	lsl.w	r2, r1, r2
 8007a44:	4013      	ands	r3, r2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1ab      	bne.n	80079a2 <HAL_RCC_OscConfig+0x26a>
 8007a4a:	e002      	b.n	8007a52 <HAL_RCC_OscConfig+0x31a>
 8007a4c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007a56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 817f 	beq.w	8007d66 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007a68:	4ba7      	ldr	r3, [pc, #668]	; (8007d08 <HAL_RCC_OscConfig+0x5d0>)
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f003 030c 	and.w	r3, r3, #12
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00c      	beq.n	8007a8e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007a74:	4ba4      	ldr	r3, [pc, #656]	; (8007d08 <HAL_RCC_OscConfig+0x5d0>)
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f003 030c 	and.w	r3, r3, #12
 8007a7c:	2b08      	cmp	r3, #8
 8007a7e:	d173      	bne.n	8007b68 <HAL_RCC_OscConfig+0x430>
 8007a80:	4ba1      	ldr	r3, [pc, #644]	; (8007d08 <HAL_RCC_OscConfig+0x5d0>)
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8007a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a8c:	d16c      	bne.n	8007b68 <HAL_RCC_OscConfig+0x430>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a94:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8007a98:	fa93 f3a3 	rbit	r3, r3
 8007a9c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8007aa0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007aa4:	fab3 f383 	clz	r3, r3
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	095b      	lsrs	r3, r3, #5
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	f043 0301 	orr.w	r3, r3, #1
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d102      	bne.n	8007abe <HAL_RCC_OscConfig+0x386>
 8007ab8:	4b93      	ldr	r3, [pc, #588]	; (8007d08 <HAL_RCC_OscConfig+0x5d0>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	e013      	b.n	8007ae6 <HAL_RCC_OscConfig+0x3ae>
 8007abe:	2302      	movs	r3, #2
 8007ac0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ac4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8007ac8:	fa93 f3a3 	rbit	r3, r3
 8007acc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007ad6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8007ada:	fa93 f3a3 	rbit	r3, r3
 8007ade:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007ae2:	4b89      	ldr	r3, [pc, #548]	; (8007d08 <HAL_RCC_OscConfig+0x5d0>)
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8007aec:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8007af0:	fa92 f2a2 	rbit	r2, r2
 8007af4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8007af8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007afc:	fab2 f282 	clz	r2, r2
 8007b00:	b2d2      	uxtb	r2, r2
 8007b02:	f042 0220 	orr.w	r2, r2, #32
 8007b06:	b2d2      	uxtb	r2, r2
 8007b08:	f002 021f 	and.w	r2, r2, #31
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8007b12:	4013      	ands	r3, r2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00a      	beq.n	8007b2e <HAL_RCC_OscConfig+0x3f6>
 8007b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007b1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d002      	beq.n	8007b2e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	f000 be52 	b.w	80087d2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b2e:	4b76      	ldr	r3, [pc, #472]	; (8007d08 <HAL_RCC_OscConfig+0x5d0>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007b3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	21f8      	movs	r1, #248	; 0xf8
 8007b44:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b48:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8007b4c:	fa91 f1a1 	rbit	r1, r1
 8007b50:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8007b54:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007b58:	fab1 f181 	clz	r1, r1
 8007b5c:	b2c9      	uxtb	r1, r1
 8007b5e:	408b      	lsls	r3, r1
 8007b60:	4969      	ldr	r1, [pc, #420]	; (8007d08 <HAL_RCC_OscConfig+0x5d0>)
 8007b62:	4313      	orrs	r3, r2
 8007b64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b66:	e0fe      	b.n	8007d66 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007b6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 8088 	beq.w	8007c8a <HAL_RCC_OscConfig+0x552>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b80:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8007b84:	fa93 f3a3 	rbit	r3, r3
 8007b88:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8007b8c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b90:	fab3 f383 	clz	r3, r3
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007b9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ba6:	f7fc fbff 	bl	80043a8 <HAL_GetTick>
 8007baa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bae:	e00a      	b.n	8007bc6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bb0:	f7fc fbfa 	bl	80043a8 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d902      	bls.n	8007bc6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	f000 be06 	b.w	80087d2 <HAL_RCC_OscConfig+0x109a>
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bcc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007bd0:	fa93 f3a3 	rbit	r3, r3
 8007bd4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8007bd8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bdc:	fab3 f383 	clz	r3, r3
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	095b      	lsrs	r3, r3, #5
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	f043 0301 	orr.w	r3, r3, #1
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d102      	bne.n	8007bf6 <HAL_RCC_OscConfig+0x4be>
 8007bf0:	4b45      	ldr	r3, [pc, #276]	; (8007d08 <HAL_RCC_OscConfig+0x5d0>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	e013      	b.n	8007c1e <HAL_RCC_OscConfig+0x4e6>
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bfc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8007c00:	fa93 f3a3 	rbit	r3, r3
 8007c04:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8007c08:	2302      	movs	r3, #2
 8007c0a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007c0e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8007c12:	fa93 f3a3 	rbit	r3, r3
 8007c16:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007c1a:	4b3b      	ldr	r3, [pc, #236]	; (8007d08 <HAL_RCC_OscConfig+0x5d0>)
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1e:	2202      	movs	r2, #2
 8007c20:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8007c24:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007c28:	fa92 f2a2 	rbit	r2, r2
 8007c2c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8007c30:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007c34:	fab2 f282 	clz	r2, r2
 8007c38:	b2d2      	uxtb	r2, r2
 8007c3a:	f042 0220 	orr.w	r2, r2, #32
 8007c3e:	b2d2      	uxtb	r2, r2
 8007c40:	f002 021f 	and.w	r2, r2, #31
 8007c44:	2101      	movs	r1, #1
 8007c46:	fa01 f202 	lsl.w	r2, r1, r2
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d0af      	beq.n	8007bb0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c50:	4b2d      	ldr	r3, [pc, #180]	; (8007d08 <HAL_RCC_OscConfig+0x5d0>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007c5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	21f8      	movs	r1, #248	; 0xf8
 8007c66:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c6a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8007c6e:	fa91 f1a1 	rbit	r1, r1
 8007c72:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8007c76:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007c7a:	fab1 f181 	clz	r1, r1
 8007c7e:	b2c9      	uxtb	r1, r1
 8007c80:	408b      	lsls	r3, r1
 8007c82:	4921      	ldr	r1, [pc, #132]	; (8007d08 <HAL_RCC_OscConfig+0x5d0>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	600b      	str	r3, [r1, #0]
 8007c88:	e06d      	b.n	8007d66 <HAL_RCC_OscConfig+0x62e>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c90:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007c94:	fa93 f3a3 	rbit	r3, r3
 8007c98:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8007c9c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ca0:	fab3 f383 	clz	r3, r3
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007caa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cb6:	f7fc fb77 	bl	80043a8 <HAL_GetTick>
 8007cba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cbe:	e00a      	b.n	8007cd6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cc0:	f7fc fb72 	bl	80043a8 <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d902      	bls.n	8007cd6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	f000 bd7e 	b.w	80087d2 <HAL_RCC_OscConfig+0x109a>
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007ce0:	fa93 f3a3 	rbit	r3, r3
 8007ce4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8007ce8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cec:	fab3 f383 	clz	r3, r3
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	095b      	lsrs	r3, r3, #5
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	f043 0301 	orr.w	r3, r3, #1
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d105      	bne.n	8007d0c <HAL_RCC_OscConfig+0x5d4>
 8007d00:	4b01      	ldr	r3, [pc, #4]	; (8007d08 <HAL_RCC_OscConfig+0x5d0>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	e016      	b.n	8007d34 <HAL_RCC_OscConfig+0x5fc>
 8007d06:	bf00      	nop
 8007d08:	40021000 	.word	0x40021000
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d16:	fa93 f3a3 	rbit	r3, r3
 8007d1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007d1e:	2302      	movs	r3, #2
 8007d20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007d24:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007d28:	fa93 f3a3 	rbit	r3, r3
 8007d2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007d30:	4bbf      	ldr	r3, [pc, #764]	; (8008030 <HAL_RCC_OscConfig+0x8f8>)
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	2202      	movs	r2, #2
 8007d36:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8007d3a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007d3e:	fa92 f2a2 	rbit	r2, r2
 8007d42:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8007d46:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007d4a:	fab2 f282 	clz	r2, r2
 8007d4e:	b2d2      	uxtb	r2, r2
 8007d50:	f042 0220 	orr.w	r2, r2, #32
 8007d54:	b2d2      	uxtb	r2, r2
 8007d56:	f002 021f 	and.w	r2, r2, #31
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8007d60:	4013      	ands	r3, r2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1ac      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007d6a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0308 	and.w	r3, r3, #8
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f000 8113 	beq.w	8007fa2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007d80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d07c      	beq.n	8007e86 <HAL_RCC_OscConfig+0x74e>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d96:	fa93 f3a3 	rbit	r3, r3
 8007d9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8007d9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007da2:	fab3 f383 	clz	r3, r3
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	461a      	mov	r2, r3
 8007daa:	4ba2      	ldr	r3, [pc, #648]	; (8008034 <HAL_RCC_OscConfig+0x8fc>)
 8007dac:	4413      	add	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	461a      	mov	r2, r3
 8007db2:	2301      	movs	r3, #1
 8007db4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007db6:	f7fc faf7 	bl	80043a8 <HAL_GetTick>
 8007dba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dbe:	e00a      	b.n	8007dd6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dc0:	f7fc faf2 	bl	80043a8 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d902      	bls.n	8007dd6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	f000 bcfe 	b.w	80087d2 <HAL_RCC_OscConfig+0x109a>
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007de0:	fa93 f2a3 	rbit	r2, r3
 8007de4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007de8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007dec:	601a      	str	r2, [r3, #0]
 8007dee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007df2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007df6:	2202      	movs	r2, #2
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007dfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	fa93 f2a3 	rbit	r2, r3
 8007e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e10:	601a      	str	r2, [r3, #0]
 8007e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	fa93 f2a3 	rbit	r2, r3
 8007e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007e34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e36:	4b7e      	ldr	r3, [pc, #504]	; (8008030 <HAL_RCC_OscConfig+0x8f8>)
 8007e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007e42:	2102      	movs	r1, #2
 8007e44:	6019      	str	r1, [r3, #0]
 8007e46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e4a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	fa93 f1a3 	rbit	r1, r3
 8007e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007e5c:	6019      	str	r1, [r3, #0]
  return result;
 8007e5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e62:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	fab3 f383 	clz	r3, r3
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	f003 031f 	and.w	r3, r3, #31
 8007e78:	2101      	movs	r1, #1
 8007e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e7e:	4013      	ands	r3, r2
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d09d      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x688>
 8007e84:	e08d      	b.n	8007fa2 <HAL_RCC_OscConfig+0x86a>
 8007e86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e8e:	2201      	movs	r2, #1
 8007e90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e96:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	fa93 f2a3 	rbit	r2, r3
 8007ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007ea4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007ea8:	601a      	str	r2, [r3, #0]
  return result;
 8007eaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007eae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007eb2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007eb4:	fab3 f383 	clz	r3, r3
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	461a      	mov	r2, r3
 8007ebc:	4b5d      	ldr	r3, [pc, #372]	; (8008034 <HAL_RCC_OscConfig+0x8fc>)
 8007ebe:	4413      	add	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ec8:	f7fc fa6e 	bl	80043a8 <HAL_GetTick>
 8007ecc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ed0:	e00a      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ed2:	f7fc fa69 	bl	80043a8 <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d902      	bls.n	8007ee8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	f000 bc75 	b.w	80087d2 <HAL_RCC_OscConfig+0x109a>
 8007ee8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007eec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ef4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007ef8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	fa93 f2a3 	rbit	r2, r3
 8007f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f14:	2202      	movs	r2, #2
 8007f16:	601a      	str	r2, [r3, #0]
 8007f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	fa93 f2a3 	rbit	r2, r3
 8007f26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f2e:	601a      	str	r2, [r3, #0]
 8007f30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007f38:	2202      	movs	r2, #2
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f40:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	fa93 f2a3 	rbit	r2, r3
 8007f4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f4e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007f52:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f54:	4b36      	ldr	r3, [pc, #216]	; (8008030 <HAL_RCC_OscConfig+0x8f8>)
 8007f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f5c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007f60:	2102      	movs	r1, #2
 8007f62:	6019      	str	r1, [r3, #0]
 8007f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f68:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	fa93 f1a3 	rbit	r1, r3
 8007f72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f76:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007f7a:	6019      	str	r1, [r3, #0]
  return result;
 8007f7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f80:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	fab3 f383 	clz	r3, r3
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	f003 031f 	and.w	r3, r3, #31
 8007f96:	2101      	movs	r1, #1
 8007f98:	fa01 f303 	lsl.w	r3, r1, r3
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d197      	bne.n	8007ed2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007fa6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0304 	and.w	r3, r3, #4
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f000 81a5 	beq.w	8008302 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fbe:	4b1c      	ldr	r3, [pc, #112]	; (8008030 <HAL_RCC_OscConfig+0x8f8>)
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d116      	bne.n	8007ff8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fca:	4b19      	ldr	r3, [pc, #100]	; (8008030 <HAL_RCC_OscConfig+0x8f8>)
 8007fcc:	69db      	ldr	r3, [r3, #28]
 8007fce:	4a18      	ldr	r2, [pc, #96]	; (8008030 <HAL_RCC_OscConfig+0x8f8>)
 8007fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fd4:	61d3      	str	r3, [r2, #28]
 8007fd6:	4b16      	ldr	r3, [pc, #88]	; (8008030 <HAL_RCC_OscConfig+0x8f8>)
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007fe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007fe6:	601a      	str	r2, [r3, #0]
 8007fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007fec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ff0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ff8:	4b0f      	ldr	r3, [pc, #60]	; (8008038 <HAL_RCC_OscConfig+0x900>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008000:	2b00      	cmp	r3, #0
 8008002:	d121      	bne.n	8008048 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008004:	4b0c      	ldr	r3, [pc, #48]	; (8008038 <HAL_RCC_OscConfig+0x900>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a0b      	ldr	r2, [pc, #44]	; (8008038 <HAL_RCC_OscConfig+0x900>)
 800800a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800800e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008010:	f7fc f9ca 	bl	80043a8 <HAL_GetTick>
 8008014:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008018:	e010      	b.n	800803c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800801a:	f7fc f9c5 	bl	80043a8 <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	2b64      	cmp	r3, #100	; 0x64
 8008028:	d908      	bls.n	800803c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e3d1      	b.n	80087d2 <HAL_RCC_OscConfig+0x109a>
 800802e:	bf00      	nop
 8008030:	40021000 	.word	0x40021000
 8008034:	10908120 	.word	0x10908120
 8008038:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800803c:	4b8d      	ldr	r3, [pc, #564]	; (8008274 <HAL_RCC_OscConfig+0xb3c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008044:	2b00      	cmp	r3, #0
 8008046:	d0e8      	beq.n	800801a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800804c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d106      	bne.n	8008066 <HAL_RCC_OscConfig+0x92e>
 8008058:	4b87      	ldr	r3, [pc, #540]	; (8008278 <HAL_RCC_OscConfig+0xb40>)
 800805a:	6a1b      	ldr	r3, [r3, #32]
 800805c:	4a86      	ldr	r2, [pc, #536]	; (8008278 <HAL_RCC_OscConfig+0xb40>)
 800805e:	f043 0301 	orr.w	r3, r3, #1
 8008062:	6213      	str	r3, [r2, #32]
 8008064:	e035      	b.n	80080d2 <HAL_RCC_OscConfig+0x99a>
 8008066:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800806a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10c      	bne.n	8008090 <HAL_RCC_OscConfig+0x958>
 8008076:	4b80      	ldr	r3, [pc, #512]	; (8008278 <HAL_RCC_OscConfig+0xb40>)
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	4a7f      	ldr	r2, [pc, #508]	; (8008278 <HAL_RCC_OscConfig+0xb40>)
 800807c:	f023 0301 	bic.w	r3, r3, #1
 8008080:	6213      	str	r3, [r2, #32]
 8008082:	4b7d      	ldr	r3, [pc, #500]	; (8008278 <HAL_RCC_OscConfig+0xb40>)
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	4a7c      	ldr	r2, [pc, #496]	; (8008278 <HAL_RCC_OscConfig+0xb40>)
 8008088:	f023 0304 	bic.w	r3, r3, #4
 800808c:	6213      	str	r3, [r2, #32]
 800808e:	e020      	b.n	80080d2 <HAL_RCC_OscConfig+0x99a>
 8008090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008094:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	2b05      	cmp	r3, #5
 800809e:	d10c      	bne.n	80080ba <HAL_RCC_OscConfig+0x982>
 80080a0:	4b75      	ldr	r3, [pc, #468]	; (8008278 <HAL_RCC_OscConfig+0xb40>)
 80080a2:	6a1b      	ldr	r3, [r3, #32]
 80080a4:	4a74      	ldr	r2, [pc, #464]	; (8008278 <HAL_RCC_OscConfig+0xb40>)
 80080a6:	f043 0304 	orr.w	r3, r3, #4
 80080aa:	6213      	str	r3, [r2, #32]
 80080ac:	4b72      	ldr	r3, [pc, #456]	; (8008278 <HAL_RCC_OscConfig+0xb40>)
 80080ae:	6a1b      	ldr	r3, [r3, #32]
 80080b0:	4a71      	ldr	r2, [pc, #452]	; (8008278 <HAL_RCC_OscConfig+0xb40>)
 80080b2:	f043 0301 	orr.w	r3, r3, #1
 80080b6:	6213      	str	r3, [r2, #32]
 80080b8:	e00b      	b.n	80080d2 <HAL_RCC_OscConfig+0x99a>
 80080ba:	4b6f      	ldr	r3, [pc, #444]	; (8008278 <HAL_RCC_OscConfig+0xb40>)
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	4a6e      	ldr	r2, [pc, #440]	; (8008278 <HAL_RCC_OscConfig+0xb40>)
 80080c0:	f023 0301 	bic.w	r3, r3, #1
 80080c4:	6213      	str	r3, [r2, #32]
 80080c6:	4b6c      	ldr	r3, [pc, #432]	; (8008278 <HAL_RCC_OscConfig+0xb40>)
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	4a6b      	ldr	r2, [pc, #428]	; (8008278 <HAL_RCC_OscConfig+0xb40>)
 80080cc:	f023 0304 	bic.w	r3, r3, #4
 80080d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80080d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f000 8081 	beq.w	80081e6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080e4:	f7fc f960 	bl	80043a8 <HAL_GetTick>
 80080e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080ec:	e00b      	b.n	8008106 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080ee:	f7fc f95b 	bl	80043a8 <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80080fe:	4293      	cmp	r3, r2
 8008100:	d901      	bls.n	8008106 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e365      	b.n	80087d2 <HAL_RCC_OscConfig+0x109a>
 8008106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800810a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800810e:	2202      	movs	r2, #2
 8008110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008112:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008116:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	fa93 f2a3 	rbit	r2, r3
 8008120:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008124:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800812e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008132:	2202      	movs	r2, #2
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800813a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	fa93 f2a3 	rbit	r2, r3
 8008144:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008148:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800814c:	601a      	str	r2, [r3, #0]
  return result;
 800814e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008152:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8008156:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008158:	fab3 f383 	clz	r3, r3
 800815c:	b2db      	uxtb	r3, r3
 800815e:	095b      	lsrs	r3, r3, #5
 8008160:	b2db      	uxtb	r3, r3
 8008162:	f043 0302 	orr.w	r3, r3, #2
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b02      	cmp	r3, #2
 800816a:	d102      	bne.n	8008172 <HAL_RCC_OscConfig+0xa3a>
 800816c:	4b42      	ldr	r3, [pc, #264]	; (8008278 <HAL_RCC_OscConfig+0xb40>)
 800816e:	6a1b      	ldr	r3, [r3, #32]
 8008170:	e013      	b.n	800819a <HAL_RCC_OscConfig+0xa62>
 8008172:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008176:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800817a:	2202      	movs	r2, #2
 800817c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800817e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008182:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	fa93 f2a3 	rbit	r2, r3
 800818c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008190:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	4b38      	ldr	r3, [pc, #224]	; (8008278 <HAL_RCC_OscConfig+0xb40>)
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800819e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80081a2:	2102      	movs	r1, #2
 80081a4:	6011      	str	r1, [r2, #0]
 80081a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80081aa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80081ae:	6812      	ldr	r2, [r2, #0]
 80081b0:	fa92 f1a2 	rbit	r1, r2
 80081b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80081b8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80081bc:	6011      	str	r1, [r2, #0]
  return result;
 80081be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80081c2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80081c6:	6812      	ldr	r2, [r2, #0]
 80081c8:	fab2 f282 	clz	r2, r2
 80081cc:	b2d2      	uxtb	r2, r2
 80081ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081d2:	b2d2      	uxtb	r2, r2
 80081d4:	f002 021f 	and.w	r2, r2, #31
 80081d8:	2101      	movs	r1, #1
 80081da:	fa01 f202 	lsl.w	r2, r1, r2
 80081de:	4013      	ands	r3, r2
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d084      	beq.n	80080ee <HAL_RCC_OscConfig+0x9b6>
 80081e4:	e083      	b.n	80082ee <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081e6:	f7fc f8df 	bl	80043a8 <HAL_GetTick>
 80081ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081ee:	e00b      	b.n	8008208 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081f0:	f7fc f8da 	bl	80043a8 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008200:	4293      	cmp	r3, r2
 8008202:	d901      	bls.n	8008208 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e2e4      	b.n	80087d2 <HAL_RCC_OscConfig+0x109a>
 8008208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800820c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008210:	2202      	movs	r2, #2
 8008212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008214:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008218:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	fa93 f2a3 	rbit	r2, r3
 8008222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008226:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008230:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008234:	2202      	movs	r2, #2
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800823c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	fa93 f2a3 	rbit	r2, r3
 8008246:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800824a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800824e:	601a      	str	r2, [r3, #0]
  return result;
 8008250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008254:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008258:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800825a:	fab3 f383 	clz	r3, r3
 800825e:	b2db      	uxtb	r3, r3
 8008260:	095b      	lsrs	r3, r3, #5
 8008262:	b2db      	uxtb	r3, r3
 8008264:	f043 0302 	orr.w	r3, r3, #2
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b02      	cmp	r3, #2
 800826c:	d106      	bne.n	800827c <HAL_RCC_OscConfig+0xb44>
 800826e:	4b02      	ldr	r3, [pc, #8]	; (8008278 <HAL_RCC_OscConfig+0xb40>)
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	e017      	b.n	80082a4 <HAL_RCC_OscConfig+0xb6c>
 8008274:	40007000 	.word	0x40007000
 8008278:	40021000 	.word	0x40021000
 800827c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008280:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008284:	2202      	movs	r2, #2
 8008286:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800828c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	fa93 f2a3 	rbit	r2, r3
 8008296:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800829a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	4bb3      	ldr	r3, [pc, #716]	; (8008570 <HAL_RCC_OscConfig+0xe38>)
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80082a8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80082ac:	2102      	movs	r1, #2
 80082ae:	6011      	str	r1, [r2, #0]
 80082b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80082b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80082b8:	6812      	ldr	r2, [r2, #0]
 80082ba:	fa92 f1a2 	rbit	r1, r2
 80082be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80082c2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80082c6:	6011      	str	r1, [r2, #0]
  return result;
 80082c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80082cc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80082d0:	6812      	ldr	r2, [r2, #0]
 80082d2:	fab2 f282 	clz	r2, r2
 80082d6:	b2d2      	uxtb	r2, r2
 80082d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082dc:	b2d2      	uxtb	r2, r2
 80082de:	f002 021f 	and.w	r2, r2, #31
 80082e2:	2101      	movs	r1, #1
 80082e4:	fa01 f202 	lsl.w	r2, r1, r2
 80082e8:	4013      	ands	r3, r2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d180      	bne.n	80081f0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80082ee:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d105      	bne.n	8008302 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082f6:	4b9e      	ldr	r3, [pc, #632]	; (8008570 <HAL_RCC_OscConfig+0xe38>)
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	4a9d      	ldr	r2, [pc, #628]	; (8008570 <HAL_RCC_OscConfig+0xe38>)
 80082fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008300:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008302:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008306:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	2b00      	cmp	r3, #0
 8008310:	f000 825e 	beq.w	80087d0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008314:	4b96      	ldr	r3, [pc, #600]	; (8008570 <HAL_RCC_OscConfig+0xe38>)
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	f003 030c 	and.w	r3, r3, #12
 800831c:	2b08      	cmp	r3, #8
 800831e:	f000 821f 	beq.w	8008760 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008326:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	2b02      	cmp	r3, #2
 8008330:	f040 8170 	bne.w	8008614 <HAL_RCC_OscConfig+0xedc>
 8008334:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008338:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800833c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008340:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008342:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008346:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	fa93 f2a3 	rbit	r2, r3
 8008350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008354:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008358:	601a      	str	r2, [r3, #0]
  return result;
 800835a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800835e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008362:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008364:	fab3 f383 	clz	r3, r3
 8008368:	b2db      	uxtb	r3, r3
 800836a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800836e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	461a      	mov	r2, r3
 8008376:	2300      	movs	r3, #0
 8008378:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800837a:	f7fc f815 	bl	80043a8 <HAL_GetTick>
 800837e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008382:	e009      	b.n	8008398 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008384:	f7fc f810 	bl	80043a8 <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	2b02      	cmp	r3, #2
 8008392:	d901      	bls.n	8008398 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e21c      	b.n	80087d2 <HAL_RCC_OscConfig+0x109a>
 8008398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800839c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80083a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80083a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80083aa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	fa93 f2a3 	rbit	r2, r3
 80083b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80083b8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80083bc:	601a      	str	r2, [r3, #0]
  return result;
 80083be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80083c2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80083c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80083c8:	fab3 f383 	clz	r3, r3
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	095b      	lsrs	r3, r3, #5
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	f043 0301 	orr.w	r3, r3, #1
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d102      	bne.n	80083e2 <HAL_RCC_OscConfig+0xcaa>
 80083dc:	4b64      	ldr	r3, [pc, #400]	; (8008570 <HAL_RCC_OscConfig+0xe38>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	e027      	b.n	8008432 <HAL_RCC_OscConfig+0xcfa>
 80083e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80083e6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80083ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80083ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80083f4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	fa93 f2a3 	rbit	r2, r3
 80083fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008402:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800840c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8008410:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800841a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	fa93 f2a3 	rbit	r2, r3
 8008424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008428:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	4b50      	ldr	r3, [pc, #320]	; (8008570 <HAL_RCC_OscConfig+0xe38>)
 8008430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008432:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008436:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800843a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800843e:	6011      	str	r1, [r2, #0]
 8008440:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008444:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8008448:	6812      	ldr	r2, [r2, #0]
 800844a:	fa92 f1a2 	rbit	r1, r2
 800844e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008452:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8008456:	6011      	str	r1, [r2, #0]
  return result;
 8008458:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800845c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8008460:	6812      	ldr	r2, [r2, #0]
 8008462:	fab2 f282 	clz	r2, r2
 8008466:	b2d2      	uxtb	r2, r2
 8008468:	f042 0220 	orr.w	r2, r2, #32
 800846c:	b2d2      	uxtb	r2, r2
 800846e:	f002 021f 	and.w	r2, r2, #31
 8008472:	2101      	movs	r1, #1
 8008474:	fa01 f202 	lsl.w	r2, r1, r2
 8008478:	4013      	ands	r3, r2
 800847a:	2b00      	cmp	r3, #0
 800847c:	d182      	bne.n	8008384 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800847e:	4b3c      	ldr	r3, [pc, #240]	; (8008570 <HAL_RCC_OscConfig+0xe38>)
 8008480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008482:	f023 020f 	bic.w	r2, r3, #15
 8008486:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800848a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008492:	4937      	ldr	r1, [pc, #220]	; (8008570 <HAL_RCC_OscConfig+0xe38>)
 8008494:	4313      	orrs	r3, r2
 8008496:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008498:	4b35      	ldr	r3, [pc, #212]	; (8008570 <HAL_RCC_OscConfig+0xe38>)
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80084a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6a19      	ldr	r1, [r3, #32]
 80084ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	69db      	ldr	r3, [r3, #28]
 80084b8:	430b      	orrs	r3, r1
 80084ba:	492d      	ldr	r1, [pc, #180]	; (8008570 <HAL_RCC_OscConfig+0xe38>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	604b      	str	r3, [r1, #4]
 80084c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084c4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80084c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084d2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	fa93 f2a3 	rbit	r2, r3
 80084dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084e0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80084e4:	601a      	str	r2, [r3, #0]
  return result;
 80084e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084ea:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80084ee:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084f0:	fab3 f383 	clz	r3, r3
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80084fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	461a      	mov	r2, r3
 8008502:	2301      	movs	r3, #1
 8008504:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008506:	f7fb ff4f 	bl	80043a8 <HAL_GetTick>
 800850a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800850e:	e009      	b.n	8008524 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008510:	f7fb ff4a 	bl	80043a8 <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	2b02      	cmp	r3, #2
 800851e:	d901      	bls.n	8008524 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e156      	b.n	80087d2 <HAL_RCC_OscConfig+0x109a>
 8008524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008528:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800852c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008532:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008536:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	fa93 f2a3 	rbit	r2, r3
 8008540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008544:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008548:	601a      	str	r2, [r3, #0]
  return result;
 800854a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800854e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008552:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008554:	fab3 f383 	clz	r3, r3
 8008558:	b2db      	uxtb	r3, r3
 800855a:	095b      	lsrs	r3, r3, #5
 800855c:	b2db      	uxtb	r3, r3
 800855e:	f043 0301 	orr.w	r3, r3, #1
 8008562:	b2db      	uxtb	r3, r3
 8008564:	2b01      	cmp	r3, #1
 8008566:	d105      	bne.n	8008574 <HAL_RCC_OscConfig+0xe3c>
 8008568:	4b01      	ldr	r3, [pc, #4]	; (8008570 <HAL_RCC_OscConfig+0xe38>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	e02a      	b.n	80085c4 <HAL_RCC_OscConfig+0xe8c>
 800856e:	bf00      	nop
 8008570:	40021000 	.word	0x40021000
 8008574:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008578:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800857c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008586:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	fa93 f2a3 	rbit	r2, r3
 8008590:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008594:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800859e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80085a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80085ac:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	fa93 f2a3 	rbit	r2, r3
 80085b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80085ba:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80085be:	601a      	str	r2, [r3, #0]
 80085c0:	4b86      	ldr	r3, [pc, #536]	; (80087dc <HAL_RCC_OscConfig+0x10a4>)
 80085c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80085c8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80085cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80085d0:	6011      	str	r1, [r2, #0]
 80085d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80085d6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80085da:	6812      	ldr	r2, [r2, #0]
 80085dc:	fa92 f1a2 	rbit	r1, r2
 80085e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80085e4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80085e8:	6011      	str	r1, [r2, #0]
  return result;
 80085ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80085ee:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80085f2:	6812      	ldr	r2, [r2, #0]
 80085f4:	fab2 f282 	clz	r2, r2
 80085f8:	b2d2      	uxtb	r2, r2
 80085fa:	f042 0220 	orr.w	r2, r2, #32
 80085fe:	b2d2      	uxtb	r2, r2
 8008600:	f002 021f 	and.w	r2, r2, #31
 8008604:	2101      	movs	r1, #1
 8008606:	fa01 f202 	lsl.w	r2, r1, r2
 800860a:	4013      	ands	r3, r2
 800860c:	2b00      	cmp	r3, #0
 800860e:	f43f af7f 	beq.w	8008510 <HAL_RCC_OscConfig+0xdd8>
 8008612:	e0dd      	b.n	80087d0 <HAL_RCC_OscConfig+0x1098>
 8008614:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008618:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800861c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008620:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008626:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	fa93 f2a3 	rbit	r2, r3
 8008630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008634:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008638:	601a      	str	r2, [r3, #0]
  return result;
 800863a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800863e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008642:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008644:	fab3 f383 	clz	r3, r3
 8008648:	b2db      	uxtb	r3, r3
 800864a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800864e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	461a      	mov	r2, r3
 8008656:	2300      	movs	r3, #0
 8008658:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800865a:	f7fb fea5 	bl	80043a8 <HAL_GetTick>
 800865e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008662:	e009      	b.n	8008678 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008664:	f7fb fea0 	bl	80043a8 <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	2b02      	cmp	r3, #2
 8008672:	d901      	bls.n	8008678 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e0ac      	b.n	80087d2 <HAL_RCC_OscConfig+0x109a>
 8008678:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800867c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008680:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008684:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008686:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800868a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	fa93 f2a3 	rbit	r2, r3
 8008694:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008698:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800869c:	601a      	str	r2, [r3, #0]
  return result;
 800869e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086a2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80086a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80086a8:	fab3 f383 	clz	r3, r3
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	095b      	lsrs	r3, r3, #5
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	f043 0301 	orr.w	r3, r3, #1
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d102      	bne.n	80086c2 <HAL_RCC_OscConfig+0xf8a>
 80086bc:	4b47      	ldr	r3, [pc, #284]	; (80087dc <HAL_RCC_OscConfig+0x10a4>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	e027      	b.n	8008712 <HAL_RCC_OscConfig+0xfda>
 80086c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086c6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80086ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80086ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086d4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	fa93 f2a3 	rbit	r2, r3
 80086de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086e2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086ec:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80086f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086fa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	fa93 f2a3 	rbit	r2, r3
 8008704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008708:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	4b33      	ldr	r3, [pc, #204]	; (80087dc <HAL_RCC_OscConfig+0x10a4>)
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008716:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800871a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800871e:	6011      	str	r1, [r2, #0]
 8008720:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008724:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008728:	6812      	ldr	r2, [r2, #0]
 800872a:	fa92 f1a2 	rbit	r1, r2
 800872e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008732:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8008736:	6011      	str	r1, [r2, #0]
  return result;
 8008738:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800873c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8008740:	6812      	ldr	r2, [r2, #0]
 8008742:	fab2 f282 	clz	r2, r2
 8008746:	b2d2      	uxtb	r2, r2
 8008748:	f042 0220 	orr.w	r2, r2, #32
 800874c:	b2d2      	uxtb	r2, r2
 800874e:	f002 021f 	and.w	r2, r2, #31
 8008752:	2101      	movs	r1, #1
 8008754:	fa01 f202 	lsl.w	r2, r1, r2
 8008758:	4013      	ands	r3, r2
 800875a:	2b00      	cmp	r3, #0
 800875c:	d182      	bne.n	8008664 <HAL_RCC_OscConfig+0xf2c>
 800875e:	e037      	b.n	80087d0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008764:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d101      	bne.n	8008774 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e02e      	b.n	80087d2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008774:	4b19      	ldr	r3, [pc, #100]	; (80087dc <HAL_RCC_OscConfig+0x10a4>)
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800877c:	4b17      	ldr	r3, [pc, #92]	; (80087dc <HAL_RCC_OscConfig+0x10a4>)
 800877e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008780:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008784:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008788:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800878c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008790:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	429a      	cmp	r2, r3
 800879a:	d117      	bne.n	80087cc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800879c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80087a0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80087a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d10b      	bne.n	80087cc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80087b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80087b8:	f003 020f 	and.w	r2, r3, #15
 80087bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d001      	beq.n	80087d0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e000      	b.n	80087d2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	40021000 	.word	0x40021000

080087e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b09e      	sub	sp, #120	; 0x78
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80087ea:	2300      	movs	r3, #0
 80087ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e162      	b.n	8008abe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80087f8:	4b90      	ldr	r3, [pc, #576]	; (8008a3c <HAL_RCC_ClockConfig+0x25c>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0307 	and.w	r3, r3, #7
 8008800:	683a      	ldr	r2, [r7, #0]
 8008802:	429a      	cmp	r2, r3
 8008804:	d910      	bls.n	8008828 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008806:	4b8d      	ldr	r3, [pc, #564]	; (8008a3c <HAL_RCC_ClockConfig+0x25c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f023 0207 	bic.w	r2, r3, #7
 800880e:	498b      	ldr	r1, [pc, #556]	; (8008a3c <HAL_RCC_ClockConfig+0x25c>)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	4313      	orrs	r3, r2
 8008814:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008816:	4b89      	ldr	r3, [pc, #548]	; (8008a3c <HAL_RCC_ClockConfig+0x25c>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 0307 	and.w	r3, r3, #7
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	429a      	cmp	r2, r3
 8008822:	d001      	beq.n	8008828 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e14a      	b.n	8008abe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0302 	and.w	r3, r3, #2
 8008830:	2b00      	cmp	r3, #0
 8008832:	d008      	beq.n	8008846 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008834:	4b82      	ldr	r3, [pc, #520]	; (8008a40 <HAL_RCC_ClockConfig+0x260>)
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	497f      	ldr	r1, [pc, #508]	; (8008a40 <HAL_RCC_ClockConfig+0x260>)
 8008842:	4313      	orrs	r3, r2
 8008844:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 0301 	and.w	r3, r3, #1
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 80dc 	beq.w	8008a0c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d13c      	bne.n	80088d6 <HAL_RCC_ClockConfig+0xf6>
 800885c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008860:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008864:	fa93 f3a3 	rbit	r3, r3
 8008868:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800886a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800886c:	fab3 f383 	clz	r3, r3
 8008870:	b2db      	uxtb	r3, r3
 8008872:	095b      	lsrs	r3, r3, #5
 8008874:	b2db      	uxtb	r3, r3
 8008876:	f043 0301 	orr.w	r3, r3, #1
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b01      	cmp	r3, #1
 800887e:	d102      	bne.n	8008886 <HAL_RCC_ClockConfig+0xa6>
 8008880:	4b6f      	ldr	r3, [pc, #444]	; (8008a40 <HAL_RCC_ClockConfig+0x260>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	e00f      	b.n	80088a6 <HAL_RCC_ClockConfig+0xc6>
 8008886:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800888a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800888c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800888e:	fa93 f3a3 	rbit	r3, r3
 8008892:	667b      	str	r3, [r7, #100]	; 0x64
 8008894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008898:	663b      	str	r3, [r7, #96]	; 0x60
 800889a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800889c:	fa93 f3a3 	rbit	r3, r3
 80088a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088a2:	4b67      	ldr	r3, [pc, #412]	; (8008a40 <HAL_RCC_ClockConfig+0x260>)
 80088a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80088aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80088ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088ae:	fa92 f2a2 	rbit	r2, r2
 80088b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80088b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088b6:	fab2 f282 	clz	r2, r2
 80088ba:	b2d2      	uxtb	r2, r2
 80088bc:	f042 0220 	orr.w	r2, r2, #32
 80088c0:	b2d2      	uxtb	r2, r2
 80088c2:	f002 021f 	and.w	r2, r2, #31
 80088c6:	2101      	movs	r1, #1
 80088c8:	fa01 f202 	lsl.w	r2, r1, r2
 80088cc:	4013      	ands	r3, r2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d17b      	bne.n	80089ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e0f3      	b.n	8008abe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d13c      	bne.n	8008958 <HAL_RCC_ClockConfig+0x178>
 80088de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088e6:	fa93 f3a3 	rbit	r3, r3
 80088ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80088ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088ee:	fab3 f383 	clz	r3, r3
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	095b      	lsrs	r3, r3, #5
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	f043 0301 	orr.w	r3, r3, #1
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d102      	bne.n	8008908 <HAL_RCC_ClockConfig+0x128>
 8008902:	4b4f      	ldr	r3, [pc, #316]	; (8008a40 <HAL_RCC_ClockConfig+0x260>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	e00f      	b.n	8008928 <HAL_RCC_ClockConfig+0x148>
 8008908:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800890c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800890e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008910:	fa93 f3a3 	rbit	r3, r3
 8008914:	647b      	str	r3, [r7, #68]	; 0x44
 8008916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800891a:	643b      	str	r3, [r7, #64]	; 0x40
 800891c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800891e:	fa93 f3a3 	rbit	r3, r3
 8008922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008924:	4b46      	ldr	r3, [pc, #280]	; (8008a40 <HAL_RCC_ClockConfig+0x260>)
 8008926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008928:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800892c:	63ba      	str	r2, [r7, #56]	; 0x38
 800892e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008930:	fa92 f2a2 	rbit	r2, r2
 8008934:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8008936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008938:	fab2 f282 	clz	r2, r2
 800893c:	b2d2      	uxtb	r2, r2
 800893e:	f042 0220 	orr.w	r2, r2, #32
 8008942:	b2d2      	uxtb	r2, r2
 8008944:	f002 021f 	and.w	r2, r2, #31
 8008948:	2101      	movs	r1, #1
 800894a:	fa01 f202 	lsl.w	r2, r1, r2
 800894e:	4013      	ands	r3, r2
 8008950:	2b00      	cmp	r3, #0
 8008952:	d13a      	bne.n	80089ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e0b2      	b.n	8008abe <HAL_RCC_ClockConfig+0x2de>
 8008958:	2302      	movs	r3, #2
 800895a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800895c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895e:	fa93 f3a3 	rbit	r3, r3
 8008962:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008966:	fab3 f383 	clz	r3, r3
 800896a:	b2db      	uxtb	r3, r3
 800896c:	095b      	lsrs	r3, r3, #5
 800896e:	b2db      	uxtb	r3, r3
 8008970:	f043 0301 	orr.w	r3, r3, #1
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b01      	cmp	r3, #1
 8008978:	d102      	bne.n	8008980 <HAL_RCC_ClockConfig+0x1a0>
 800897a:	4b31      	ldr	r3, [pc, #196]	; (8008a40 <HAL_RCC_ClockConfig+0x260>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	e00d      	b.n	800899c <HAL_RCC_ClockConfig+0x1bc>
 8008980:	2302      	movs	r3, #2
 8008982:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008986:	fa93 f3a3 	rbit	r3, r3
 800898a:	627b      	str	r3, [r7, #36]	; 0x24
 800898c:	2302      	movs	r3, #2
 800898e:	623b      	str	r3, [r7, #32]
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	fa93 f3a3 	rbit	r3, r3
 8008996:	61fb      	str	r3, [r7, #28]
 8008998:	4b29      	ldr	r3, [pc, #164]	; (8008a40 <HAL_RCC_ClockConfig+0x260>)
 800899a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899c:	2202      	movs	r2, #2
 800899e:	61ba      	str	r2, [r7, #24]
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	fa92 f2a2 	rbit	r2, r2
 80089a6:	617a      	str	r2, [r7, #20]
  return result;
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	fab2 f282 	clz	r2, r2
 80089ae:	b2d2      	uxtb	r2, r2
 80089b0:	f042 0220 	orr.w	r2, r2, #32
 80089b4:	b2d2      	uxtb	r2, r2
 80089b6:	f002 021f 	and.w	r2, r2, #31
 80089ba:	2101      	movs	r1, #1
 80089bc:	fa01 f202 	lsl.w	r2, r1, r2
 80089c0:	4013      	ands	r3, r2
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e079      	b.n	8008abe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80089ca:	4b1d      	ldr	r3, [pc, #116]	; (8008a40 <HAL_RCC_ClockConfig+0x260>)
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	f023 0203 	bic.w	r2, r3, #3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	491a      	ldr	r1, [pc, #104]	; (8008a40 <HAL_RCC_ClockConfig+0x260>)
 80089d8:	4313      	orrs	r3, r2
 80089da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089dc:	f7fb fce4 	bl	80043a8 <HAL_GetTick>
 80089e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089e2:	e00a      	b.n	80089fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089e4:	f7fb fce0 	bl	80043a8 <HAL_GetTick>
 80089e8:	4602      	mov	r2, r0
 80089ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d901      	bls.n	80089fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e061      	b.n	8008abe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089fa:	4b11      	ldr	r3, [pc, #68]	; (8008a40 <HAL_RCC_ClockConfig+0x260>)
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	f003 020c 	and.w	r2, r3, #12
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d1eb      	bne.n	80089e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a0c:	4b0b      	ldr	r3, [pc, #44]	; (8008a3c <HAL_RCC_ClockConfig+0x25c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0307 	and.w	r3, r3, #7
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d214      	bcs.n	8008a44 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a1a:	4b08      	ldr	r3, [pc, #32]	; (8008a3c <HAL_RCC_ClockConfig+0x25c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f023 0207 	bic.w	r2, r3, #7
 8008a22:	4906      	ldr	r1, [pc, #24]	; (8008a3c <HAL_RCC_ClockConfig+0x25c>)
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a2a:	4b04      	ldr	r3, [pc, #16]	; (8008a3c <HAL_RCC_ClockConfig+0x25c>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 0307 	and.w	r3, r3, #7
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d005      	beq.n	8008a44 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e040      	b.n	8008abe <HAL_RCC_ClockConfig+0x2de>
 8008a3c:	40022000 	.word	0x40022000
 8008a40:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0304 	and.w	r3, r3, #4
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d008      	beq.n	8008a62 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a50:	4b1d      	ldr	r3, [pc, #116]	; (8008ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	491a      	ldr	r1, [pc, #104]	; (8008ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0308 	and.w	r3, r3, #8
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d009      	beq.n	8008a82 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a6e:	4b16      	ldr	r3, [pc, #88]	; (8008ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	00db      	lsls	r3, r3, #3
 8008a7c:	4912      	ldr	r1, [pc, #72]	; (8008ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008a82:	f000 f829 	bl	8008ad8 <HAL_RCC_GetSysClockFreq>
 8008a86:	4601      	mov	r1, r0
 8008a88:	4b0f      	ldr	r3, [pc, #60]	; (8008ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a90:	22f0      	movs	r2, #240	; 0xf0
 8008a92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	fa92 f2a2 	rbit	r2, r2
 8008a9a:	60fa      	str	r2, [r7, #12]
  return result;
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	fab2 f282 	clz	r2, r2
 8008aa2:	b2d2      	uxtb	r2, r2
 8008aa4:	40d3      	lsrs	r3, r2
 8008aa6:	4a09      	ldr	r2, [pc, #36]	; (8008acc <HAL_RCC_ClockConfig+0x2ec>)
 8008aa8:	5cd3      	ldrb	r3, [r2, r3]
 8008aaa:	fa21 f303 	lsr.w	r3, r1, r3
 8008aae:	4a08      	ldr	r2, [pc, #32]	; (8008ad0 <HAL_RCC_ClockConfig+0x2f0>)
 8008ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008ab2:	4b08      	ldr	r3, [pc, #32]	; (8008ad4 <HAL_RCC_ClockConfig+0x2f4>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fb fc32 	bl	8004320 <HAL_InitTick>
  
  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3778      	adds	r7, #120	; 0x78
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	40021000 	.word	0x40021000
 8008acc:	0800f81c 	.word	0x0800f81c
 8008ad0:	200000b4 	.word	0x200000b4
 8008ad4:	200000b8 	.word	0x200000b8

08008ad8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b08b      	sub	sp, #44	; 0x2c
 8008adc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	61fb      	str	r3, [r7, #28]
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	61bb      	str	r3, [r7, #24]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8008aea:	2300      	movs	r3, #0
 8008aec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008aee:	2300      	movs	r3, #0
 8008af0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008af2:	4b2a      	ldr	r3, [pc, #168]	; (8008b9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	f003 030c 	and.w	r3, r3, #12
 8008afe:	2b04      	cmp	r3, #4
 8008b00:	d002      	beq.n	8008b08 <HAL_RCC_GetSysClockFreq+0x30>
 8008b02:	2b08      	cmp	r3, #8
 8008b04:	d003      	beq.n	8008b0e <HAL_RCC_GetSysClockFreq+0x36>
 8008b06:	e03f      	b.n	8008b88 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008b08:	4b25      	ldr	r3, [pc, #148]	; (8008ba0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008b0a:	623b      	str	r3, [r7, #32]
      break;
 8008b0c:	e03f      	b.n	8008b8e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008b14:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008b18:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	fa92 f2a2 	rbit	r2, r2
 8008b20:	607a      	str	r2, [r7, #4]
  return result;
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	fab2 f282 	clz	r2, r2
 8008b28:	b2d2      	uxtb	r2, r2
 8008b2a:	40d3      	lsrs	r3, r2
 8008b2c:	4a1d      	ldr	r2, [pc, #116]	; (8008ba4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008b2e:	5cd3      	ldrb	r3, [r2, r3]
 8008b30:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008b32:	4b1a      	ldr	r3, [pc, #104]	; (8008b9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b36:	f003 030f 	and.w	r3, r3, #15
 8008b3a:	220f      	movs	r2, #15
 8008b3c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	fa92 f2a2 	rbit	r2, r2
 8008b44:	60fa      	str	r2, [r7, #12]
  return result;
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	fab2 f282 	clz	r2, r2
 8008b4c:	b2d2      	uxtb	r2, r2
 8008b4e:	40d3      	lsrs	r3, r2
 8008b50:	4a15      	ldr	r2, [pc, #84]	; (8008ba8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008b52:	5cd3      	ldrb	r3, [r2, r3]
 8008b54:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d008      	beq.n	8008b72 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008b60:	4a0f      	ldr	r2, [pc, #60]	; (8008ba0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	fb02 f303 	mul.w	r3, r2, r3
 8008b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8008b70:	e007      	b.n	8008b82 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008b72:	4a0b      	ldr	r2, [pc, #44]	; (8008ba0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	fb02 f303 	mul.w	r3, r2, r3
 8008b80:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b84:	623b      	str	r3, [r7, #32]
      break;
 8008b86:	e002      	b.n	8008b8e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008b88:	4b05      	ldr	r3, [pc, #20]	; (8008ba0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008b8a:	623b      	str	r3, [r7, #32]
      break;
 8008b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	372c      	adds	r7, #44	; 0x2c
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr
 8008b9c:	40021000 	.word	0x40021000
 8008ba0:	007a1200 	.word	0x007a1200
 8008ba4:	0800f834 	.word	0x0800f834
 8008ba8:	0800f844 	.word	0x0800f844

08008bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bac:	b480      	push	{r7}
 8008bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bb0:	4b03      	ldr	r3, [pc, #12]	; (8008bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	200000b4 	.word	0x200000b4

08008bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008bca:	f7ff ffef 	bl	8008bac <HAL_RCC_GetHCLKFreq>
 8008bce:	4601      	mov	r1, r0
 8008bd0:	4b0b      	ldr	r3, [pc, #44]	; (8008c00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bd8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008bdc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	fa92 f2a2 	rbit	r2, r2
 8008be4:	603a      	str	r2, [r7, #0]
  return result;
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	fab2 f282 	clz	r2, r2
 8008bec:	b2d2      	uxtb	r2, r2
 8008bee:	40d3      	lsrs	r3, r2
 8008bf0:	4a04      	ldr	r2, [pc, #16]	; (8008c04 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008bf2:	5cd3      	ldrb	r3, [r2, r3]
 8008bf4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	40021000 	.word	0x40021000
 8008c04:	0800f82c 	.word	0x0800f82c

08008c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008c0e:	f7ff ffcd 	bl	8008bac <HAL_RCC_GetHCLKFreq>
 8008c12:	4601      	mov	r1, r0
 8008c14:	4b0b      	ldr	r3, [pc, #44]	; (8008c44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008c1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008c20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	fa92 f2a2 	rbit	r2, r2
 8008c28:	603a      	str	r2, [r7, #0]
  return result;
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	fab2 f282 	clz	r2, r2
 8008c30:	b2d2      	uxtb	r2, r2
 8008c32:	40d3      	lsrs	r3, r2
 8008c34:	4a04      	ldr	r2, [pc, #16]	; (8008c48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8008c36:	5cd3      	ldrb	r3, [r2, r3]
 8008c38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	40021000 	.word	0x40021000
 8008c48:	0800f82c 	.word	0x0800f82c

08008c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b092      	sub	sp, #72	; 0x48
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 80d4 	beq.w	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c70:	4b4e      	ldr	r3, [pc, #312]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c72:	69db      	ldr	r3, [r3, #28]
 8008c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10e      	bne.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c7c:	4b4b      	ldr	r3, [pc, #300]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c7e:	69db      	ldr	r3, [r3, #28]
 8008c80:	4a4a      	ldr	r2, [pc, #296]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c86:	61d3      	str	r3, [r2, #28]
 8008c88:	4b48      	ldr	r3, [pc, #288]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c8a:	69db      	ldr	r3, [r3, #28]
 8008c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c90:	60bb      	str	r3, [r7, #8]
 8008c92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c94:	2301      	movs	r3, #1
 8008c96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c9a:	4b45      	ldr	r3, [pc, #276]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d118      	bne.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ca6:	4b42      	ldr	r3, [pc, #264]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a41      	ldr	r2, [pc, #260]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cb0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cb2:	f7fb fb79 	bl	80043a8 <HAL_GetTick>
 8008cb6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cb8:	e008      	b.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cba:	f7fb fb75 	bl	80043a8 <HAL_GetTick>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	2b64      	cmp	r3, #100	; 0x64
 8008cc6:	d901      	bls.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e1d6      	b.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ccc:	4b38      	ldr	r3, [pc, #224]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d0f0      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008cd8:	4b34      	ldr	r3, [pc, #208]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f000 8084 	beq.w	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d07c      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008cf8:	4b2c      	ldr	r3, [pc, #176]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008cfa:	6a1b      	ldr	r3, [r3, #32]
 8008cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0a:	fa93 f3a3 	rbit	r3, r3
 8008d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008d12:	fab3 f383 	clz	r3, r3
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	461a      	mov	r2, r3
 8008d1a:	4b26      	ldr	r3, [pc, #152]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008d1c:	4413      	add	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	461a      	mov	r2, r3
 8008d22:	2301      	movs	r3, #1
 8008d24:	6013      	str	r3, [r2, #0]
 8008d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2e:	fa93 f3a3 	rbit	r3, r3
 8008d32:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008d36:	fab3 f383 	clz	r3, r3
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	4b1d      	ldr	r3, [pc, #116]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008d40:	4413      	add	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	461a      	mov	r2, r3
 8008d46:	2300      	movs	r3, #0
 8008d48:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008d4a:	4a18      	ldr	r2, [pc, #96]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d4e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d04b      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d5a:	f7fb fb25 	bl	80043a8 <HAL_GetTick>
 8008d5e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d60:	e00a      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d62:	f7fb fb21 	bl	80043a8 <HAL_GetTick>
 8008d66:	4602      	mov	r2, r0
 8008d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d901      	bls.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e180      	b.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008d78:	2302      	movs	r3, #2
 8008d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7e:	fa93 f3a3 	rbit	r3, r3
 8008d82:	627b      	str	r3, [r7, #36]	; 0x24
 8008d84:	2302      	movs	r3, #2
 8008d86:	623b      	str	r3, [r7, #32]
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	fa93 f3a3 	rbit	r3, r3
 8008d8e:	61fb      	str	r3, [r7, #28]
  return result;
 8008d90:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d92:	fab3 f383 	clz	r3, r3
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	095b      	lsrs	r3, r3, #5
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	f043 0302 	orr.w	r3, r3, #2
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d108      	bne.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008da6:	4b01      	ldr	r3, [pc, #4]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	e00d      	b.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008dac:	40021000 	.word	0x40021000
 8008db0:	40007000 	.word	0x40007000
 8008db4:	10908100 	.word	0x10908100
 8008db8:	2302      	movs	r3, #2
 8008dba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	fa93 f3a3 	rbit	r3, r3
 8008dc2:	617b      	str	r3, [r7, #20]
 8008dc4:	4b9a      	ldr	r3, [pc, #616]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc8:	2202      	movs	r2, #2
 8008dca:	613a      	str	r2, [r7, #16]
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	fa92 f2a2 	rbit	r2, r2
 8008dd2:	60fa      	str	r2, [r7, #12]
  return result;
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	fab2 f282 	clz	r2, r2
 8008dda:	b2d2      	uxtb	r2, r2
 8008ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008de0:	b2d2      	uxtb	r2, r2
 8008de2:	f002 021f 	and.w	r2, r2, #31
 8008de6:	2101      	movs	r1, #1
 8008de8:	fa01 f202 	lsl.w	r2, r1, r2
 8008dec:	4013      	ands	r3, r2
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d0b7      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008df2:	4b8f      	ldr	r3, [pc, #572]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	498c      	ldr	r1, [pc, #560]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008e00:	4313      	orrs	r3, r2
 8008e02:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008e04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d105      	bne.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e0c:	4b88      	ldr	r3, [pc, #544]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008e0e:	69db      	ldr	r3, [r3, #28]
 8008e10:	4a87      	ldr	r2, [pc, #540]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0301 	and.w	r3, r3, #1
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d008      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008e24:	4b82      	ldr	r3, [pc, #520]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e28:	f023 0203 	bic.w	r2, r3, #3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	497f      	ldr	r1, [pc, #508]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008e32:	4313      	orrs	r3, r2
 8008e34:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 0302 	and.w	r3, r3, #2
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d008      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e42:	4b7b      	ldr	r3, [pc, #492]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	4978      	ldr	r1, [pc, #480]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008e50:	4313      	orrs	r3, r2
 8008e52:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 0304 	and.w	r3, r3, #4
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d008      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008e60:	4b73      	ldr	r3, [pc, #460]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	4970      	ldr	r1, [pc, #448]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 0320 	and.w	r3, r3, #32
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d008      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e7e:	4b6c      	ldr	r3, [pc, #432]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e82:	f023 0210 	bic.w	r2, r3, #16
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	69db      	ldr	r3, [r3, #28]
 8008e8a:	4969      	ldr	r1, [pc, #420]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d008      	beq.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008e9c:	4b64      	ldr	r3, [pc, #400]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ea8:	4961      	ldr	r1, [pc, #388]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d008      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008eba:	4b5d      	ldr	r3, [pc, #372]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebe:	f023 0220 	bic.w	r2, r3, #32
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
 8008ec6:	495a      	ldr	r1, [pc, #360]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d008      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008ed8:	4b55      	ldr	r3, [pc, #340]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008edc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	4952      	ldr	r1, [pc, #328]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 0308 	and.w	r3, r3, #8
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d008      	beq.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008ef6:	4b4e      	ldr	r3, [pc, #312]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	494b      	ldr	r1, [pc, #300]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f04:	4313      	orrs	r3, r2
 8008f06:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 0310 	and.w	r3, r3, #16
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d008      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008f14:	4b46      	ldr	r3, [pc, #280]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	4943      	ldr	r1, [pc, #268]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f22:	4313      	orrs	r3, r2
 8008f24:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d008      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008f32:	4b3f      	ldr	r3, [pc, #252]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3e:	493c      	ldr	r1, [pc, #240]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f40:	4313      	orrs	r3, r2
 8008f42:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d008      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008f50:	4b37      	ldr	r3, [pc, #220]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f54:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5c:	4934      	ldr	r1, [pc, #208]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d008      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8008f6e:	4b30      	ldr	r3, [pc, #192]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f72:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7a:	492d      	ldr	r1, [pc, #180]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d008      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008f8c:	4b28      	ldr	r3, [pc, #160]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f98:	4925      	ldr	r1, [pc, #148]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d008      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8008faa:	4b21      	ldr	r3, [pc, #132]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb6:	491e      	ldr	r1, [pc, #120]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d008      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8008fc8:	4b19      	ldr	r3, [pc, #100]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fcc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd4:	4916      	ldr	r1, [pc, #88]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d008      	beq.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8008fe6:	4b12      	ldr	r3, [pc, #72]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff2:	490f      	ldr	r1, [pc, #60]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009000:	2b00      	cmp	r3, #0
 8009002:	d008      	beq.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8009004:	4b0a      	ldr	r3, [pc, #40]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009008:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009010:	4907      	ldr	r1, [pc, #28]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009012:	4313      	orrs	r3, r2
 8009014:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00c      	beq.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8009022:	4b03      	ldr	r3, [pc, #12]	; (8009030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009026:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	e002      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800902e:	bf00      	nop
 8009030:	40021000 	.word	0x40021000
 8009034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009036:	4913      	ldr	r1, [pc, #76]	; (8009084 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009038:	4313      	orrs	r3, r2
 800903a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009044:	2b00      	cmp	r3, #0
 8009046:	d008      	beq.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8009048:	4b0e      	ldr	r3, [pc, #56]	; (8009084 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800904a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009054:	490b      	ldr	r1, [pc, #44]	; (8009084 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009056:	4313      	orrs	r3, r2
 8009058:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009062:	2b00      	cmp	r3, #0
 8009064:	d008      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8009066:	4b07      	ldr	r3, [pc, #28]	; (8009084 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009072:	4904      	ldr	r1, [pc, #16]	; (8009084 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009074:	4313      	orrs	r3, r2
 8009076:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3748      	adds	r7, #72	; 0x48
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	40021000 	.word	0x40021000

08009088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d101      	bne.n	800909a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e049      	b.n	800912e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d106      	bne.n	80090b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7fa fe20 	bl	8003cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2202      	movs	r2, #2
 80090b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3304      	adds	r3, #4
 80090c4:	4619      	mov	r1, r3
 80090c6:	4610      	mov	r0, r2
 80090c8:	f000 fcd2 	bl	8009a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b082      	sub	sp, #8
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d101      	bne.n	8009148 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	e049      	b.n	80091dc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800914e:	b2db      	uxtb	r3, r3
 8009150:	2b00      	cmp	r3, #0
 8009152:	d106      	bne.n	8009162 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f841 	bl	80091e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2202      	movs	r2, #2
 8009166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	3304      	adds	r3, #4
 8009172:	4619      	mov	r1, r3
 8009174:	4610      	mov	r0, r2
 8009176:	f000 fc7b 	bl	8009a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2201      	movs	r2, #1
 800919e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2201      	movs	r2, #1
 80091be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80091ec:	bf00      	nop
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d109      	bne.n	800921c <HAL_TIM_PWM_Start+0x24>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b01      	cmp	r3, #1
 8009212:	bf14      	ite	ne
 8009214:	2301      	movne	r3, #1
 8009216:	2300      	moveq	r3, #0
 8009218:	b2db      	uxtb	r3, r3
 800921a:	e03c      	b.n	8009296 <HAL_TIM_PWM_Start+0x9e>
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	2b04      	cmp	r3, #4
 8009220:	d109      	bne.n	8009236 <HAL_TIM_PWM_Start+0x3e>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009228:	b2db      	uxtb	r3, r3
 800922a:	2b01      	cmp	r3, #1
 800922c:	bf14      	ite	ne
 800922e:	2301      	movne	r3, #1
 8009230:	2300      	moveq	r3, #0
 8009232:	b2db      	uxtb	r3, r3
 8009234:	e02f      	b.n	8009296 <HAL_TIM_PWM_Start+0x9e>
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2b08      	cmp	r3, #8
 800923a:	d109      	bne.n	8009250 <HAL_TIM_PWM_Start+0x58>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b01      	cmp	r3, #1
 8009246:	bf14      	ite	ne
 8009248:	2301      	movne	r3, #1
 800924a:	2300      	moveq	r3, #0
 800924c:	b2db      	uxtb	r3, r3
 800924e:	e022      	b.n	8009296 <HAL_TIM_PWM_Start+0x9e>
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	2b0c      	cmp	r3, #12
 8009254:	d109      	bne.n	800926a <HAL_TIM_PWM_Start+0x72>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b01      	cmp	r3, #1
 8009260:	bf14      	ite	ne
 8009262:	2301      	movne	r3, #1
 8009264:	2300      	moveq	r3, #0
 8009266:	b2db      	uxtb	r3, r3
 8009268:	e015      	b.n	8009296 <HAL_TIM_PWM_Start+0x9e>
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b10      	cmp	r3, #16
 800926e:	d109      	bne.n	8009284 <HAL_TIM_PWM_Start+0x8c>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009276:	b2db      	uxtb	r3, r3
 8009278:	2b01      	cmp	r3, #1
 800927a:	bf14      	ite	ne
 800927c:	2301      	movne	r3, #1
 800927e:	2300      	moveq	r3, #0
 8009280:	b2db      	uxtb	r3, r3
 8009282:	e008      	b.n	8009296 <HAL_TIM_PWM_Start+0x9e>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800928a:	b2db      	uxtb	r3, r3
 800928c:	2b01      	cmp	r3, #1
 800928e:	bf14      	ite	ne
 8009290:	2301      	movne	r3, #1
 8009292:	2300      	moveq	r3, #0
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e0a1      	b.n	80093e2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d104      	bne.n	80092ae <HAL_TIM_PWM_Start+0xb6>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2202      	movs	r2, #2
 80092a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092ac:	e023      	b.n	80092f6 <HAL_TIM_PWM_Start+0xfe>
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2b04      	cmp	r3, #4
 80092b2:	d104      	bne.n	80092be <HAL_TIM_PWM_Start+0xc6>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2202      	movs	r2, #2
 80092b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092bc:	e01b      	b.n	80092f6 <HAL_TIM_PWM_Start+0xfe>
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	2b08      	cmp	r3, #8
 80092c2:	d104      	bne.n	80092ce <HAL_TIM_PWM_Start+0xd6>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2202      	movs	r2, #2
 80092c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092cc:	e013      	b.n	80092f6 <HAL_TIM_PWM_Start+0xfe>
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2b0c      	cmp	r3, #12
 80092d2:	d104      	bne.n	80092de <HAL_TIM_PWM_Start+0xe6>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2202      	movs	r2, #2
 80092d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092dc:	e00b      	b.n	80092f6 <HAL_TIM_PWM_Start+0xfe>
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	2b10      	cmp	r3, #16
 80092e2:	d104      	bne.n	80092ee <HAL_TIM_PWM_Start+0xf6>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2202      	movs	r2, #2
 80092e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092ec:	e003      	b.n	80092f6 <HAL_TIM_PWM_Start+0xfe>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2202      	movs	r2, #2
 80092f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2201      	movs	r2, #1
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 fff4 	bl	800a2ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a38      	ldr	r2, [pc, #224]	; (80093ec <HAL_TIM_PWM_Start+0x1f4>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d018      	beq.n	8009340 <HAL_TIM_PWM_Start+0x148>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a37      	ldr	r2, [pc, #220]	; (80093f0 <HAL_TIM_PWM_Start+0x1f8>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d013      	beq.n	8009340 <HAL_TIM_PWM_Start+0x148>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a35      	ldr	r2, [pc, #212]	; (80093f4 <HAL_TIM_PWM_Start+0x1fc>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d00e      	beq.n	8009340 <HAL_TIM_PWM_Start+0x148>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a34      	ldr	r2, [pc, #208]	; (80093f8 <HAL_TIM_PWM_Start+0x200>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d009      	beq.n	8009340 <HAL_TIM_PWM_Start+0x148>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a32      	ldr	r2, [pc, #200]	; (80093fc <HAL_TIM_PWM_Start+0x204>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d004      	beq.n	8009340 <HAL_TIM_PWM_Start+0x148>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a31      	ldr	r2, [pc, #196]	; (8009400 <HAL_TIM_PWM_Start+0x208>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d101      	bne.n	8009344 <HAL_TIM_PWM_Start+0x14c>
 8009340:	2301      	movs	r3, #1
 8009342:	e000      	b.n	8009346 <HAL_TIM_PWM_Start+0x14e>
 8009344:	2300      	movs	r3, #0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d007      	beq.n	800935a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009358:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a23      	ldr	r2, [pc, #140]	; (80093ec <HAL_TIM_PWM_Start+0x1f4>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d01d      	beq.n	80093a0 <HAL_TIM_PWM_Start+0x1a8>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800936c:	d018      	beq.n	80093a0 <HAL_TIM_PWM_Start+0x1a8>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a24      	ldr	r2, [pc, #144]	; (8009404 <HAL_TIM_PWM_Start+0x20c>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d013      	beq.n	80093a0 <HAL_TIM_PWM_Start+0x1a8>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a22      	ldr	r2, [pc, #136]	; (8009408 <HAL_TIM_PWM_Start+0x210>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d00e      	beq.n	80093a0 <HAL_TIM_PWM_Start+0x1a8>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a1a      	ldr	r2, [pc, #104]	; (80093f0 <HAL_TIM_PWM_Start+0x1f8>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d009      	beq.n	80093a0 <HAL_TIM_PWM_Start+0x1a8>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a18      	ldr	r2, [pc, #96]	; (80093f4 <HAL_TIM_PWM_Start+0x1fc>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d004      	beq.n	80093a0 <HAL_TIM_PWM_Start+0x1a8>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a19      	ldr	r2, [pc, #100]	; (8009400 <HAL_TIM_PWM_Start+0x208>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d115      	bne.n	80093cc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	689a      	ldr	r2, [r3, #8]
 80093a6:	4b19      	ldr	r3, [pc, #100]	; (800940c <HAL_TIM_PWM_Start+0x214>)
 80093a8:	4013      	ands	r3, r2
 80093aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2b06      	cmp	r3, #6
 80093b0:	d015      	beq.n	80093de <HAL_TIM_PWM_Start+0x1e6>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093b8:	d011      	beq.n	80093de <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f042 0201 	orr.w	r2, r2, #1
 80093c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093ca:	e008      	b.n	80093de <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f042 0201 	orr.w	r2, r2, #1
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	e000      	b.n	80093e0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	40012c00 	.word	0x40012c00
 80093f0:	40013400 	.word	0x40013400
 80093f4:	40014000 	.word	0x40014000
 80093f8:	40014400 	.word	0x40014400
 80093fc:	40014800 	.word	0x40014800
 8009400:	40015000 	.word	0x40015000
 8009404:	40000400 	.word	0x40000400
 8009408:	40000800 	.word	0x40000800
 800940c:	00010007 	.word	0x00010007

08009410 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	f003 0302 	and.w	r3, r3, #2
 8009422:	2b02      	cmp	r3, #2
 8009424:	d122      	bne.n	800946c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	f003 0302 	and.w	r3, r3, #2
 8009430:	2b02      	cmp	r3, #2
 8009432:	d11b      	bne.n	800946c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f06f 0202 	mvn.w	r2, #2
 800943c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	f003 0303 	and.w	r3, r3, #3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 faed 	bl	8009a32 <HAL_TIM_IC_CaptureCallback>
 8009458:	e005      	b.n	8009466 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fadf 	bl	8009a1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 faf0 	bl	8009a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	f003 0304 	and.w	r3, r3, #4
 8009476:	2b04      	cmp	r3, #4
 8009478:	d122      	bne.n	80094c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	f003 0304 	and.w	r3, r3, #4
 8009484:	2b04      	cmp	r3, #4
 8009486:	d11b      	bne.n	80094c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f06f 0204 	mvn.w	r2, #4
 8009490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2202      	movs	r2, #2
 8009496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 fac3 	bl	8009a32 <HAL_TIM_IC_CaptureCallback>
 80094ac:	e005      	b.n	80094ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 fab5 	bl	8009a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fac6 	bl	8009a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	f003 0308 	and.w	r3, r3, #8
 80094ca:	2b08      	cmp	r3, #8
 80094cc:	d122      	bne.n	8009514 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	f003 0308 	and.w	r3, r3, #8
 80094d8:	2b08      	cmp	r3, #8
 80094da:	d11b      	bne.n	8009514 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f06f 0208 	mvn.w	r2, #8
 80094e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2204      	movs	r2, #4
 80094ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	f003 0303 	and.w	r3, r3, #3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fa99 	bl	8009a32 <HAL_TIM_IC_CaptureCallback>
 8009500:	e005      	b.n	800950e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fa8b 	bl	8009a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fa9c 	bl	8009a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	f003 0310 	and.w	r3, r3, #16
 800951e:	2b10      	cmp	r3, #16
 8009520:	d122      	bne.n	8009568 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	f003 0310 	and.w	r3, r3, #16
 800952c:	2b10      	cmp	r3, #16
 800952e:	d11b      	bne.n	8009568 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f06f 0210 	mvn.w	r2, #16
 8009538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2208      	movs	r2, #8
 800953e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	69db      	ldr	r3, [r3, #28]
 8009546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800954a:	2b00      	cmp	r3, #0
 800954c:	d003      	beq.n	8009556 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 fa6f 	bl	8009a32 <HAL_TIM_IC_CaptureCallback>
 8009554:	e005      	b.n	8009562 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fa61 	bl	8009a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 fa72 	bl	8009a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	2b01      	cmp	r3, #1
 8009574:	d10e      	bne.n	8009594 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	2b01      	cmp	r3, #1
 8009582:	d107      	bne.n	8009594 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f06f 0201 	mvn.w	r2, #1
 800958c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fa3b 	bl	8009a0a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800959e:	2b80      	cmp	r3, #128	; 0x80
 80095a0:	d10e      	bne.n	80095c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ac:	2b80      	cmp	r3, #128	; 0x80
 80095ae:	d107      	bne.n	80095c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 ff52 	bl	800a464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ce:	d10e      	bne.n	80095ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095da:	2b80      	cmp	r3, #128	; 0x80
 80095dc:	d107      	bne.n	80095ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80095e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 ff45 	bl	800a478 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f8:	2b40      	cmp	r3, #64	; 0x40
 80095fa:	d10e      	bne.n	800961a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009606:	2b40      	cmp	r3, #64	; 0x40
 8009608:	d107      	bne.n	800961a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fa20 	bl	8009a5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	f003 0320 	and.w	r3, r3, #32
 8009624:	2b20      	cmp	r3, #32
 8009626:	d10e      	bne.n	8009646 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	f003 0320 	and.w	r3, r3, #32
 8009632:	2b20      	cmp	r3, #32
 8009634:	d107      	bne.n	8009646 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f06f 0220 	mvn.w	r2, #32
 800963e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 ff05 	bl	800a450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009646:	bf00      	nop
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
	...

08009650 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b086      	sub	sp, #24
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009666:	2b01      	cmp	r3, #1
 8009668:	d101      	bne.n	800966e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800966a:	2302      	movs	r3, #2
 800966c:	e0ff      	b.n	800986e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2201      	movs	r2, #1
 8009672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b14      	cmp	r3, #20
 800967a:	f200 80f0 	bhi.w	800985e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800967e:	a201      	add	r2, pc, #4	; (adr r2, 8009684 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009684:	080096d9 	.word	0x080096d9
 8009688:	0800985f 	.word	0x0800985f
 800968c:	0800985f 	.word	0x0800985f
 8009690:	0800985f 	.word	0x0800985f
 8009694:	08009719 	.word	0x08009719
 8009698:	0800985f 	.word	0x0800985f
 800969c:	0800985f 	.word	0x0800985f
 80096a0:	0800985f 	.word	0x0800985f
 80096a4:	0800975b 	.word	0x0800975b
 80096a8:	0800985f 	.word	0x0800985f
 80096ac:	0800985f 	.word	0x0800985f
 80096b0:	0800985f 	.word	0x0800985f
 80096b4:	0800979b 	.word	0x0800979b
 80096b8:	0800985f 	.word	0x0800985f
 80096bc:	0800985f 	.word	0x0800985f
 80096c0:	0800985f 	.word	0x0800985f
 80096c4:	080097dd 	.word	0x080097dd
 80096c8:	0800985f 	.word	0x0800985f
 80096cc:	0800985f 	.word	0x0800985f
 80096d0:	0800985f 	.word	0x0800985f
 80096d4:	0800981d 	.word	0x0800981d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68b9      	ldr	r1, [r7, #8]
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 fa64 	bl	8009bac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	699a      	ldr	r2, [r3, #24]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f042 0208 	orr.w	r2, r2, #8
 80096f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	699a      	ldr	r2, [r3, #24]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f022 0204 	bic.w	r2, r2, #4
 8009702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6999      	ldr	r1, [r3, #24]
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	691a      	ldr	r2, [r3, #16]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	619a      	str	r2, [r3, #24]
      break;
 8009716:	e0a5      	b.n	8009864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68b9      	ldr	r1, [r7, #8]
 800971e:	4618      	mov	r0, r3
 8009720:	f000 fade 	bl	8009ce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	699a      	ldr	r2, [r3, #24]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	699a      	ldr	r2, [r3, #24]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6999      	ldr	r1, [r3, #24]
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	021a      	lsls	r2, r3, #8
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	430a      	orrs	r2, r1
 8009756:	619a      	str	r2, [r3, #24]
      break;
 8009758:	e084      	b.n	8009864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68b9      	ldr	r1, [r7, #8]
 8009760:	4618      	mov	r0, r3
 8009762:	f000 fb51 	bl	8009e08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	69da      	ldr	r2, [r3, #28]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f042 0208 	orr.w	r2, r2, #8
 8009774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	69da      	ldr	r2, [r3, #28]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f022 0204 	bic.w	r2, r2, #4
 8009784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	69d9      	ldr	r1, [r3, #28]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	691a      	ldr	r2, [r3, #16]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	430a      	orrs	r2, r1
 8009796:	61da      	str	r2, [r3, #28]
      break;
 8009798:	e064      	b.n	8009864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68b9      	ldr	r1, [r7, #8]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 fbc3 	bl	8009f2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	69da      	ldr	r2, [r3, #28]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	69da      	ldr	r2, [r3, #28]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	69d9      	ldr	r1, [r3, #28]
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	021a      	lsls	r2, r3, #8
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	430a      	orrs	r2, r1
 80097d8:	61da      	str	r2, [r3, #28]
      break;
 80097da:	e043      	b.n	8009864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68b9      	ldr	r1, [r7, #8]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f000 fc12 	bl	800a00c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f042 0208 	orr.w	r2, r2, #8
 80097f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f022 0204 	bic.w	r2, r2, #4
 8009806:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	691a      	ldr	r2, [r3, #16]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	430a      	orrs	r2, r1
 8009818:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800981a:	e023      	b.n	8009864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68b9      	ldr	r1, [r7, #8]
 8009822:	4618      	mov	r0, r3
 8009824:	f000 fc5c 	bl	800a0e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009836:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009846:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	021a      	lsls	r2, r3, #8
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	430a      	orrs	r2, r1
 800985a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800985c:	e002      	b.n	8009864 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	75fb      	strb	r3, [r7, #23]
      break;
 8009862:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800986c:	7dfb      	ldrb	r3, [r7, #23]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3718      	adds	r7, #24
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop

08009878 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800988c:	2b01      	cmp	r3, #1
 800988e:	d101      	bne.n	8009894 <HAL_TIM_ConfigClockSource+0x1c>
 8009890:	2302      	movs	r3, #2
 8009892:	e0b6      	b.n	8009a02 <HAL_TIM_ConfigClockSource+0x18a>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2202      	movs	r2, #2
 80098a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80098b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098d0:	d03e      	beq.n	8009950 <HAL_TIM_ConfigClockSource+0xd8>
 80098d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098d6:	f200 8087 	bhi.w	80099e8 <HAL_TIM_ConfigClockSource+0x170>
 80098da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098de:	f000 8086 	beq.w	80099ee <HAL_TIM_ConfigClockSource+0x176>
 80098e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098e6:	d87f      	bhi.n	80099e8 <HAL_TIM_ConfigClockSource+0x170>
 80098e8:	2b70      	cmp	r3, #112	; 0x70
 80098ea:	d01a      	beq.n	8009922 <HAL_TIM_ConfigClockSource+0xaa>
 80098ec:	2b70      	cmp	r3, #112	; 0x70
 80098ee:	d87b      	bhi.n	80099e8 <HAL_TIM_ConfigClockSource+0x170>
 80098f0:	2b60      	cmp	r3, #96	; 0x60
 80098f2:	d050      	beq.n	8009996 <HAL_TIM_ConfigClockSource+0x11e>
 80098f4:	2b60      	cmp	r3, #96	; 0x60
 80098f6:	d877      	bhi.n	80099e8 <HAL_TIM_ConfigClockSource+0x170>
 80098f8:	2b50      	cmp	r3, #80	; 0x50
 80098fa:	d03c      	beq.n	8009976 <HAL_TIM_ConfigClockSource+0xfe>
 80098fc:	2b50      	cmp	r3, #80	; 0x50
 80098fe:	d873      	bhi.n	80099e8 <HAL_TIM_ConfigClockSource+0x170>
 8009900:	2b40      	cmp	r3, #64	; 0x40
 8009902:	d058      	beq.n	80099b6 <HAL_TIM_ConfigClockSource+0x13e>
 8009904:	2b40      	cmp	r3, #64	; 0x40
 8009906:	d86f      	bhi.n	80099e8 <HAL_TIM_ConfigClockSource+0x170>
 8009908:	2b30      	cmp	r3, #48	; 0x30
 800990a:	d064      	beq.n	80099d6 <HAL_TIM_ConfigClockSource+0x15e>
 800990c:	2b30      	cmp	r3, #48	; 0x30
 800990e:	d86b      	bhi.n	80099e8 <HAL_TIM_ConfigClockSource+0x170>
 8009910:	2b20      	cmp	r3, #32
 8009912:	d060      	beq.n	80099d6 <HAL_TIM_ConfigClockSource+0x15e>
 8009914:	2b20      	cmp	r3, #32
 8009916:	d867      	bhi.n	80099e8 <HAL_TIM_ConfigClockSource+0x170>
 8009918:	2b00      	cmp	r3, #0
 800991a:	d05c      	beq.n	80099d6 <HAL_TIM_ConfigClockSource+0x15e>
 800991c:	2b10      	cmp	r3, #16
 800991e:	d05a      	beq.n	80099d6 <HAL_TIM_ConfigClockSource+0x15e>
 8009920:	e062      	b.n	80099e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6818      	ldr	r0, [r3, #0]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	6899      	ldr	r1, [r3, #8]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	685a      	ldr	r2, [r3, #4]
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	f000 fcbb 	bl	800a2ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009944:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	609a      	str	r2, [r3, #8]
      break;
 800994e:	e04f      	b.n	80099f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6818      	ldr	r0, [r3, #0]
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	6899      	ldr	r1, [r3, #8]
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	f000 fca4 	bl	800a2ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689a      	ldr	r2, [r3, #8]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009972:	609a      	str	r2, [r3, #8]
      break;
 8009974:	e03c      	b.n	80099f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6818      	ldr	r0, [r3, #0]
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	6859      	ldr	r1, [r3, #4]
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	461a      	mov	r2, r3
 8009984:	f000 fc18 	bl	800a1b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2150      	movs	r1, #80	; 0x50
 800998e:	4618      	mov	r0, r3
 8009990:	f000 fc71 	bl	800a276 <TIM_ITRx_SetConfig>
      break;
 8009994:	e02c      	b.n	80099f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6818      	ldr	r0, [r3, #0]
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	6859      	ldr	r1, [r3, #4]
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	461a      	mov	r2, r3
 80099a4:	f000 fc37 	bl	800a216 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2160      	movs	r1, #96	; 0x60
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 fc61 	bl	800a276 <TIM_ITRx_SetConfig>
      break;
 80099b4:	e01c      	b.n	80099f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6818      	ldr	r0, [r3, #0]
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	6859      	ldr	r1, [r3, #4]
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	461a      	mov	r2, r3
 80099c4:	f000 fbf8 	bl	800a1b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2140      	movs	r1, #64	; 0x40
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 fc51 	bl	800a276 <TIM_ITRx_SetConfig>
      break;
 80099d4:	e00c      	b.n	80099f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4619      	mov	r1, r3
 80099e0:	4610      	mov	r0, r2
 80099e2:	f000 fc48 	bl	800a276 <TIM_ITRx_SetConfig>
      break;
 80099e6:	e003      	b.n	80099f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	73fb      	strb	r3, [r7, #15]
      break;
 80099ec:	e000      	b.n	80099f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80099ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b083      	sub	sp, #12
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009a12:	bf00      	nop
 8009a14:	370c      	adds	r7, #12
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr

08009a1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b083      	sub	sp, #12
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a26:	bf00      	nop
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b083      	sub	sp, #12
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a3a:	bf00      	nop
 8009a3c:	370c      	adds	r7, #12
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b083      	sub	sp, #12
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a4e:	bf00      	nop
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr

08009a5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b083      	sub	sp, #12
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a62:	bf00      	nop
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
	...

08009a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a42      	ldr	r2, [pc, #264]	; (8009b8c <TIM_Base_SetConfig+0x11c>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d013      	beq.n	8009ab0 <TIM_Base_SetConfig+0x40>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a8e:	d00f      	beq.n	8009ab0 <TIM_Base_SetConfig+0x40>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a3f      	ldr	r2, [pc, #252]	; (8009b90 <TIM_Base_SetConfig+0x120>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d00b      	beq.n	8009ab0 <TIM_Base_SetConfig+0x40>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a3e      	ldr	r2, [pc, #248]	; (8009b94 <TIM_Base_SetConfig+0x124>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d007      	beq.n	8009ab0 <TIM_Base_SetConfig+0x40>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a3d      	ldr	r2, [pc, #244]	; (8009b98 <TIM_Base_SetConfig+0x128>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d003      	beq.n	8009ab0 <TIM_Base_SetConfig+0x40>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a3c      	ldr	r2, [pc, #240]	; (8009b9c <TIM_Base_SetConfig+0x12c>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d108      	bne.n	8009ac2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a31      	ldr	r2, [pc, #196]	; (8009b8c <TIM_Base_SetConfig+0x11c>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d01f      	beq.n	8009b0a <TIM_Base_SetConfig+0x9a>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ad0:	d01b      	beq.n	8009b0a <TIM_Base_SetConfig+0x9a>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a2e      	ldr	r2, [pc, #184]	; (8009b90 <TIM_Base_SetConfig+0x120>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d017      	beq.n	8009b0a <TIM_Base_SetConfig+0x9a>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a2d      	ldr	r2, [pc, #180]	; (8009b94 <TIM_Base_SetConfig+0x124>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d013      	beq.n	8009b0a <TIM_Base_SetConfig+0x9a>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a2c      	ldr	r2, [pc, #176]	; (8009b98 <TIM_Base_SetConfig+0x128>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d00f      	beq.n	8009b0a <TIM_Base_SetConfig+0x9a>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a2c      	ldr	r2, [pc, #176]	; (8009ba0 <TIM_Base_SetConfig+0x130>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d00b      	beq.n	8009b0a <TIM_Base_SetConfig+0x9a>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a2b      	ldr	r2, [pc, #172]	; (8009ba4 <TIM_Base_SetConfig+0x134>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d007      	beq.n	8009b0a <TIM_Base_SetConfig+0x9a>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a2a      	ldr	r2, [pc, #168]	; (8009ba8 <TIM_Base_SetConfig+0x138>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d003      	beq.n	8009b0a <TIM_Base_SetConfig+0x9a>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a25      	ldr	r2, [pc, #148]	; (8009b9c <TIM_Base_SetConfig+0x12c>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d108      	bne.n	8009b1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	4313      	orrs	r3, r2
 8009b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	689a      	ldr	r2, [r3, #8]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a12      	ldr	r2, [pc, #72]	; (8009b8c <TIM_Base_SetConfig+0x11c>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d013      	beq.n	8009b70 <TIM_Base_SetConfig+0x100>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a13      	ldr	r2, [pc, #76]	; (8009b98 <TIM_Base_SetConfig+0x128>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d00f      	beq.n	8009b70 <TIM_Base_SetConfig+0x100>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a13      	ldr	r2, [pc, #76]	; (8009ba0 <TIM_Base_SetConfig+0x130>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d00b      	beq.n	8009b70 <TIM_Base_SetConfig+0x100>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a12      	ldr	r2, [pc, #72]	; (8009ba4 <TIM_Base_SetConfig+0x134>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d007      	beq.n	8009b70 <TIM_Base_SetConfig+0x100>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a11      	ldr	r2, [pc, #68]	; (8009ba8 <TIM_Base_SetConfig+0x138>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d003      	beq.n	8009b70 <TIM_Base_SetConfig+0x100>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a0c      	ldr	r2, [pc, #48]	; (8009b9c <TIM_Base_SetConfig+0x12c>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d103      	bne.n	8009b78 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	691a      	ldr	r2, [r3, #16]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	615a      	str	r2, [r3, #20]
}
 8009b7e:	bf00      	nop
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	40012c00 	.word	0x40012c00
 8009b90:	40000400 	.word	0x40000400
 8009b94:	40000800 	.word	0x40000800
 8009b98:	40013400 	.word	0x40013400
 8009b9c:	40015000 	.word	0x40015000
 8009ba0:	40014000 	.word	0x40014000
 8009ba4:	40014400 	.word	0x40014400
 8009ba8:	40014800 	.word	0x40014800

08009bac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b087      	sub	sp, #28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a1b      	ldr	r3, [r3, #32]
 8009bba:	f023 0201 	bic.w	r2, r3, #1
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f023 0303 	bic.w	r3, r3, #3
 8009be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f023 0302 	bic.w	r3, r3, #2
 8009bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	697a      	ldr	r2, [r7, #20]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a30      	ldr	r2, [pc, #192]	; (8009cc8 <TIM_OC1_SetConfig+0x11c>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d013      	beq.n	8009c34 <TIM_OC1_SetConfig+0x88>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a2f      	ldr	r2, [pc, #188]	; (8009ccc <TIM_OC1_SetConfig+0x120>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d00f      	beq.n	8009c34 <TIM_OC1_SetConfig+0x88>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a2e      	ldr	r2, [pc, #184]	; (8009cd0 <TIM_OC1_SetConfig+0x124>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d00b      	beq.n	8009c34 <TIM_OC1_SetConfig+0x88>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a2d      	ldr	r2, [pc, #180]	; (8009cd4 <TIM_OC1_SetConfig+0x128>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d007      	beq.n	8009c34 <TIM_OC1_SetConfig+0x88>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a2c      	ldr	r2, [pc, #176]	; (8009cd8 <TIM_OC1_SetConfig+0x12c>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d003      	beq.n	8009c34 <TIM_OC1_SetConfig+0x88>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a2b      	ldr	r2, [pc, #172]	; (8009cdc <TIM_OC1_SetConfig+0x130>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d10c      	bne.n	8009c4e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	f023 0308 	bic.w	r3, r3, #8
 8009c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	697a      	ldr	r2, [r7, #20]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	f023 0304 	bic.w	r3, r3, #4
 8009c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a1d      	ldr	r2, [pc, #116]	; (8009cc8 <TIM_OC1_SetConfig+0x11c>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d013      	beq.n	8009c7e <TIM_OC1_SetConfig+0xd2>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a1c      	ldr	r2, [pc, #112]	; (8009ccc <TIM_OC1_SetConfig+0x120>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d00f      	beq.n	8009c7e <TIM_OC1_SetConfig+0xd2>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a1b      	ldr	r2, [pc, #108]	; (8009cd0 <TIM_OC1_SetConfig+0x124>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d00b      	beq.n	8009c7e <TIM_OC1_SetConfig+0xd2>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a1a      	ldr	r2, [pc, #104]	; (8009cd4 <TIM_OC1_SetConfig+0x128>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d007      	beq.n	8009c7e <TIM_OC1_SetConfig+0xd2>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a19      	ldr	r2, [pc, #100]	; (8009cd8 <TIM_OC1_SetConfig+0x12c>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d003      	beq.n	8009c7e <TIM_OC1_SetConfig+0xd2>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a18      	ldr	r2, [pc, #96]	; (8009cdc <TIM_OC1_SetConfig+0x130>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d111      	bne.n	8009ca2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	695b      	ldr	r3, [r3, #20]
 8009c92:	693a      	ldr	r2, [r7, #16]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	693a      	ldr	r2, [r7, #16]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	693a      	ldr	r2, [r7, #16]
 8009ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	685a      	ldr	r2, [r3, #4]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	697a      	ldr	r2, [r7, #20]
 8009cba:	621a      	str	r2, [r3, #32]
}
 8009cbc:	bf00      	nop
 8009cbe:	371c      	adds	r7, #28
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	40012c00 	.word	0x40012c00
 8009ccc:	40013400 	.word	0x40013400
 8009cd0:	40014000 	.word	0x40014000
 8009cd4:	40014400 	.word	0x40014400
 8009cd8:	40014800 	.word	0x40014800
 8009cdc:	40015000 	.word	0x40015000

08009ce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b087      	sub	sp, #28
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	f023 0210 	bic.w	r2, r3, #16
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	021b      	lsls	r3, r3, #8
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	f023 0320 	bic.w	r3, r3, #32
 8009d2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	011b      	lsls	r3, r3, #4
 8009d36:	697a      	ldr	r2, [r7, #20]
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a2c      	ldr	r2, [pc, #176]	; (8009df0 <TIM_OC2_SetConfig+0x110>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d007      	beq.n	8009d54 <TIM_OC2_SetConfig+0x74>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a2b      	ldr	r2, [pc, #172]	; (8009df4 <TIM_OC2_SetConfig+0x114>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d003      	beq.n	8009d54 <TIM_OC2_SetConfig+0x74>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a2a      	ldr	r2, [pc, #168]	; (8009df8 <TIM_OC2_SetConfig+0x118>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d10d      	bne.n	8009d70 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	011b      	lsls	r3, r3, #4
 8009d62:	697a      	ldr	r2, [r7, #20]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a1f      	ldr	r2, [pc, #124]	; (8009df0 <TIM_OC2_SetConfig+0x110>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d013      	beq.n	8009da0 <TIM_OC2_SetConfig+0xc0>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a1e      	ldr	r2, [pc, #120]	; (8009df4 <TIM_OC2_SetConfig+0x114>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d00f      	beq.n	8009da0 <TIM_OC2_SetConfig+0xc0>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a1e      	ldr	r2, [pc, #120]	; (8009dfc <TIM_OC2_SetConfig+0x11c>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d00b      	beq.n	8009da0 <TIM_OC2_SetConfig+0xc0>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a1d      	ldr	r2, [pc, #116]	; (8009e00 <TIM_OC2_SetConfig+0x120>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d007      	beq.n	8009da0 <TIM_OC2_SetConfig+0xc0>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4a1c      	ldr	r2, [pc, #112]	; (8009e04 <TIM_OC2_SetConfig+0x124>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d003      	beq.n	8009da0 <TIM_OC2_SetConfig+0xc0>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4a17      	ldr	r2, [pc, #92]	; (8009df8 <TIM_OC2_SetConfig+0x118>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d113      	bne.n	8009dc8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009da6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009dae:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	695b      	ldr	r3, [r3, #20]
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	699b      	ldr	r3, [r3, #24]
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	693a      	ldr	r2, [r7, #16]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	693a      	ldr	r2, [r7, #16]
 8009dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	685a      	ldr	r2, [r3, #4]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	621a      	str	r2, [r3, #32]
}
 8009de2:	bf00      	nop
 8009de4:	371c      	adds	r7, #28
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	40012c00 	.word	0x40012c00
 8009df4:	40013400 	.word	0x40013400
 8009df8:	40015000 	.word	0x40015000
 8009dfc:	40014000 	.word	0x40014000
 8009e00:	40014400 	.word	0x40014400
 8009e04:	40014800 	.word	0x40014800

08009e08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b087      	sub	sp, #28
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a1b      	ldr	r3, [r3, #32]
 8009e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	69db      	ldr	r3, [r3, #28]
 8009e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f023 0303 	bic.w	r3, r3, #3
 8009e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	021b      	lsls	r3, r3, #8
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a2b      	ldr	r2, [pc, #172]	; (8009f14 <TIM_OC3_SetConfig+0x10c>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d007      	beq.n	8009e7a <TIM_OC3_SetConfig+0x72>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a2a      	ldr	r2, [pc, #168]	; (8009f18 <TIM_OC3_SetConfig+0x110>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d003      	beq.n	8009e7a <TIM_OC3_SetConfig+0x72>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4a29      	ldr	r2, [pc, #164]	; (8009f1c <TIM_OC3_SetConfig+0x114>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d10d      	bne.n	8009e96 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	021b      	lsls	r3, r3, #8
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e94:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a1e      	ldr	r2, [pc, #120]	; (8009f14 <TIM_OC3_SetConfig+0x10c>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d013      	beq.n	8009ec6 <TIM_OC3_SetConfig+0xbe>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a1d      	ldr	r2, [pc, #116]	; (8009f18 <TIM_OC3_SetConfig+0x110>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d00f      	beq.n	8009ec6 <TIM_OC3_SetConfig+0xbe>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a1d      	ldr	r2, [pc, #116]	; (8009f20 <TIM_OC3_SetConfig+0x118>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d00b      	beq.n	8009ec6 <TIM_OC3_SetConfig+0xbe>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a1c      	ldr	r2, [pc, #112]	; (8009f24 <TIM_OC3_SetConfig+0x11c>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d007      	beq.n	8009ec6 <TIM_OC3_SetConfig+0xbe>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a1b      	ldr	r2, [pc, #108]	; (8009f28 <TIM_OC3_SetConfig+0x120>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d003      	beq.n	8009ec6 <TIM_OC3_SetConfig+0xbe>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a16      	ldr	r2, [pc, #88]	; (8009f1c <TIM_OC3_SetConfig+0x114>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d113      	bne.n	8009eee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	011b      	lsls	r3, r3, #4
 8009edc:	693a      	ldr	r2, [r7, #16]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	011b      	lsls	r3, r3, #4
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	621a      	str	r2, [r3, #32]
}
 8009f08:	bf00      	nop
 8009f0a:	371c      	adds	r7, #28
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	40012c00 	.word	0x40012c00
 8009f18:	40013400 	.word	0x40013400
 8009f1c:	40015000 	.word	0x40015000
 8009f20:	40014000 	.word	0x40014000
 8009f24:	40014400 	.word	0x40014400
 8009f28:	40014800 	.word	0x40014800

08009f2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b087      	sub	sp, #28
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a1b      	ldr	r3, [r3, #32]
 8009f3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a1b      	ldr	r3, [r3, #32]
 8009f46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	69db      	ldr	r3, [r3, #28]
 8009f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	021b      	lsls	r3, r3, #8
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	031b      	lsls	r3, r3, #12
 8009f82:	693a      	ldr	r2, [r7, #16]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a1a      	ldr	r2, [pc, #104]	; (8009ff4 <TIM_OC4_SetConfig+0xc8>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d013      	beq.n	8009fb8 <TIM_OC4_SetConfig+0x8c>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a19      	ldr	r2, [pc, #100]	; (8009ff8 <TIM_OC4_SetConfig+0xcc>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d00f      	beq.n	8009fb8 <TIM_OC4_SetConfig+0x8c>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a18      	ldr	r2, [pc, #96]	; (8009ffc <TIM_OC4_SetConfig+0xd0>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d00b      	beq.n	8009fb8 <TIM_OC4_SetConfig+0x8c>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a17      	ldr	r2, [pc, #92]	; (800a000 <TIM_OC4_SetConfig+0xd4>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d007      	beq.n	8009fb8 <TIM_OC4_SetConfig+0x8c>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a16      	ldr	r2, [pc, #88]	; (800a004 <TIM_OC4_SetConfig+0xd8>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d003      	beq.n	8009fb8 <TIM_OC4_SetConfig+0x8c>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a15      	ldr	r2, [pc, #84]	; (800a008 <TIM_OC4_SetConfig+0xdc>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d109      	bne.n	8009fcc <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	695b      	ldr	r3, [r3, #20]
 8009fc4:	019b      	lsls	r3, r3, #6
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	697a      	ldr	r2, [r7, #20]
 8009fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	685a      	ldr	r2, [r3, #4]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	621a      	str	r2, [r3, #32]
}
 8009fe6:	bf00      	nop
 8009fe8:	371c      	adds	r7, #28
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	40012c00 	.word	0x40012c00
 8009ff8:	40013400 	.word	0x40013400
 8009ffc:	40014000 	.word	0x40014000
 800a000:	40014400 	.word	0x40014400
 800a004:	40014800 	.word	0x40014800
 800a008:	40015000 	.word	0x40015000

0800a00c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a1b      	ldr	r3, [r3, #32]
 800a01a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a03a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a03e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	4313      	orrs	r3, r2
 800a048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a050:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	041b      	lsls	r3, r3, #16
 800a058:	693a      	ldr	r2, [r7, #16]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a19      	ldr	r2, [pc, #100]	; (800a0c8 <TIM_OC5_SetConfig+0xbc>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d013      	beq.n	800a08e <TIM_OC5_SetConfig+0x82>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a18      	ldr	r2, [pc, #96]	; (800a0cc <TIM_OC5_SetConfig+0xc0>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d00f      	beq.n	800a08e <TIM_OC5_SetConfig+0x82>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a17      	ldr	r2, [pc, #92]	; (800a0d0 <TIM_OC5_SetConfig+0xc4>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d00b      	beq.n	800a08e <TIM_OC5_SetConfig+0x82>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a16      	ldr	r2, [pc, #88]	; (800a0d4 <TIM_OC5_SetConfig+0xc8>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d007      	beq.n	800a08e <TIM_OC5_SetConfig+0x82>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a15      	ldr	r2, [pc, #84]	; (800a0d8 <TIM_OC5_SetConfig+0xcc>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d003      	beq.n	800a08e <TIM_OC5_SetConfig+0x82>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a14      	ldr	r2, [pc, #80]	; (800a0dc <TIM_OC5_SetConfig+0xd0>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d109      	bne.n	800a0a2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a094:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	695b      	ldr	r3, [r3, #20]
 800a09a:	021b      	lsls	r3, r3, #8
 800a09c:	697a      	ldr	r2, [r7, #20]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	697a      	ldr	r2, [r7, #20]
 800a0a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	693a      	ldr	r2, [r7, #16]
 800a0ba:	621a      	str	r2, [r3, #32]
}
 800a0bc:	bf00      	nop
 800a0be:	371c      	adds	r7, #28
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr
 800a0c8:	40012c00 	.word	0x40012c00
 800a0cc:	40013400 	.word	0x40013400
 800a0d0:	40014000 	.word	0x40014000
 800a0d4:	40014400 	.word	0x40014400
 800a0d8:	40014800 	.word	0x40014800
 800a0dc:	40015000 	.word	0x40015000

0800a0e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b087      	sub	sp, #28
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a10e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	021b      	lsls	r3, r3, #8
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	051b      	lsls	r3, r3, #20
 800a12e:	693a      	ldr	r2, [r7, #16]
 800a130:	4313      	orrs	r3, r2
 800a132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a1a      	ldr	r2, [pc, #104]	; (800a1a0 <TIM_OC6_SetConfig+0xc0>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d013      	beq.n	800a164 <TIM_OC6_SetConfig+0x84>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a19      	ldr	r2, [pc, #100]	; (800a1a4 <TIM_OC6_SetConfig+0xc4>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d00f      	beq.n	800a164 <TIM_OC6_SetConfig+0x84>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a18      	ldr	r2, [pc, #96]	; (800a1a8 <TIM_OC6_SetConfig+0xc8>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d00b      	beq.n	800a164 <TIM_OC6_SetConfig+0x84>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a17      	ldr	r2, [pc, #92]	; (800a1ac <TIM_OC6_SetConfig+0xcc>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d007      	beq.n	800a164 <TIM_OC6_SetConfig+0x84>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a16      	ldr	r2, [pc, #88]	; (800a1b0 <TIM_OC6_SetConfig+0xd0>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d003      	beq.n	800a164 <TIM_OC6_SetConfig+0x84>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a15      	ldr	r2, [pc, #84]	; (800a1b4 <TIM_OC6_SetConfig+0xd4>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d109      	bne.n	800a178 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a16a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	695b      	ldr	r3, [r3, #20]
 800a170:	029b      	lsls	r3, r3, #10
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	4313      	orrs	r3, r2
 800a176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	697a      	ldr	r2, [r7, #20]
 800a17c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	693a      	ldr	r2, [r7, #16]
 800a190:	621a      	str	r2, [r3, #32]
}
 800a192:	bf00      	nop
 800a194:	371c      	adds	r7, #28
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	40012c00 	.word	0x40012c00
 800a1a4:	40013400 	.word	0x40013400
 800a1a8:	40014000 	.word	0x40014000
 800a1ac:	40014400 	.word	0x40014400
 800a1b0:	40014800 	.word	0x40014800
 800a1b4:	40015000 	.word	0x40015000

0800a1b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b087      	sub	sp, #28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6a1b      	ldr	r3, [r3, #32]
 800a1c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	f023 0201 	bic.w	r2, r3, #1
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	011b      	lsls	r3, r3, #4
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f023 030a 	bic.w	r3, r3, #10
 800a1f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	693a      	ldr	r2, [r7, #16]
 800a202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	621a      	str	r2, [r3, #32]
}
 800a20a:	bf00      	nop
 800a20c:	371c      	adds	r7, #28
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a216:	b480      	push	{r7}
 800a218:	b087      	sub	sp, #28
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	60f8      	str	r0, [r7, #12]
 800a21e:	60b9      	str	r1, [r7, #8]
 800a220:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	f023 0210 	bic.w	r2, r3, #16
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6a1b      	ldr	r3, [r3, #32]
 800a238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	031b      	lsls	r3, r3, #12
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	4313      	orrs	r3, r2
 800a24a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a252:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	011b      	lsls	r3, r3, #4
 800a258:	693a      	ldr	r2, [r7, #16]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	697a      	ldr	r2, [r7, #20]
 800a262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	621a      	str	r2, [r3, #32]
}
 800a26a:	bf00      	nop
 800a26c:	371c      	adds	r7, #28
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a276:	b480      	push	{r7}
 800a278:	b085      	sub	sp, #20
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a28c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a28e:	683a      	ldr	r2, [r7, #0]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	4313      	orrs	r3, r2
 800a294:	f043 0307 	orr.w	r3, r3, #7
 800a298:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68fa      	ldr	r2, [r7, #12]
 800a29e:	609a      	str	r2, [r3, #8]
}
 800a2a0:	bf00      	nop
 800a2a2:	3714      	adds	r7, #20
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b087      	sub	sp, #28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
 800a2b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	021a      	lsls	r2, r3, #8
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	431a      	orrs	r2, r3
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	697a      	ldr	r2, [r7, #20]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	697a      	ldr	r2, [r7, #20]
 800a2de:	609a      	str	r2, [r3, #8]
}
 800a2e0:	bf00      	nop
 800a2e2:	371c      	adds	r7, #28
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b087      	sub	sp, #28
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	f003 031f 	and.w	r3, r3, #31
 800a2fe:	2201      	movs	r2, #1
 800a300:	fa02 f303 	lsl.w	r3, r2, r3
 800a304:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6a1a      	ldr	r2, [r3, #32]
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	43db      	mvns	r3, r3
 800a30e:	401a      	ands	r2, r3
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6a1a      	ldr	r2, [r3, #32]
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	f003 031f 	and.w	r3, r3, #31
 800a31e:	6879      	ldr	r1, [r7, #4]
 800a320:	fa01 f303 	lsl.w	r3, r1, r3
 800a324:	431a      	orrs	r2, r3
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	621a      	str	r2, [r3, #32]
}
 800a32a:	bf00      	nop
 800a32c:	371c      	adds	r7, #28
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
	...

0800a338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d101      	bne.n	800a350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a34c:	2302      	movs	r3, #2
 800a34e:	e06d      	b.n	800a42c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2202      	movs	r2, #2
 800a35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a30      	ldr	r2, [pc, #192]	; (800a438 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d009      	beq.n	800a38e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a2f      	ldr	r2, [pc, #188]	; (800a43c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d004      	beq.n	800a38e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a2d      	ldr	r2, [pc, #180]	; (800a440 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d108      	bne.n	800a3a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a394:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a1e      	ldr	r2, [pc, #120]	; (800a438 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d01d      	beq.n	800a400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3cc:	d018      	beq.n	800a400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a1c      	ldr	r2, [pc, #112]	; (800a444 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d013      	beq.n	800a400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a1a      	ldr	r2, [pc, #104]	; (800a448 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d00e      	beq.n	800a400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a15      	ldr	r2, [pc, #84]	; (800a43c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d009      	beq.n	800a400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a16      	ldr	r2, [pc, #88]	; (800a44c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d004      	beq.n	800a400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a11      	ldr	r2, [pc, #68]	; (800a440 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d10c      	bne.n	800a41a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a406:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	68ba      	ldr	r2, [r7, #8]
 800a40e:	4313      	orrs	r3, r2
 800a410:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2201      	movs	r2, #1
 800a41e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3714      	adds	r7, #20
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	40012c00 	.word	0x40012c00
 800a43c:	40013400 	.word	0x40013400
 800a440:	40015000 	.word	0x40015000
 800a444:	40000400 	.word	0x40000400
 800a448:	40000800 	.word	0x40000800
 800a44c:	40014000 	.word	0x40014000

0800a450 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d101      	bne.n	800a49e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e040      	b.n	800a520 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d106      	bne.n	800a4b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f7f9 fcf8 	bl	8003ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2224      	movs	r2, #36	; 0x24
 800a4b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f022 0201 	bic.w	r2, r2, #1
 800a4c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 fbbc 	bl	800ac48 <UART_SetConfig>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d101      	bne.n	800a4da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e022      	b.n	800a520 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d002      	beq.n	800a4e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 fd86 	bl	800aff4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	685a      	ldr	r2, [r3, #4]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	689a      	ldr	r2, [r3, #8]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f042 0201 	orr.w	r2, r2, #1
 800a516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 fe0d 	bl	800b138 <UART_CheckIdleState>
 800a51e:	4603      	mov	r3, r0
}
 800a520:	4618      	mov	r0, r3
 800a522:	3708      	adds	r7, #8
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08a      	sub	sp, #40	; 0x28
 800a52c:	af02      	add	r7, sp, #8
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	603b      	str	r3, [r7, #0]
 800a534:	4613      	mov	r3, r2
 800a536:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a53c:	2b20      	cmp	r3, #32
 800a53e:	f040 8082 	bne.w	800a646 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d002      	beq.n	800a54e <HAL_UART_Transmit+0x26>
 800a548:	88fb      	ldrh	r3, [r7, #6]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d101      	bne.n	800a552 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	e07a      	b.n	800a648 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d101      	bne.n	800a560 <HAL_UART_Transmit+0x38>
 800a55c:	2302      	movs	r3, #2
 800a55e:	e073      	b.n	800a648 <HAL_UART_Transmit+0x120>
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2221      	movs	r2, #33	; 0x21
 800a574:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a576:	f7f9 ff17 	bl	80043a8 <HAL_GetTick>
 800a57a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	88fa      	ldrh	r2, [r7, #6]
 800a580:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	88fa      	ldrh	r2, [r7, #6]
 800a588:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a594:	d108      	bne.n	800a5a8 <HAL_UART_Transmit+0x80>
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d104      	bne.n	800a5a8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	61bb      	str	r3, [r7, #24]
 800a5a6:	e003      	b.n	800a5b0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a5b8:	e02d      	b.n	800a616 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2180      	movs	r1, #128	; 0x80
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f000 fe00 	bl	800b1ca <UART_WaitOnFlagUntilTimeout>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	e039      	b.n	800a648 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10b      	bne.n	800a5f2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	881a      	ldrh	r2, [r3, #0]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5e6:	b292      	uxth	r2, r2
 800a5e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	3302      	adds	r3, #2
 800a5ee:	61bb      	str	r3, [r7, #24]
 800a5f0:	e008      	b.n	800a604 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	781a      	ldrb	r2, [r3, #0]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	b292      	uxth	r2, r2
 800a5fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	3301      	adds	r3, #1
 800a602:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	3b01      	subs	r3, #1
 800a60e:	b29a      	uxth	r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1cb      	bne.n	800a5ba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	2200      	movs	r2, #0
 800a62a:	2140      	movs	r1, #64	; 0x40
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f000 fdcc 	bl	800b1ca <UART_WaitOnFlagUntilTimeout>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d001      	beq.n	800a63c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a638:	2303      	movs	r3, #3
 800a63a:	e005      	b.n	800a648 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2220      	movs	r2, #32
 800a640:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	e000      	b.n	800a648 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a646:	2302      	movs	r3, #2
  }
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3720      	adds	r7, #32
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b0ba      	sub	sp, #232	; 0xe8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	69db      	ldr	r3, [r3, #28]
 800a65e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a676:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a67a:	f640 030f 	movw	r3, #2063	; 0x80f
 800a67e:	4013      	ands	r3, r2
 800a680:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d115      	bne.n	800a6b8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a68c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a690:	f003 0320 	and.w	r3, r3, #32
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00f      	beq.n	800a6b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a69c:	f003 0320 	and.w	r3, r3, #32
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d009      	beq.n	800a6b8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f000 82a3 	beq.w	800abf4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	4798      	blx	r3
      }
      return;
 800a6b6:	e29d      	b.n	800abf4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a6b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	f000 8117 	beq.w	800a8f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a6c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d106      	bne.n	800a6dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a6ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a6d2:	4b85      	ldr	r3, [pc, #532]	; (800a8e8 <HAL_UART_IRQHandler+0x298>)
 800a6d4:	4013      	ands	r3, r2
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f000 810a 	beq.w	800a8f0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a6dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6e0:	f003 0301 	and.w	r3, r3, #1
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d011      	beq.n	800a70c <HAL_UART_IRQHandler+0xbc>
 800a6e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00b      	beq.n	800a70c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a702:	f043 0201 	orr.w	r2, r3, #1
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a70c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a710:	f003 0302 	and.w	r3, r3, #2
 800a714:	2b00      	cmp	r3, #0
 800a716:	d011      	beq.n	800a73c <HAL_UART_IRQHandler+0xec>
 800a718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a71c:	f003 0301 	and.w	r3, r3, #1
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00b      	beq.n	800a73c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2202      	movs	r2, #2
 800a72a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a732:	f043 0204 	orr.w	r2, r3, #4
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a73c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a740:	f003 0304 	and.w	r3, r3, #4
 800a744:	2b00      	cmp	r3, #0
 800a746:	d011      	beq.n	800a76c <HAL_UART_IRQHandler+0x11c>
 800a748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a74c:	f003 0301 	and.w	r3, r3, #1
 800a750:	2b00      	cmp	r3, #0
 800a752:	d00b      	beq.n	800a76c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2204      	movs	r2, #4
 800a75a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a762:	f043 0202 	orr.w	r2, r3, #2
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a76c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a770:	f003 0308 	and.w	r3, r3, #8
 800a774:	2b00      	cmp	r3, #0
 800a776:	d017      	beq.n	800a7a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a77c:	f003 0320 	and.w	r3, r3, #32
 800a780:	2b00      	cmp	r3, #0
 800a782:	d105      	bne.n	800a790 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a788:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00b      	beq.n	800a7a8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2208      	movs	r2, #8
 800a796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a79e:	f043 0208 	orr.w	r2, r3, #8
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d012      	beq.n	800a7da <HAL_UART_IRQHandler+0x18a>
 800a7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00c      	beq.n	800a7da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7d0:	f043 0220 	orr.w	r2, r3, #32
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f000 8209 	beq.w	800abf8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a7e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7ea:	f003 0320 	and.w	r3, r3, #32
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00d      	beq.n	800a80e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a7f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7f6:	f003 0320 	and.w	r3, r3, #32
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d007      	beq.n	800a80e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a802:	2b00      	cmp	r3, #0
 800a804:	d003      	beq.n	800a80e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a814:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a822:	2b40      	cmp	r3, #64	; 0x40
 800a824:	d005      	beq.n	800a832 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a82a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d04f      	beq.n	800a8d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 fe56 	bl	800b4e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a842:	2b40      	cmp	r3, #64	; 0x40
 800a844:	d141      	bne.n	800a8ca <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	3308      	adds	r3, #8
 800a84c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a850:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a854:	e853 3f00 	ldrex	r3, [r3]
 800a858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a85c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a864:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3308      	adds	r3, #8
 800a86e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a872:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a87e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a882:	e841 2300 	strex	r3, r2, [r1]
 800a886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a88a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d1d9      	bne.n	800a846 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a896:	2b00      	cmp	r3, #0
 800a898:	d013      	beq.n	800a8c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a89e:	4a13      	ldr	r2, [pc, #76]	; (800a8ec <HAL_UART_IRQHandler+0x29c>)
 800a8a0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7fb fe9d 	bl	80065e6 <HAL_DMA_Abort_IT>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d017      	beq.n	800a8e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a8bc:	4610      	mov	r0, r2
 800a8be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8c0:	e00f      	b.n	800a8e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 f9b6 	bl	800ac34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8c8:	e00b      	b.n	800a8e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f9b2 	bl	800ac34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8d0:	e007      	b.n	800a8e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f9ae 	bl	800ac34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800a8e0:	e18a      	b.n	800abf8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8e2:	bf00      	nop
    return;
 800a8e4:	e188      	b.n	800abf8 <HAL_UART_IRQHandler+0x5a8>
 800a8e6:	bf00      	nop
 800a8e8:	04000120 	.word	0x04000120
 800a8ec:	0800b77d 	.word	0x0800b77d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	f040 8143 	bne.w	800ab80 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a8fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8fe:	f003 0310 	and.w	r3, r3, #16
 800a902:	2b00      	cmp	r3, #0
 800a904:	f000 813c 	beq.w	800ab80 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a90c:	f003 0310 	and.w	r3, r3, #16
 800a910:	2b00      	cmp	r3, #0
 800a912:	f000 8135 	beq.w	800ab80 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2210      	movs	r2, #16
 800a91c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a928:	2b40      	cmp	r3, #64	; 0x40
 800a92a:	f040 80b1 	bne.w	800aa90 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a93a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f000 815c 	beq.w	800abfc <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a94a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a94e:	429a      	cmp	r2, r3
 800a950:	f080 8154 	bcs.w	800abfc <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a95a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a962:	699b      	ldr	r3, [r3, #24]
 800a964:	2b20      	cmp	r3, #32
 800a966:	f000 8085 	beq.w	800aa74 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a972:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a976:	e853 3f00 	ldrex	r3, [r3]
 800a97a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a97e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a982:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a986:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	461a      	mov	r2, r3
 800a990:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a994:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a998:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a9a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a9a4:	e841 2300 	strex	r3, r2, [r1]
 800a9a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a9ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d1da      	bne.n	800a96a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	3308      	adds	r3, #8
 800a9ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9be:	e853 3f00 	ldrex	r3, [r3]
 800a9c2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a9c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a9c6:	f023 0301 	bic.w	r3, r3, #1
 800a9ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	3308      	adds	r3, #8
 800a9d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a9d8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a9dc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a9e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a9e4:	e841 2300 	strex	r3, r2, [r1]
 800a9e8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a9ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d1e1      	bne.n	800a9b4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	3308      	adds	r3, #8
 800a9f6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9fa:	e853 3f00 	ldrex	r3, [r3]
 800a9fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aa00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3308      	adds	r3, #8
 800aa10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aa14:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aa16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aa1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aa1c:	e841 2300 	strex	r3, r2, [r1]
 800aa20:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aa22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1e3      	bne.n	800a9f0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2220      	movs	r2, #32
 800aa2c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa3c:	e853 3f00 	ldrex	r3, [r3]
 800aa40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aa42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa44:	f023 0310 	bic.w	r3, r3, #16
 800aa48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	461a      	mov	r2, r3
 800aa52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa56:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa5e:	e841 2300 	strex	r3, r2, [r1]
 800aa62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aa64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1e4      	bne.n	800aa34 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fb fd80 	bl	8006574 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7f6 fdef 	bl	800166c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aa8e:	e0b5      	b.n	800abfc <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f000 80a7 	beq.w	800ac00 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800aab2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f000 80a2 	beq.w	800ac00 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac4:	e853 3f00 	ldrex	r3, [r3]
 800aac8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aaca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aacc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	461a      	mov	r2, r3
 800aada:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aade:	647b      	str	r3, [r7, #68]	; 0x44
 800aae0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aae4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aae6:	e841 2300 	strex	r3, r2, [r1]
 800aaea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aaec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1e4      	bne.n	800aabc <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	3308      	adds	r3, #8
 800aaf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafc:	e853 3f00 	ldrex	r3, [r3]
 800ab00:	623b      	str	r3, [r7, #32]
   return(result);
 800ab02:	6a3b      	ldr	r3, [r7, #32]
 800ab04:	f023 0301 	bic.w	r3, r3, #1
 800ab08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	3308      	adds	r3, #8
 800ab12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ab16:	633a      	str	r2, [r7, #48]	; 0x30
 800ab18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab1e:	e841 2300 	strex	r3, r2, [r1]
 800ab22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1e3      	bne.n	800aaf2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2220      	movs	r2, #32
 800ab2e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	e853 3f00 	ldrex	r3, [r3]
 800ab48:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f023 0310 	bic.w	r3, r3, #16
 800ab50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	461a      	mov	r2, r3
 800ab5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ab5e:	61fb      	str	r3, [r7, #28]
 800ab60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab62:	69b9      	ldr	r1, [r7, #24]
 800ab64:	69fa      	ldr	r2, [r7, #28]
 800ab66:	e841 2300 	strex	r3, r2, [r1]
 800ab6a:	617b      	str	r3, [r7, #20]
   return(result);
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1e4      	bne.n	800ab3c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab76:	4619      	mov	r1, r3
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f7f6 fd77 	bl	800166c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ab7e:	e03f      	b.n	800ac00 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ab80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00e      	beq.n	800abaa <HAL_UART_IRQHandler+0x55a>
 800ab8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d008      	beq.n	800abaa <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800aba0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 fe2a 	bl	800b7fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aba8:	e02d      	b.n	800ac06 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800abaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00e      	beq.n	800abd4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800abb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d008      	beq.n	800abd4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d01c      	beq.n	800ac04 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	4798      	blx	r3
    }
    return;
 800abd2:	e017      	b.n	800ac04 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800abd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d012      	beq.n	800ac06 <HAL_UART_IRQHandler+0x5b6>
 800abe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00c      	beq.n	800ac06 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 fddb 	bl	800b7a8 <UART_EndTransmit_IT>
    return;
 800abf2:	e008      	b.n	800ac06 <HAL_UART_IRQHandler+0x5b6>
      return;
 800abf4:	bf00      	nop
 800abf6:	e006      	b.n	800ac06 <HAL_UART_IRQHandler+0x5b6>
    return;
 800abf8:	bf00      	nop
 800abfa:	e004      	b.n	800ac06 <HAL_UART_IRQHandler+0x5b6>
      return;
 800abfc:	bf00      	nop
 800abfe:	e002      	b.n	800ac06 <HAL_UART_IRQHandler+0x5b6>
      return;
 800ac00:	bf00      	nop
 800ac02:	e000      	b.n	800ac06 <HAL_UART_IRQHandler+0x5b6>
    return;
 800ac04:	bf00      	nop
  }

}
 800ac06:	37e8      	adds	r7, #232	; 0xe8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ac14:	bf00      	nop
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ac28:	bf00      	nop
 800ac2a:	370c      	adds	r7, #12
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ac3c:	bf00      	nop
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b088      	sub	sp, #32
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac50:	2300      	movs	r3, #0
 800ac52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	689a      	ldr	r2, [r3, #8]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	431a      	orrs	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	431a      	orrs	r2, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	69db      	ldr	r3, [r3, #28]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	4b92      	ldr	r3, [pc, #584]	; (800aebc <UART_SetConfig+0x274>)
 800ac74:	4013      	ands	r3, r2
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	6812      	ldr	r2, [r2, #0]
 800ac7a:	6979      	ldr	r1, [r7, #20]
 800ac7c:	430b      	orrs	r3, r1
 800ac7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	68da      	ldr	r2, [r3, #12]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	430a      	orrs	r2, r1
 800ac94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	699b      	ldr	r3, [r3, #24]
 800ac9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a1b      	ldr	r3, [r3, #32]
 800aca0:	697a      	ldr	r2, [r7, #20]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	697a      	ldr	r2, [r7, #20]
 800acb6:	430a      	orrs	r2, r1
 800acb8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a80      	ldr	r2, [pc, #512]	; (800aec0 <UART_SetConfig+0x278>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d120      	bne.n	800ad06 <UART_SetConfig+0xbe>
 800acc4:	4b7f      	ldr	r3, [pc, #508]	; (800aec4 <UART_SetConfig+0x27c>)
 800acc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc8:	f003 0303 	and.w	r3, r3, #3
 800accc:	2b03      	cmp	r3, #3
 800acce:	d817      	bhi.n	800ad00 <UART_SetConfig+0xb8>
 800acd0:	a201      	add	r2, pc, #4	; (adr r2, 800acd8 <UART_SetConfig+0x90>)
 800acd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd6:	bf00      	nop
 800acd8:	0800ace9 	.word	0x0800ace9
 800acdc:	0800acf5 	.word	0x0800acf5
 800ace0:	0800acfb 	.word	0x0800acfb
 800ace4:	0800acef 	.word	0x0800acef
 800ace8:	2301      	movs	r3, #1
 800acea:	77fb      	strb	r3, [r7, #31]
 800acec:	e0b5      	b.n	800ae5a <UART_SetConfig+0x212>
 800acee:	2302      	movs	r3, #2
 800acf0:	77fb      	strb	r3, [r7, #31]
 800acf2:	e0b2      	b.n	800ae5a <UART_SetConfig+0x212>
 800acf4:	2304      	movs	r3, #4
 800acf6:	77fb      	strb	r3, [r7, #31]
 800acf8:	e0af      	b.n	800ae5a <UART_SetConfig+0x212>
 800acfa:	2308      	movs	r3, #8
 800acfc:	77fb      	strb	r3, [r7, #31]
 800acfe:	e0ac      	b.n	800ae5a <UART_SetConfig+0x212>
 800ad00:	2310      	movs	r3, #16
 800ad02:	77fb      	strb	r3, [r7, #31]
 800ad04:	e0a9      	b.n	800ae5a <UART_SetConfig+0x212>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a6f      	ldr	r2, [pc, #444]	; (800aec8 <UART_SetConfig+0x280>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d124      	bne.n	800ad5a <UART_SetConfig+0x112>
 800ad10:	4b6c      	ldr	r3, [pc, #432]	; (800aec4 <UART_SetConfig+0x27c>)
 800ad12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ad18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad1c:	d011      	beq.n	800ad42 <UART_SetConfig+0xfa>
 800ad1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad22:	d817      	bhi.n	800ad54 <UART_SetConfig+0x10c>
 800ad24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad28:	d011      	beq.n	800ad4e <UART_SetConfig+0x106>
 800ad2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad2e:	d811      	bhi.n	800ad54 <UART_SetConfig+0x10c>
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d003      	beq.n	800ad3c <UART_SetConfig+0xf4>
 800ad34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad38:	d006      	beq.n	800ad48 <UART_SetConfig+0x100>
 800ad3a:	e00b      	b.n	800ad54 <UART_SetConfig+0x10c>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	77fb      	strb	r3, [r7, #31]
 800ad40:	e08b      	b.n	800ae5a <UART_SetConfig+0x212>
 800ad42:	2302      	movs	r3, #2
 800ad44:	77fb      	strb	r3, [r7, #31]
 800ad46:	e088      	b.n	800ae5a <UART_SetConfig+0x212>
 800ad48:	2304      	movs	r3, #4
 800ad4a:	77fb      	strb	r3, [r7, #31]
 800ad4c:	e085      	b.n	800ae5a <UART_SetConfig+0x212>
 800ad4e:	2308      	movs	r3, #8
 800ad50:	77fb      	strb	r3, [r7, #31]
 800ad52:	e082      	b.n	800ae5a <UART_SetConfig+0x212>
 800ad54:	2310      	movs	r3, #16
 800ad56:	77fb      	strb	r3, [r7, #31]
 800ad58:	e07f      	b.n	800ae5a <UART_SetConfig+0x212>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4a5b      	ldr	r2, [pc, #364]	; (800aecc <UART_SetConfig+0x284>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d124      	bne.n	800adae <UART_SetConfig+0x166>
 800ad64:	4b57      	ldr	r3, [pc, #348]	; (800aec4 <UART_SetConfig+0x27c>)
 800ad66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad68:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800ad6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ad70:	d011      	beq.n	800ad96 <UART_SetConfig+0x14e>
 800ad72:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ad76:	d817      	bhi.n	800ada8 <UART_SetConfig+0x160>
 800ad78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ad7c:	d011      	beq.n	800ada2 <UART_SetConfig+0x15a>
 800ad7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ad82:	d811      	bhi.n	800ada8 <UART_SetConfig+0x160>
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d003      	beq.n	800ad90 <UART_SetConfig+0x148>
 800ad88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad8c:	d006      	beq.n	800ad9c <UART_SetConfig+0x154>
 800ad8e:	e00b      	b.n	800ada8 <UART_SetConfig+0x160>
 800ad90:	2300      	movs	r3, #0
 800ad92:	77fb      	strb	r3, [r7, #31]
 800ad94:	e061      	b.n	800ae5a <UART_SetConfig+0x212>
 800ad96:	2302      	movs	r3, #2
 800ad98:	77fb      	strb	r3, [r7, #31]
 800ad9a:	e05e      	b.n	800ae5a <UART_SetConfig+0x212>
 800ad9c:	2304      	movs	r3, #4
 800ad9e:	77fb      	strb	r3, [r7, #31]
 800ada0:	e05b      	b.n	800ae5a <UART_SetConfig+0x212>
 800ada2:	2308      	movs	r3, #8
 800ada4:	77fb      	strb	r3, [r7, #31]
 800ada6:	e058      	b.n	800ae5a <UART_SetConfig+0x212>
 800ada8:	2310      	movs	r3, #16
 800adaa:	77fb      	strb	r3, [r7, #31]
 800adac:	e055      	b.n	800ae5a <UART_SetConfig+0x212>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a47      	ldr	r2, [pc, #284]	; (800aed0 <UART_SetConfig+0x288>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d124      	bne.n	800ae02 <UART_SetConfig+0x1ba>
 800adb8:	4b42      	ldr	r3, [pc, #264]	; (800aec4 <UART_SetConfig+0x27c>)
 800adba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adbc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800adc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800adc4:	d011      	beq.n	800adea <UART_SetConfig+0x1a2>
 800adc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800adca:	d817      	bhi.n	800adfc <UART_SetConfig+0x1b4>
 800adcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800add0:	d011      	beq.n	800adf6 <UART_SetConfig+0x1ae>
 800add2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800add6:	d811      	bhi.n	800adfc <UART_SetConfig+0x1b4>
 800add8:	2b00      	cmp	r3, #0
 800adda:	d003      	beq.n	800ade4 <UART_SetConfig+0x19c>
 800addc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ade0:	d006      	beq.n	800adf0 <UART_SetConfig+0x1a8>
 800ade2:	e00b      	b.n	800adfc <UART_SetConfig+0x1b4>
 800ade4:	2300      	movs	r3, #0
 800ade6:	77fb      	strb	r3, [r7, #31]
 800ade8:	e037      	b.n	800ae5a <UART_SetConfig+0x212>
 800adea:	2302      	movs	r3, #2
 800adec:	77fb      	strb	r3, [r7, #31]
 800adee:	e034      	b.n	800ae5a <UART_SetConfig+0x212>
 800adf0:	2304      	movs	r3, #4
 800adf2:	77fb      	strb	r3, [r7, #31]
 800adf4:	e031      	b.n	800ae5a <UART_SetConfig+0x212>
 800adf6:	2308      	movs	r3, #8
 800adf8:	77fb      	strb	r3, [r7, #31]
 800adfa:	e02e      	b.n	800ae5a <UART_SetConfig+0x212>
 800adfc:	2310      	movs	r3, #16
 800adfe:	77fb      	strb	r3, [r7, #31]
 800ae00:	e02b      	b.n	800ae5a <UART_SetConfig+0x212>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a33      	ldr	r2, [pc, #204]	; (800aed4 <UART_SetConfig+0x28c>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d124      	bne.n	800ae56 <UART_SetConfig+0x20e>
 800ae0c:	4b2d      	ldr	r3, [pc, #180]	; (800aec4 <UART_SetConfig+0x27c>)
 800ae0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae10:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800ae14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ae18:	d011      	beq.n	800ae3e <UART_SetConfig+0x1f6>
 800ae1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ae1e:	d817      	bhi.n	800ae50 <UART_SetConfig+0x208>
 800ae20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae24:	d011      	beq.n	800ae4a <UART_SetConfig+0x202>
 800ae26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae2a:	d811      	bhi.n	800ae50 <UART_SetConfig+0x208>
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d003      	beq.n	800ae38 <UART_SetConfig+0x1f0>
 800ae30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae34:	d006      	beq.n	800ae44 <UART_SetConfig+0x1fc>
 800ae36:	e00b      	b.n	800ae50 <UART_SetConfig+0x208>
 800ae38:	2300      	movs	r3, #0
 800ae3a:	77fb      	strb	r3, [r7, #31]
 800ae3c:	e00d      	b.n	800ae5a <UART_SetConfig+0x212>
 800ae3e:	2302      	movs	r3, #2
 800ae40:	77fb      	strb	r3, [r7, #31]
 800ae42:	e00a      	b.n	800ae5a <UART_SetConfig+0x212>
 800ae44:	2304      	movs	r3, #4
 800ae46:	77fb      	strb	r3, [r7, #31]
 800ae48:	e007      	b.n	800ae5a <UART_SetConfig+0x212>
 800ae4a:	2308      	movs	r3, #8
 800ae4c:	77fb      	strb	r3, [r7, #31]
 800ae4e:	e004      	b.n	800ae5a <UART_SetConfig+0x212>
 800ae50:	2310      	movs	r3, #16
 800ae52:	77fb      	strb	r3, [r7, #31]
 800ae54:	e001      	b.n	800ae5a <UART_SetConfig+0x212>
 800ae56:	2310      	movs	r3, #16
 800ae58:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	69db      	ldr	r3, [r3, #28]
 800ae5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae62:	d16c      	bne.n	800af3e <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 800ae64:	7ffb      	ldrb	r3, [r7, #31]
 800ae66:	2b08      	cmp	r3, #8
 800ae68:	d838      	bhi.n	800aedc <UART_SetConfig+0x294>
 800ae6a:	a201      	add	r2, pc, #4	; (adr r2, 800ae70 <UART_SetConfig+0x228>)
 800ae6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae70:	0800ae95 	.word	0x0800ae95
 800ae74:	0800ae9d 	.word	0x0800ae9d
 800ae78:	0800aea5 	.word	0x0800aea5
 800ae7c:	0800aedd 	.word	0x0800aedd
 800ae80:	0800aeab 	.word	0x0800aeab
 800ae84:	0800aedd 	.word	0x0800aedd
 800ae88:	0800aedd 	.word	0x0800aedd
 800ae8c:	0800aedd 	.word	0x0800aedd
 800ae90:	0800aeb3 	.word	0x0800aeb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae94:	f7fd fe96 	bl	8008bc4 <HAL_RCC_GetPCLK1Freq>
 800ae98:	61b8      	str	r0, [r7, #24]
        break;
 800ae9a:	e024      	b.n	800aee6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae9c:	f7fd feb4 	bl	8008c08 <HAL_RCC_GetPCLK2Freq>
 800aea0:	61b8      	str	r0, [r7, #24]
        break;
 800aea2:	e020      	b.n	800aee6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aea4:	4b0c      	ldr	r3, [pc, #48]	; (800aed8 <UART_SetConfig+0x290>)
 800aea6:	61bb      	str	r3, [r7, #24]
        break;
 800aea8:	e01d      	b.n	800aee6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aeaa:	f7fd fe15 	bl	8008ad8 <HAL_RCC_GetSysClockFreq>
 800aeae:	61b8      	str	r0, [r7, #24]
        break;
 800aeb0:	e019      	b.n	800aee6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aeb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aeb6:	61bb      	str	r3, [r7, #24]
        break;
 800aeb8:	e015      	b.n	800aee6 <UART_SetConfig+0x29e>
 800aeba:	bf00      	nop
 800aebc:	efff69f3 	.word	0xefff69f3
 800aec0:	40013800 	.word	0x40013800
 800aec4:	40021000 	.word	0x40021000
 800aec8:	40004400 	.word	0x40004400
 800aecc:	40004800 	.word	0x40004800
 800aed0:	40004c00 	.word	0x40004c00
 800aed4:	40005000 	.word	0x40005000
 800aed8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800aedc:	2300      	movs	r3, #0
 800aede:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	77bb      	strb	r3, [r7, #30]
        break;
 800aee4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d075      	beq.n	800afd8 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	005a      	lsls	r2, r3, #1
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	085b      	lsrs	r3, r3, #1
 800aef6:	441a      	add	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	fbb2 f3f3 	udiv	r3, r2, r3
 800af00:	b29b      	uxth	r3, r3
 800af02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	2b0f      	cmp	r3, #15
 800af08:	d916      	bls.n	800af38 <UART_SetConfig+0x2f0>
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af10:	d212      	bcs.n	800af38 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	b29b      	uxth	r3, r3
 800af16:	f023 030f 	bic.w	r3, r3, #15
 800af1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	085b      	lsrs	r3, r3, #1
 800af20:	b29b      	uxth	r3, r3
 800af22:	f003 0307 	and.w	r3, r3, #7
 800af26:	b29a      	uxth	r2, r3
 800af28:	89fb      	ldrh	r3, [r7, #14]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	89fa      	ldrh	r2, [r7, #14]
 800af34:	60da      	str	r2, [r3, #12]
 800af36:	e04f      	b.n	800afd8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800af38:	2301      	movs	r3, #1
 800af3a:	77bb      	strb	r3, [r7, #30]
 800af3c:	e04c      	b.n	800afd8 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af3e:	7ffb      	ldrb	r3, [r7, #31]
 800af40:	2b08      	cmp	r3, #8
 800af42:	d828      	bhi.n	800af96 <UART_SetConfig+0x34e>
 800af44:	a201      	add	r2, pc, #4	; (adr r2, 800af4c <UART_SetConfig+0x304>)
 800af46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4a:	bf00      	nop
 800af4c:	0800af71 	.word	0x0800af71
 800af50:	0800af79 	.word	0x0800af79
 800af54:	0800af81 	.word	0x0800af81
 800af58:	0800af97 	.word	0x0800af97
 800af5c:	0800af87 	.word	0x0800af87
 800af60:	0800af97 	.word	0x0800af97
 800af64:	0800af97 	.word	0x0800af97
 800af68:	0800af97 	.word	0x0800af97
 800af6c:	0800af8f 	.word	0x0800af8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af70:	f7fd fe28 	bl	8008bc4 <HAL_RCC_GetPCLK1Freq>
 800af74:	61b8      	str	r0, [r7, #24]
        break;
 800af76:	e013      	b.n	800afa0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af78:	f7fd fe46 	bl	8008c08 <HAL_RCC_GetPCLK2Freq>
 800af7c:	61b8      	str	r0, [r7, #24]
        break;
 800af7e:	e00f      	b.n	800afa0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af80:	4b1b      	ldr	r3, [pc, #108]	; (800aff0 <UART_SetConfig+0x3a8>)
 800af82:	61bb      	str	r3, [r7, #24]
        break;
 800af84:	e00c      	b.n	800afa0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af86:	f7fd fda7 	bl	8008ad8 <HAL_RCC_GetSysClockFreq>
 800af8a:	61b8      	str	r0, [r7, #24]
        break;
 800af8c:	e008      	b.n	800afa0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af92:	61bb      	str	r3, [r7, #24]
        break;
 800af94:	e004      	b.n	800afa0 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800af96:	2300      	movs	r3, #0
 800af98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	77bb      	strb	r3, [r7, #30]
        break;
 800af9e:	bf00      	nop
    }

    if (pclk != 0U)
 800afa0:	69bb      	ldr	r3, [r7, #24]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d018      	beq.n	800afd8 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	085a      	lsrs	r2, r3, #1
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	441a      	add	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800afb8:	b29b      	uxth	r3, r3
 800afba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	2b0f      	cmp	r3, #15
 800afc0:	d908      	bls.n	800afd4 <UART_SetConfig+0x38c>
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afc8:	d204      	bcs.n	800afd4 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	693a      	ldr	r2, [r7, #16]
 800afd0:	60da      	str	r2, [r3, #12]
 800afd2:	e001      	b.n	800afd8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800afd4:	2301      	movs	r3, #1
 800afd6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800afe4:	7fbb      	ldrb	r3, [r7, #30]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3720      	adds	r7, #32
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	007a1200 	.word	0x007a1200

0800aff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b000:	f003 0301 	and.w	r3, r3, #1
 800b004:	2b00      	cmp	r3, #0
 800b006:	d00a      	beq.n	800b01e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	430a      	orrs	r2, r1
 800b01c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b022:	f003 0302 	and.w	r3, r3, #2
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00a      	beq.n	800b040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	430a      	orrs	r2, r1
 800b03e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b044:	f003 0304 	and.w	r3, r3, #4
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d00a      	beq.n	800b062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	430a      	orrs	r2, r1
 800b060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b066:	f003 0308 	and.w	r3, r3, #8
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00a      	beq.n	800b084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	430a      	orrs	r2, r1
 800b082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b088:	f003 0310 	and.w	r3, r3, #16
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d00a      	beq.n	800b0a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	430a      	orrs	r2, r1
 800b0a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0aa:	f003 0320 	and.w	r3, r3, #32
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00a      	beq.n	800b0c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	430a      	orrs	r2, r1
 800b0c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d01a      	beq.n	800b10a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	430a      	orrs	r2, r1
 800b0e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0f2:	d10a      	bne.n	800b10a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	430a      	orrs	r2, r1
 800b108:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00a      	beq.n	800b12c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	430a      	orrs	r2, r1
 800b12a:	605a      	str	r2, [r3, #4]
  }
}
 800b12c:	bf00      	nop
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af02      	add	r7, sp, #8
 800b13e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b148:	f7f9 f92e 	bl	80043a8 <HAL_GetTick>
 800b14c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f003 0308 	and.w	r3, r3, #8
 800b158:	2b08      	cmp	r3, #8
 800b15a:	d10e      	bne.n	800b17a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b15c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b160:	9300      	str	r3, [sp, #0]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2200      	movs	r2, #0
 800b166:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f82d 	bl	800b1ca <UART_WaitOnFlagUntilTimeout>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d001      	beq.n	800b17a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b176:	2303      	movs	r3, #3
 800b178:	e023      	b.n	800b1c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f003 0304 	and.w	r3, r3, #4
 800b184:	2b04      	cmp	r3, #4
 800b186:	d10e      	bne.n	800b1a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b188:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2200      	movs	r2, #0
 800b192:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 f817 	bl	800b1ca <UART_WaitOnFlagUntilTimeout>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d001      	beq.n	800b1a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	e00d      	b.n	800b1c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2220      	movs	r2, #32
 800b1aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2220      	movs	r2, #32
 800b1b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b09c      	sub	sp, #112	; 0x70
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	60f8      	str	r0, [r7, #12]
 800b1d2:	60b9      	str	r1, [r7, #8]
 800b1d4:	603b      	str	r3, [r7, #0]
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1da:	e0a5      	b.n	800b328 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e2:	f000 80a1 	beq.w	800b328 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1e6:	f7f9 f8df 	bl	80043a8 <HAL_GetTick>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	1ad3      	subs	r3, r2, r3
 800b1f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d302      	bcc.n	800b1fc <UART_WaitOnFlagUntilTimeout+0x32>
 800b1f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d13e      	bne.n	800b27a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b204:	e853 3f00 	ldrex	r3, [r3]
 800b208:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b20a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b20c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b210:	667b      	str	r3, [r7, #100]	; 0x64
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	461a      	mov	r2, r3
 800b218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b21a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b21c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b21e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b220:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b222:	e841 2300 	strex	r3, r2, [r1]
 800b226:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1e6      	bne.n	800b1fc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	3308      	adds	r3, #8
 800b234:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b238:	e853 3f00 	ldrex	r3, [r3]
 800b23c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b240:	f023 0301 	bic.w	r3, r3, #1
 800b244:	663b      	str	r3, [r7, #96]	; 0x60
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	3308      	adds	r3, #8
 800b24c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b24e:	64ba      	str	r2, [r7, #72]	; 0x48
 800b250:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b252:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b254:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b256:	e841 2300 	strex	r3, r2, [r1]
 800b25a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b25c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1e5      	bne.n	800b22e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2220      	movs	r2, #32
 800b266:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2220      	movs	r2, #32
 800b26c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2200      	movs	r2, #0
 800b272:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b276:	2303      	movs	r3, #3
 800b278:	e067      	b.n	800b34a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f003 0304 	and.w	r3, r3, #4
 800b284:	2b00      	cmp	r3, #0
 800b286:	d04f      	beq.n	800b328 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	69db      	ldr	r3, [r3, #28]
 800b28e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b296:	d147      	bne.n	800b328 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2aa:	e853 3f00 	ldrex	r3, [r3]
 800b2ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b2b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	461a      	mov	r2, r3
 800b2be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2c0:	637b      	str	r3, [r7, #52]	; 0x34
 800b2c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b2c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2c8:	e841 2300 	strex	r3, r2, [r1]
 800b2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d1e6      	bne.n	800b2a2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	3308      	adds	r3, #8
 800b2da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	e853 3f00 	ldrex	r3, [r3]
 800b2e2:	613b      	str	r3, [r7, #16]
   return(result);
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	f023 0301 	bic.w	r3, r3, #1
 800b2ea:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	3308      	adds	r3, #8
 800b2f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b2f4:	623a      	str	r2, [r7, #32]
 800b2f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f8:	69f9      	ldr	r1, [r7, #28]
 800b2fa:	6a3a      	ldr	r2, [r7, #32]
 800b2fc:	e841 2300 	strex	r3, r2, [r1]
 800b300:	61bb      	str	r3, [r7, #24]
   return(result);
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1e5      	bne.n	800b2d4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2220      	movs	r2, #32
 800b30c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2220      	movs	r2, #32
 800b312:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2220      	movs	r2, #32
 800b318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2200      	movs	r2, #0
 800b320:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b324:	2303      	movs	r3, #3
 800b326:	e010      	b.n	800b34a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	69da      	ldr	r2, [r3, #28]
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	4013      	ands	r3, r2
 800b332:	68ba      	ldr	r2, [r7, #8]
 800b334:	429a      	cmp	r2, r3
 800b336:	bf0c      	ite	eq
 800b338:	2301      	moveq	r3, #1
 800b33a:	2300      	movne	r3, #0
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	461a      	mov	r2, r3
 800b340:	79fb      	ldrb	r3, [r7, #7]
 800b342:	429a      	cmp	r2, r3
 800b344:	f43f af4a 	beq.w	800b1dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b348:	2300      	movs	r3, #0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3770      	adds	r7, #112	; 0x70
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
	...

0800b354 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b096      	sub	sp, #88	; 0x58
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	4613      	mov	r3, r2
 800b360:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	88fa      	ldrh	r2, [r7, #6]
 800b36c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2200      	movs	r2, #0
 800b374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2222      	movs	r2, #34	; 0x22
 800b37c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b382:	2b00      	cmp	r3, #0
 800b384:	d02b      	beq.n	800b3de <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b38a:	4a40      	ldr	r2, [pc, #256]	; (800b48c <UART_Start_Receive_DMA+0x138>)
 800b38c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b392:	4a3f      	ldr	r2, [pc, #252]	; (800b490 <UART_Start_Receive_DMA+0x13c>)
 800b394:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b39a:	4a3e      	ldr	r2, [pc, #248]	; (800b494 <UART_Start_Receive_DMA+0x140>)
 800b39c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3324      	adds	r3, #36	; 0x24
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	88fb      	ldrh	r3, [r7, #6]
 800b3ba:	f7fb f87c 	bl	80064b6 <HAL_DMA_Start_IT>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00c      	beq.n	800b3de <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2210      	movs	r2, #16
 800b3c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2220      	movs	r2, #32
 800b3d8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e051      	b.n	800b482 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ee:	e853 3f00 	ldrex	r3, [r3]
 800b3f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3fa:	657b      	str	r3, [r7, #84]	; 0x54
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	461a      	mov	r2, r3
 800b402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b404:	64bb      	str	r3, [r7, #72]	; 0x48
 800b406:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b408:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b40a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b40c:	e841 2300 	strex	r3, r2, [r1]
 800b410:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1e6      	bne.n	800b3e6 <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	3308      	adds	r3, #8
 800b41e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b422:	e853 3f00 	ldrex	r3, [r3]
 800b426:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42a:	f043 0301 	orr.w	r3, r3, #1
 800b42e:	653b      	str	r3, [r7, #80]	; 0x50
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	3308      	adds	r3, #8
 800b436:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b438:	637a      	str	r2, [r7, #52]	; 0x34
 800b43a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b43e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b440:	e841 2300 	strex	r3, r2, [r1]
 800b444:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d1e5      	bne.n	800b418 <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	3308      	adds	r3, #8
 800b452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	e853 3f00 	ldrex	r3, [r3]
 800b45a:	613b      	str	r3, [r7, #16]
   return(result);
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b462:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	3308      	adds	r3, #8
 800b46a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b46c:	623a      	str	r2, [r7, #32]
 800b46e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b470:	69f9      	ldr	r1, [r7, #28]
 800b472:	6a3a      	ldr	r2, [r7, #32]
 800b474:	e841 2300 	strex	r3, r2, [r1]
 800b478:	61bb      	str	r3, [r7, #24]
   return(result);
 800b47a:	69bb      	ldr	r3, [r7, #24]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d1e5      	bne.n	800b44c <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3758      	adds	r7, #88	; 0x58
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	0800b5ab 	.word	0x0800b5ab
 800b490:	0800b6c9 	.word	0x0800b6c9
 800b494:	0800b701 	.word	0x0800b701

0800b498 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b498:	b480      	push	{r7}
 800b49a:	b089      	sub	sp, #36	; 0x24
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	e853 3f00 	ldrex	r3, [r3]
 800b4ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b4b4:	61fb      	str	r3, [r7, #28]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	61bb      	str	r3, [r7, #24]
 800b4c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c2:	6979      	ldr	r1, [r7, #20]
 800b4c4:	69ba      	ldr	r2, [r7, #24]
 800b4c6:	e841 2300 	strex	r3, r2, [r1]
 800b4ca:	613b      	str	r3, [r7, #16]
   return(result);
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1e6      	bne.n	800b4a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2220      	movs	r2, #32
 800b4d6:	679a      	str	r2, [r3, #120]	; 0x78
}
 800b4d8:	bf00      	nop
 800b4da:	3724      	adds	r7, #36	; 0x24
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b095      	sub	sp, #84	; 0x54
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4f4:	e853 3f00 	ldrex	r3, [r3]
 800b4f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b500:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	461a      	mov	r2, r3
 800b508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b50a:	643b      	str	r3, [r7, #64]	; 0x40
 800b50c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b50e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b510:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b512:	e841 2300 	strex	r3, r2, [r1]
 800b516:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1e6      	bne.n	800b4ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	3308      	adds	r3, #8
 800b524:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b526:	6a3b      	ldr	r3, [r7, #32]
 800b528:	e853 3f00 	ldrex	r3, [r3]
 800b52c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	f023 0301 	bic.w	r3, r3, #1
 800b534:	64bb      	str	r3, [r7, #72]	; 0x48
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	3308      	adds	r3, #8
 800b53c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b53e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b540:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b542:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b546:	e841 2300 	strex	r3, r2, [r1]
 800b54a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1e5      	bne.n	800b51e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b556:	2b01      	cmp	r3, #1
 800b558:	d118      	bne.n	800b58c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	e853 3f00 	ldrex	r3, [r3]
 800b566:	60bb      	str	r3, [r7, #8]
   return(result);
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	f023 0310 	bic.w	r3, r3, #16
 800b56e:	647b      	str	r3, [r7, #68]	; 0x44
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	461a      	mov	r2, r3
 800b576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b578:	61bb      	str	r3, [r7, #24]
 800b57a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57c:	6979      	ldr	r1, [r7, #20]
 800b57e:	69ba      	ldr	r2, [r7, #24]
 800b580:	e841 2300 	strex	r3, r2, [r1]
 800b584:	613b      	str	r3, [r7, #16]
   return(result);
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d1e6      	bne.n	800b55a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2220      	movs	r2, #32
 800b590:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2200      	movs	r2, #0
 800b596:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b59e:	bf00      	nop
 800b5a0:	3754      	adds	r7, #84	; 0x54
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b09c      	sub	sp, #112	; 0x70
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	699b      	ldr	r3, [r3, #24]
 800b5bc:	2b20      	cmp	r3, #32
 800b5be:	d070      	beq.n	800b6a2 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 800b5c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5d0:	e853 3f00 	ldrex	r3, [r3]
 800b5d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b5d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5dc:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5e6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b5e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b5ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5ee:	e841 2300 	strex	r3, r2, [r1]
 800b5f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b5f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d1e6      	bne.n	800b5c8 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	3308      	adds	r3, #8
 800b600:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b604:	e853 3f00 	ldrex	r3, [r3]
 800b608:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b60c:	f023 0301 	bic.w	r3, r3, #1
 800b610:	667b      	str	r3, [r7, #100]	; 0x64
 800b612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	3308      	adds	r3, #8
 800b618:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b61a:	647a      	str	r2, [r7, #68]	; 0x44
 800b61c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b61e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b620:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b622:	e841 2300 	strex	r3, r2, [r1]
 800b626:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d1e5      	bne.n	800b5fa <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b62e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	3308      	adds	r3, #8
 800b634:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b638:	e853 3f00 	ldrex	r3, [r3]
 800b63c:	623b      	str	r3, [r7, #32]
   return(result);
 800b63e:	6a3b      	ldr	r3, [r7, #32]
 800b640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b644:	663b      	str	r3, [r7, #96]	; 0x60
 800b646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	3308      	adds	r3, #8
 800b64c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b64e:	633a      	str	r2, [r7, #48]	; 0x30
 800b650:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b652:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b656:	e841 2300 	strex	r3, r2, [r1]
 800b65a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d1e5      	bne.n	800b62e <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b664:	2220      	movs	r2, #32
 800b666:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b66a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d118      	bne.n	800b6a2 <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	e853 3f00 	ldrex	r3, [r3]
 800b67c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f023 0310 	bic.w	r3, r3, #16
 800b684:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	461a      	mov	r2, r3
 800b68c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b68e:	61fb      	str	r3, [r7, #28]
 800b690:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b692:	69b9      	ldr	r1, [r7, #24]
 800b694:	69fa      	ldr	r2, [r7, #28]
 800b696:	e841 2300 	strex	r3, r2, [r1]
 800b69a:	617b      	str	r3, [r7, #20]
   return(result);
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d1e6      	bne.n	800b670 <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d107      	bne.n	800b6ba <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b6aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b6b4:	f7f5 ffda 	bl	800166c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6b8:	e002      	b.n	800b6c0 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 800b6ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b6bc:	f7ff faa6 	bl	800ac0c <HAL_UART_RxCpltCallback>
}
 800b6c0:	bf00      	nop
 800b6c2:	3770      	adds	r7, #112	; 0x70
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d109      	bne.n	800b6f2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b6e4:	085b      	lsrs	r3, r3, #1
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	f7f5 ffbe 	bl	800166c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6f0:	e002      	b.n	800b6f8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f7ff fa94 	bl	800ac20 <HAL_UART_RxHalfCpltCallback>
}
 800b6f8:	bf00      	nop
 800b6fa:	3710      	adds	r7, #16
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b086      	sub	sp, #24
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b712:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b718:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b724:	2b80      	cmp	r3, #128	; 0x80
 800b726:	d109      	bne.n	800b73c <UART_DMAError+0x3c>
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	2b21      	cmp	r3, #33	; 0x21
 800b72c:	d106      	bne.n	800b73c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	2200      	movs	r2, #0
 800b732:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800b736:	6978      	ldr	r0, [r7, #20]
 800b738:	f7ff feae 	bl	800b498 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b746:	2b40      	cmp	r3, #64	; 0x40
 800b748:	d109      	bne.n	800b75e <UART_DMAError+0x5e>
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2b22      	cmp	r3, #34	; 0x22
 800b74e:	d106      	bne.n	800b75e <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	2200      	movs	r2, #0
 800b754:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800b758:	6978      	ldr	r0, [r7, #20]
 800b75a:	f7ff fec3 	bl	800b4e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b764:	f043 0210 	orr.w	r2, r3, #16
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b76e:	6978      	ldr	r0, [r7, #20]
 800b770:	f7ff fa60 	bl	800ac34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b774:	bf00      	nop
 800b776:	3718      	adds	r7, #24
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b788:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2200      	movs	r2, #0
 800b796:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f7ff fa4a 	bl	800ac34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7a0:	bf00      	nop
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b088      	sub	sp, #32
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	e853 3f00 	ldrex	r3, [r3]
 800b7bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7c4:	61fb      	str	r3, [r7, #28]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	61bb      	str	r3, [r7, #24]
 800b7d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d2:	6979      	ldr	r1, [r7, #20]
 800b7d4:	69ba      	ldr	r2, [r7, #24]
 800b7d6:	e841 2300 	strex	r3, r2, [r1]
 800b7da:	613b      	str	r3, [r7, #16]
   return(result);
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1e6      	bne.n	800b7b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2220      	movs	r2, #32
 800b7e6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f7f5 ff28 	bl	8001644 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7f4:	bf00      	nop
 800b7f6:	3720      	adds	r7, #32
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b804:	bf00      	nop
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b08c      	sub	sp, #48	; 0x30
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	4613      	mov	r3, r2
 800b81c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b822:	2b20      	cmp	r3, #32
 800b824:	d14a      	bne.n	800b8bc <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d002      	beq.n	800b832 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 800b82c:	88fb      	ldrh	r3, [r7, #6]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d101      	bne.n	800b836 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 800b832:	2301      	movs	r3, #1
 800b834:	e043      	b.n	800b8be <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d101      	bne.n	800b844 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 800b840:	2302      	movs	r3, #2
 800b842:	e03c      	b.n	800b8be <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2201      	movs	r2, #1
 800b850:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b852:	88fb      	ldrh	r3, [r7, #6]
 800b854:	461a      	mov	r2, r3
 800b856:	68b9      	ldr	r1, [r7, #8]
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	f7ff fd7b 	bl	800b354 <UART_Start_Receive_DMA>
 800b85e:	4603      	mov	r3, r0
 800b860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b864:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d124      	bne.n	800b8b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b870:	2b01      	cmp	r3, #1
 800b872:	d11d      	bne.n	800b8b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2210      	movs	r2, #16
 800b87a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	e853 3f00 	ldrex	r3, [r3]
 800b888:	617b      	str	r3, [r7, #20]
   return(result);
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	f043 0310 	orr.w	r3, r3, #16
 800b890:	62bb      	str	r3, [r7, #40]	; 0x28
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	461a      	mov	r2, r3
 800b898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89a:	627b      	str	r3, [r7, #36]	; 0x24
 800b89c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89e:	6a39      	ldr	r1, [r7, #32]
 800b8a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8a2:	e841 2300 	strex	r3, r2, [r1]
 800b8a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1e6      	bne.n	800b87c <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 800b8ae:	e002      	b.n	800b8b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800b8b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8ba:	e000      	b.n	800b8be <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 800b8bc:	2302      	movs	r3, #2
  }
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3730      	adds	r7, #48	; 0x30
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <atoi>:
 800b8c6:	220a      	movs	r2, #10
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	f000 be55 	b.w	800c578 <strtol>
	...

0800b8d0 <__errno>:
 800b8d0:	4b01      	ldr	r3, [pc, #4]	; (800b8d8 <__errno+0x8>)
 800b8d2:	6818      	ldr	r0, [r3, #0]
 800b8d4:	4770      	bx	lr
 800b8d6:	bf00      	nop
 800b8d8:	200000c0 	.word	0x200000c0

0800b8dc <__libc_init_array>:
 800b8dc:	b570      	push	{r4, r5, r6, lr}
 800b8de:	4d0d      	ldr	r5, [pc, #52]	; (800b914 <__libc_init_array+0x38>)
 800b8e0:	4c0d      	ldr	r4, [pc, #52]	; (800b918 <__libc_init_array+0x3c>)
 800b8e2:	1b64      	subs	r4, r4, r5
 800b8e4:	10a4      	asrs	r4, r4, #2
 800b8e6:	2600      	movs	r6, #0
 800b8e8:	42a6      	cmp	r6, r4
 800b8ea:	d109      	bne.n	800b900 <__libc_init_array+0x24>
 800b8ec:	4d0b      	ldr	r5, [pc, #44]	; (800b91c <__libc_init_array+0x40>)
 800b8ee:	4c0c      	ldr	r4, [pc, #48]	; (800b920 <__libc_init_array+0x44>)
 800b8f0:	f003 fee8 	bl	800f6c4 <_init>
 800b8f4:	1b64      	subs	r4, r4, r5
 800b8f6:	10a4      	asrs	r4, r4, #2
 800b8f8:	2600      	movs	r6, #0
 800b8fa:	42a6      	cmp	r6, r4
 800b8fc:	d105      	bne.n	800b90a <__libc_init_array+0x2e>
 800b8fe:	bd70      	pop	{r4, r5, r6, pc}
 800b900:	f855 3b04 	ldr.w	r3, [r5], #4
 800b904:	4798      	blx	r3
 800b906:	3601      	adds	r6, #1
 800b908:	e7ee      	b.n	800b8e8 <__libc_init_array+0xc>
 800b90a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b90e:	4798      	blx	r3
 800b910:	3601      	adds	r6, #1
 800b912:	e7f2      	b.n	800b8fa <__libc_init_array+0x1e>
 800b914:	0800fc68 	.word	0x0800fc68
 800b918:	0800fc68 	.word	0x0800fc68
 800b91c:	0800fc68 	.word	0x0800fc68
 800b920:	0800fc6c 	.word	0x0800fc6c

0800b924 <malloc>:
 800b924:	4b02      	ldr	r3, [pc, #8]	; (800b930 <malloc+0xc>)
 800b926:	4601      	mov	r1, r0
 800b928:	6818      	ldr	r0, [r3, #0]
 800b92a:	f000 b88d 	b.w	800ba48 <_malloc_r>
 800b92e:	bf00      	nop
 800b930:	200000c0 	.word	0x200000c0

0800b934 <free>:
 800b934:	4b02      	ldr	r3, [pc, #8]	; (800b940 <free+0xc>)
 800b936:	4601      	mov	r1, r0
 800b938:	6818      	ldr	r0, [r3, #0]
 800b93a:	f000 b819 	b.w	800b970 <_free_r>
 800b93e:	bf00      	nop
 800b940:	200000c0 	.word	0x200000c0

0800b944 <memcpy>:
 800b944:	440a      	add	r2, r1
 800b946:	4291      	cmp	r1, r2
 800b948:	f100 33ff 	add.w	r3, r0, #4294967295
 800b94c:	d100      	bne.n	800b950 <memcpy+0xc>
 800b94e:	4770      	bx	lr
 800b950:	b510      	push	{r4, lr}
 800b952:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b95a:	4291      	cmp	r1, r2
 800b95c:	d1f9      	bne.n	800b952 <memcpy+0xe>
 800b95e:	bd10      	pop	{r4, pc}

0800b960 <memset>:
 800b960:	4402      	add	r2, r0
 800b962:	4603      	mov	r3, r0
 800b964:	4293      	cmp	r3, r2
 800b966:	d100      	bne.n	800b96a <memset+0xa>
 800b968:	4770      	bx	lr
 800b96a:	f803 1b01 	strb.w	r1, [r3], #1
 800b96e:	e7f9      	b.n	800b964 <memset+0x4>

0800b970 <_free_r>:
 800b970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b972:	2900      	cmp	r1, #0
 800b974:	d044      	beq.n	800ba00 <_free_r+0x90>
 800b976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b97a:	9001      	str	r0, [sp, #4]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	f1a1 0404 	sub.w	r4, r1, #4
 800b982:	bfb8      	it	lt
 800b984:	18e4      	addlt	r4, r4, r3
 800b986:	f001 fc81 	bl	800d28c <__malloc_lock>
 800b98a:	4a1e      	ldr	r2, [pc, #120]	; (800ba04 <_free_r+0x94>)
 800b98c:	9801      	ldr	r0, [sp, #4]
 800b98e:	6813      	ldr	r3, [r2, #0]
 800b990:	b933      	cbnz	r3, 800b9a0 <_free_r+0x30>
 800b992:	6063      	str	r3, [r4, #4]
 800b994:	6014      	str	r4, [r2, #0]
 800b996:	b003      	add	sp, #12
 800b998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b99c:	f001 bc7c 	b.w	800d298 <__malloc_unlock>
 800b9a0:	42a3      	cmp	r3, r4
 800b9a2:	d908      	bls.n	800b9b6 <_free_r+0x46>
 800b9a4:	6825      	ldr	r5, [r4, #0]
 800b9a6:	1961      	adds	r1, r4, r5
 800b9a8:	428b      	cmp	r3, r1
 800b9aa:	bf01      	itttt	eq
 800b9ac:	6819      	ldreq	r1, [r3, #0]
 800b9ae:	685b      	ldreq	r3, [r3, #4]
 800b9b0:	1949      	addeq	r1, r1, r5
 800b9b2:	6021      	streq	r1, [r4, #0]
 800b9b4:	e7ed      	b.n	800b992 <_free_r+0x22>
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	b10b      	cbz	r3, 800b9c0 <_free_r+0x50>
 800b9bc:	42a3      	cmp	r3, r4
 800b9be:	d9fa      	bls.n	800b9b6 <_free_r+0x46>
 800b9c0:	6811      	ldr	r1, [r2, #0]
 800b9c2:	1855      	adds	r5, r2, r1
 800b9c4:	42a5      	cmp	r5, r4
 800b9c6:	d10b      	bne.n	800b9e0 <_free_r+0x70>
 800b9c8:	6824      	ldr	r4, [r4, #0]
 800b9ca:	4421      	add	r1, r4
 800b9cc:	1854      	adds	r4, r2, r1
 800b9ce:	42a3      	cmp	r3, r4
 800b9d0:	6011      	str	r1, [r2, #0]
 800b9d2:	d1e0      	bne.n	800b996 <_free_r+0x26>
 800b9d4:	681c      	ldr	r4, [r3, #0]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	6053      	str	r3, [r2, #4]
 800b9da:	4421      	add	r1, r4
 800b9dc:	6011      	str	r1, [r2, #0]
 800b9de:	e7da      	b.n	800b996 <_free_r+0x26>
 800b9e0:	d902      	bls.n	800b9e8 <_free_r+0x78>
 800b9e2:	230c      	movs	r3, #12
 800b9e4:	6003      	str	r3, [r0, #0]
 800b9e6:	e7d6      	b.n	800b996 <_free_r+0x26>
 800b9e8:	6825      	ldr	r5, [r4, #0]
 800b9ea:	1961      	adds	r1, r4, r5
 800b9ec:	428b      	cmp	r3, r1
 800b9ee:	bf04      	itt	eq
 800b9f0:	6819      	ldreq	r1, [r3, #0]
 800b9f2:	685b      	ldreq	r3, [r3, #4]
 800b9f4:	6063      	str	r3, [r4, #4]
 800b9f6:	bf04      	itt	eq
 800b9f8:	1949      	addeq	r1, r1, r5
 800b9fa:	6021      	streq	r1, [r4, #0]
 800b9fc:	6054      	str	r4, [r2, #4]
 800b9fe:	e7ca      	b.n	800b996 <_free_r+0x26>
 800ba00:	b003      	add	sp, #12
 800ba02:	bd30      	pop	{r4, r5, pc}
 800ba04:	20000740 	.word	0x20000740

0800ba08 <sbrk_aligned>:
 800ba08:	b570      	push	{r4, r5, r6, lr}
 800ba0a:	4e0e      	ldr	r6, [pc, #56]	; (800ba44 <sbrk_aligned+0x3c>)
 800ba0c:	460c      	mov	r4, r1
 800ba0e:	6831      	ldr	r1, [r6, #0]
 800ba10:	4605      	mov	r5, r0
 800ba12:	b911      	cbnz	r1, 800ba1a <sbrk_aligned+0x12>
 800ba14:	f000 fcf6 	bl	800c404 <_sbrk_r>
 800ba18:	6030      	str	r0, [r6, #0]
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	f000 fcf1 	bl	800c404 <_sbrk_r>
 800ba22:	1c43      	adds	r3, r0, #1
 800ba24:	d00a      	beq.n	800ba3c <sbrk_aligned+0x34>
 800ba26:	1cc4      	adds	r4, r0, #3
 800ba28:	f024 0403 	bic.w	r4, r4, #3
 800ba2c:	42a0      	cmp	r0, r4
 800ba2e:	d007      	beq.n	800ba40 <sbrk_aligned+0x38>
 800ba30:	1a21      	subs	r1, r4, r0
 800ba32:	4628      	mov	r0, r5
 800ba34:	f000 fce6 	bl	800c404 <_sbrk_r>
 800ba38:	3001      	adds	r0, #1
 800ba3a:	d101      	bne.n	800ba40 <sbrk_aligned+0x38>
 800ba3c:	f04f 34ff 	mov.w	r4, #4294967295
 800ba40:	4620      	mov	r0, r4
 800ba42:	bd70      	pop	{r4, r5, r6, pc}
 800ba44:	20000744 	.word	0x20000744

0800ba48 <_malloc_r>:
 800ba48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4c:	1ccd      	adds	r5, r1, #3
 800ba4e:	f025 0503 	bic.w	r5, r5, #3
 800ba52:	3508      	adds	r5, #8
 800ba54:	2d0c      	cmp	r5, #12
 800ba56:	bf38      	it	cc
 800ba58:	250c      	movcc	r5, #12
 800ba5a:	2d00      	cmp	r5, #0
 800ba5c:	4607      	mov	r7, r0
 800ba5e:	db01      	blt.n	800ba64 <_malloc_r+0x1c>
 800ba60:	42a9      	cmp	r1, r5
 800ba62:	d905      	bls.n	800ba70 <_malloc_r+0x28>
 800ba64:	230c      	movs	r3, #12
 800ba66:	603b      	str	r3, [r7, #0]
 800ba68:	2600      	movs	r6, #0
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba70:	4e2e      	ldr	r6, [pc, #184]	; (800bb2c <_malloc_r+0xe4>)
 800ba72:	f001 fc0b 	bl	800d28c <__malloc_lock>
 800ba76:	6833      	ldr	r3, [r6, #0]
 800ba78:	461c      	mov	r4, r3
 800ba7a:	bb34      	cbnz	r4, 800baca <_malloc_r+0x82>
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	4638      	mov	r0, r7
 800ba80:	f7ff ffc2 	bl	800ba08 <sbrk_aligned>
 800ba84:	1c43      	adds	r3, r0, #1
 800ba86:	4604      	mov	r4, r0
 800ba88:	d14d      	bne.n	800bb26 <_malloc_r+0xde>
 800ba8a:	6834      	ldr	r4, [r6, #0]
 800ba8c:	4626      	mov	r6, r4
 800ba8e:	2e00      	cmp	r6, #0
 800ba90:	d140      	bne.n	800bb14 <_malloc_r+0xcc>
 800ba92:	6823      	ldr	r3, [r4, #0]
 800ba94:	4631      	mov	r1, r6
 800ba96:	4638      	mov	r0, r7
 800ba98:	eb04 0803 	add.w	r8, r4, r3
 800ba9c:	f000 fcb2 	bl	800c404 <_sbrk_r>
 800baa0:	4580      	cmp	r8, r0
 800baa2:	d13a      	bne.n	800bb1a <_malloc_r+0xd2>
 800baa4:	6821      	ldr	r1, [r4, #0]
 800baa6:	3503      	adds	r5, #3
 800baa8:	1a6d      	subs	r5, r5, r1
 800baaa:	f025 0503 	bic.w	r5, r5, #3
 800baae:	3508      	adds	r5, #8
 800bab0:	2d0c      	cmp	r5, #12
 800bab2:	bf38      	it	cc
 800bab4:	250c      	movcc	r5, #12
 800bab6:	4629      	mov	r1, r5
 800bab8:	4638      	mov	r0, r7
 800baba:	f7ff ffa5 	bl	800ba08 <sbrk_aligned>
 800babe:	3001      	adds	r0, #1
 800bac0:	d02b      	beq.n	800bb1a <_malloc_r+0xd2>
 800bac2:	6823      	ldr	r3, [r4, #0]
 800bac4:	442b      	add	r3, r5
 800bac6:	6023      	str	r3, [r4, #0]
 800bac8:	e00e      	b.n	800bae8 <_malloc_r+0xa0>
 800baca:	6822      	ldr	r2, [r4, #0]
 800bacc:	1b52      	subs	r2, r2, r5
 800bace:	d41e      	bmi.n	800bb0e <_malloc_r+0xc6>
 800bad0:	2a0b      	cmp	r2, #11
 800bad2:	d916      	bls.n	800bb02 <_malloc_r+0xba>
 800bad4:	1961      	adds	r1, r4, r5
 800bad6:	42a3      	cmp	r3, r4
 800bad8:	6025      	str	r5, [r4, #0]
 800bada:	bf18      	it	ne
 800badc:	6059      	strne	r1, [r3, #4]
 800bade:	6863      	ldr	r3, [r4, #4]
 800bae0:	bf08      	it	eq
 800bae2:	6031      	streq	r1, [r6, #0]
 800bae4:	5162      	str	r2, [r4, r5]
 800bae6:	604b      	str	r3, [r1, #4]
 800bae8:	4638      	mov	r0, r7
 800baea:	f104 060b 	add.w	r6, r4, #11
 800baee:	f001 fbd3 	bl	800d298 <__malloc_unlock>
 800baf2:	f026 0607 	bic.w	r6, r6, #7
 800baf6:	1d23      	adds	r3, r4, #4
 800baf8:	1af2      	subs	r2, r6, r3
 800bafa:	d0b6      	beq.n	800ba6a <_malloc_r+0x22>
 800bafc:	1b9b      	subs	r3, r3, r6
 800bafe:	50a3      	str	r3, [r4, r2]
 800bb00:	e7b3      	b.n	800ba6a <_malloc_r+0x22>
 800bb02:	6862      	ldr	r2, [r4, #4]
 800bb04:	42a3      	cmp	r3, r4
 800bb06:	bf0c      	ite	eq
 800bb08:	6032      	streq	r2, [r6, #0]
 800bb0a:	605a      	strne	r2, [r3, #4]
 800bb0c:	e7ec      	b.n	800bae8 <_malloc_r+0xa0>
 800bb0e:	4623      	mov	r3, r4
 800bb10:	6864      	ldr	r4, [r4, #4]
 800bb12:	e7b2      	b.n	800ba7a <_malloc_r+0x32>
 800bb14:	4634      	mov	r4, r6
 800bb16:	6876      	ldr	r6, [r6, #4]
 800bb18:	e7b9      	b.n	800ba8e <_malloc_r+0x46>
 800bb1a:	230c      	movs	r3, #12
 800bb1c:	603b      	str	r3, [r7, #0]
 800bb1e:	4638      	mov	r0, r7
 800bb20:	f001 fbba 	bl	800d298 <__malloc_unlock>
 800bb24:	e7a1      	b.n	800ba6a <_malloc_r+0x22>
 800bb26:	6025      	str	r5, [r4, #0]
 800bb28:	e7de      	b.n	800bae8 <_malloc_r+0xa0>
 800bb2a:	bf00      	nop
 800bb2c:	20000740 	.word	0x20000740

0800bb30 <__cvt>:
 800bb30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb34:	ec55 4b10 	vmov	r4, r5, d0
 800bb38:	2d00      	cmp	r5, #0
 800bb3a:	460e      	mov	r6, r1
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	462b      	mov	r3, r5
 800bb40:	bfbb      	ittet	lt
 800bb42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bb46:	461d      	movlt	r5, r3
 800bb48:	2300      	movge	r3, #0
 800bb4a:	232d      	movlt	r3, #45	; 0x2d
 800bb4c:	700b      	strb	r3, [r1, #0]
 800bb4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bb54:	4691      	mov	r9, r2
 800bb56:	f023 0820 	bic.w	r8, r3, #32
 800bb5a:	bfbc      	itt	lt
 800bb5c:	4622      	movlt	r2, r4
 800bb5e:	4614      	movlt	r4, r2
 800bb60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb64:	d005      	beq.n	800bb72 <__cvt+0x42>
 800bb66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bb6a:	d100      	bne.n	800bb6e <__cvt+0x3e>
 800bb6c:	3601      	adds	r6, #1
 800bb6e:	2102      	movs	r1, #2
 800bb70:	e000      	b.n	800bb74 <__cvt+0x44>
 800bb72:	2103      	movs	r1, #3
 800bb74:	ab03      	add	r3, sp, #12
 800bb76:	9301      	str	r3, [sp, #4]
 800bb78:	ab02      	add	r3, sp, #8
 800bb7a:	9300      	str	r3, [sp, #0]
 800bb7c:	ec45 4b10 	vmov	d0, r4, r5
 800bb80:	4653      	mov	r3, sl
 800bb82:	4632      	mov	r2, r6
 800bb84:	f000 fd90 	bl	800c6a8 <_dtoa_r>
 800bb88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bb8c:	4607      	mov	r7, r0
 800bb8e:	d102      	bne.n	800bb96 <__cvt+0x66>
 800bb90:	f019 0f01 	tst.w	r9, #1
 800bb94:	d022      	beq.n	800bbdc <__cvt+0xac>
 800bb96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb9a:	eb07 0906 	add.w	r9, r7, r6
 800bb9e:	d110      	bne.n	800bbc2 <__cvt+0x92>
 800bba0:	783b      	ldrb	r3, [r7, #0]
 800bba2:	2b30      	cmp	r3, #48	; 0x30
 800bba4:	d10a      	bne.n	800bbbc <__cvt+0x8c>
 800bba6:	2200      	movs	r2, #0
 800bba8:	2300      	movs	r3, #0
 800bbaa:	4620      	mov	r0, r4
 800bbac:	4629      	mov	r1, r5
 800bbae:	f7f4 ff93 	bl	8000ad8 <__aeabi_dcmpeq>
 800bbb2:	b918      	cbnz	r0, 800bbbc <__cvt+0x8c>
 800bbb4:	f1c6 0601 	rsb	r6, r6, #1
 800bbb8:	f8ca 6000 	str.w	r6, [sl]
 800bbbc:	f8da 3000 	ldr.w	r3, [sl]
 800bbc0:	4499      	add	r9, r3
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	4629      	mov	r1, r5
 800bbca:	f7f4 ff85 	bl	8000ad8 <__aeabi_dcmpeq>
 800bbce:	b108      	cbz	r0, 800bbd4 <__cvt+0xa4>
 800bbd0:	f8cd 900c 	str.w	r9, [sp, #12]
 800bbd4:	2230      	movs	r2, #48	; 0x30
 800bbd6:	9b03      	ldr	r3, [sp, #12]
 800bbd8:	454b      	cmp	r3, r9
 800bbda:	d307      	bcc.n	800bbec <__cvt+0xbc>
 800bbdc:	9b03      	ldr	r3, [sp, #12]
 800bbde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbe0:	1bdb      	subs	r3, r3, r7
 800bbe2:	4638      	mov	r0, r7
 800bbe4:	6013      	str	r3, [r2, #0]
 800bbe6:	b004      	add	sp, #16
 800bbe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbec:	1c59      	adds	r1, r3, #1
 800bbee:	9103      	str	r1, [sp, #12]
 800bbf0:	701a      	strb	r2, [r3, #0]
 800bbf2:	e7f0      	b.n	800bbd6 <__cvt+0xa6>

0800bbf4 <__exponent>:
 800bbf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2900      	cmp	r1, #0
 800bbfa:	bfb8      	it	lt
 800bbfc:	4249      	neglt	r1, r1
 800bbfe:	f803 2b02 	strb.w	r2, [r3], #2
 800bc02:	bfb4      	ite	lt
 800bc04:	222d      	movlt	r2, #45	; 0x2d
 800bc06:	222b      	movge	r2, #43	; 0x2b
 800bc08:	2909      	cmp	r1, #9
 800bc0a:	7042      	strb	r2, [r0, #1]
 800bc0c:	dd2a      	ble.n	800bc64 <__exponent+0x70>
 800bc0e:	f10d 0407 	add.w	r4, sp, #7
 800bc12:	46a4      	mov	ip, r4
 800bc14:	270a      	movs	r7, #10
 800bc16:	46a6      	mov	lr, r4
 800bc18:	460a      	mov	r2, r1
 800bc1a:	fb91 f6f7 	sdiv	r6, r1, r7
 800bc1e:	fb07 1516 	mls	r5, r7, r6, r1
 800bc22:	3530      	adds	r5, #48	; 0x30
 800bc24:	2a63      	cmp	r2, #99	; 0x63
 800bc26:	f104 34ff 	add.w	r4, r4, #4294967295
 800bc2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bc2e:	4631      	mov	r1, r6
 800bc30:	dcf1      	bgt.n	800bc16 <__exponent+0x22>
 800bc32:	3130      	adds	r1, #48	; 0x30
 800bc34:	f1ae 0502 	sub.w	r5, lr, #2
 800bc38:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bc3c:	1c44      	adds	r4, r0, #1
 800bc3e:	4629      	mov	r1, r5
 800bc40:	4561      	cmp	r1, ip
 800bc42:	d30a      	bcc.n	800bc5a <__exponent+0x66>
 800bc44:	f10d 0209 	add.w	r2, sp, #9
 800bc48:	eba2 020e 	sub.w	r2, r2, lr
 800bc4c:	4565      	cmp	r5, ip
 800bc4e:	bf88      	it	hi
 800bc50:	2200      	movhi	r2, #0
 800bc52:	4413      	add	r3, r2
 800bc54:	1a18      	subs	r0, r3, r0
 800bc56:	b003      	add	sp, #12
 800bc58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc5e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bc62:	e7ed      	b.n	800bc40 <__exponent+0x4c>
 800bc64:	2330      	movs	r3, #48	; 0x30
 800bc66:	3130      	adds	r1, #48	; 0x30
 800bc68:	7083      	strb	r3, [r0, #2]
 800bc6a:	70c1      	strb	r1, [r0, #3]
 800bc6c:	1d03      	adds	r3, r0, #4
 800bc6e:	e7f1      	b.n	800bc54 <__exponent+0x60>

0800bc70 <_printf_float>:
 800bc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc74:	ed2d 8b02 	vpush	{d8}
 800bc78:	b08d      	sub	sp, #52	; 0x34
 800bc7a:	460c      	mov	r4, r1
 800bc7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bc80:	4616      	mov	r6, r2
 800bc82:	461f      	mov	r7, r3
 800bc84:	4605      	mov	r5, r0
 800bc86:	f001 fafd 	bl	800d284 <_localeconv_r>
 800bc8a:	f8d0 a000 	ldr.w	sl, [r0]
 800bc8e:	4650      	mov	r0, sl
 800bc90:	f7f4 faa6 	bl	80001e0 <strlen>
 800bc94:	2300      	movs	r3, #0
 800bc96:	930a      	str	r3, [sp, #40]	; 0x28
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	9305      	str	r3, [sp, #20]
 800bc9c:	f8d8 3000 	ldr.w	r3, [r8]
 800bca0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bca4:	3307      	adds	r3, #7
 800bca6:	f023 0307 	bic.w	r3, r3, #7
 800bcaa:	f103 0208 	add.w	r2, r3, #8
 800bcae:	f8c8 2000 	str.w	r2, [r8]
 800bcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bcba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bcbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bcc2:	9307      	str	r3, [sp, #28]
 800bcc4:	f8cd 8018 	str.w	r8, [sp, #24]
 800bcc8:	ee08 0a10 	vmov	s16, r0
 800bccc:	4b9f      	ldr	r3, [pc, #636]	; (800bf4c <_printf_float+0x2dc>)
 800bcce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcd2:	f04f 32ff 	mov.w	r2, #4294967295
 800bcd6:	f7f4 ff31 	bl	8000b3c <__aeabi_dcmpun>
 800bcda:	bb88      	cbnz	r0, 800bd40 <_printf_float+0xd0>
 800bcdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bce0:	4b9a      	ldr	r3, [pc, #616]	; (800bf4c <_printf_float+0x2dc>)
 800bce2:	f04f 32ff 	mov.w	r2, #4294967295
 800bce6:	f7f4 ff0b 	bl	8000b00 <__aeabi_dcmple>
 800bcea:	bb48      	cbnz	r0, 800bd40 <_printf_float+0xd0>
 800bcec:	2200      	movs	r2, #0
 800bcee:	2300      	movs	r3, #0
 800bcf0:	4640      	mov	r0, r8
 800bcf2:	4649      	mov	r1, r9
 800bcf4:	f7f4 fefa 	bl	8000aec <__aeabi_dcmplt>
 800bcf8:	b110      	cbz	r0, 800bd00 <_printf_float+0x90>
 800bcfa:	232d      	movs	r3, #45	; 0x2d
 800bcfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd00:	4b93      	ldr	r3, [pc, #588]	; (800bf50 <_printf_float+0x2e0>)
 800bd02:	4894      	ldr	r0, [pc, #592]	; (800bf54 <_printf_float+0x2e4>)
 800bd04:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bd08:	bf94      	ite	ls
 800bd0a:	4698      	movls	r8, r3
 800bd0c:	4680      	movhi	r8, r0
 800bd0e:	2303      	movs	r3, #3
 800bd10:	6123      	str	r3, [r4, #16]
 800bd12:	9b05      	ldr	r3, [sp, #20]
 800bd14:	f023 0204 	bic.w	r2, r3, #4
 800bd18:	6022      	str	r2, [r4, #0]
 800bd1a:	f04f 0900 	mov.w	r9, #0
 800bd1e:	9700      	str	r7, [sp, #0]
 800bd20:	4633      	mov	r3, r6
 800bd22:	aa0b      	add	r2, sp, #44	; 0x2c
 800bd24:	4621      	mov	r1, r4
 800bd26:	4628      	mov	r0, r5
 800bd28:	f000 f9d8 	bl	800c0dc <_printf_common>
 800bd2c:	3001      	adds	r0, #1
 800bd2e:	f040 8090 	bne.w	800be52 <_printf_float+0x1e2>
 800bd32:	f04f 30ff 	mov.w	r0, #4294967295
 800bd36:	b00d      	add	sp, #52	; 0x34
 800bd38:	ecbd 8b02 	vpop	{d8}
 800bd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd40:	4642      	mov	r2, r8
 800bd42:	464b      	mov	r3, r9
 800bd44:	4640      	mov	r0, r8
 800bd46:	4649      	mov	r1, r9
 800bd48:	f7f4 fef8 	bl	8000b3c <__aeabi_dcmpun>
 800bd4c:	b140      	cbz	r0, 800bd60 <_printf_float+0xf0>
 800bd4e:	464b      	mov	r3, r9
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	bfbc      	itt	lt
 800bd54:	232d      	movlt	r3, #45	; 0x2d
 800bd56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bd5a:	487f      	ldr	r0, [pc, #508]	; (800bf58 <_printf_float+0x2e8>)
 800bd5c:	4b7f      	ldr	r3, [pc, #508]	; (800bf5c <_printf_float+0x2ec>)
 800bd5e:	e7d1      	b.n	800bd04 <_printf_float+0x94>
 800bd60:	6863      	ldr	r3, [r4, #4]
 800bd62:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bd66:	9206      	str	r2, [sp, #24]
 800bd68:	1c5a      	adds	r2, r3, #1
 800bd6a:	d13f      	bne.n	800bdec <_printf_float+0x17c>
 800bd6c:	2306      	movs	r3, #6
 800bd6e:	6063      	str	r3, [r4, #4]
 800bd70:	9b05      	ldr	r3, [sp, #20]
 800bd72:	6861      	ldr	r1, [r4, #4]
 800bd74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bd78:	2300      	movs	r3, #0
 800bd7a:	9303      	str	r3, [sp, #12]
 800bd7c:	ab0a      	add	r3, sp, #40	; 0x28
 800bd7e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bd82:	ab09      	add	r3, sp, #36	; 0x24
 800bd84:	ec49 8b10 	vmov	d0, r8, r9
 800bd88:	9300      	str	r3, [sp, #0]
 800bd8a:	6022      	str	r2, [r4, #0]
 800bd8c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bd90:	4628      	mov	r0, r5
 800bd92:	f7ff fecd 	bl	800bb30 <__cvt>
 800bd96:	9b06      	ldr	r3, [sp, #24]
 800bd98:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd9a:	2b47      	cmp	r3, #71	; 0x47
 800bd9c:	4680      	mov	r8, r0
 800bd9e:	d108      	bne.n	800bdb2 <_printf_float+0x142>
 800bda0:	1cc8      	adds	r0, r1, #3
 800bda2:	db02      	blt.n	800bdaa <_printf_float+0x13a>
 800bda4:	6863      	ldr	r3, [r4, #4]
 800bda6:	4299      	cmp	r1, r3
 800bda8:	dd41      	ble.n	800be2e <_printf_float+0x1be>
 800bdaa:	f1ab 0b02 	sub.w	fp, fp, #2
 800bdae:	fa5f fb8b 	uxtb.w	fp, fp
 800bdb2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bdb6:	d820      	bhi.n	800bdfa <_printf_float+0x18a>
 800bdb8:	3901      	subs	r1, #1
 800bdba:	465a      	mov	r2, fp
 800bdbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bdc0:	9109      	str	r1, [sp, #36]	; 0x24
 800bdc2:	f7ff ff17 	bl	800bbf4 <__exponent>
 800bdc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bdc8:	1813      	adds	r3, r2, r0
 800bdca:	2a01      	cmp	r2, #1
 800bdcc:	4681      	mov	r9, r0
 800bdce:	6123      	str	r3, [r4, #16]
 800bdd0:	dc02      	bgt.n	800bdd8 <_printf_float+0x168>
 800bdd2:	6822      	ldr	r2, [r4, #0]
 800bdd4:	07d2      	lsls	r2, r2, #31
 800bdd6:	d501      	bpl.n	800bddc <_printf_float+0x16c>
 800bdd8:	3301      	adds	r3, #1
 800bdda:	6123      	str	r3, [r4, #16]
 800bddc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d09c      	beq.n	800bd1e <_printf_float+0xae>
 800bde4:	232d      	movs	r3, #45	; 0x2d
 800bde6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdea:	e798      	b.n	800bd1e <_printf_float+0xae>
 800bdec:	9a06      	ldr	r2, [sp, #24]
 800bdee:	2a47      	cmp	r2, #71	; 0x47
 800bdf0:	d1be      	bne.n	800bd70 <_printf_float+0x100>
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d1bc      	bne.n	800bd70 <_printf_float+0x100>
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e7b9      	b.n	800bd6e <_printf_float+0xfe>
 800bdfa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bdfe:	d118      	bne.n	800be32 <_printf_float+0x1c2>
 800be00:	2900      	cmp	r1, #0
 800be02:	6863      	ldr	r3, [r4, #4]
 800be04:	dd0b      	ble.n	800be1e <_printf_float+0x1ae>
 800be06:	6121      	str	r1, [r4, #16]
 800be08:	b913      	cbnz	r3, 800be10 <_printf_float+0x1a0>
 800be0a:	6822      	ldr	r2, [r4, #0]
 800be0c:	07d0      	lsls	r0, r2, #31
 800be0e:	d502      	bpl.n	800be16 <_printf_float+0x1a6>
 800be10:	3301      	adds	r3, #1
 800be12:	440b      	add	r3, r1
 800be14:	6123      	str	r3, [r4, #16]
 800be16:	65a1      	str	r1, [r4, #88]	; 0x58
 800be18:	f04f 0900 	mov.w	r9, #0
 800be1c:	e7de      	b.n	800bddc <_printf_float+0x16c>
 800be1e:	b913      	cbnz	r3, 800be26 <_printf_float+0x1b6>
 800be20:	6822      	ldr	r2, [r4, #0]
 800be22:	07d2      	lsls	r2, r2, #31
 800be24:	d501      	bpl.n	800be2a <_printf_float+0x1ba>
 800be26:	3302      	adds	r3, #2
 800be28:	e7f4      	b.n	800be14 <_printf_float+0x1a4>
 800be2a:	2301      	movs	r3, #1
 800be2c:	e7f2      	b.n	800be14 <_printf_float+0x1a4>
 800be2e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800be32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be34:	4299      	cmp	r1, r3
 800be36:	db05      	blt.n	800be44 <_printf_float+0x1d4>
 800be38:	6823      	ldr	r3, [r4, #0]
 800be3a:	6121      	str	r1, [r4, #16]
 800be3c:	07d8      	lsls	r0, r3, #31
 800be3e:	d5ea      	bpl.n	800be16 <_printf_float+0x1a6>
 800be40:	1c4b      	adds	r3, r1, #1
 800be42:	e7e7      	b.n	800be14 <_printf_float+0x1a4>
 800be44:	2900      	cmp	r1, #0
 800be46:	bfd4      	ite	le
 800be48:	f1c1 0202 	rsble	r2, r1, #2
 800be4c:	2201      	movgt	r2, #1
 800be4e:	4413      	add	r3, r2
 800be50:	e7e0      	b.n	800be14 <_printf_float+0x1a4>
 800be52:	6823      	ldr	r3, [r4, #0]
 800be54:	055a      	lsls	r2, r3, #21
 800be56:	d407      	bmi.n	800be68 <_printf_float+0x1f8>
 800be58:	6923      	ldr	r3, [r4, #16]
 800be5a:	4642      	mov	r2, r8
 800be5c:	4631      	mov	r1, r6
 800be5e:	4628      	mov	r0, r5
 800be60:	47b8      	blx	r7
 800be62:	3001      	adds	r0, #1
 800be64:	d12c      	bne.n	800bec0 <_printf_float+0x250>
 800be66:	e764      	b.n	800bd32 <_printf_float+0xc2>
 800be68:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800be6c:	f240 80e0 	bls.w	800c030 <_printf_float+0x3c0>
 800be70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be74:	2200      	movs	r2, #0
 800be76:	2300      	movs	r3, #0
 800be78:	f7f4 fe2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d034      	beq.n	800beea <_printf_float+0x27a>
 800be80:	4a37      	ldr	r2, [pc, #220]	; (800bf60 <_printf_float+0x2f0>)
 800be82:	2301      	movs	r3, #1
 800be84:	4631      	mov	r1, r6
 800be86:	4628      	mov	r0, r5
 800be88:	47b8      	blx	r7
 800be8a:	3001      	adds	r0, #1
 800be8c:	f43f af51 	beq.w	800bd32 <_printf_float+0xc2>
 800be90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be94:	429a      	cmp	r2, r3
 800be96:	db02      	blt.n	800be9e <_printf_float+0x22e>
 800be98:	6823      	ldr	r3, [r4, #0]
 800be9a:	07d8      	lsls	r0, r3, #31
 800be9c:	d510      	bpl.n	800bec0 <_printf_float+0x250>
 800be9e:	ee18 3a10 	vmov	r3, s16
 800bea2:	4652      	mov	r2, sl
 800bea4:	4631      	mov	r1, r6
 800bea6:	4628      	mov	r0, r5
 800bea8:	47b8      	blx	r7
 800beaa:	3001      	adds	r0, #1
 800beac:	f43f af41 	beq.w	800bd32 <_printf_float+0xc2>
 800beb0:	f04f 0800 	mov.w	r8, #0
 800beb4:	f104 091a 	add.w	r9, r4, #26
 800beb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beba:	3b01      	subs	r3, #1
 800bebc:	4543      	cmp	r3, r8
 800bebe:	dc09      	bgt.n	800bed4 <_printf_float+0x264>
 800bec0:	6823      	ldr	r3, [r4, #0]
 800bec2:	079b      	lsls	r3, r3, #30
 800bec4:	f100 8105 	bmi.w	800c0d2 <_printf_float+0x462>
 800bec8:	68e0      	ldr	r0, [r4, #12]
 800beca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800becc:	4298      	cmp	r0, r3
 800bece:	bfb8      	it	lt
 800bed0:	4618      	movlt	r0, r3
 800bed2:	e730      	b.n	800bd36 <_printf_float+0xc6>
 800bed4:	2301      	movs	r3, #1
 800bed6:	464a      	mov	r2, r9
 800bed8:	4631      	mov	r1, r6
 800beda:	4628      	mov	r0, r5
 800bedc:	47b8      	blx	r7
 800bede:	3001      	adds	r0, #1
 800bee0:	f43f af27 	beq.w	800bd32 <_printf_float+0xc2>
 800bee4:	f108 0801 	add.w	r8, r8, #1
 800bee8:	e7e6      	b.n	800beb8 <_printf_float+0x248>
 800beea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beec:	2b00      	cmp	r3, #0
 800beee:	dc39      	bgt.n	800bf64 <_printf_float+0x2f4>
 800bef0:	4a1b      	ldr	r2, [pc, #108]	; (800bf60 <_printf_float+0x2f0>)
 800bef2:	2301      	movs	r3, #1
 800bef4:	4631      	mov	r1, r6
 800bef6:	4628      	mov	r0, r5
 800bef8:	47b8      	blx	r7
 800befa:	3001      	adds	r0, #1
 800befc:	f43f af19 	beq.w	800bd32 <_printf_float+0xc2>
 800bf00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf04:	4313      	orrs	r3, r2
 800bf06:	d102      	bne.n	800bf0e <_printf_float+0x29e>
 800bf08:	6823      	ldr	r3, [r4, #0]
 800bf0a:	07d9      	lsls	r1, r3, #31
 800bf0c:	d5d8      	bpl.n	800bec0 <_printf_float+0x250>
 800bf0e:	ee18 3a10 	vmov	r3, s16
 800bf12:	4652      	mov	r2, sl
 800bf14:	4631      	mov	r1, r6
 800bf16:	4628      	mov	r0, r5
 800bf18:	47b8      	blx	r7
 800bf1a:	3001      	adds	r0, #1
 800bf1c:	f43f af09 	beq.w	800bd32 <_printf_float+0xc2>
 800bf20:	f04f 0900 	mov.w	r9, #0
 800bf24:	f104 0a1a 	add.w	sl, r4, #26
 800bf28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf2a:	425b      	negs	r3, r3
 800bf2c:	454b      	cmp	r3, r9
 800bf2e:	dc01      	bgt.n	800bf34 <_printf_float+0x2c4>
 800bf30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf32:	e792      	b.n	800be5a <_printf_float+0x1ea>
 800bf34:	2301      	movs	r3, #1
 800bf36:	4652      	mov	r2, sl
 800bf38:	4631      	mov	r1, r6
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	47b8      	blx	r7
 800bf3e:	3001      	adds	r0, #1
 800bf40:	f43f aef7 	beq.w	800bd32 <_printf_float+0xc2>
 800bf44:	f109 0901 	add.w	r9, r9, #1
 800bf48:	e7ee      	b.n	800bf28 <_printf_float+0x2b8>
 800bf4a:	bf00      	nop
 800bf4c:	7fefffff 	.word	0x7fefffff
 800bf50:	0800f858 	.word	0x0800f858
 800bf54:	0800f85c 	.word	0x0800f85c
 800bf58:	0800f864 	.word	0x0800f864
 800bf5c:	0800f860 	.word	0x0800f860
 800bf60:	0800f868 	.word	0x0800f868
 800bf64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	bfa8      	it	ge
 800bf6c:	461a      	movge	r2, r3
 800bf6e:	2a00      	cmp	r2, #0
 800bf70:	4691      	mov	r9, r2
 800bf72:	dc37      	bgt.n	800bfe4 <_printf_float+0x374>
 800bf74:	f04f 0b00 	mov.w	fp, #0
 800bf78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf7c:	f104 021a 	add.w	r2, r4, #26
 800bf80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf82:	9305      	str	r3, [sp, #20]
 800bf84:	eba3 0309 	sub.w	r3, r3, r9
 800bf88:	455b      	cmp	r3, fp
 800bf8a:	dc33      	bgt.n	800bff4 <_printf_float+0x384>
 800bf8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf90:	429a      	cmp	r2, r3
 800bf92:	db3b      	blt.n	800c00c <_printf_float+0x39c>
 800bf94:	6823      	ldr	r3, [r4, #0]
 800bf96:	07da      	lsls	r2, r3, #31
 800bf98:	d438      	bmi.n	800c00c <_printf_float+0x39c>
 800bf9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf9c:	9a05      	ldr	r2, [sp, #20]
 800bf9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bfa0:	1a9a      	subs	r2, r3, r2
 800bfa2:	eba3 0901 	sub.w	r9, r3, r1
 800bfa6:	4591      	cmp	r9, r2
 800bfa8:	bfa8      	it	ge
 800bfaa:	4691      	movge	r9, r2
 800bfac:	f1b9 0f00 	cmp.w	r9, #0
 800bfb0:	dc35      	bgt.n	800c01e <_printf_float+0x3ae>
 800bfb2:	f04f 0800 	mov.w	r8, #0
 800bfb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bfba:	f104 0a1a 	add.w	sl, r4, #26
 800bfbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfc2:	1a9b      	subs	r3, r3, r2
 800bfc4:	eba3 0309 	sub.w	r3, r3, r9
 800bfc8:	4543      	cmp	r3, r8
 800bfca:	f77f af79 	ble.w	800bec0 <_printf_float+0x250>
 800bfce:	2301      	movs	r3, #1
 800bfd0:	4652      	mov	r2, sl
 800bfd2:	4631      	mov	r1, r6
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	47b8      	blx	r7
 800bfd8:	3001      	adds	r0, #1
 800bfda:	f43f aeaa 	beq.w	800bd32 <_printf_float+0xc2>
 800bfde:	f108 0801 	add.w	r8, r8, #1
 800bfe2:	e7ec      	b.n	800bfbe <_printf_float+0x34e>
 800bfe4:	4613      	mov	r3, r2
 800bfe6:	4631      	mov	r1, r6
 800bfe8:	4642      	mov	r2, r8
 800bfea:	4628      	mov	r0, r5
 800bfec:	47b8      	blx	r7
 800bfee:	3001      	adds	r0, #1
 800bff0:	d1c0      	bne.n	800bf74 <_printf_float+0x304>
 800bff2:	e69e      	b.n	800bd32 <_printf_float+0xc2>
 800bff4:	2301      	movs	r3, #1
 800bff6:	4631      	mov	r1, r6
 800bff8:	4628      	mov	r0, r5
 800bffa:	9205      	str	r2, [sp, #20]
 800bffc:	47b8      	blx	r7
 800bffe:	3001      	adds	r0, #1
 800c000:	f43f ae97 	beq.w	800bd32 <_printf_float+0xc2>
 800c004:	9a05      	ldr	r2, [sp, #20]
 800c006:	f10b 0b01 	add.w	fp, fp, #1
 800c00a:	e7b9      	b.n	800bf80 <_printf_float+0x310>
 800c00c:	ee18 3a10 	vmov	r3, s16
 800c010:	4652      	mov	r2, sl
 800c012:	4631      	mov	r1, r6
 800c014:	4628      	mov	r0, r5
 800c016:	47b8      	blx	r7
 800c018:	3001      	adds	r0, #1
 800c01a:	d1be      	bne.n	800bf9a <_printf_float+0x32a>
 800c01c:	e689      	b.n	800bd32 <_printf_float+0xc2>
 800c01e:	9a05      	ldr	r2, [sp, #20]
 800c020:	464b      	mov	r3, r9
 800c022:	4442      	add	r2, r8
 800c024:	4631      	mov	r1, r6
 800c026:	4628      	mov	r0, r5
 800c028:	47b8      	blx	r7
 800c02a:	3001      	adds	r0, #1
 800c02c:	d1c1      	bne.n	800bfb2 <_printf_float+0x342>
 800c02e:	e680      	b.n	800bd32 <_printf_float+0xc2>
 800c030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c032:	2a01      	cmp	r2, #1
 800c034:	dc01      	bgt.n	800c03a <_printf_float+0x3ca>
 800c036:	07db      	lsls	r3, r3, #31
 800c038:	d538      	bpl.n	800c0ac <_printf_float+0x43c>
 800c03a:	2301      	movs	r3, #1
 800c03c:	4642      	mov	r2, r8
 800c03e:	4631      	mov	r1, r6
 800c040:	4628      	mov	r0, r5
 800c042:	47b8      	blx	r7
 800c044:	3001      	adds	r0, #1
 800c046:	f43f ae74 	beq.w	800bd32 <_printf_float+0xc2>
 800c04a:	ee18 3a10 	vmov	r3, s16
 800c04e:	4652      	mov	r2, sl
 800c050:	4631      	mov	r1, r6
 800c052:	4628      	mov	r0, r5
 800c054:	47b8      	blx	r7
 800c056:	3001      	adds	r0, #1
 800c058:	f43f ae6b 	beq.w	800bd32 <_printf_float+0xc2>
 800c05c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c060:	2200      	movs	r2, #0
 800c062:	2300      	movs	r3, #0
 800c064:	f7f4 fd38 	bl	8000ad8 <__aeabi_dcmpeq>
 800c068:	b9d8      	cbnz	r0, 800c0a2 <_printf_float+0x432>
 800c06a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c06c:	f108 0201 	add.w	r2, r8, #1
 800c070:	3b01      	subs	r3, #1
 800c072:	4631      	mov	r1, r6
 800c074:	4628      	mov	r0, r5
 800c076:	47b8      	blx	r7
 800c078:	3001      	adds	r0, #1
 800c07a:	d10e      	bne.n	800c09a <_printf_float+0x42a>
 800c07c:	e659      	b.n	800bd32 <_printf_float+0xc2>
 800c07e:	2301      	movs	r3, #1
 800c080:	4652      	mov	r2, sl
 800c082:	4631      	mov	r1, r6
 800c084:	4628      	mov	r0, r5
 800c086:	47b8      	blx	r7
 800c088:	3001      	adds	r0, #1
 800c08a:	f43f ae52 	beq.w	800bd32 <_printf_float+0xc2>
 800c08e:	f108 0801 	add.w	r8, r8, #1
 800c092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c094:	3b01      	subs	r3, #1
 800c096:	4543      	cmp	r3, r8
 800c098:	dcf1      	bgt.n	800c07e <_printf_float+0x40e>
 800c09a:	464b      	mov	r3, r9
 800c09c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c0a0:	e6dc      	b.n	800be5c <_printf_float+0x1ec>
 800c0a2:	f04f 0800 	mov.w	r8, #0
 800c0a6:	f104 0a1a 	add.w	sl, r4, #26
 800c0aa:	e7f2      	b.n	800c092 <_printf_float+0x422>
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	4642      	mov	r2, r8
 800c0b0:	e7df      	b.n	800c072 <_printf_float+0x402>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	464a      	mov	r2, r9
 800c0b6:	4631      	mov	r1, r6
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	47b8      	blx	r7
 800c0bc:	3001      	adds	r0, #1
 800c0be:	f43f ae38 	beq.w	800bd32 <_printf_float+0xc2>
 800c0c2:	f108 0801 	add.w	r8, r8, #1
 800c0c6:	68e3      	ldr	r3, [r4, #12]
 800c0c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c0ca:	1a5b      	subs	r3, r3, r1
 800c0cc:	4543      	cmp	r3, r8
 800c0ce:	dcf0      	bgt.n	800c0b2 <_printf_float+0x442>
 800c0d0:	e6fa      	b.n	800bec8 <_printf_float+0x258>
 800c0d2:	f04f 0800 	mov.w	r8, #0
 800c0d6:	f104 0919 	add.w	r9, r4, #25
 800c0da:	e7f4      	b.n	800c0c6 <_printf_float+0x456>

0800c0dc <_printf_common>:
 800c0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0e0:	4616      	mov	r6, r2
 800c0e2:	4699      	mov	r9, r3
 800c0e4:	688a      	ldr	r2, [r1, #8]
 800c0e6:	690b      	ldr	r3, [r1, #16]
 800c0e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	bfb8      	it	lt
 800c0f0:	4613      	movlt	r3, r2
 800c0f2:	6033      	str	r3, [r6, #0]
 800c0f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0f8:	4607      	mov	r7, r0
 800c0fa:	460c      	mov	r4, r1
 800c0fc:	b10a      	cbz	r2, 800c102 <_printf_common+0x26>
 800c0fe:	3301      	adds	r3, #1
 800c100:	6033      	str	r3, [r6, #0]
 800c102:	6823      	ldr	r3, [r4, #0]
 800c104:	0699      	lsls	r1, r3, #26
 800c106:	bf42      	ittt	mi
 800c108:	6833      	ldrmi	r3, [r6, #0]
 800c10a:	3302      	addmi	r3, #2
 800c10c:	6033      	strmi	r3, [r6, #0]
 800c10e:	6825      	ldr	r5, [r4, #0]
 800c110:	f015 0506 	ands.w	r5, r5, #6
 800c114:	d106      	bne.n	800c124 <_printf_common+0x48>
 800c116:	f104 0a19 	add.w	sl, r4, #25
 800c11a:	68e3      	ldr	r3, [r4, #12]
 800c11c:	6832      	ldr	r2, [r6, #0]
 800c11e:	1a9b      	subs	r3, r3, r2
 800c120:	42ab      	cmp	r3, r5
 800c122:	dc26      	bgt.n	800c172 <_printf_common+0x96>
 800c124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c128:	1e13      	subs	r3, r2, #0
 800c12a:	6822      	ldr	r2, [r4, #0]
 800c12c:	bf18      	it	ne
 800c12e:	2301      	movne	r3, #1
 800c130:	0692      	lsls	r2, r2, #26
 800c132:	d42b      	bmi.n	800c18c <_printf_common+0xb0>
 800c134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c138:	4649      	mov	r1, r9
 800c13a:	4638      	mov	r0, r7
 800c13c:	47c0      	blx	r8
 800c13e:	3001      	adds	r0, #1
 800c140:	d01e      	beq.n	800c180 <_printf_common+0xa4>
 800c142:	6823      	ldr	r3, [r4, #0]
 800c144:	68e5      	ldr	r5, [r4, #12]
 800c146:	6832      	ldr	r2, [r6, #0]
 800c148:	f003 0306 	and.w	r3, r3, #6
 800c14c:	2b04      	cmp	r3, #4
 800c14e:	bf08      	it	eq
 800c150:	1aad      	subeq	r5, r5, r2
 800c152:	68a3      	ldr	r3, [r4, #8]
 800c154:	6922      	ldr	r2, [r4, #16]
 800c156:	bf0c      	ite	eq
 800c158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c15c:	2500      	movne	r5, #0
 800c15e:	4293      	cmp	r3, r2
 800c160:	bfc4      	itt	gt
 800c162:	1a9b      	subgt	r3, r3, r2
 800c164:	18ed      	addgt	r5, r5, r3
 800c166:	2600      	movs	r6, #0
 800c168:	341a      	adds	r4, #26
 800c16a:	42b5      	cmp	r5, r6
 800c16c:	d11a      	bne.n	800c1a4 <_printf_common+0xc8>
 800c16e:	2000      	movs	r0, #0
 800c170:	e008      	b.n	800c184 <_printf_common+0xa8>
 800c172:	2301      	movs	r3, #1
 800c174:	4652      	mov	r2, sl
 800c176:	4649      	mov	r1, r9
 800c178:	4638      	mov	r0, r7
 800c17a:	47c0      	blx	r8
 800c17c:	3001      	adds	r0, #1
 800c17e:	d103      	bne.n	800c188 <_printf_common+0xac>
 800c180:	f04f 30ff 	mov.w	r0, #4294967295
 800c184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c188:	3501      	adds	r5, #1
 800c18a:	e7c6      	b.n	800c11a <_printf_common+0x3e>
 800c18c:	18e1      	adds	r1, r4, r3
 800c18e:	1c5a      	adds	r2, r3, #1
 800c190:	2030      	movs	r0, #48	; 0x30
 800c192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c196:	4422      	add	r2, r4
 800c198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c19c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1a0:	3302      	adds	r3, #2
 800c1a2:	e7c7      	b.n	800c134 <_printf_common+0x58>
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	4622      	mov	r2, r4
 800c1a8:	4649      	mov	r1, r9
 800c1aa:	4638      	mov	r0, r7
 800c1ac:	47c0      	blx	r8
 800c1ae:	3001      	adds	r0, #1
 800c1b0:	d0e6      	beq.n	800c180 <_printf_common+0xa4>
 800c1b2:	3601      	adds	r6, #1
 800c1b4:	e7d9      	b.n	800c16a <_printf_common+0x8e>
	...

0800c1b8 <_printf_i>:
 800c1b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1bc:	7e0f      	ldrb	r7, [r1, #24]
 800c1be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c1c0:	2f78      	cmp	r7, #120	; 0x78
 800c1c2:	4691      	mov	r9, r2
 800c1c4:	4680      	mov	r8, r0
 800c1c6:	460c      	mov	r4, r1
 800c1c8:	469a      	mov	sl, r3
 800c1ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c1ce:	d807      	bhi.n	800c1e0 <_printf_i+0x28>
 800c1d0:	2f62      	cmp	r7, #98	; 0x62
 800c1d2:	d80a      	bhi.n	800c1ea <_printf_i+0x32>
 800c1d4:	2f00      	cmp	r7, #0
 800c1d6:	f000 80d8 	beq.w	800c38a <_printf_i+0x1d2>
 800c1da:	2f58      	cmp	r7, #88	; 0x58
 800c1dc:	f000 80a3 	beq.w	800c326 <_printf_i+0x16e>
 800c1e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c1e8:	e03a      	b.n	800c260 <_printf_i+0xa8>
 800c1ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c1ee:	2b15      	cmp	r3, #21
 800c1f0:	d8f6      	bhi.n	800c1e0 <_printf_i+0x28>
 800c1f2:	a101      	add	r1, pc, #4	; (adr r1, 800c1f8 <_printf_i+0x40>)
 800c1f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1f8:	0800c251 	.word	0x0800c251
 800c1fc:	0800c265 	.word	0x0800c265
 800c200:	0800c1e1 	.word	0x0800c1e1
 800c204:	0800c1e1 	.word	0x0800c1e1
 800c208:	0800c1e1 	.word	0x0800c1e1
 800c20c:	0800c1e1 	.word	0x0800c1e1
 800c210:	0800c265 	.word	0x0800c265
 800c214:	0800c1e1 	.word	0x0800c1e1
 800c218:	0800c1e1 	.word	0x0800c1e1
 800c21c:	0800c1e1 	.word	0x0800c1e1
 800c220:	0800c1e1 	.word	0x0800c1e1
 800c224:	0800c371 	.word	0x0800c371
 800c228:	0800c295 	.word	0x0800c295
 800c22c:	0800c353 	.word	0x0800c353
 800c230:	0800c1e1 	.word	0x0800c1e1
 800c234:	0800c1e1 	.word	0x0800c1e1
 800c238:	0800c393 	.word	0x0800c393
 800c23c:	0800c1e1 	.word	0x0800c1e1
 800c240:	0800c295 	.word	0x0800c295
 800c244:	0800c1e1 	.word	0x0800c1e1
 800c248:	0800c1e1 	.word	0x0800c1e1
 800c24c:	0800c35b 	.word	0x0800c35b
 800c250:	682b      	ldr	r3, [r5, #0]
 800c252:	1d1a      	adds	r2, r3, #4
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	602a      	str	r2, [r5, #0]
 800c258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c25c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c260:	2301      	movs	r3, #1
 800c262:	e0a3      	b.n	800c3ac <_printf_i+0x1f4>
 800c264:	6820      	ldr	r0, [r4, #0]
 800c266:	6829      	ldr	r1, [r5, #0]
 800c268:	0606      	lsls	r6, r0, #24
 800c26a:	f101 0304 	add.w	r3, r1, #4
 800c26e:	d50a      	bpl.n	800c286 <_printf_i+0xce>
 800c270:	680e      	ldr	r6, [r1, #0]
 800c272:	602b      	str	r3, [r5, #0]
 800c274:	2e00      	cmp	r6, #0
 800c276:	da03      	bge.n	800c280 <_printf_i+0xc8>
 800c278:	232d      	movs	r3, #45	; 0x2d
 800c27a:	4276      	negs	r6, r6
 800c27c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c280:	485e      	ldr	r0, [pc, #376]	; (800c3fc <_printf_i+0x244>)
 800c282:	230a      	movs	r3, #10
 800c284:	e019      	b.n	800c2ba <_printf_i+0x102>
 800c286:	680e      	ldr	r6, [r1, #0]
 800c288:	602b      	str	r3, [r5, #0]
 800c28a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c28e:	bf18      	it	ne
 800c290:	b236      	sxthne	r6, r6
 800c292:	e7ef      	b.n	800c274 <_printf_i+0xbc>
 800c294:	682b      	ldr	r3, [r5, #0]
 800c296:	6820      	ldr	r0, [r4, #0]
 800c298:	1d19      	adds	r1, r3, #4
 800c29a:	6029      	str	r1, [r5, #0]
 800c29c:	0601      	lsls	r1, r0, #24
 800c29e:	d501      	bpl.n	800c2a4 <_printf_i+0xec>
 800c2a0:	681e      	ldr	r6, [r3, #0]
 800c2a2:	e002      	b.n	800c2aa <_printf_i+0xf2>
 800c2a4:	0646      	lsls	r6, r0, #25
 800c2a6:	d5fb      	bpl.n	800c2a0 <_printf_i+0xe8>
 800c2a8:	881e      	ldrh	r6, [r3, #0]
 800c2aa:	4854      	ldr	r0, [pc, #336]	; (800c3fc <_printf_i+0x244>)
 800c2ac:	2f6f      	cmp	r7, #111	; 0x6f
 800c2ae:	bf0c      	ite	eq
 800c2b0:	2308      	moveq	r3, #8
 800c2b2:	230a      	movne	r3, #10
 800c2b4:	2100      	movs	r1, #0
 800c2b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2ba:	6865      	ldr	r5, [r4, #4]
 800c2bc:	60a5      	str	r5, [r4, #8]
 800c2be:	2d00      	cmp	r5, #0
 800c2c0:	bfa2      	ittt	ge
 800c2c2:	6821      	ldrge	r1, [r4, #0]
 800c2c4:	f021 0104 	bicge.w	r1, r1, #4
 800c2c8:	6021      	strge	r1, [r4, #0]
 800c2ca:	b90e      	cbnz	r6, 800c2d0 <_printf_i+0x118>
 800c2cc:	2d00      	cmp	r5, #0
 800c2ce:	d04d      	beq.n	800c36c <_printf_i+0x1b4>
 800c2d0:	4615      	mov	r5, r2
 800c2d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800c2d6:	fb03 6711 	mls	r7, r3, r1, r6
 800c2da:	5dc7      	ldrb	r7, [r0, r7]
 800c2dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c2e0:	4637      	mov	r7, r6
 800c2e2:	42bb      	cmp	r3, r7
 800c2e4:	460e      	mov	r6, r1
 800c2e6:	d9f4      	bls.n	800c2d2 <_printf_i+0x11a>
 800c2e8:	2b08      	cmp	r3, #8
 800c2ea:	d10b      	bne.n	800c304 <_printf_i+0x14c>
 800c2ec:	6823      	ldr	r3, [r4, #0]
 800c2ee:	07de      	lsls	r6, r3, #31
 800c2f0:	d508      	bpl.n	800c304 <_printf_i+0x14c>
 800c2f2:	6923      	ldr	r3, [r4, #16]
 800c2f4:	6861      	ldr	r1, [r4, #4]
 800c2f6:	4299      	cmp	r1, r3
 800c2f8:	bfde      	ittt	le
 800c2fa:	2330      	movle	r3, #48	; 0x30
 800c2fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c300:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c304:	1b52      	subs	r2, r2, r5
 800c306:	6122      	str	r2, [r4, #16]
 800c308:	f8cd a000 	str.w	sl, [sp]
 800c30c:	464b      	mov	r3, r9
 800c30e:	aa03      	add	r2, sp, #12
 800c310:	4621      	mov	r1, r4
 800c312:	4640      	mov	r0, r8
 800c314:	f7ff fee2 	bl	800c0dc <_printf_common>
 800c318:	3001      	adds	r0, #1
 800c31a:	d14c      	bne.n	800c3b6 <_printf_i+0x1fe>
 800c31c:	f04f 30ff 	mov.w	r0, #4294967295
 800c320:	b004      	add	sp, #16
 800c322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c326:	4835      	ldr	r0, [pc, #212]	; (800c3fc <_printf_i+0x244>)
 800c328:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c32c:	6829      	ldr	r1, [r5, #0]
 800c32e:	6823      	ldr	r3, [r4, #0]
 800c330:	f851 6b04 	ldr.w	r6, [r1], #4
 800c334:	6029      	str	r1, [r5, #0]
 800c336:	061d      	lsls	r5, r3, #24
 800c338:	d514      	bpl.n	800c364 <_printf_i+0x1ac>
 800c33a:	07df      	lsls	r7, r3, #31
 800c33c:	bf44      	itt	mi
 800c33e:	f043 0320 	orrmi.w	r3, r3, #32
 800c342:	6023      	strmi	r3, [r4, #0]
 800c344:	b91e      	cbnz	r6, 800c34e <_printf_i+0x196>
 800c346:	6823      	ldr	r3, [r4, #0]
 800c348:	f023 0320 	bic.w	r3, r3, #32
 800c34c:	6023      	str	r3, [r4, #0]
 800c34e:	2310      	movs	r3, #16
 800c350:	e7b0      	b.n	800c2b4 <_printf_i+0xfc>
 800c352:	6823      	ldr	r3, [r4, #0]
 800c354:	f043 0320 	orr.w	r3, r3, #32
 800c358:	6023      	str	r3, [r4, #0]
 800c35a:	2378      	movs	r3, #120	; 0x78
 800c35c:	4828      	ldr	r0, [pc, #160]	; (800c400 <_printf_i+0x248>)
 800c35e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c362:	e7e3      	b.n	800c32c <_printf_i+0x174>
 800c364:	0659      	lsls	r1, r3, #25
 800c366:	bf48      	it	mi
 800c368:	b2b6      	uxthmi	r6, r6
 800c36a:	e7e6      	b.n	800c33a <_printf_i+0x182>
 800c36c:	4615      	mov	r5, r2
 800c36e:	e7bb      	b.n	800c2e8 <_printf_i+0x130>
 800c370:	682b      	ldr	r3, [r5, #0]
 800c372:	6826      	ldr	r6, [r4, #0]
 800c374:	6961      	ldr	r1, [r4, #20]
 800c376:	1d18      	adds	r0, r3, #4
 800c378:	6028      	str	r0, [r5, #0]
 800c37a:	0635      	lsls	r5, r6, #24
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	d501      	bpl.n	800c384 <_printf_i+0x1cc>
 800c380:	6019      	str	r1, [r3, #0]
 800c382:	e002      	b.n	800c38a <_printf_i+0x1d2>
 800c384:	0670      	lsls	r0, r6, #25
 800c386:	d5fb      	bpl.n	800c380 <_printf_i+0x1c8>
 800c388:	8019      	strh	r1, [r3, #0]
 800c38a:	2300      	movs	r3, #0
 800c38c:	6123      	str	r3, [r4, #16]
 800c38e:	4615      	mov	r5, r2
 800c390:	e7ba      	b.n	800c308 <_printf_i+0x150>
 800c392:	682b      	ldr	r3, [r5, #0]
 800c394:	1d1a      	adds	r2, r3, #4
 800c396:	602a      	str	r2, [r5, #0]
 800c398:	681d      	ldr	r5, [r3, #0]
 800c39a:	6862      	ldr	r2, [r4, #4]
 800c39c:	2100      	movs	r1, #0
 800c39e:	4628      	mov	r0, r5
 800c3a0:	f7f3 ff26 	bl	80001f0 <memchr>
 800c3a4:	b108      	cbz	r0, 800c3aa <_printf_i+0x1f2>
 800c3a6:	1b40      	subs	r0, r0, r5
 800c3a8:	6060      	str	r0, [r4, #4]
 800c3aa:	6863      	ldr	r3, [r4, #4]
 800c3ac:	6123      	str	r3, [r4, #16]
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3b4:	e7a8      	b.n	800c308 <_printf_i+0x150>
 800c3b6:	6923      	ldr	r3, [r4, #16]
 800c3b8:	462a      	mov	r2, r5
 800c3ba:	4649      	mov	r1, r9
 800c3bc:	4640      	mov	r0, r8
 800c3be:	47d0      	blx	sl
 800c3c0:	3001      	adds	r0, #1
 800c3c2:	d0ab      	beq.n	800c31c <_printf_i+0x164>
 800c3c4:	6823      	ldr	r3, [r4, #0]
 800c3c6:	079b      	lsls	r3, r3, #30
 800c3c8:	d413      	bmi.n	800c3f2 <_printf_i+0x23a>
 800c3ca:	68e0      	ldr	r0, [r4, #12]
 800c3cc:	9b03      	ldr	r3, [sp, #12]
 800c3ce:	4298      	cmp	r0, r3
 800c3d0:	bfb8      	it	lt
 800c3d2:	4618      	movlt	r0, r3
 800c3d4:	e7a4      	b.n	800c320 <_printf_i+0x168>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	4632      	mov	r2, r6
 800c3da:	4649      	mov	r1, r9
 800c3dc:	4640      	mov	r0, r8
 800c3de:	47d0      	blx	sl
 800c3e0:	3001      	adds	r0, #1
 800c3e2:	d09b      	beq.n	800c31c <_printf_i+0x164>
 800c3e4:	3501      	adds	r5, #1
 800c3e6:	68e3      	ldr	r3, [r4, #12]
 800c3e8:	9903      	ldr	r1, [sp, #12]
 800c3ea:	1a5b      	subs	r3, r3, r1
 800c3ec:	42ab      	cmp	r3, r5
 800c3ee:	dcf2      	bgt.n	800c3d6 <_printf_i+0x21e>
 800c3f0:	e7eb      	b.n	800c3ca <_printf_i+0x212>
 800c3f2:	2500      	movs	r5, #0
 800c3f4:	f104 0619 	add.w	r6, r4, #25
 800c3f8:	e7f5      	b.n	800c3e6 <_printf_i+0x22e>
 800c3fa:	bf00      	nop
 800c3fc:	0800f86a 	.word	0x0800f86a
 800c400:	0800f87b 	.word	0x0800f87b

0800c404 <_sbrk_r>:
 800c404:	b538      	push	{r3, r4, r5, lr}
 800c406:	4d06      	ldr	r5, [pc, #24]	; (800c420 <_sbrk_r+0x1c>)
 800c408:	2300      	movs	r3, #0
 800c40a:	4604      	mov	r4, r0
 800c40c:	4608      	mov	r0, r1
 800c40e:	602b      	str	r3, [r5, #0]
 800c410:	f7f7 fefe 	bl	8004210 <_sbrk>
 800c414:	1c43      	adds	r3, r0, #1
 800c416:	d102      	bne.n	800c41e <_sbrk_r+0x1a>
 800c418:	682b      	ldr	r3, [r5, #0]
 800c41a:	b103      	cbz	r3, 800c41e <_sbrk_r+0x1a>
 800c41c:	6023      	str	r3, [r4, #0]
 800c41e:	bd38      	pop	{r3, r4, r5, pc}
 800c420:	20000748 	.word	0x20000748

0800c424 <siprintf>:
 800c424:	b40e      	push	{r1, r2, r3}
 800c426:	b500      	push	{lr}
 800c428:	b09c      	sub	sp, #112	; 0x70
 800c42a:	ab1d      	add	r3, sp, #116	; 0x74
 800c42c:	9002      	str	r0, [sp, #8]
 800c42e:	9006      	str	r0, [sp, #24]
 800c430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c434:	4809      	ldr	r0, [pc, #36]	; (800c45c <siprintf+0x38>)
 800c436:	9107      	str	r1, [sp, #28]
 800c438:	9104      	str	r1, [sp, #16]
 800c43a:	4909      	ldr	r1, [pc, #36]	; (800c460 <siprintf+0x3c>)
 800c43c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c440:	9105      	str	r1, [sp, #20]
 800c442:	6800      	ldr	r0, [r0, #0]
 800c444:	9301      	str	r3, [sp, #4]
 800c446:	a902      	add	r1, sp, #8
 800c448:	f001 fb22 	bl	800da90 <_svfiprintf_r>
 800c44c:	9b02      	ldr	r3, [sp, #8]
 800c44e:	2200      	movs	r2, #0
 800c450:	701a      	strb	r2, [r3, #0]
 800c452:	b01c      	add	sp, #112	; 0x70
 800c454:	f85d eb04 	ldr.w	lr, [sp], #4
 800c458:	b003      	add	sp, #12
 800c45a:	4770      	bx	lr
 800c45c:	200000c0 	.word	0x200000c0
 800c460:	ffff0208 	.word	0xffff0208

0800c464 <strcpy>:
 800c464:	4603      	mov	r3, r0
 800c466:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c46a:	f803 2b01 	strb.w	r2, [r3], #1
 800c46e:	2a00      	cmp	r2, #0
 800c470:	d1f9      	bne.n	800c466 <strcpy+0x2>
 800c472:	4770      	bx	lr

0800c474 <_strtol_l.constprop.0>:
 800c474:	2b01      	cmp	r3, #1
 800c476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c47a:	d001      	beq.n	800c480 <_strtol_l.constprop.0+0xc>
 800c47c:	2b24      	cmp	r3, #36	; 0x24
 800c47e:	d906      	bls.n	800c48e <_strtol_l.constprop.0+0x1a>
 800c480:	f7ff fa26 	bl	800b8d0 <__errno>
 800c484:	2316      	movs	r3, #22
 800c486:	6003      	str	r3, [r0, #0]
 800c488:	2000      	movs	r0, #0
 800c48a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c48e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c574 <_strtol_l.constprop.0+0x100>
 800c492:	460d      	mov	r5, r1
 800c494:	462e      	mov	r6, r5
 800c496:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c49a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c49e:	f017 0708 	ands.w	r7, r7, #8
 800c4a2:	d1f7      	bne.n	800c494 <_strtol_l.constprop.0+0x20>
 800c4a4:	2c2d      	cmp	r4, #45	; 0x2d
 800c4a6:	d132      	bne.n	800c50e <_strtol_l.constprop.0+0x9a>
 800c4a8:	782c      	ldrb	r4, [r5, #0]
 800c4aa:	2701      	movs	r7, #1
 800c4ac:	1cb5      	adds	r5, r6, #2
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d05b      	beq.n	800c56a <_strtol_l.constprop.0+0xf6>
 800c4b2:	2b10      	cmp	r3, #16
 800c4b4:	d109      	bne.n	800c4ca <_strtol_l.constprop.0+0x56>
 800c4b6:	2c30      	cmp	r4, #48	; 0x30
 800c4b8:	d107      	bne.n	800c4ca <_strtol_l.constprop.0+0x56>
 800c4ba:	782c      	ldrb	r4, [r5, #0]
 800c4bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c4c0:	2c58      	cmp	r4, #88	; 0x58
 800c4c2:	d14d      	bne.n	800c560 <_strtol_l.constprop.0+0xec>
 800c4c4:	786c      	ldrb	r4, [r5, #1]
 800c4c6:	2310      	movs	r3, #16
 800c4c8:	3502      	adds	r5, #2
 800c4ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c4ce:	f108 38ff 	add.w	r8, r8, #4294967295
 800c4d2:	f04f 0c00 	mov.w	ip, #0
 800c4d6:	fbb8 f9f3 	udiv	r9, r8, r3
 800c4da:	4666      	mov	r6, ip
 800c4dc:	fb03 8a19 	mls	sl, r3, r9, r8
 800c4e0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c4e4:	f1be 0f09 	cmp.w	lr, #9
 800c4e8:	d816      	bhi.n	800c518 <_strtol_l.constprop.0+0xa4>
 800c4ea:	4674      	mov	r4, lr
 800c4ec:	42a3      	cmp	r3, r4
 800c4ee:	dd24      	ble.n	800c53a <_strtol_l.constprop.0+0xc6>
 800c4f0:	f1bc 0f00 	cmp.w	ip, #0
 800c4f4:	db1e      	blt.n	800c534 <_strtol_l.constprop.0+0xc0>
 800c4f6:	45b1      	cmp	r9, r6
 800c4f8:	d31c      	bcc.n	800c534 <_strtol_l.constprop.0+0xc0>
 800c4fa:	d101      	bne.n	800c500 <_strtol_l.constprop.0+0x8c>
 800c4fc:	45a2      	cmp	sl, r4
 800c4fe:	db19      	blt.n	800c534 <_strtol_l.constprop.0+0xc0>
 800c500:	fb06 4603 	mla	r6, r6, r3, r4
 800c504:	f04f 0c01 	mov.w	ip, #1
 800c508:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c50c:	e7e8      	b.n	800c4e0 <_strtol_l.constprop.0+0x6c>
 800c50e:	2c2b      	cmp	r4, #43	; 0x2b
 800c510:	bf04      	itt	eq
 800c512:	782c      	ldrbeq	r4, [r5, #0]
 800c514:	1cb5      	addeq	r5, r6, #2
 800c516:	e7ca      	b.n	800c4ae <_strtol_l.constprop.0+0x3a>
 800c518:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c51c:	f1be 0f19 	cmp.w	lr, #25
 800c520:	d801      	bhi.n	800c526 <_strtol_l.constprop.0+0xb2>
 800c522:	3c37      	subs	r4, #55	; 0x37
 800c524:	e7e2      	b.n	800c4ec <_strtol_l.constprop.0+0x78>
 800c526:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c52a:	f1be 0f19 	cmp.w	lr, #25
 800c52e:	d804      	bhi.n	800c53a <_strtol_l.constprop.0+0xc6>
 800c530:	3c57      	subs	r4, #87	; 0x57
 800c532:	e7db      	b.n	800c4ec <_strtol_l.constprop.0+0x78>
 800c534:	f04f 3cff 	mov.w	ip, #4294967295
 800c538:	e7e6      	b.n	800c508 <_strtol_l.constprop.0+0x94>
 800c53a:	f1bc 0f00 	cmp.w	ip, #0
 800c53e:	da05      	bge.n	800c54c <_strtol_l.constprop.0+0xd8>
 800c540:	2322      	movs	r3, #34	; 0x22
 800c542:	6003      	str	r3, [r0, #0]
 800c544:	4646      	mov	r6, r8
 800c546:	b942      	cbnz	r2, 800c55a <_strtol_l.constprop.0+0xe6>
 800c548:	4630      	mov	r0, r6
 800c54a:	e79e      	b.n	800c48a <_strtol_l.constprop.0+0x16>
 800c54c:	b107      	cbz	r7, 800c550 <_strtol_l.constprop.0+0xdc>
 800c54e:	4276      	negs	r6, r6
 800c550:	2a00      	cmp	r2, #0
 800c552:	d0f9      	beq.n	800c548 <_strtol_l.constprop.0+0xd4>
 800c554:	f1bc 0f00 	cmp.w	ip, #0
 800c558:	d000      	beq.n	800c55c <_strtol_l.constprop.0+0xe8>
 800c55a:	1e69      	subs	r1, r5, #1
 800c55c:	6011      	str	r1, [r2, #0]
 800c55e:	e7f3      	b.n	800c548 <_strtol_l.constprop.0+0xd4>
 800c560:	2430      	movs	r4, #48	; 0x30
 800c562:	2b00      	cmp	r3, #0
 800c564:	d1b1      	bne.n	800c4ca <_strtol_l.constprop.0+0x56>
 800c566:	2308      	movs	r3, #8
 800c568:	e7af      	b.n	800c4ca <_strtol_l.constprop.0+0x56>
 800c56a:	2c30      	cmp	r4, #48	; 0x30
 800c56c:	d0a5      	beq.n	800c4ba <_strtol_l.constprop.0+0x46>
 800c56e:	230a      	movs	r3, #10
 800c570:	e7ab      	b.n	800c4ca <_strtol_l.constprop.0+0x56>
 800c572:	bf00      	nop
 800c574:	0800f88d 	.word	0x0800f88d

0800c578 <strtol>:
 800c578:	4613      	mov	r3, r2
 800c57a:	460a      	mov	r2, r1
 800c57c:	4601      	mov	r1, r0
 800c57e:	4802      	ldr	r0, [pc, #8]	; (800c588 <strtol+0x10>)
 800c580:	6800      	ldr	r0, [r0, #0]
 800c582:	f7ff bf77 	b.w	800c474 <_strtol_l.constprop.0>
 800c586:	bf00      	nop
 800c588:	200000c0 	.word	0x200000c0

0800c58c <quorem>:
 800c58c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c590:	6903      	ldr	r3, [r0, #16]
 800c592:	690c      	ldr	r4, [r1, #16]
 800c594:	42a3      	cmp	r3, r4
 800c596:	4607      	mov	r7, r0
 800c598:	f2c0 8081 	blt.w	800c69e <quorem+0x112>
 800c59c:	3c01      	subs	r4, #1
 800c59e:	f101 0814 	add.w	r8, r1, #20
 800c5a2:	f100 0514 	add.w	r5, r0, #20
 800c5a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5aa:	9301      	str	r3, [sp, #4]
 800c5ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c5bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5c4:	d331      	bcc.n	800c62a <quorem+0x9e>
 800c5c6:	f04f 0e00 	mov.w	lr, #0
 800c5ca:	4640      	mov	r0, r8
 800c5cc:	46ac      	mov	ip, r5
 800c5ce:	46f2      	mov	sl, lr
 800c5d0:	f850 2b04 	ldr.w	r2, [r0], #4
 800c5d4:	b293      	uxth	r3, r2
 800c5d6:	fb06 e303 	mla	r3, r6, r3, lr
 800c5da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	ebaa 0303 	sub.w	r3, sl, r3
 800c5e4:	f8dc a000 	ldr.w	sl, [ip]
 800c5e8:	0c12      	lsrs	r2, r2, #16
 800c5ea:	fa13 f38a 	uxtah	r3, r3, sl
 800c5ee:	fb06 e202 	mla	r2, r6, r2, lr
 800c5f2:	9300      	str	r3, [sp, #0]
 800c5f4:	9b00      	ldr	r3, [sp, #0]
 800c5f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c5fa:	b292      	uxth	r2, r2
 800c5fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c600:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c604:	f8bd 3000 	ldrh.w	r3, [sp]
 800c608:	4581      	cmp	r9, r0
 800c60a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c60e:	f84c 3b04 	str.w	r3, [ip], #4
 800c612:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c616:	d2db      	bcs.n	800c5d0 <quorem+0x44>
 800c618:	f855 300b 	ldr.w	r3, [r5, fp]
 800c61c:	b92b      	cbnz	r3, 800c62a <quorem+0x9e>
 800c61e:	9b01      	ldr	r3, [sp, #4]
 800c620:	3b04      	subs	r3, #4
 800c622:	429d      	cmp	r5, r3
 800c624:	461a      	mov	r2, r3
 800c626:	d32e      	bcc.n	800c686 <quorem+0xfa>
 800c628:	613c      	str	r4, [r7, #16]
 800c62a:	4638      	mov	r0, r7
 800c62c:	f001 f8bc 	bl	800d7a8 <__mcmp>
 800c630:	2800      	cmp	r0, #0
 800c632:	db24      	blt.n	800c67e <quorem+0xf2>
 800c634:	3601      	adds	r6, #1
 800c636:	4628      	mov	r0, r5
 800c638:	f04f 0c00 	mov.w	ip, #0
 800c63c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c640:	f8d0 e000 	ldr.w	lr, [r0]
 800c644:	b293      	uxth	r3, r2
 800c646:	ebac 0303 	sub.w	r3, ip, r3
 800c64a:	0c12      	lsrs	r2, r2, #16
 800c64c:	fa13 f38e 	uxtah	r3, r3, lr
 800c650:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c654:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c658:	b29b      	uxth	r3, r3
 800c65a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c65e:	45c1      	cmp	r9, r8
 800c660:	f840 3b04 	str.w	r3, [r0], #4
 800c664:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c668:	d2e8      	bcs.n	800c63c <quorem+0xb0>
 800c66a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c66e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c672:	b922      	cbnz	r2, 800c67e <quorem+0xf2>
 800c674:	3b04      	subs	r3, #4
 800c676:	429d      	cmp	r5, r3
 800c678:	461a      	mov	r2, r3
 800c67a:	d30a      	bcc.n	800c692 <quorem+0x106>
 800c67c:	613c      	str	r4, [r7, #16]
 800c67e:	4630      	mov	r0, r6
 800c680:	b003      	add	sp, #12
 800c682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c686:	6812      	ldr	r2, [r2, #0]
 800c688:	3b04      	subs	r3, #4
 800c68a:	2a00      	cmp	r2, #0
 800c68c:	d1cc      	bne.n	800c628 <quorem+0x9c>
 800c68e:	3c01      	subs	r4, #1
 800c690:	e7c7      	b.n	800c622 <quorem+0x96>
 800c692:	6812      	ldr	r2, [r2, #0]
 800c694:	3b04      	subs	r3, #4
 800c696:	2a00      	cmp	r2, #0
 800c698:	d1f0      	bne.n	800c67c <quorem+0xf0>
 800c69a:	3c01      	subs	r4, #1
 800c69c:	e7eb      	b.n	800c676 <quorem+0xea>
 800c69e:	2000      	movs	r0, #0
 800c6a0:	e7ee      	b.n	800c680 <quorem+0xf4>
 800c6a2:	0000      	movs	r0, r0
 800c6a4:	0000      	movs	r0, r0
	...

0800c6a8 <_dtoa_r>:
 800c6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ac:	ed2d 8b04 	vpush	{d8-d9}
 800c6b0:	ec57 6b10 	vmov	r6, r7, d0
 800c6b4:	b093      	sub	sp, #76	; 0x4c
 800c6b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c6b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c6bc:	9106      	str	r1, [sp, #24]
 800c6be:	ee10 aa10 	vmov	sl, s0
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	9209      	str	r2, [sp, #36]	; 0x24
 800c6c6:	930c      	str	r3, [sp, #48]	; 0x30
 800c6c8:	46bb      	mov	fp, r7
 800c6ca:	b975      	cbnz	r5, 800c6ea <_dtoa_r+0x42>
 800c6cc:	2010      	movs	r0, #16
 800c6ce:	f7ff f929 	bl	800b924 <malloc>
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	6260      	str	r0, [r4, #36]	; 0x24
 800c6d6:	b920      	cbnz	r0, 800c6e2 <_dtoa_r+0x3a>
 800c6d8:	4ba7      	ldr	r3, [pc, #668]	; (800c978 <_dtoa_r+0x2d0>)
 800c6da:	21ea      	movs	r1, #234	; 0xea
 800c6dc:	48a7      	ldr	r0, [pc, #668]	; (800c97c <_dtoa_r+0x2d4>)
 800c6de:	f001 fad7 	bl	800dc90 <__assert_func>
 800c6e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c6e6:	6005      	str	r5, [r0, #0]
 800c6e8:	60c5      	str	r5, [r0, #12]
 800c6ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6ec:	6819      	ldr	r1, [r3, #0]
 800c6ee:	b151      	cbz	r1, 800c706 <_dtoa_r+0x5e>
 800c6f0:	685a      	ldr	r2, [r3, #4]
 800c6f2:	604a      	str	r2, [r1, #4]
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	4093      	lsls	r3, r2
 800c6f8:	608b      	str	r3, [r1, #8]
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	f000 fe12 	bl	800d324 <_Bfree>
 800c700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c702:	2200      	movs	r2, #0
 800c704:	601a      	str	r2, [r3, #0]
 800c706:	1e3b      	subs	r3, r7, #0
 800c708:	bfaa      	itet	ge
 800c70a:	2300      	movge	r3, #0
 800c70c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c710:	f8c8 3000 	strge.w	r3, [r8]
 800c714:	4b9a      	ldr	r3, [pc, #616]	; (800c980 <_dtoa_r+0x2d8>)
 800c716:	bfbc      	itt	lt
 800c718:	2201      	movlt	r2, #1
 800c71a:	f8c8 2000 	strlt.w	r2, [r8]
 800c71e:	ea33 030b 	bics.w	r3, r3, fp
 800c722:	d11b      	bne.n	800c75c <_dtoa_r+0xb4>
 800c724:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c726:	f242 730f 	movw	r3, #9999	; 0x270f
 800c72a:	6013      	str	r3, [r2, #0]
 800c72c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c730:	4333      	orrs	r3, r6
 800c732:	f000 8592 	beq.w	800d25a <_dtoa_r+0xbb2>
 800c736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c738:	b963      	cbnz	r3, 800c754 <_dtoa_r+0xac>
 800c73a:	4b92      	ldr	r3, [pc, #584]	; (800c984 <_dtoa_r+0x2dc>)
 800c73c:	e022      	b.n	800c784 <_dtoa_r+0xdc>
 800c73e:	4b92      	ldr	r3, [pc, #584]	; (800c988 <_dtoa_r+0x2e0>)
 800c740:	9301      	str	r3, [sp, #4]
 800c742:	3308      	adds	r3, #8
 800c744:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c746:	6013      	str	r3, [r2, #0]
 800c748:	9801      	ldr	r0, [sp, #4]
 800c74a:	b013      	add	sp, #76	; 0x4c
 800c74c:	ecbd 8b04 	vpop	{d8-d9}
 800c750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c754:	4b8b      	ldr	r3, [pc, #556]	; (800c984 <_dtoa_r+0x2dc>)
 800c756:	9301      	str	r3, [sp, #4]
 800c758:	3303      	adds	r3, #3
 800c75a:	e7f3      	b.n	800c744 <_dtoa_r+0x9c>
 800c75c:	2200      	movs	r2, #0
 800c75e:	2300      	movs	r3, #0
 800c760:	4650      	mov	r0, sl
 800c762:	4659      	mov	r1, fp
 800c764:	f7f4 f9b8 	bl	8000ad8 <__aeabi_dcmpeq>
 800c768:	ec4b ab19 	vmov	d9, sl, fp
 800c76c:	4680      	mov	r8, r0
 800c76e:	b158      	cbz	r0, 800c788 <_dtoa_r+0xe0>
 800c770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c772:	2301      	movs	r3, #1
 800c774:	6013      	str	r3, [r2, #0]
 800c776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f000 856b 	beq.w	800d254 <_dtoa_r+0xbac>
 800c77e:	4883      	ldr	r0, [pc, #524]	; (800c98c <_dtoa_r+0x2e4>)
 800c780:	6018      	str	r0, [r3, #0]
 800c782:	1e43      	subs	r3, r0, #1
 800c784:	9301      	str	r3, [sp, #4]
 800c786:	e7df      	b.n	800c748 <_dtoa_r+0xa0>
 800c788:	ec4b ab10 	vmov	d0, sl, fp
 800c78c:	aa10      	add	r2, sp, #64	; 0x40
 800c78e:	a911      	add	r1, sp, #68	; 0x44
 800c790:	4620      	mov	r0, r4
 800c792:	f001 f8af 	bl	800d8f4 <__d2b>
 800c796:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c79a:	ee08 0a10 	vmov	s16, r0
 800c79e:	2d00      	cmp	r5, #0
 800c7a0:	f000 8084 	beq.w	800c8ac <_dtoa_r+0x204>
 800c7a4:	ee19 3a90 	vmov	r3, s19
 800c7a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c7b0:	4656      	mov	r6, sl
 800c7b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c7b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c7ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c7be:	4b74      	ldr	r3, [pc, #464]	; (800c990 <_dtoa_r+0x2e8>)
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	4639      	mov	r1, r7
 800c7c6:	f7f3 fd67 	bl	8000298 <__aeabi_dsub>
 800c7ca:	a365      	add	r3, pc, #404	; (adr r3, 800c960 <_dtoa_r+0x2b8>)
 800c7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d0:	f7f3 ff1a 	bl	8000608 <__aeabi_dmul>
 800c7d4:	a364      	add	r3, pc, #400	; (adr r3, 800c968 <_dtoa_r+0x2c0>)
 800c7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7da:	f7f3 fd5f 	bl	800029c <__adddf3>
 800c7de:	4606      	mov	r6, r0
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	460f      	mov	r7, r1
 800c7e4:	f7f3 fea6 	bl	8000534 <__aeabi_i2d>
 800c7e8:	a361      	add	r3, pc, #388	; (adr r3, 800c970 <_dtoa_r+0x2c8>)
 800c7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ee:	f7f3 ff0b 	bl	8000608 <__aeabi_dmul>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	4639      	mov	r1, r7
 800c7fa:	f7f3 fd4f 	bl	800029c <__adddf3>
 800c7fe:	4606      	mov	r6, r0
 800c800:	460f      	mov	r7, r1
 800c802:	f7f4 f9b1 	bl	8000b68 <__aeabi_d2iz>
 800c806:	2200      	movs	r2, #0
 800c808:	9000      	str	r0, [sp, #0]
 800c80a:	2300      	movs	r3, #0
 800c80c:	4630      	mov	r0, r6
 800c80e:	4639      	mov	r1, r7
 800c810:	f7f4 f96c 	bl	8000aec <__aeabi_dcmplt>
 800c814:	b150      	cbz	r0, 800c82c <_dtoa_r+0x184>
 800c816:	9800      	ldr	r0, [sp, #0]
 800c818:	f7f3 fe8c 	bl	8000534 <__aeabi_i2d>
 800c81c:	4632      	mov	r2, r6
 800c81e:	463b      	mov	r3, r7
 800c820:	f7f4 f95a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c824:	b910      	cbnz	r0, 800c82c <_dtoa_r+0x184>
 800c826:	9b00      	ldr	r3, [sp, #0]
 800c828:	3b01      	subs	r3, #1
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	9b00      	ldr	r3, [sp, #0]
 800c82e:	2b16      	cmp	r3, #22
 800c830:	d85a      	bhi.n	800c8e8 <_dtoa_r+0x240>
 800c832:	9a00      	ldr	r2, [sp, #0]
 800c834:	4b57      	ldr	r3, [pc, #348]	; (800c994 <_dtoa_r+0x2ec>)
 800c836:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83e:	ec51 0b19 	vmov	r0, r1, d9
 800c842:	f7f4 f953 	bl	8000aec <__aeabi_dcmplt>
 800c846:	2800      	cmp	r0, #0
 800c848:	d050      	beq.n	800c8ec <_dtoa_r+0x244>
 800c84a:	9b00      	ldr	r3, [sp, #0]
 800c84c:	3b01      	subs	r3, #1
 800c84e:	9300      	str	r3, [sp, #0]
 800c850:	2300      	movs	r3, #0
 800c852:	930b      	str	r3, [sp, #44]	; 0x2c
 800c854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c856:	1b5d      	subs	r5, r3, r5
 800c858:	1e6b      	subs	r3, r5, #1
 800c85a:	9305      	str	r3, [sp, #20]
 800c85c:	bf45      	ittet	mi
 800c85e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c862:	9304      	strmi	r3, [sp, #16]
 800c864:	2300      	movpl	r3, #0
 800c866:	2300      	movmi	r3, #0
 800c868:	bf4c      	ite	mi
 800c86a:	9305      	strmi	r3, [sp, #20]
 800c86c:	9304      	strpl	r3, [sp, #16]
 800c86e:	9b00      	ldr	r3, [sp, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	db3d      	blt.n	800c8f0 <_dtoa_r+0x248>
 800c874:	9b05      	ldr	r3, [sp, #20]
 800c876:	9a00      	ldr	r2, [sp, #0]
 800c878:	920a      	str	r2, [sp, #40]	; 0x28
 800c87a:	4413      	add	r3, r2
 800c87c:	9305      	str	r3, [sp, #20]
 800c87e:	2300      	movs	r3, #0
 800c880:	9307      	str	r3, [sp, #28]
 800c882:	9b06      	ldr	r3, [sp, #24]
 800c884:	2b09      	cmp	r3, #9
 800c886:	f200 8089 	bhi.w	800c99c <_dtoa_r+0x2f4>
 800c88a:	2b05      	cmp	r3, #5
 800c88c:	bfc4      	itt	gt
 800c88e:	3b04      	subgt	r3, #4
 800c890:	9306      	strgt	r3, [sp, #24]
 800c892:	9b06      	ldr	r3, [sp, #24]
 800c894:	f1a3 0302 	sub.w	r3, r3, #2
 800c898:	bfcc      	ite	gt
 800c89a:	2500      	movgt	r5, #0
 800c89c:	2501      	movle	r5, #1
 800c89e:	2b03      	cmp	r3, #3
 800c8a0:	f200 8087 	bhi.w	800c9b2 <_dtoa_r+0x30a>
 800c8a4:	e8df f003 	tbb	[pc, r3]
 800c8a8:	59383a2d 	.word	0x59383a2d
 800c8ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c8b0:	441d      	add	r5, r3
 800c8b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c8b6:	2b20      	cmp	r3, #32
 800c8b8:	bfc1      	itttt	gt
 800c8ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c8be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c8c2:	fa0b f303 	lslgt.w	r3, fp, r3
 800c8c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c8ca:	bfda      	itte	le
 800c8cc:	f1c3 0320 	rsble	r3, r3, #32
 800c8d0:	fa06 f003 	lslle.w	r0, r6, r3
 800c8d4:	4318      	orrgt	r0, r3
 800c8d6:	f7f3 fe1d 	bl	8000514 <__aeabi_ui2d>
 800c8da:	2301      	movs	r3, #1
 800c8dc:	4606      	mov	r6, r0
 800c8de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c8e2:	3d01      	subs	r5, #1
 800c8e4:	930e      	str	r3, [sp, #56]	; 0x38
 800c8e6:	e76a      	b.n	800c7be <_dtoa_r+0x116>
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	e7b2      	b.n	800c852 <_dtoa_r+0x1aa>
 800c8ec:	900b      	str	r0, [sp, #44]	; 0x2c
 800c8ee:	e7b1      	b.n	800c854 <_dtoa_r+0x1ac>
 800c8f0:	9b04      	ldr	r3, [sp, #16]
 800c8f2:	9a00      	ldr	r2, [sp, #0]
 800c8f4:	1a9b      	subs	r3, r3, r2
 800c8f6:	9304      	str	r3, [sp, #16]
 800c8f8:	4253      	negs	r3, r2
 800c8fa:	9307      	str	r3, [sp, #28]
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	930a      	str	r3, [sp, #40]	; 0x28
 800c900:	e7bf      	b.n	800c882 <_dtoa_r+0x1da>
 800c902:	2300      	movs	r3, #0
 800c904:	9308      	str	r3, [sp, #32]
 800c906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c908:	2b00      	cmp	r3, #0
 800c90a:	dc55      	bgt.n	800c9b8 <_dtoa_r+0x310>
 800c90c:	2301      	movs	r3, #1
 800c90e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c912:	461a      	mov	r2, r3
 800c914:	9209      	str	r2, [sp, #36]	; 0x24
 800c916:	e00c      	b.n	800c932 <_dtoa_r+0x28a>
 800c918:	2301      	movs	r3, #1
 800c91a:	e7f3      	b.n	800c904 <_dtoa_r+0x25c>
 800c91c:	2300      	movs	r3, #0
 800c91e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c920:	9308      	str	r3, [sp, #32]
 800c922:	9b00      	ldr	r3, [sp, #0]
 800c924:	4413      	add	r3, r2
 800c926:	9302      	str	r3, [sp, #8]
 800c928:	3301      	adds	r3, #1
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	9303      	str	r3, [sp, #12]
 800c92e:	bfb8      	it	lt
 800c930:	2301      	movlt	r3, #1
 800c932:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c934:	2200      	movs	r2, #0
 800c936:	6042      	str	r2, [r0, #4]
 800c938:	2204      	movs	r2, #4
 800c93a:	f102 0614 	add.w	r6, r2, #20
 800c93e:	429e      	cmp	r6, r3
 800c940:	6841      	ldr	r1, [r0, #4]
 800c942:	d93d      	bls.n	800c9c0 <_dtoa_r+0x318>
 800c944:	4620      	mov	r0, r4
 800c946:	f000 fcad 	bl	800d2a4 <_Balloc>
 800c94a:	9001      	str	r0, [sp, #4]
 800c94c:	2800      	cmp	r0, #0
 800c94e:	d13b      	bne.n	800c9c8 <_dtoa_r+0x320>
 800c950:	4b11      	ldr	r3, [pc, #68]	; (800c998 <_dtoa_r+0x2f0>)
 800c952:	4602      	mov	r2, r0
 800c954:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c958:	e6c0      	b.n	800c6dc <_dtoa_r+0x34>
 800c95a:	2301      	movs	r3, #1
 800c95c:	e7df      	b.n	800c91e <_dtoa_r+0x276>
 800c95e:	bf00      	nop
 800c960:	636f4361 	.word	0x636f4361
 800c964:	3fd287a7 	.word	0x3fd287a7
 800c968:	8b60c8b3 	.word	0x8b60c8b3
 800c96c:	3fc68a28 	.word	0x3fc68a28
 800c970:	509f79fb 	.word	0x509f79fb
 800c974:	3fd34413 	.word	0x3fd34413
 800c978:	0800f99a 	.word	0x0800f99a
 800c97c:	0800f9b1 	.word	0x0800f9b1
 800c980:	7ff00000 	.word	0x7ff00000
 800c984:	0800f996 	.word	0x0800f996
 800c988:	0800f98d 	.word	0x0800f98d
 800c98c:	0800f869 	.word	0x0800f869
 800c990:	3ff80000 	.word	0x3ff80000
 800c994:	0800faa8 	.word	0x0800faa8
 800c998:	0800fa0c 	.word	0x0800fa0c
 800c99c:	2501      	movs	r5, #1
 800c99e:	2300      	movs	r3, #0
 800c9a0:	9306      	str	r3, [sp, #24]
 800c9a2:	9508      	str	r5, [sp, #32]
 800c9a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c9a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	2312      	movs	r3, #18
 800c9b0:	e7b0      	b.n	800c914 <_dtoa_r+0x26c>
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	9308      	str	r3, [sp, #32]
 800c9b6:	e7f5      	b.n	800c9a4 <_dtoa_r+0x2fc>
 800c9b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c9be:	e7b8      	b.n	800c932 <_dtoa_r+0x28a>
 800c9c0:	3101      	adds	r1, #1
 800c9c2:	6041      	str	r1, [r0, #4]
 800c9c4:	0052      	lsls	r2, r2, #1
 800c9c6:	e7b8      	b.n	800c93a <_dtoa_r+0x292>
 800c9c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9ca:	9a01      	ldr	r2, [sp, #4]
 800c9cc:	601a      	str	r2, [r3, #0]
 800c9ce:	9b03      	ldr	r3, [sp, #12]
 800c9d0:	2b0e      	cmp	r3, #14
 800c9d2:	f200 809d 	bhi.w	800cb10 <_dtoa_r+0x468>
 800c9d6:	2d00      	cmp	r5, #0
 800c9d8:	f000 809a 	beq.w	800cb10 <_dtoa_r+0x468>
 800c9dc:	9b00      	ldr	r3, [sp, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	dd32      	ble.n	800ca48 <_dtoa_r+0x3a0>
 800c9e2:	4ab7      	ldr	r2, [pc, #732]	; (800ccc0 <_dtoa_r+0x618>)
 800c9e4:	f003 030f 	and.w	r3, r3, #15
 800c9e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c9ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9f0:	9b00      	ldr	r3, [sp, #0]
 800c9f2:	05d8      	lsls	r0, r3, #23
 800c9f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c9f8:	d516      	bpl.n	800ca28 <_dtoa_r+0x380>
 800c9fa:	4bb2      	ldr	r3, [pc, #712]	; (800ccc4 <_dtoa_r+0x61c>)
 800c9fc:	ec51 0b19 	vmov	r0, r1, d9
 800ca00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ca04:	f7f3 ff2a 	bl	800085c <__aeabi_ddiv>
 800ca08:	f007 070f 	and.w	r7, r7, #15
 800ca0c:	4682      	mov	sl, r0
 800ca0e:	468b      	mov	fp, r1
 800ca10:	2503      	movs	r5, #3
 800ca12:	4eac      	ldr	r6, [pc, #688]	; (800ccc4 <_dtoa_r+0x61c>)
 800ca14:	b957      	cbnz	r7, 800ca2c <_dtoa_r+0x384>
 800ca16:	4642      	mov	r2, r8
 800ca18:	464b      	mov	r3, r9
 800ca1a:	4650      	mov	r0, sl
 800ca1c:	4659      	mov	r1, fp
 800ca1e:	f7f3 ff1d 	bl	800085c <__aeabi_ddiv>
 800ca22:	4682      	mov	sl, r0
 800ca24:	468b      	mov	fp, r1
 800ca26:	e028      	b.n	800ca7a <_dtoa_r+0x3d2>
 800ca28:	2502      	movs	r5, #2
 800ca2a:	e7f2      	b.n	800ca12 <_dtoa_r+0x36a>
 800ca2c:	07f9      	lsls	r1, r7, #31
 800ca2e:	d508      	bpl.n	800ca42 <_dtoa_r+0x39a>
 800ca30:	4640      	mov	r0, r8
 800ca32:	4649      	mov	r1, r9
 800ca34:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca38:	f7f3 fde6 	bl	8000608 <__aeabi_dmul>
 800ca3c:	3501      	adds	r5, #1
 800ca3e:	4680      	mov	r8, r0
 800ca40:	4689      	mov	r9, r1
 800ca42:	107f      	asrs	r7, r7, #1
 800ca44:	3608      	adds	r6, #8
 800ca46:	e7e5      	b.n	800ca14 <_dtoa_r+0x36c>
 800ca48:	f000 809b 	beq.w	800cb82 <_dtoa_r+0x4da>
 800ca4c:	9b00      	ldr	r3, [sp, #0]
 800ca4e:	4f9d      	ldr	r7, [pc, #628]	; (800ccc4 <_dtoa_r+0x61c>)
 800ca50:	425e      	negs	r6, r3
 800ca52:	4b9b      	ldr	r3, [pc, #620]	; (800ccc0 <_dtoa_r+0x618>)
 800ca54:	f006 020f 	and.w	r2, r6, #15
 800ca58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca60:	ec51 0b19 	vmov	r0, r1, d9
 800ca64:	f7f3 fdd0 	bl	8000608 <__aeabi_dmul>
 800ca68:	1136      	asrs	r6, r6, #4
 800ca6a:	4682      	mov	sl, r0
 800ca6c:	468b      	mov	fp, r1
 800ca6e:	2300      	movs	r3, #0
 800ca70:	2502      	movs	r5, #2
 800ca72:	2e00      	cmp	r6, #0
 800ca74:	d17a      	bne.n	800cb6c <_dtoa_r+0x4c4>
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1d3      	bne.n	800ca22 <_dtoa_r+0x37a>
 800ca7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f000 8082 	beq.w	800cb86 <_dtoa_r+0x4de>
 800ca82:	4b91      	ldr	r3, [pc, #580]	; (800ccc8 <_dtoa_r+0x620>)
 800ca84:	2200      	movs	r2, #0
 800ca86:	4650      	mov	r0, sl
 800ca88:	4659      	mov	r1, fp
 800ca8a:	f7f4 f82f 	bl	8000aec <__aeabi_dcmplt>
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	d079      	beq.n	800cb86 <_dtoa_r+0x4de>
 800ca92:	9b03      	ldr	r3, [sp, #12]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d076      	beq.n	800cb86 <_dtoa_r+0x4de>
 800ca98:	9b02      	ldr	r3, [sp, #8]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	dd36      	ble.n	800cb0c <_dtoa_r+0x464>
 800ca9e:	9b00      	ldr	r3, [sp, #0]
 800caa0:	4650      	mov	r0, sl
 800caa2:	4659      	mov	r1, fp
 800caa4:	1e5f      	subs	r7, r3, #1
 800caa6:	2200      	movs	r2, #0
 800caa8:	4b88      	ldr	r3, [pc, #544]	; (800cccc <_dtoa_r+0x624>)
 800caaa:	f7f3 fdad 	bl	8000608 <__aeabi_dmul>
 800caae:	9e02      	ldr	r6, [sp, #8]
 800cab0:	4682      	mov	sl, r0
 800cab2:	468b      	mov	fp, r1
 800cab4:	3501      	adds	r5, #1
 800cab6:	4628      	mov	r0, r5
 800cab8:	f7f3 fd3c 	bl	8000534 <__aeabi_i2d>
 800cabc:	4652      	mov	r2, sl
 800cabe:	465b      	mov	r3, fp
 800cac0:	f7f3 fda2 	bl	8000608 <__aeabi_dmul>
 800cac4:	4b82      	ldr	r3, [pc, #520]	; (800ccd0 <_dtoa_r+0x628>)
 800cac6:	2200      	movs	r2, #0
 800cac8:	f7f3 fbe8 	bl	800029c <__adddf3>
 800cacc:	46d0      	mov	r8, sl
 800cace:	46d9      	mov	r9, fp
 800cad0:	4682      	mov	sl, r0
 800cad2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cad6:	2e00      	cmp	r6, #0
 800cad8:	d158      	bne.n	800cb8c <_dtoa_r+0x4e4>
 800cada:	4b7e      	ldr	r3, [pc, #504]	; (800ccd4 <_dtoa_r+0x62c>)
 800cadc:	2200      	movs	r2, #0
 800cade:	4640      	mov	r0, r8
 800cae0:	4649      	mov	r1, r9
 800cae2:	f7f3 fbd9 	bl	8000298 <__aeabi_dsub>
 800cae6:	4652      	mov	r2, sl
 800cae8:	465b      	mov	r3, fp
 800caea:	4680      	mov	r8, r0
 800caec:	4689      	mov	r9, r1
 800caee:	f7f4 f81b 	bl	8000b28 <__aeabi_dcmpgt>
 800caf2:	2800      	cmp	r0, #0
 800caf4:	f040 8295 	bne.w	800d022 <_dtoa_r+0x97a>
 800caf8:	4652      	mov	r2, sl
 800cafa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cafe:	4640      	mov	r0, r8
 800cb00:	4649      	mov	r1, r9
 800cb02:	f7f3 fff3 	bl	8000aec <__aeabi_dcmplt>
 800cb06:	2800      	cmp	r0, #0
 800cb08:	f040 8289 	bne.w	800d01e <_dtoa_r+0x976>
 800cb0c:	ec5b ab19 	vmov	sl, fp, d9
 800cb10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	f2c0 8148 	blt.w	800cda8 <_dtoa_r+0x700>
 800cb18:	9a00      	ldr	r2, [sp, #0]
 800cb1a:	2a0e      	cmp	r2, #14
 800cb1c:	f300 8144 	bgt.w	800cda8 <_dtoa_r+0x700>
 800cb20:	4b67      	ldr	r3, [pc, #412]	; (800ccc0 <_dtoa_r+0x618>)
 800cb22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb26:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f280 80d5 	bge.w	800ccdc <_dtoa_r+0x634>
 800cb32:	9b03      	ldr	r3, [sp, #12]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f300 80d1 	bgt.w	800ccdc <_dtoa_r+0x634>
 800cb3a:	f040 826f 	bne.w	800d01c <_dtoa_r+0x974>
 800cb3e:	4b65      	ldr	r3, [pc, #404]	; (800ccd4 <_dtoa_r+0x62c>)
 800cb40:	2200      	movs	r2, #0
 800cb42:	4640      	mov	r0, r8
 800cb44:	4649      	mov	r1, r9
 800cb46:	f7f3 fd5f 	bl	8000608 <__aeabi_dmul>
 800cb4a:	4652      	mov	r2, sl
 800cb4c:	465b      	mov	r3, fp
 800cb4e:	f7f3 ffe1 	bl	8000b14 <__aeabi_dcmpge>
 800cb52:	9e03      	ldr	r6, [sp, #12]
 800cb54:	4637      	mov	r7, r6
 800cb56:	2800      	cmp	r0, #0
 800cb58:	f040 8245 	bne.w	800cfe6 <_dtoa_r+0x93e>
 800cb5c:	9d01      	ldr	r5, [sp, #4]
 800cb5e:	2331      	movs	r3, #49	; 0x31
 800cb60:	f805 3b01 	strb.w	r3, [r5], #1
 800cb64:	9b00      	ldr	r3, [sp, #0]
 800cb66:	3301      	adds	r3, #1
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	e240      	b.n	800cfee <_dtoa_r+0x946>
 800cb6c:	07f2      	lsls	r2, r6, #31
 800cb6e:	d505      	bpl.n	800cb7c <_dtoa_r+0x4d4>
 800cb70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb74:	f7f3 fd48 	bl	8000608 <__aeabi_dmul>
 800cb78:	3501      	adds	r5, #1
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	1076      	asrs	r6, r6, #1
 800cb7e:	3708      	adds	r7, #8
 800cb80:	e777      	b.n	800ca72 <_dtoa_r+0x3ca>
 800cb82:	2502      	movs	r5, #2
 800cb84:	e779      	b.n	800ca7a <_dtoa_r+0x3d2>
 800cb86:	9f00      	ldr	r7, [sp, #0]
 800cb88:	9e03      	ldr	r6, [sp, #12]
 800cb8a:	e794      	b.n	800cab6 <_dtoa_r+0x40e>
 800cb8c:	9901      	ldr	r1, [sp, #4]
 800cb8e:	4b4c      	ldr	r3, [pc, #304]	; (800ccc0 <_dtoa_r+0x618>)
 800cb90:	4431      	add	r1, r6
 800cb92:	910d      	str	r1, [sp, #52]	; 0x34
 800cb94:	9908      	ldr	r1, [sp, #32]
 800cb96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cb9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb9e:	2900      	cmp	r1, #0
 800cba0:	d043      	beq.n	800cc2a <_dtoa_r+0x582>
 800cba2:	494d      	ldr	r1, [pc, #308]	; (800ccd8 <_dtoa_r+0x630>)
 800cba4:	2000      	movs	r0, #0
 800cba6:	f7f3 fe59 	bl	800085c <__aeabi_ddiv>
 800cbaa:	4652      	mov	r2, sl
 800cbac:	465b      	mov	r3, fp
 800cbae:	f7f3 fb73 	bl	8000298 <__aeabi_dsub>
 800cbb2:	9d01      	ldr	r5, [sp, #4]
 800cbb4:	4682      	mov	sl, r0
 800cbb6:	468b      	mov	fp, r1
 800cbb8:	4649      	mov	r1, r9
 800cbba:	4640      	mov	r0, r8
 800cbbc:	f7f3 ffd4 	bl	8000b68 <__aeabi_d2iz>
 800cbc0:	4606      	mov	r6, r0
 800cbc2:	f7f3 fcb7 	bl	8000534 <__aeabi_i2d>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	460b      	mov	r3, r1
 800cbca:	4640      	mov	r0, r8
 800cbcc:	4649      	mov	r1, r9
 800cbce:	f7f3 fb63 	bl	8000298 <__aeabi_dsub>
 800cbd2:	3630      	adds	r6, #48	; 0x30
 800cbd4:	f805 6b01 	strb.w	r6, [r5], #1
 800cbd8:	4652      	mov	r2, sl
 800cbda:	465b      	mov	r3, fp
 800cbdc:	4680      	mov	r8, r0
 800cbde:	4689      	mov	r9, r1
 800cbe0:	f7f3 ff84 	bl	8000aec <__aeabi_dcmplt>
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	d163      	bne.n	800ccb0 <_dtoa_r+0x608>
 800cbe8:	4642      	mov	r2, r8
 800cbea:	464b      	mov	r3, r9
 800cbec:	4936      	ldr	r1, [pc, #216]	; (800ccc8 <_dtoa_r+0x620>)
 800cbee:	2000      	movs	r0, #0
 800cbf0:	f7f3 fb52 	bl	8000298 <__aeabi_dsub>
 800cbf4:	4652      	mov	r2, sl
 800cbf6:	465b      	mov	r3, fp
 800cbf8:	f7f3 ff78 	bl	8000aec <__aeabi_dcmplt>
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	f040 80b5 	bne.w	800cd6c <_dtoa_r+0x6c4>
 800cc02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc04:	429d      	cmp	r5, r3
 800cc06:	d081      	beq.n	800cb0c <_dtoa_r+0x464>
 800cc08:	4b30      	ldr	r3, [pc, #192]	; (800cccc <_dtoa_r+0x624>)
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	4650      	mov	r0, sl
 800cc0e:	4659      	mov	r1, fp
 800cc10:	f7f3 fcfa 	bl	8000608 <__aeabi_dmul>
 800cc14:	4b2d      	ldr	r3, [pc, #180]	; (800cccc <_dtoa_r+0x624>)
 800cc16:	4682      	mov	sl, r0
 800cc18:	468b      	mov	fp, r1
 800cc1a:	4640      	mov	r0, r8
 800cc1c:	4649      	mov	r1, r9
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f7f3 fcf2 	bl	8000608 <__aeabi_dmul>
 800cc24:	4680      	mov	r8, r0
 800cc26:	4689      	mov	r9, r1
 800cc28:	e7c6      	b.n	800cbb8 <_dtoa_r+0x510>
 800cc2a:	4650      	mov	r0, sl
 800cc2c:	4659      	mov	r1, fp
 800cc2e:	f7f3 fceb 	bl	8000608 <__aeabi_dmul>
 800cc32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc34:	9d01      	ldr	r5, [sp, #4]
 800cc36:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc38:	4682      	mov	sl, r0
 800cc3a:	468b      	mov	fp, r1
 800cc3c:	4649      	mov	r1, r9
 800cc3e:	4640      	mov	r0, r8
 800cc40:	f7f3 ff92 	bl	8000b68 <__aeabi_d2iz>
 800cc44:	4606      	mov	r6, r0
 800cc46:	f7f3 fc75 	bl	8000534 <__aeabi_i2d>
 800cc4a:	3630      	adds	r6, #48	; 0x30
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	460b      	mov	r3, r1
 800cc50:	4640      	mov	r0, r8
 800cc52:	4649      	mov	r1, r9
 800cc54:	f7f3 fb20 	bl	8000298 <__aeabi_dsub>
 800cc58:	f805 6b01 	strb.w	r6, [r5], #1
 800cc5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc5e:	429d      	cmp	r5, r3
 800cc60:	4680      	mov	r8, r0
 800cc62:	4689      	mov	r9, r1
 800cc64:	f04f 0200 	mov.w	r2, #0
 800cc68:	d124      	bne.n	800ccb4 <_dtoa_r+0x60c>
 800cc6a:	4b1b      	ldr	r3, [pc, #108]	; (800ccd8 <_dtoa_r+0x630>)
 800cc6c:	4650      	mov	r0, sl
 800cc6e:	4659      	mov	r1, fp
 800cc70:	f7f3 fb14 	bl	800029c <__adddf3>
 800cc74:	4602      	mov	r2, r0
 800cc76:	460b      	mov	r3, r1
 800cc78:	4640      	mov	r0, r8
 800cc7a:	4649      	mov	r1, r9
 800cc7c:	f7f3 ff54 	bl	8000b28 <__aeabi_dcmpgt>
 800cc80:	2800      	cmp	r0, #0
 800cc82:	d173      	bne.n	800cd6c <_dtoa_r+0x6c4>
 800cc84:	4652      	mov	r2, sl
 800cc86:	465b      	mov	r3, fp
 800cc88:	4913      	ldr	r1, [pc, #76]	; (800ccd8 <_dtoa_r+0x630>)
 800cc8a:	2000      	movs	r0, #0
 800cc8c:	f7f3 fb04 	bl	8000298 <__aeabi_dsub>
 800cc90:	4602      	mov	r2, r0
 800cc92:	460b      	mov	r3, r1
 800cc94:	4640      	mov	r0, r8
 800cc96:	4649      	mov	r1, r9
 800cc98:	f7f3 ff28 	bl	8000aec <__aeabi_dcmplt>
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	f43f af35 	beq.w	800cb0c <_dtoa_r+0x464>
 800cca2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cca4:	1e6b      	subs	r3, r5, #1
 800cca6:	930f      	str	r3, [sp, #60]	; 0x3c
 800cca8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ccac:	2b30      	cmp	r3, #48	; 0x30
 800ccae:	d0f8      	beq.n	800cca2 <_dtoa_r+0x5fa>
 800ccb0:	9700      	str	r7, [sp, #0]
 800ccb2:	e049      	b.n	800cd48 <_dtoa_r+0x6a0>
 800ccb4:	4b05      	ldr	r3, [pc, #20]	; (800cccc <_dtoa_r+0x624>)
 800ccb6:	f7f3 fca7 	bl	8000608 <__aeabi_dmul>
 800ccba:	4680      	mov	r8, r0
 800ccbc:	4689      	mov	r9, r1
 800ccbe:	e7bd      	b.n	800cc3c <_dtoa_r+0x594>
 800ccc0:	0800faa8 	.word	0x0800faa8
 800ccc4:	0800fa80 	.word	0x0800fa80
 800ccc8:	3ff00000 	.word	0x3ff00000
 800cccc:	40240000 	.word	0x40240000
 800ccd0:	401c0000 	.word	0x401c0000
 800ccd4:	40140000 	.word	0x40140000
 800ccd8:	3fe00000 	.word	0x3fe00000
 800ccdc:	9d01      	ldr	r5, [sp, #4]
 800ccde:	4656      	mov	r6, sl
 800cce0:	465f      	mov	r7, fp
 800cce2:	4642      	mov	r2, r8
 800cce4:	464b      	mov	r3, r9
 800cce6:	4630      	mov	r0, r6
 800cce8:	4639      	mov	r1, r7
 800ccea:	f7f3 fdb7 	bl	800085c <__aeabi_ddiv>
 800ccee:	f7f3 ff3b 	bl	8000b68 <__aeabi_d2iz>
 800ccf2:	4682      	mov	sl, r0
 800ccf4:	f7f3 fc1e 	bl	8000534 <__aeabi_i2d>
 800ccf8:	4642      	mov	r2, r8
 800ccfa:	464b      	mov	r3, r9
 800ccfc:	f7f3 fc84 	bl	8000608 <__aeabi_dmul>
 800cd00:	4602      	mov	r2, r0
 800cd02:	460b      	mov	r3, r1
 800cd04:	4630      	mov	r0, r6
 800cd06:	4639      	mov	r1, r7
 800cd08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cd0c:	f7f3 fac4 	bl	8000298 <__aeabi_dsub>
 800cd10:	f805 6b01 	strb.w	r6, [r5], #1
 800cd14:	9e01      	ldr	r6, [sp, #4]
 800cd16:	9f03      	ldr	r7, [sp, #12]
 800cd18:	1bae      	subs	r6, r5, r6
 800cd1a:	42b7      	cmp	r7, r6
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	460b      	mov	r3, r1
 800cd20:	d135      	bne.n	800cd8e <_dtoa_r+0x6e6>
 800cd22:	f7f3 fabb 	bl	800029c <__adddf3>
 800cd26:	4642      	mov	r2, r8
 800cd28:	464b      	mov	r3, r9
 800cd2a:	4606      	mov	r6, r0
 800cd2c:	460f      	mov	r7, r1
 800cd2e:	f7f3 fefb 	bl	8000b28 <__aeabi_dcmpgt>
 800cd32:	b9d0      	cbnz	r0, 800cd6a <_dtoa_r+0x6c2>
 800cd34:	4642      	mov	r2, r8
 800cd36:	464b      	mov	r3, r9
 800cd38:	4630      	mov	r0, r6
 800cd3a:	4639      	mov	r1, r7
 800cd3c:	f7f3 fecc 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd40:	b110      	cbz	r0, 800cd48 <_dtoa_r+0x6a0>
 800cd42:	f01a 0f01 	tst.w	sl, #1
 800cd46:	d110      	bne.n	800cd6a <_dtoa_r+0x6c2>
 800cd48:	4620      	mov	r0, r4
 800cd4a:	ee18 1a10 	vmov	r1, s16
 800cd4e:	f000 fae9 	bl	800d324 <_Bfree>
 800cd52:	2300      	movs	r3, #0
 800cd54:	9800      	ldr	r0, [sp, #0]
 800cd56:	702b      	strb	r3, [r5, #0]
 800cd58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd5a:	3001      	adds	r0, #1
 800cd5c:	6018      	str	r0, [r3, #0]
 800cd5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f43f acf1 	beq.w	800c748 <_dtoa_r+0xa0>
 800cd66:	601d      	str	r5, [r3, #0]
 800cd68:	e4ee      	b.n	800c748 <_dtoa_r+0xa0>
 800cd6a:	9f00      	ldr	r7, [sp, #0]
 800cd6c:	462b      	mov	r3, r5
 800cd6e:	461d      	mov	r5, r3
 800cd70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd74:	2a39      	cmp	r2, #57	; 0x39
 800cd76:	d106      	bne.n	800cd86 <_dtoa_r+0x6de>
 800cd78:	9a01      	ldr	r2, [sp, #4]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d1f7      	bne.n	800cd6e <_dtoa_r+0x6c6>
 800cd7e:	9901      	ldr	r1, [sp, #4]
 800cd80:	2230      	movs	r2, #48	; 0x30
 800cd82:	3701      	adds	r7, #1
 800cd84:	700a      	strb	r2, [r1, #0]
 800cd86:	781a      	ldrb	r2, [r3, #0]
 800cd88:	3201      	adds	r2, #1
 800cd8a:	701a      	strb	r2, [r3, #0]
 800cd8c:	e790      	b.n	800ccb0 <_dtoa_r+0x608>
 800cd8e:	4ba6      	ldr	r3, [pc, #664]	; (800d028 <_dtoa_r+0x980>)
 800cd90:	2200      	movs	r2, #0
 800cd92:	f7f3 fc39 	bl	8000608 <__aeabi_dmul>
 800cd96:	2200      	movs	r2, #0
 800cd98:	2300      	movs	r3, #0
 800cd9a:	4606      	mov	r6, r0
 800cd9c:	460f      	mov	r7, r1
 800cd9e:	f7f3 fe9b 	bl	8000ad8 <__aeabi_dcmpeq>
 800cda2:	2800      	cmp	r0, #0
 800cda4:	d09d      	beq.n	800cce2 <_dtoa_r+0x63a>
 800cda6:	e7cf      	b.n	800cd48 <_dtoa_r+0x6a0>
 800cda8:	9a08      	ldr	r2, [sp, #32]
 800cdaa:	2a00      	cmp	r2, #0
 800cdac:	f000 80d7 	beq.w	800cf5e <_dtoa_r+0x8b6>
 800cdb0:	9a06      	ldr	r2, [sp, #24]
 800cdb2:	2a01      	cmp	r2, #1
 800cdb4:	f300 80ba 	bgt.w	800cf2c <_dtoa_r+0x884>
 800cdb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cdba:	2a00      	cmp	r2, #0
 800cdbc:	f000 80b2 	beq.w	800cf24 <_dtoa_r+0x87c>
 800cdc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cdc4:	9e07      	ldr	r6, [sp, #28]
 800cdc6:	9d04      	ldr	r5, [sp, #16]
 800cdc8:	9a04      	ldr	r2, [sp, #16]
 800cdca:	441a      	add	r2, r3
 800cdcc:	9204      	str	r2, [sp, #16]
 800cdce:	9a05      	ldr	r2, [sp, #20]
 800cdd0:	2101      	movs	r1, #1
 800cdd2:	441a      	add	r2, r3
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	9205      	str	r2, [sp, #20]
 800cdd8:	f000 fb5c 	bl	800d494 <__i2b>
 800cddc:	4607      	mov	r7, r0
 800cdde:	2d00      	cmp	r5, #0
 800cde0:	dd0c      	ble.n	800cdfc <_dtoa_r+0x754>
 800cde2:	9b05      	ldr	r3, [sp, #20]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	dd09      	ble.n	800cdfc <_dtoa_r+0x754>
 800cde8:	42ab      	cmp	r3, r5
 800cdea:	9a04      	ldr	r2, [sp, #16]
 800cdec:	bfa8      	it	ge
 800cdee:	462b      	movge	r3, r5
 800cdf0:	1ad2      	subs	r2, r2, r3
 800cdf2:	9204      	str	r2, [sp, #16]
 800cdf4:	9a05      	ldr	r2, [sp, #20]
 800cdf6:	1aed      	subs	r5, r5, r3
 800cdf8:	1ad3      	subs	r3, r2, r3
 800cdfa:	9305      	str	r3, [sp, #20]
 800cdfc:	9b07      	ldr	r3, [sp, #28]
 800cdfe:	b31b      	cbz	r3, 800ce48 <_dtoa_r+0x7a0>
 800ce00:	9b08      	ldr	r3, [sp, #32]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	f000 80af 	beq.w	800cf66 <_dtoa_r+0x8be>
 800ce08:	2e00      	cmp	r6, #0
 800ce0a:	dd13      	ble.n	800ce34 <_dtoa_r+0x78c>
 800ce0c:	4639      	mov	r1, r7
 800ce0e:	4632      	mov	r2, r6
 800ce10:	4620      	mov	r0, r4
 800ce12:	f000 fbff 	bl	800d614 <__pow5mult>
 800ce16:	ee18 2a10 	vmov	r2, s16
 800ce1a:	4601      	mov	r1, r0
 800ce1c:	4607      	mov	r7, r0
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f000 fb4e 	bl	800d4c0 <__multiply>
 800ce24:	ee18 1a10 	vmov	r1, s16
 800ce28:	4680      	mov	r8, r0
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	f000 fa7a 	bl	800d324 <_Bfree>
 800ce30:	ee08 8a10 	vmov	s16, r8
 800ce34:	9b07      	ldr	r3, [sp, #28]
 800ce36:	1b9a      	subs	r2, r3, r6
 800ce38:	d006      	beq.n	800ce48 <_dtoa_r+0x7a0>
 800ce3a:	ee18 1a10 	vmov	r1, s16
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f000 fbe8 	bl	800d614 <__pow5mult>
 800ce44:	ee08 0a10 	vmov	s16, r0
 800ce48:	2101      	movs	r1, #1
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	f000 fb22 	bl	800d494 <__i2b>
 800ce50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	4606      	mov	r6, r0
 800ce56:	f340 8088 	ble.w	800cf6a <_dtoa_r+0x8c2>
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	4601      	mov	r1, r0
 800ce5e:	4620      	mov	r0, r4
 800ce60:	f000 fbd8 	bl	800d614 <__pow5mult>
 800ce64:	9b06      	ldr	r3, [sp, #24]
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	4606      	mov	r6, r0
 800ce6a:	f340 8081 	ble.w	800cf70 <_dtoa_r+0x8c8>
 800ce6e:	f04f 0800 	mov.w	r8, #0
 800ce72:	6933      	ldr	r3, [r6, #16]
 800ce74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ce78:	6918      	ldr	r0, [r3, #16]
 800ce7a:	f000 fabb 	bl	800d3f4 <__hi0bits>
 800ce7e:	f1c0 0020 	rsb	r0, r0, #32
 800ce82:	9b05      	ldr	r3, [sp, #20]
 800ce84:	4418      	add	r0, r3
 800ce86:	f010 001f 	ands.w	r0, r0, #31
 800ce8a:	f000 8092 	beq.w	800cfb2 <_dtoa_r+0x90a>
 800ce8e:	f1c0 0320 	rsb	r3, r0, #32
 800ce92:	2b04      	cmp	r3, #4
 800ce94:	f340 808a 	ble.w	800cfac <_dtoa_r+0x904>
 800ce98:	f1c0 001c 	rsb	r0, r0, #28
 800ce9c:	9b04      	ldr	r3, [sp, #16]
 800ce9e:	4403      	add	r3, r0
 800cea0:	9304      	str	r3, [sp, #16]
 800cea2:	9b05      	ldr	r3, [sp, #20]
 800cea4:	4403      	add	r3, r0
 800cea6:	4405      	add	r5, r0
 800cea8:	9305      	str	r3, [sp, #20]
 800ceaa:	9b04      	ldr	r3, [sp, #16]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	dd07      	ble.n	800cec0 <_dtoa_r+0x818>
 800ceb0:	ee18 1a10 	vmov	r1, s16
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	f000 fc06 	bl	800d6c8 <__lshift>
 800cebc:	ee08 0a10 	vmov	s16, r0
 800cec0:	9b05      	ldr	r3, [sp, #20]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	dd05      	ble.n	800ced2 <_dtoa_r+0x82a>
 800cec6:	4631      	mov	r1, r6
 800cec8:	461a      	mov	r2, r3
 800ceca:	4620      	mov	r0, r4
 800cecc:	f000 fbfc 	bl	800d6c8 <__lshift>
 800ced0:	4606      	mov	r6, r0
 800ced2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d06e      	beq.n	800cfb6 <_dtoa_r+0x90e>
 800ced8:	ee18 0a10 	vmov	r0, s16
 800cedc:	4631      	mov	r1, r6
 800cede:	f000 fc63 	bl	800d7a8 <__mcmp>
 800cee2:	2800      	cmp	r0, #0
 800cee4:	da67      	bge.n	800cfb6 <_dtoa_r+0x90e>
 800cee6:	9b00      	ldr	r3, [sp, #0]
 800cee8:	3b01      	subs	r3, #1
 800ceea:	ee18 1a10 	vmov	r1, s16
 800ceee:	9300      	str	r3, [sp, #0]
 800cef0:	220a      	movs	r2, #10
 800cef2:	2300      	movs	r3, #0
 800cef4:	4620      	mov	r0, r4
 800cef6:	f000 fa37 	bl	800d368 <__multadd>
 800cefa:	9b08      	ldr	r3, [sp, #32]
 800cefc:	ee08 0a10 	vmov	s16, r0
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	f000 81b1 	beq.w	800d268 <_dtoa_r+0xbc0>
 800cf06:	2300      	movs	r3, #0
 800cf08:	4639      	mov	r1, r7
 800cf0a:	220a      	movs	r2, #10
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	f000 fa2b 	bl	800d368 <__multadd>
 800cf12:	9b02      	ldr	r3, [sp, #8]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	4607      	mov	r7, r0
 800cf18:	f300 808e 	bgt.w	800d038 <_dtoa_r+0x990>
 800cf1c:	9b06      	ldr	r3, [sp, #24]
 800cf1e:	2b02      	cmp	r3, #2
 800cf20:	dc51      	bgt.n	800cfc6 <_dtoa_r+0x91e>
 800cf22:	e089      	b.n	800d038 <_dtoa_r+0x990>
 800cf24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf2a:	e74b      	b.n	800cdc4 <_dtoa_r+0x71c>
 800cf2c:	9b03      	ldr	r3, [sp, #12]
 800cf2e:	1e5e      	subs	r6, r3, #1
 800cf30:	9b07      	ldr	r3, [sp, #28]
 800cf32:	42b3      	cmp	r3, r6
 800cf34:	bfbf      	itttt	lt
 800cf36:	9b07      	ldrlt	r3, [sp, #28]
 800cf38:	9607      	strlt	r6, [sp, #28]
 800cf3a:	1af2      	sublt	r2, r6, r3
 800cf3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cf3e:	bfb6      	itet	lt
 800cf40:	189b      	addlt	r3, r3, r2
 800cf42:	1b9e      	subge	r6, r3, r6
 800cf44:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cf46:	9b03      	ldr	r3, [sp, #12]
 800cf48:	bfb8      	it	lt
 800cf4a:	2600      	movlt	r6, #0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	bfb7      	itett	lt
 800cf50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cf54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cf58:	1a9d      	sublt	r5, r3, r2
 800cf5a:	2300      	movlt	r3, #0
 800cf5c:	e734      	b.n	800cdc8 <_dtoa_r+0x720>
 800cf5e:	9e07      	ldr	r6, [sp, #28]
 800cf60:	9d04      	ldr	r5, [sp, #16]
 800cf62:	9f08      	ldr	r7, [sp, #32]
 800cf64:	e73b      	b.n	800cdde <_dtoa_r+0x736>
 800cf66:	9a07      	ldr	r2, [sp, #28]
 800cf68:	e767      	b.n	800ce3a <_dtoa_r+0x792>
 800cf6a:	9b06      	ldr	r3, [sp, #24]
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	dc18      	bgt.n	800cfa2 <_dtoa_r+0x8fa>
 800cf70:	f1ba 0f00 	cmp.w	sl, #0
 800cf74:	d115      	bne.n	800cfa2 <_dtoa_r+0x8fa>
 800cf76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf7a:	b993      	cbnz	r3, 800cfa2 <_dtoa_r+0x8fa>
 800cf7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cf80:	0d1b      	lsrs	r3, r3, #20
 800cf82:	051b      	lsls	r3, r3, #20
 800cf84:	b183      	cbz	r3, 800cfa8 <_dtoa_r+0x900>
 800cf86:	9b04      	ldr	r3, [sp, #16]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	9304      	str	r3, [sp, #16]
 800cf8c:	9b05      	ldr	r3, [sp, #20]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	9305      	str	r3, [sp, #20]
 800cf92:	f04f 0801 	mov.w	r8, #1
 800cf96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	f47f af6a 	bne.w	800ce72 <_dtoa_r+0x7ca>
 800cf9e:	2001      	movs	r0, #1
 800cfa0:	e76f      	b.n	800ce82 <_dtoa_r+0x7da>
 800cfa2:	f04f 0800 	mov.w	r8, #0
 800cfa6:	e7f6      	b.n	800cf96 <_dtoa_r+0x8ee>
 800cfa8:	4698      	mov	r8, r3
 800cfaa:	e7f4      	b.n	800cf96 <_dtoa_r+0x8ee>
 800cfac:	f43f af7d 	beq.w	800ceaa <_dtoa_r+0x802>
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	301c      	adds	r0, #28
 800cfb4:	e772      	b.n	800ce9c <_dtoa_r+0x7f4>
 800cfb6:	9b03      	ldr	r3, [sp, #12]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	dc37      	bgt.n	800d02c <_dtoa_r+0x984>
 800cfbc:	9b06      	ldr	r3, [sp, #24]
 800cfbe:	2b02      	cmp	r3, #2
 800cfc0:	dd34      	ble.n	800d02c <_dtoa_r+0x984>
 800cfc2:	9b03      	ldr	r3, [sp, #12]
 800cfc4:	9302      	str	r3, [sp, #8]
 800cfc6:	9b02      	ldr	r3, [sp, #8]
 800cfc8:	b96b      	cbnz	r3, 800cfe6 <_dtoa_r+0x93e>
 800cfca:	4631      	mov	r1, r6
 800cfcc:	2205      	movs	r2, #5
 800cfce:	4620      	mov	r0, r4
 800cfd0:	f000 f9ca 	bl	800d368 <__multadd>
 800cfd4:	4601      	mov	r1, r0
 800cfd6:	4606      	mov	r6, r0
 800cfd8:	ee18 0a10 	vmov	r0, s16
 800cfdc:	f000 fbe4 	bl	800d7a8 <__mcmp>
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	f73f adbb 	bgt.w	800cb5c <_dtoa_r+0x4b4>
 800cfe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfe8:	9d01      	ldr	r5, [sp, #4]
 800cfea:	43db      	mvns	r3, r3
 800cfec:	9300      	str	r3, [sp, #0]
 800cfee:	f04f 0800 	mov.w	r8, #0
 800cff2:	4631      	mov	r1, r6
 800cff4:	4620      	mov	r0, r4
 800cff6:	f000 f995 	bl	800d324 <_Bfree>
 800cffa:	2f00      	cmp	r7, #0
 800cffc:	f43f aea4 	beq.w	800cd48 <_dtoa_r+0x6a0>
 800d000:	f1b8 0f00 	cmp.w	r8, #0
 800d004:	d005      	beq.n	800d012 <_dtoa_r+0x96a>
 800d006:	45b8      	cmp	r8, r7
 800d008:	d003      	beq.n	800d012 <_dtoa_r+0x96a>
 800d00a:	4641      	mov	r1, r8
 800d00c:	4620      	mov	r0, r4
 800d00e:	f000 f989 	bl	800d324 <_Bfree>
 800d012:	4639      	mov	r1, r7
 800d014:	4620      	mov	r0, r4
 800d016:	f000 f985 	bl	800d324 <_Bfree>
 800d01a:	e695      	b.n	800cd48 <_dtoa_r+0x6a0>
 800d01c:	2600      	movs	r6, #0
 800d01e:	4637      	mov	r7, r6
 800d020:	e7e1      	b.n	800cfe6 <_dtoa_r+0x93e>
 800d022:	9700      	str	r7, [sp, #0]
 800d024:	4637      	mov	r7, r6
 800d026:	e599      	b.n	800cb5c <_dtoa_r+0x4b4>
 800d028:	40240000 	.word	0x40240000
 800d02c:	9b08      	ldr	r3, [sp, #32]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	f000 80ca 	beq.w	800d1c8 <_dtoa_r+0xb20>
 800d034:	9b03      	ldr	r3, [sp, #12]
 800d036:	9302      	str	r3, [sp, #8]
 800d038:	2d00      	cmp	r5, #0
 800d03a:	dd05      	ble.n	800d048 <_dtoa_r+0x9a0>
 800d03c:	4639      	mov	r1, r7
 800d03e:	462a      	mov	r2, r5
 800d040:	4620      	mov	r0, r4
 800d042:	f000 fb41 	bl	800d6c8 <__lshift>
 800d046:	4607      	mov	r7, r0
 800d048:	f1b8 0f00 	cmp.w	r8, #0
 800d04c:	d05b      	beq.n	800d106 <_dtoa_r+0xa5e>
 800d04e:	6879      	ldr	r1, [r7, #4]
 800d050:	4620      	mov	r0, r4
 800d052:	f000 f927 	bl	800d2a4 <_Balloc>
 800d056:	4605      	mov	r5, r0
 800d058:	b928      	cbnz	r0, 800d066 <_dtoa_r+0x9be>
 800d05a:	4b87      	ldr	r3, [pc, #540]	; (800d278 <_dtoa_r+0xbd0>)
 800d05c:	4602      	mov	r2, r0
 800d05e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d062:	f7ff bb3b 	b.w	800c6dc <_dtoa_r+0x34>
 800d066:	693a      	ldr	r2, [r7, #16]
 800d068:	3202      	adds	r2, #2
 800d06a:	0092      	lsls	r2, r2, #2
 800d06c:	f107 010c 	add.w	r1, r7, #12
 800d070:	300c      	adds	r0, #12
 800d072:	f7fe fc67 	bl	800b944 <memcpy>
 800d076:	2201      	movs	r2, #1
 800d078:	4629      	mov	r1, r5
 800d07a:	4620      	mov	r0, r4
 800d07c:	f000 fb24 	bl	800d6c8 <__lshift>
 800d080:	9b01      	ldr	r3, [sp, #4]
 800d082:	f103 0901 	add.w	r9, r3, #1
 800d086:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d08a:	4413      	add	r3, r2
 800d08c:	9305      	str	r3, [sp, #20]
 800d08e:	f00a 0301 	and.w	r3, sl, #1
 800d092:	46b8      	mov	r8, r7
 800d094:	9304      	str	r3, [sp, #16]
 800d096:	4607      	mov	r7, r0
 800d098:	4631      	mov	r1, r6
 800d09a:	ee18 0a10 	vmov	r0, s16
 800d09e:	f7ff fa75 	bl	800c58c <quorem>
 800d0a2:	4641      	mov	r1, r8
 800d0a4:	9002      	str	r0, [sp, #8]
 800d0a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d0aa:	ee18 0a10 	vmov	r0, s16
 800d0ae:	f000 fb7b 	bl	800d7a8 <__mcmp>
 800d0b2:	463a      	mov	r2, r7
 800d0b4:	9003      	str	r0, [sp, #12]
 800d0b6:	4631      	mov	r1, r6
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	f000 fb91 	bl	800d7e0 <__mdiff>
 800d0be:	68c2      	ldr	r2, [r0, #12]
 800d0c0:	f109 3bff 	add.w	fp, r9, #4294967295
 800d0c4:	4605      	mov	r5, r0
 800d0c6:	bb02      	cbnz	r2, 800d10a <_dtoa_r+0xa62>
 800d0c8:	4601      	mov	r1, r0
 800d0ca:	ee18 0a10 	vmov	r0, s16
 800d0ce:	f000 fb6b 	bl	800d7a8 <__mcmp>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	4629      	mov	r1, r5
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	9207      	str	r2, [sp, #28]
 800d0da:	f000 f923 	bl	800d324 <_Bfree>
 800d0de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d0e2:	ea43 0102 	orr.w	r1, r3, r2
 800d0e6:	9b04      	ldr	r3, [sp, #16]
 800d0e8:	430b      	orrs	r3, r1
 800d0ea:	464d      	mov	r5, r9
 800d0ec:	d10f      	bne.n	800d10e <_dtoa_r+0xa66>
 800d0ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d0f2:	d02a      	beq.n	800d14a <_dtoa_r+0xaa2>
 800d0f4:	9b03      	ldr	r3, [sp, #12]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	dd02      	ble.n	800d100 <_dtoa_r+0xa58>
 800d0fa:	9b02      	ldr	r3, [sp, #8]
 800d0fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d100:	f88b a000 	strb.w	sl, [fp]
 800d104:	e775      	b.n	800cff2 <_dtoa_r+0x94a>
 800d106:	4638      	mov	r0, r7
 800d108:	e7ba      	b.n	800d080 <_dtoa_r+0x9d8>
 800d10a:	2201      	movs	r2, #1
 800d10c:	e7e2      	b.n	800d0d4 <_dtoa_r+0xa2c>
 800d10e:	9b03      	ldr	r3, [sp, #12]
 800d110:	2b00      	cmp	r3, #0
 800d112:	db04      	blt.n	800d11e <_dtoa_r+0xa76>
 800d114:	9906      	ldr	r1, [sp, #24]
 800d116:	430b      	orrs	r3, r1
 800d118:	9904      	ldr	r1, [sp, #16]
 800d11a:	430b      	orrs	r3, r1
 800d11c:	d122      	bne.n	800d164 <_dtoa_r+0xabc>
 800d11e:	2a00      	cmp	r2, #0
 800d120:	ddee      	ble.n	800d100 <_dtoa_r+0xa58>
 800d122:	ee18 1a10 	vmov	r1, s16
 800d126:	2201      	movs	r2, #1
 800d128:	4620      	mov	r0, r4
 800d12a:	f000 facd 	bl	800d6c8 <__lshift>
 800d12e:	4631      	mov	r1, r6
 800d130:	ee08 0a10 	vmov	s16, r0
 800d134:	f000 fb38 	bl	800d7a8 <__mcmp>
 800d138:	2800      	cmp	r0, #0
 800d13a:	dc03      	bgt.n	800d144 <_dtoa_r+0xa9c>
 800d13c:	d1e0      	bne.n	800d100 <_dtoa_r+0xa58>
 800d13e:	f01a 0f01 	tst.w	sl, #1
 800d142:	d0dd      	beq.n	800d100 <_dtoa_r+0xa58>
 800d144:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d148:	d1d7      	bne.n	800d0fa <_dtoa_r+0xa52>
 800d14a:	2339      	movs	r3, #57	; 0x39
 800d14c:	f88b 3000 	strb.w	r3, [fp]
 800d150:	462b      	mov	r3, r5
 800d152:	461d      	mov	r5, r3
 800d154:	3b01      	subs	r3, #1
 800d156:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d15a:	2a39      	cmp	r2, #57	; 0x39
 800d15c:	d071      	beq.n	800d242 <_dtoa_r+0xb9a>
 800d15e:	3201      	adds	r2, #1
 800d160:	701a      	strb	r2, [r3, #0]
 800d162:	e746      	b.n	800cff2 <_dtoa_r+0x94a>
 800d164:	2a00      	cmp	r2, #0
 800d166:	dd07      	ble.n	800d178 <_dtoa_r+0xad0>
 800d168:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d16c:	d0ed      	beq.n	800d14a <_dtoa_r+0xaa2>
 800d16e:	f10a 0301 	add.w	r3, sl, #1
 800d172:	f88b 3000 	strb.w	r3, [fp]
 800d176:	e73c      	b.n	800cff2 <_dtoa_r+0x94a>
 800d178:	9b05      	ldr	r3, [sp, #20]
 800d17a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d17e:	4599      	cmp	r9, r3
 800d180:	d047      	beq.n	800d212 <_dtoa_r+0xb6a>
 800d182:	ee18 1a10 	vmov	r1, s16
 800d186:	2300      	movs	r3, #0
 800d188:	220a      	movs	r2, #10
 800d18a:	4620      	mov	r0, r4
 800d18c:	f000 f8ec 	bl	800d368 <__multadd>
 800d190:	45b8      	cmp	r8, r7
 800d192:	ee08 0a10 	vmov	s16, r0
 800d196:	f04f 0300 	mov.w	r3, #0
 800d19a:	f04f 020a 	mov.w	r2, #10
 800d19e:	4641      	mov	r1, r8
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	d106      	bne.n	800d1b2 <_dtoa_r+0xb0a>
 800d1a4:	f000 f8e0 	bl	800d368 <__multadd>
 800d1a8:	4680      	mov	r8, r0
 800d1aa:	4607      	mov	r7, r0
 800d1ac:	f109 0901 	add.w	r9, r9, #1
 800d1b0:	e772      	b.n	800d098 <_dtoa_r+0x9f0>
 800d1b2:	f000 f8d9 	bl	800d368 <__multadd>
 800d1b6:	4639      	mov	r1, r7
 800d1b8:	4680      	mov	r8, r0
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	220a      	movs	r2, #10
 800d1be:	4620      	mov	r0, r4
 800d1c0:	f000 f8d2 	bl	800d368 <__multadd>
 800d1c4:	4607      	mov	r7, r0
 800d1c6:	e7f1      	b.n	800d1ac <_dtoa_r+0xb04>
 800d1c8:	9b03      	ldr	r3, [sp, #12]
 800d1ca:	9302      	str	r3, [sp, #8]
 800d1cc:	9d01      	ldr	r5, [sp, #4]
 800d1ce:	ee18 0a10 	vmov	r0, s16
 800d1d2:	4631      	mov	r1, r6
 800d1d4:	f7ff f9da 	bl	800c58c <quorem>
 800d1d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d1dc:	9b01      	ldr	r3, [sp, #4]
 800d1de:	f805 ab01 	strb.w	sl, [r5], #1
 800d1e2:	1aea      	subs	r2, r5, r3
 800d1e4:	9b02      	ldr	r3, [sp, #8]
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	dd09      	ble.n	800d1fe <_dtoa_r+0xb56>
 800d1ea:	ee18 1a10 	vmov	r1, s16
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	220a      	movs	r2, #10
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	f000 f8b8 	bl	800d368 <__multadd>
 800d1f8:	ee08 0a10 	vmov	s16, r0
 800d1fc:	e7e7      	b.n	800d1ce <_dtoa_r+0xb26>
 800d1fe:	9b02      	ldr	r3, [sp, #8]
 800d200:	2b00      	cmp	r3, #0
 800d202:	bfc8      	it	gt
 800d204:	461d      	movgt	r5, r3
 800d206:	9b01      	ldr	r3, [sp, #4]
 800d208:	bfd8      	it	le
 800d20a:	2501      	movle	r5, #1
 800d20c:	441d      	add	r5, r3
 800d20e:	f04f 0800 	mov.w	r8, #0
 800d212:	ee18 1a10 	vmov	r1, s16
 800d216:	2201      	movs	r2, #1
 800d218:	4620      	mov	r0, r4
 800d21a:	f000 fa55 	bl	800d6c8 <__lshift>
 800d21e:	4631      	mov	r1, r6
 800d220:	ee08 0a10 	vmov	s16, r0
 800d224:	f000 fac0 	bl	800d7a8 <__mcmp>
 800d228:	2800      	cmp	r0, #0
 800d22a:	dc91      	bgt.n	800d150 <_dtoa_r+0xaa8>
 800d22c:	d102      	bne.n	800d234 <_dtoa_r+0xb8c>
 800d22e:	f01a 0f01 	tst.w	sl, #1
 800d232:	d18d      	bne.n	800d150 <_dtoa_r+0xaa8>
 800d234:	462b      	mov	r3, r5
 800d236:	461d      	mov	r5, r3
 800d238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d23c:	2a30      	cmp	r2, #48	; 0x30
 800d23e:	d0fa      	beq.n	800d236 <_dtoa_r+0xb8e>
 800d240:	e6d7      	b.n	800cff2 <_dtoa_r+0x94a>
 800d242:	9a01      	ldr	r2, [sp, #4]
 800d244:	429a      	cmp	r2, r3
 800d246:	d184      	bne.n	800d152 <_dtoa_r+0xaaa>
 800d248:	9b00      	ldr	r3, [sp, #0]
 800d24a:	3301      	adds	r3, #1
 800d24c:	9300      	str	r3, [sp, #0]
 800d24e:	2331      	movs	r3, #49	; 0x31
 800d250:	7013      	strb	r3, [r2, #0]
 800d252:	e6ce      	b.n	800cff2 <_dtoa_r+0x94a>
 800d254:	4b09      	ldr	r3, [pc, #36]	; (800d27c <_dtoa_r+0xbd4>)
 800d256:	f7ff ba95 	b.w	800c784 <_dtoa_r+0xdc>
 800d25a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f47f aa6e 	bne.w	800c73e <_dtoa_r+0x96>
 800d262:	4b07      	ldr	r3, [pc, #28]	; (800d280 <_dtoa_r+0xbd8>)
 800d264:	f7ff ba8e 	b.w	800c784 <_dtoa_r+0xdc>
 800d268:	9b02      	ldr	r3, [sp, #8]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	dcae      	bgt.n	800d1cc <_dtoa_r+0xb24>
 800d26e:	9b06      	ldr	r3, [sp, #24]
 800d270:	2b02      	cmp	r3, #2
 800d272:	f73f aea8 	bgt.w	800cfc6 <_dtoa_r+0x91e>
 800d276:	e7a9      	b.n	800d1cc <_dtoa_r+0xb24>
 800d278:	0800fa0c 	.word	0x0800fa0c
 800d27c:	0800f868 	.word	0x0800f868
 800d280:	0800f98d 	.word	0x0800f98d

0800d284 <_localeconv_r>:
 800d284:	4800      	ldr	r0, [pc, #0]	; (800d288 <_localeconv_r+0x4>)
 800d286:	4770      	bx	lr
 800d288:	20000214 	.word	0x20000214

0800d28c <__malloc_lock>:
 800d28c:	4801      	ldr	r0, [pc, #4]	; (800d294 <__malloc_lock+0x8>)
 800d28e:	f000 bd30 	b.w	800dcf2 <__retarget_lock_acquire_recursive>
 800d292:	bf00      	nop
 800d294:	2000074c 	.word	0x2000074c

0800d298 <__malloc_unlock>:
 800d298:	4801      	ldr	r0, [pc, #4]	; (800d2a0 <__malloc_unlock+0x8>)
 800d29a:	f000 bd2b 	b.w	800dcf4 <__retarget_lock_release_recursive>
 800d29e:	bf00      	nop
 800d2a0:	2000074c 	.word	0x2000074c

0800d2a4 <_Balloc>:
 800d2a4:	b570      	push	{r4, r5, r6, lr}
 800d2a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d2a8:	4604      	mov	r4, r0
 800d2aa:	460d      	mov	r5, r1
 800d2ac:	b976      	cbnz	r6, 800d2cc <_Balloc+0x28>
 800d2ae:	2010      	movs	r0, #16
 800d2b0:	f7fe fb38 	bl	800b924 <malloc>
 800d2b4:	4602      	mov	r2, r0
 800d2b6:	6260      	str	r0, [r4, #36]	; 0x24
 800d2b8:	b920      	cbnz	r0, 800d2c4 <_Balloc+0x20>
 800d2ba:	4b18      	ldr	r3, [pc, #96]	; (800d31c <_Balloc+0x78>)
 800d2bc:	4818      	ldr	r0, [pc, #96]	; (800d320 <_Balloc+0x7c>)
 800d2be:	2166      	movs	r1, #102	; 0x66
 800d2c0:	f000 fce6 	bl	800dc90 <__assert_func>
 800d2c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2c8:	6006      	str	r6, [r0, #0]
 800d2ca:	60c6      	str	r6, [r0, #12]
 800d2cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d2ce:	68f3      	ldr	r3, [r6, #12]
 800d2d0:	b183      	cbz	r3, 800d2f4 <_Balloc+0x50>
 800d2d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2d4:	68db      	ldr	r3, [r3, #12]
 800d2d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d2da:	b9b8      	cbnz	r0, 800d30c <_Balloc+0x68>
 800d2dc:	2101      	movs	r1, #1
 800d2de:	fa01 f605 	lsl.w	r6, r1, r5
 800d2e2:	1d72      	adds	r2, r6, #5
 800d2e4:	0092      	lsls	r2, r2, #2
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	f000 fb60 	bl	800d9ac <_calloc_r>
 800d2ec:	b160      	cbz	r0, 800d308 <_Balloc+0x64>
 800d2ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d2f2:	e00e      	b.n	800d312 <_Balloc+0x6e>
 800d2f4:	2221      	movs	r2, #33	; 0x21
 800d2f6:	2104      	movs	r1, #4
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	f000 fb57 	bl	800d9ac <_calloc_r>
 800d2fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d300:	60f0      	str	r0, [r6, #12]
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d1e4      	bne.n	800d2d2 <_Balloc+0x2e>
 800d308:	2000      	movs	r0, #0
 800d30a:	bd70      	pop	{r4, r5, r6, pc}
 800d30c:	6802      	ldr	r2, [r0, #0]
 800d30e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d312:	2300      	movs	r3, #0
 800d314:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d318:	e7f7      	b.n	800d30a <_Balloc+0x66>
 800d31a:	bf00      	nop
 800d31c:	0800f99a 	.word	0x0800f99a
 800d320:	0800fa1d 	.word	0x0800fa1d

0800d324 <_Bfree>:
 800d324:	b570      	push	{r4, r5, r6, lr}
 800d326:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d328:	4605      	mov	r5, r0
 800d32a:	460c      	mov	r4, r1
 800d32c:	b976      	cbnz	r6, 800d34c <_Bfree+0x28>
 800d32e:	2010      	movs	r0, #16
 800d330:	f7fe faf8 	bl	800b924 <malloc>
 800d334:	4602      	mov	r2, r0
 800d336:	6268      	str	r0, [r5, #36]	; 0x24
 800d338:	b920      	cbnz	r0, 800d344 <_Bfree+0x20>
 800d33a:	4b09      	ldr	r3, [pc, #36]	; (800d360 <_Bfree+0x3c>)
 800d33c:	4809      	ldr	r0, [pc, #36]	; (800d364 <_Bfree+0x40>)
 800d33e:	218a      	movs	r1, #138	; 0x8a
 800d340:	f000 fca6 	bl	800dc90 <__assert_func>
 800d344:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d348:	6006      	str	r6, [r0, #0]
 800d34a:	60c6      	str	r6, [r0, #12]
 800d34c:	b13c      	cbz	r4, 800d35e <_Bfree+0x3a>
 800d34e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d350:	6862      	ldr	r2, [r4, #4]
 800d352:	68db      	ldr	r3, [r3, #12]
 800d354:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d358:	6021      	str	r1, [r4, #0]
 800d35a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d35e:	bd70      	pop	{r4, r5, r6, pc}
 800d360:	0800f99a 	.word	0x0800f99a
 800d364:	0800fa1d 	.word	0x0800fa1d

0800d368 <__multadd>:
 800d368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d36c:	690d      	ldr	r5, [r1, #16]
 800d36e:	4607      	mov	r7, r0
 800d370:	460c      	mov	r4, r1
 800d372:	461e      	mov	r6, r3
 800d374:	f101 0c14 	add.w	ip, r1, #20
 800d378:	2000      	movs	r0, #0
 800d37a:	f8dc 3000 	ldr.w	r3, [ip]
 800d37e:	b299      	uxth	r1, r3
 800d380:	fb02 6101 	mla	r1, r2, r1, r6
 800d384:	0c1e      	lsrs	r6, r3, #16
 800d386:	0c0b      	lsrs	r3, r1, #16
 800d388:	fb02 3306 	mla	r3, r2, r6, r3
 800d38c:	b289      	uxth	r1, r1
 800d38e:	3001      	adds	r0, #1
 800d390:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d394:	4285      	cmp	r5, r0
 800d396:	f84c 1b04 	str.w	r1, [ip], #4
 800d39a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d39e:	dcec      	bgt.n	800d37a <__multadd+0x12>
 800d3a0:	b30e      	cbz	r6, 800d3e6 <__multadd+0x7e>
 800d3a2:	68a3      	ldr	r3, [r4, #8]
 800d3a4:	42ab      	cmp	r3, r5
 800d3a6:	dc19      	bgt.n	800d3dc <__multadd+0x74>
 800d3a8:	6861      	ldr	r1, [r4, #4]
 800d3aa:	4638      	mov	r0, r7
 800d3ac:	3101      	adds	r1, #1
 800d3ae:	f7ff ff79 	bl	800d2a4 <_Balloc>
 800d3b2:	4680      	mov	r8, r0
 800d3b4:	b928      	cbnz	r0, 800d3c2 <__multadd+0x5a>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	4b0c      	ldr	r3, [pc, #48]	; (800d3ec <__multadd+0x84>)
 800d3ba:	480d      	ldr	r0, [pc, #52]	; (800d3f0 <__multadd+0x88>)
 800d3bc:	21b5      	movs	r1, #181	; 0xb5
 800d3be:	f000 fc67 	bl	800dc90 <__assert_func>
 800d3c2:	6922      	ldr	r2, [r4, #16]
 800d3c4:	3202      	adds	r2, #2
 800d3c6:	f104 010c 	add.w	r1, r4, #12
 800d3ca:	0092      	lsls	r2, r2, #2
 800d3cc:	300c      	adds	r0, #12
 800d3ce:	f7fe fab9 	bl	800b944 <memcpy>
 800d3d2:	4621      	mov	r1, r4
 800d3d4:	4638      	mov	r0, r7
 800d3d6:	f7ff ffa5 	bl	800d324 <_Bfree>
 800d3da:	4644      	mov	r4, r8
 800d3dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d3e0:	3501      	adds	r5, #1
 800d3e2:	615e      	str	r6, [r3, #20]
 800d3e4:	6125      	str	r5, [r4, #16]
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ec:	0800fa0c 	.word	0x0800fa0c
 800d3f0:	0800fa1d 	.word	0x0800fa1d

0800d3f4 <__hi0bits>:
 800d3f4:	0c03      	lsrs	r3, r0, #16
 800d3f6:	041b      	lsls	r3, r3, #16
 800d3f8:	b9d3      	cbnz	r3, 800d430 <__hi0bits+0x3c>
 800d3fa:	0400      	lsls	r0, r0, #16
 800d3fc:	2310      	movs	r3, #16
 800d3fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d402:	bf04      	itt	eq
 800d404:	0200      	lsleq	r0, r0, #8
 800d406:	3308      	addeq	r3, #8
 800d408:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d40c:	bf04      	itt	eq
 800d40e:	0100      	lsleq	r0, r0, #4
 800d410:	3304      	addeq	r3, #4
 800d412:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d416:	bf04      	itt	eq
 800d418:	0080      	lsleq	r0, r0, #2
 800d41a:	3302      	addeq	r3, #2
 800d41c:	2800      	cmp	r0, #0
 800d41e:	db05      	blt.n	800d42c <__hi0bits+0x38>
 800d420:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d424:	f103 0301 	add.w	r3, r3, #1
 800d428:	bf08      	it	eq
 800d42a:	2320      	moveq	r3, #32
 800d42c:	4618      	mov	r0, r3
 800d42e:	4770      	bx	lr
 800d430:	2300      	movs	r3, #0
 800d432:	e7e4      	b.n	800d3fe <__hi0bits+0xa>

0800d434 <__lo0bits>:
 800d434:	6803      	ldr	r3, [r0, #0]
 800d436:	f013 0207 	ands.w	r2, r3, #7
 800d43a:	4601      	mov	r1, r0
 800d43c:	d00b      	beq.n	800d456 <__lo0bits+0x22>
 800d43e:	07da      	lsls	r2, r3, #31
 800d440:	d423      	bmi.n	800d48a <__lo0bits+0x56>
 800d442:	0798      	lsls	r0, r3, #30
 800d444:	bf49      	itett	mi
 800d446:	085b      	lsrmi	r3, r3, #1
 800d448:	089b      	lsrpl	r3, r3, #2
 800d44a:	2001      	movmi	r0, #1
 800d44c:	600b      	strmi	r3, [r1, #0]
 800d44e:	bf5c      	itt	pl
 800d450:	600b      	strpl	r3, [r1, #0]
 800d452:	2002      	movpl	r0, #2
 800d454:	4770      	bx	lr
 800d456:	b298      	uxth	r0, r3
 800d458:	b9a8      	cbnz	r0, 800d486 <__lo0bits+0x52>
 800d45a:	0c1b      	lsrs	r3, r3, #16
 800d45c:	2010      	movs	r0, #16
 800d45e:	b2da      	uxtb	r2, r3
 800d460:	b90a      	cbnz	r2, 800d466 <__lo0bits+0x32>
 800d462:	3008      	adds	r0, #8
 800d464:	0a1b      	lsrs	r3, r3, #8
 800d466:	071a      	lsls	r2, r3, #28
 800d468:	bf04      	itt	eq
 800d46a:	091b      	lsreq	r3, r3, #4
 800d46c:	3004      	addeq	r0, #4
 800d46e:	079a      	lsls	r2, r3, #30
 800d470:	bf04      	itt	eq
 800d472:	089b      	lsreq	r3, r3, #2
 800d474:	3002      	addeq	r0, #2
 800d476:	07da      	lsls	r2, r3, #31
 800d478:	d403      	bmi.n	800d482 <__lo0bits+0x4e>
 800d47a:	085b      	lsrs	r3, r3, #1
 800d47c:	f100 0001 	add.w	r0, r0, #1
 800d480:	d005      	beq.n	800d48e <__lo0bits+0x5a>
 800d482:	600b      	str	r3, [r1, #0]
 800d484:	4770      	bx	lr
 800d486:	4610      	mov	r0, r2
 800d488:	e7e9      	b.n	800d45e <__lo0bits+0x2a>
 800d48a:	2000      	movs	r0, #0
 800d48c:	4770      	bx	lr
 800d48e:	2020      	movs	r0, #32
 800d490:	4770      	bx	lr
	...

0800d494 <__i2b>:
 800d494:	b510      	push	{r4, lr}
 800d496:	460c      	mov	r4, r1
 800d498:	2101      	movs	r1, #1
 800d49a:	f7ff ff03 	bl	800d2a4 <_Balloc>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	b928      	cbnz	r0, 800d4ae <__i2b+0x1a>
 800d4a2:	4b05      	ldr	r3, [pc, #20]	; (800d4b8 <__i2b+0x24>)
 800d4a4:	4805      	ldr	r0, [pc, #20]	; (800d4bc <__i2b+0x28>)
 800d4a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d4aa:	f000 fbf1 	bl	800dc90 <__assert_func>
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	6144      	str	r4, [r0, #20]
 800d4b2:	6103      	str	r3, [r0, #16]
 800d4b4:	bd10      	pop	{r4, pc}
 800d4b6:	bf00      	nop
 800d4b8:	0800fa0c 	.word	0x0800fa0c
 800d4bc:	0800fa1d 	.word	0x0800fa1d

0800d4c0 <__multiply>:
 800d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c4:	4691      	mov	r9, r2
 800d4c6:	690a      	ldr	r2, [r1, #16]
 800d4c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	bfb8      	it	lt
 800d4d0:	460b      	movlt	r3, r1
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	bfbc      	itt	lt
 800d4d6:	464c      	movlt	r4, r9
 800d4d8:	4699      	movlt	r9, r3
 800d4da:	6927      	ldr	r7, [r4, #16]
 800d4dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d4e0:	68a3      	ldr	r3, [r4, #8]
 800d4e2:	6861      	ldr	r1, [r4, #4]
 800d4e4:	eb07 060a 	add.w	r6, r7, sl
 800d4e8:	42b3      	cmp	r3, r6
 800d4ea:	b085      	sub	sp, #20
 800d4ec:	bfb8      	it	lt
 800d4ee:	3101      	addlt	r1, #1
 800d4f0:	f7ff fed8 	bl	800d2a4 <_Balloc>
 800d4f4:	b930      	cbnz	r0, 800d504 <__multiply+0x44>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	4b44      	ldr	r3, [pc, #272]	; (800d60c <__multiply+0x14c>)
 800d4fa:	4845      	ldr	r0, [pc, #276]	; (800d610 <__multiply+0x150>)
 800d4fc:	f240 115d 	movw	r1, #349	; 0x15d
 800d500:	f000 fbc6 	bl	800dc90 <__assert_func>
 800d504:	f100 0514 	add.w	r5, r0, #20
 800d508:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d50c:	462b      	mov	r3, r5
 800d50e:	2200      	movs	r2, #0
 800d510:	4543      	cmp	r3, r8
 800d512:	d321      	bcc.n	800d558 <__multiply+0x98>
 800d514:	f104 0314 	add.w	r3, r4, #20
 800d518:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d51c:	f109 0314 	add.w	r3, r9, #20
 800d520:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d524:	9202      	str	r2, [sp, #8]
 800d526:	1b3a      	subs	r2, r7, r4
 800d528:	3a15      	subs	r2, #21
 800d52a:	f022 0203 	bic.w	r2, r2, #3
 800d52e:	3204      	adds	r2, #4
 800d530:	f104 0115 	add.w	r1, r4, #21
 800d534:	428f      	cmp	r7, r1
 800d536:	bf38      	it	cc
 800d538:	2204      	movcc	r2, #4
 800d53a:	9201      	str	r2, [sp, #4]
 800d53c:	9a02      	ldr	r2, [sp, #8]
 800d53e:	9303      	str	r3, [sp, #12]
 800d540:	429a      	cmp	r2, r3
 800d542:	d80c      	bhi.n	800d55e <__multiply+0x9e>
 800d544:	2e00      	cmp	r6, #0
 800d546:	dd03      	ble.n	800d550 <__multiply+0x90>
 800d548:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d05a      	beq.n	800d606 <__multiply+0x146>
 800d550:	6106      	str	r6, [r0, #16]
 800d552:	b005      	add	sp, #20
 800d554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d558:	f843 2b04 	str.w	r2, [r3], #4
 800d55c:	e7d8      	b.n	800d510 <__multiply+0x50>
 800d55e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d562:	f1ba 0f00 	cmp.w	sl, #0
 800d566:	d024      	beq.n	800d5b2 <__multiply+0xf2>
 800d568:	f104 0e14 	add.w	lr, r4, #20
 800d56c:	46a9      	mov	r9, r5
 800d56e:	f04f 0c00 	mov.w	ip, #0
 800d572:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d576:	f8d9 1000 	ldr.w	r1, [r9]
 800d57a:	fa1f fb82 	uxth.w	fp, r2
 800d57e:	b289      	uxth	r1, r1
 800d580:	fb0a 110b 	mla	r1, sl, fp, r1
 800d584:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d588:	f8d9 2000 	ldr.w	r2, [r9]
 800d58c:	4461      	add	r1, ip
 800d58e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d592:	fb0a c20b 	mla	r2, sl, fp, ip
 800d596:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d59a:	b289      	uxth	r1, r1
 800d59c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d5a0:	4577      	cmp	r7, lr
 800d5a2:	f849 1b04 	str.w	r1, [r9], #4
 800d5a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d5aa:	d8e2      	bhi.n	800d572 <__multiply+0xb2>
 800d5ac:	9a01      	ldr	r2, [sp, #4]
 800d5ae:	f845 c002 	str.w	ip, [r5, r2]
 800d5b2:	9a03      	ldr	r2, [sp, #12]
 800d5b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d5b8:	3304      	adds	r3, #4
 800d5ba:	f1b9 0f00 	cmp.w	r9, #0
 800d5be:	d020      	beq.n	800d602 <__multiply+0x142>
 800d5c0:	6829      	ldr	r1, [r5, #0]
 800d5c2:	f104 0c14 	add.w	ip, r4, #20
 800d5c6:	46ae      	mov	lr, r5
 800d5c8:	f04f 0a00 	mov.w	sl, #0
 800d5cc:	f8bc b000 	ldrh.w	fp, [ip]
 800d5d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d5d4:	fb09 220b 	mla	r2, r9, fp, r2
 800d5d8:	4492      	add	sl, r2
 800d5da:	b289      	uxth	r1, r1
 800d5dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d5e0:	f84e 1b04 	str.w	r1, [lr], #4
 800d5e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d5e8:	f8be 1000 	ldrh.w	r1, [lr]
 800d5ec:	0c12      	lsrs	r2, r2, #16
 800d5ee:	fb09 1102 	mla	r1, r9, r2, r1
 800d5f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d5f6:	4567      	cmp	r7, ip
 800d5f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d5fc:	d8e6      	bhi.n	800d5cc <__multiply+0x10c>
 800d5fe:	9a01      	ldr	r2, [sp, #4]
 800d600:	50a9      	str	r1, [r5, r2]
 800d602:	3504      	adds	r5, #4
 800d604:	e79a      	b.n	800d53c <__multiply+0x7c>
 800d606:	3e01      	subs	r6, #1
 800d608:	e79c      	b.n	800d544 <__multiply+0x84>
 800d60a:	bf00      	nop
 800d60c:	0800fa0c 	.word	0x0800fa0c
 800d610:	0800fa1d 	.word	0x0800fa1d

0800d614 <__pow5mult>:
 800d614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d618:	4615      	mov	r5, r2
 800d61a:	f012 0203 	ands.w	r2, r2, #3
 800d61e:	4606      	mov	r6, r0
 800d620:	460f      	mov	r7, r1
 800d622:	d007      	beq.n	800d634 <__pow5mult+0x20>
 800d624:	4c25      	ldr	r4, [pc, #148]	; (800d6bc <__pow5mult+0xa8>)
 800d626:	3a01      	subs	r2, #1
 800d628:	2300      	movs	r3, #0
 800d62a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d62e:	f7ff fe9b 	bl	800d368 <__multadd>
 800d632:	4607      	mov	r7, r0
 800d634:	10ad      	asrs	r5, r5, #2
 800d636:	d03d      	beq.n	800d6b4 <__pow5mult+0xa0>
 800d638:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d63a:	b97c      	cbnz	r4, 800d65c <__pow5mult+0x48>
 800d63c:	2010      	movs	r0, #16
 800d63e:	f7fe f971 	bl	800b924 <malloc>
 800d642:	4602      	mov	r2, r0
 800d644:	6270      	str	r0, [r6, #36]	; 0x24
 800d646:	b928      	cbnz	r0, 800d654 <__pow5mult+0x40>
 800d648:	4b1d      	ldr	r3, [pc, #116]	; (800d6c0 <__pow5mult+0xac>)
 800d64a:	481e      	ldr	r0, [pc, #120]	; (800d6c4 <__pow5mult+0xb0>)
 800d64c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d650:	f000 fb1e 	bl	800dc90 <__assert_func>
 800d654:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d658:	6004      	str	r4, [r0, #0]
 800d65a:	60c4      	str	r4, [r0, #12]
 800d65c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d660:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d664:	b94c      	cbnz	r4, 800d67a <__pow5mult+0x66>
 800d666:	f240 2171 	movw	r1, #625	; 0x271
 800d66a:	4630      	mov	r0, r6
 800d66c:	f7ff ff12 	bl	800d494 <__i2b>
 800d670:	2300      	movs	r3, #0
 800d672:	f8c8 0008 	str.w	r0, [r8, #8]
 800d676:	4604      	mov	r4, r0
 800d678:	6003      	str	r3, [r0, #0]
 800d67a:	f04f 0900 	mov.w	r9, #0
 800d67e:	07eb      	lsls	r3, r5, #31
 800d680:	d50a      	bpl.n	800d698 <__pow5mult+0x84>
 800d682:	4639      	mov	r1, r7
 800d684:	4622      	mov	r2, r4
 800d686:	4630      	mov	r0, r6
 800d688:	f7ff ff1a 	bl	800d4c0 <__multiply>
 800d68c:	4639      	mov	r1, r7
 800d68e:	4680      	mov	r8, r0
 800d690:	4630      	mov	r0, r6
 800d692:	f7ff fe47 	bl	800d324 <_Bfree>
 800d696:	4647      	mov	r7, r8
 800d698:	106d      	asrs	r5, r5, #1
 800d69a:	d00b      	beq.n	800d6b4 <__pow5mult+0xa0>
 800d69c:	6820      	ldr	r0, [r4, #0]
 800d69e:	b938      	cbnz	r0, 800d6b0 <__pow5mult+0x9c>
 800d6a0:	4622      	mov	r2, r4
 800d6a2:	4621      	mov	r1, r4
 800d6a4:	4630      	mov	r0, r6
 800d6a6:	f7ff ff0b 	bl	800d4c0 <__multiply>
 800d6aa:	6020      	str	r0, [r4, #0]
 800d6ac:	f8c0 9000 	str.w	r9, [r0]
 800d6b0:	4604      	mov	r4, r0
 800d6b2:	e7e4      	b.n	800d67e <__pow5mult+0x6a>
 800d6b4:	4638      	mov	r0, r7
 800d6b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6ba:	bf00      	nop
 800d6bc:	0800fb70 	.word	0x0800fb70
 800d6c0:	0800f99a 	.word	0x0800f99a
 800d6c4:	0800fa1d 	.word	0x0800fa1d

0800d6c8 <__lshift>:
 800d6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6cc:	460c      	mov	r4, r1
 800d6ce:	6849      	ldr	r1, [r1, #4]
 800d6d0:	6923      	ldr	r3, [r4, #16]
 800d6d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d6d6:	68a3      	ldr	r3, [r4, #8]
 800d6d8:	4607      	mov	r7, r0
 800d6da:	4691      	mov	r9, r2
 800d6dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d6e0:	f108 0601 	add.w	r6, r8, #1
 800d6e4:	42b3      	cmp	r3, r6
 800d6e6:	db0b      	blt.n	800d700 <__lshift+0x38>
 800d6e8:	4638      	mov	r0, r7
 800d6ea:	f7ff fddb 	bl	800d2a4 <_Balloc>
 800d6ee:	4605      	mov	r5, r0
 800d6f0:	b948      	cbnz	r0, 800d706 <__lshift+0x3e>
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	4b2a      	ldr	r3, [pc, #168]	; (800d7a0 <__lshift+0xd8>)
 800d6f6:	482b      	ldr	r0, [pc, #172]	; (800d7a4 <__lshift+0xdc>)
 800d6f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d6fc:	f000 fac8 	bl	800dc90 <__assert_func>
 800d700:	3101      	adds	r1, #1
 800d702:	005b      	lsls	r3, r3, #1
 800d704:	e7ee      	b.n	800d6e4 <__lshift+0x1c>
 800d706:	2300      	movs	r3, #0
 800d708:	f100 0114 	add.w	r1, r0, #20
 800d70c:	f100 0210 	add.w	r2, r0, #16
 800d710:	4618      	mov	r0, r3
 800d712:	4553      	cmp	r3, sl
 800d714:	db37      	blt.n	800d786 <__lshift+0xbe>
 800d716:	6920      	ldr	r0, [r4, #16]
 800d718:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d71c:	f104 0314 	add.w	r3, r4, #20
 800d720:	f019 091f 	ands.w	r9, r9, #31
 800d724:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d728:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d72c:	d02f      	beq.n	800d78e <__lshift+0xc6>
 800d72e:	f1c9 0e20 	rsb	lr, r9, #32
 800d732:	468a      	mov	sl, r1
 800d734:	f04f 0c00 	mov.w	ip, #0
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	fa02 f209 	lsl.w	r2, r2, r9
 800d73e:	ea42 020c 	orr.w	r2, r2, ip
 800d742:	f84a 2b04 	str.w	r2, [sl], #4
 800d746:	f853 2b04 	ldr.w	r2, [r3], #4
 800d74a:	4298      	cmp	r0, r3
 800d74c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d750:	d8f2      	bhi.n	800d738 <__lshift+0x70>
 800d752:	1b03      	subs	r3, r0, r4
 800d754:	3b15      	subs	r3, #21
 800d756:	f023 0303 	bic.w	r3, r3, #3
 800d75a:	3304      	adds	r3, #4
 800d75c:	f104 0215 	add.w	r2, r4, #21
 800d760:	4290      	cmp	r0, r2
 800d762:	bf38      	it	cc
 800d764:	2304      	movcc	r3, #4
 800d766:	f841 c003 	str.w	ip, [r1, r3]
 800d76a:	f1bc 0f00 	cmp.w	ip, #0
 800d76e:	d001      	beq.n	800d774 <__lshift+0xac>
 800d770:	f108 0602 	add.w	r6, r8, #2
 800d774:	3e01      	subs	r6, #1
 800d776:	4638      	mov	r0, r7
 800d778:	612e      	str	r6, [r5, #16]
 800d77a:	4621      	mov	r1, r4
 800d77c:	f7ff fdd2 	bl	800d324 <_Bfree>
 800d780:	4628      	mov	r0, r5
 800d782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d786:	f842 0f04 	str.w	r0, [r2, #4]!
 800d78a:	3301      	adds	r3, #1
 800d78c:	e7c1      	b.n	800d712 <__lshift+0x4a>
 800d78e:	3904      	subs	r1, #4
 800d790:	f853 2b04 	ldr.w	r2, [r3], #4
 800d794:	f841 2f04 	str.w	r2, [r1, #4]!
 800d798:	4298      	cmp	r0, r3
 800d79a:	d8f9      	bhi.n	800d790 <__lshift+0xc8>
 800d79c:	e7ea      	b.n	800d774 <__lshift+0xac>
 800d79e:	bf00      	nop
 800d7a0:	0800fa0c 	.word	0x0800fa0c
 800d7a4:	0800fa1d 	.word	0x0800fa1d

0800d7a8 <__mcmp>:
 800d7a8:	b530      	push	{r4, r5, lr}
 800d7aa:	6902      	ldr	r2, [r0, #16]
 800d7ac:	690c      	ldr	r4, [r1, #16]
 800d7ae:	1b12      	subs	r2, r2, r4
 800d7b0:	d10e      	bne.n	800d7d0 <__mcmp+0x28>
 800d7b2:	f100 0314 	add.w	r3, r0, #20
 800d7b6:	3114      	adds	r1, #20
 800d7b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d7bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d7c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d7c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d7c8:	42a5      	cmp	r5, r4
 800d7ca:	d003      	beq.n	800d7d4 <__mcmp+0x2c>
 800d7cc:	d305      	bcc.n	800d7da <__mcmp+0x32>
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	4610      	mov	r0, r2
 800d7d2:	bd30      	pop	{r4, r5, pc}
 800d7d4:	4283      	cmp	r3, r0
 800d7d6:	d3f3      	bcc.n	800d7c0 <__mcmp+0x18>
 800d7d8:	e7fa      	b.n	800d7d0 <__mcmp+0x28>
 800d7da:	f04f 32ff 	mov.w	r2, #4294967295
 800d7de:	e7f7      	b.n	800d7d0 <__mcmp+0x28>

0800d7e0 <__mdiff>:
 800d7e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7e4:	460c      	mov	r4, r1
 800d7e6:	4606      	mov	r6, r0
 800d7e8:	4611      	mov	r1, r2
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	4690      	mov	r8, r2
 800d7ee:	f7ff ffdb 	bl	800d7a8 <__mcmp>
 800d7f2:	1e05      	subs	r5, r0, #0
 800d7f4:	d110      	bne.n	800d818 <__mdiff+0x38>
 800d7f6:	4629      	mov	r1, r5
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	f7ff fd53 	bl	800d2a4 <_Balloc>
 800d7fe:	b930      	cbnz	r0, 800d80e <__mdiff+0x2e>
 800d800:	4b3a      	ldr	r3, [pc, #232]	; (800d8ec <__mdiff+0x10c>)
 800d802:	4602      	mov	r2, r0
 800d804:	f240 2132 	movw	r1, #562	; 0x232
 800d808:	4839      	ldr	r0, [pc, #228]	; (800d8f0 <__mdiff+0x110>)
 800d80a:	f000 fa41 	bl	800dc90 <__assert_func>
 800d80e:	2301      	movs	r3, #1
 800d810:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d814:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d818:	bfa4      	itt	ge
 800d81a:	4643      	movge	r3, r8
 800d81c:	46a0      	movge	r8, r4
 800d81e:	4630      	mov	r0, r6
 800d820:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d824:	bfa6      	itte	ge
 800d826:	461c      	movge	r4, r3
 800d828:	2500      	movge	r5, #0
 800d82a:	2501      	movlt	r5, #1
 800d82c:	f7ff fd3a 	bl	800d2a4 <_Balloc>
 800d830:	b920      	cbnz	r0, 800d83c <__mdiff+0x5c>
 800d832:	4b2e      	ldr	r3, [pc, #184]	; (800d8ec <__mdiff+0x10c>)
 800d834:	4602      	mov	r2, r0
 800d836:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d83a:	e7e5      	b.n	800d808 <__mdiff+0x28>
 800d83c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d840:	6926      	ldr	r6, [r4, #16]
 800d842:	60c5      	str	r5, [r0, #12]
 800d844:	f104 0914 	add.w	r9, r4, #20
 800d848:	f108 0514 	add.w	r5, r8, #20
 800d84c:	f100 0e14 	add.w	lr, r0, #20
 800d850:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d854:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d858:	f108 0210 	add.w	r2, r8, #16
 800d85c:	46f2      	mov	sl, lr
 800d85e:	2100      	movs	r1, #0
 800d860:	f859 3b04 	ldr.w	r3, [r9], #4
 800d864:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d868:	fa1f f883 	uxth.w	r8, r3
 800d86c:	fa11 f18b 	uxtah	r1, r1, fp
 800d870:	0c1b      	lsrs	r3, r3, #16
 800d872:	eba1 0808 	sub.w	r8, r1, r8
 800d876:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d87a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d87e:	fa1f f888 	uxth.w	r8, r8
 800d882:	1419      	asrs	r1, r3, #16
 800d884:	454e      	cmp	r6, r9
 800d886:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d88a:	f84a 3b04 	str.w	r3, [sl], #4
 800d88e:	d8e7      	bhi.n	800d860 <__mdiff+0x80>
 800d890:	1b33      	subs	r3, r6, r4
 800d892:	3b15      	subs	r3, #21
 800d894:	f023 0303 	bic.w	r3, r3, #3
 800d898:	3304      	adds	r3, #4
 800d89a:	3415      	adds	r4, #21
 800d89c:	42a6      	cmp	r6, r4
 800d89e:	bf38      	it	cc
 800d8a0:	2304      	movcc	r3, #4
 800d8a2:	441d      	add	r5, r3
 800d8a4:	4473      	add	r3, lr
 800d8a6:	469e      	mov	lr, r3
 800d8a8:	462e      	mov	r6, r5
 800d8aa:	4566      	cmp	r6, ip
 800d8ac:	d30e      	bcc.n	800d8cc <__mdiff+0xec>
 800d8ae:	f10c 0203 	add.w	r2, ip, #3
 800d8b2:	1b52      	subs	r2, r2, r5
 800d8b4:	f022 0203 	bic.w	r2, r2, #3
 800d8b8:	3d03      	subs	r5, #3
 800d8ba:	45ac      	cmp	ip, r5
 800d8bc:	bf38      	it	cc
 800d8be:	2200      	movcc	r2, #0
 800d8c0:	441a      	add	r2, r3
 800d8c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d8c6:	b17b      	cbz	r3, 800d8e8 <__mdiff+0x108>
 800d8c8:	6107      	str	r7, [r0, #16]
 800d8ca:	e7a3      	b.n	800d814 <__mdiff+0x34>
 800d8cc:	f856 8b04 	ldr.w	r8, [r6], #4
 800d8d0:	fa11 f288 	uxtah	r2, r1, r8
 800d8d4:	1414      	asrs	r4, r2, #16
 800d8d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d8da:	b292      	uxth	r2, r2
 800d8dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d8e0:	f84e 2b04 	str.w	r2, [lr], #4
 800d8e4:	1421      	asrs	r1, r4, #16
 800d8e6:	e7e0      	b.n	800d8aa <__mdiff+0xca>
 800d8e8:	3f01      	subs	r7, #1
 800d8ea:	e7ea      	b.n	800d8c2 <__mdiff+0xe2>
 800d8ec:	0800fa0c 	.word	0x0800fa0c
 800d8f0:	0800fa1d 	.word	0x0800fa1d

0800d8f4 <__d2b>:
 800d8f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8f8:	4689      	mov	r9, r1
 800d8fa:	2101      	movs	r1, #1
 800d8fc:	ec57 6b10 	vmov	r6, r7, d0
 800d900:	4690      	mov	r8, r2
 800d902:	f7ff fccf 	bl	800d2a4 <_Balloc>
 800d906:	4604      	mov	r4, r0
 800d908:	b930      	cbnz	r0, 800d918 <__d2b+0x24>
 800d90a:	4602      	mov	r2, r0
 800d90c:	4b25      	ldr	r3, [pc, #148]	; (800d9a4 <__d2b+0xb0>)
 800d90e:	4826      	ldr	r0, [pc, #152]	; (800d9a8 <__d2b+0xb4>)
 800d910:	f240 310a 	movw	r1, #778	; 0x30a
 800d914:	f000 f9bc 	bl	800dc90 <__assert_func>
 800d918:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d91c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d920:	bb35      	cbnz	r5, 800d970 <__d2b+0x7c>
 800d922:	2e00      	cmp	r6, #0
 800d924:	9301      	str	r3, [sp, #4]
 800d926:	d028      	beq.n	800d97a <__d2b+0x86>
 800d928:	4668      	mov	r0, sp
 800d92a:	9600      	str	r6, [sp, #0]
 800d92c:	f7ff fd82 	bl	800d434 <__lo0bits>
 800d930:	9900      	ldr	r1, [sp, #0]
 800d932:	b300      	cbz	r0, 800d976 <__d2b+0x82>
 800d934:	9a01      	ldr	r2, [sp, #4]
 800d936:	f1c0 0320 	rsb	r3, r0, #32
 800d93a:	fa02 f303 	lsl.w	r3, r2, r3
 800d93e:	430b      	orrs	r3, r1
 800d940:	40c2      	lsrs	r2, r0
 800d942:	6163      	str	r3, [r4, #20]
 800d944:	9201      	str	r2, [sp, #4]
 800d946:	9b01      	ldr	r3, [sp, #4]
 800d948:	61a3      	str	r3, [r4, #24]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	bf14      	ite	ne
 800d94e:	2202      	movne	r2, #2
 800d950:	2201      	moveq	r2, #1
 800d952:	6122      	str	r2, [r4, #16]
 800d954:	b1d5      	cbz	r5, 800d98c <__d2b+0x98>
 800d956:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d95a:	4405      	add	r5, r0
 800d95c:	f8c9 5000 	str.w	r5, [r9]
 800d960:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d964:	f8c8 0000 	str.w	r0, [r8]
 800d968:	4620      	mov	r0, r4
 800d96a:	b003      	add	sp, #12
 800d96c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d970:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d974:	e7d5      	b.n	800d922 <__d2b+0x2e>
 800d976:	6161      	str	r1, [r4, #20]
 800d978:	e7e5      	b.n	800d946 <__d2b+0x52>
 800d97a:	a801      	add	r0, sp, #4
 800d97c:	f7ff fd5a 	bl	800d434 <__lo0bits>
 800d980:	9b01      	ldr	r3, [sp, #4]
 800d982:	6163      	str	r3, [r4, #20]
 800d984:	2201      	movs	r2, #1
 800d986:	6122      	str	r2, [r4, #16]
 800d988:	3020      	adds	r0, #32
 800d98a:	e7e3      	b.n	800d954 <__d2b+0x60>
 800d98c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d990:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d994:	f8c9 0000 	str.w	r0, [r9]
 800d998:	6918      	ldr	r0, [r3, #16]
 800d99a:	f7ff fd2b 	bl	800d3f4 <__hi0bits>
 800d99e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d9a2:	e7df      	b.n	800d964 <__d2b+0x70>
 800d9a4:	0800fa0c 	.word	0x0800fa0c
 800d9a8:	0800fa1d 	.word	0x0800fa1d

0800d9ac <_calloc_r>:
 800d9ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9ae:	fba1 2402 	umull	r2, r4, r1, r2
 800d9b2:	b94c      	cbnz	r4, 800d9c8 <_calloc_r+0x1c>
 800d9b4:	4611      	mov	r1, r2
 800d9b6:	9201      	str	r2, [sp, #4]
 800d9b8:	f7fe f846 	bl	800ba48 <_malloc_r>
 800d9bc:	9a01      	ldr	r2, [sp, #4]
 800d9be:	4605      	mov	r5, r0
 800d9c0:	b930      	cbnz	r0, 800d9d0 <_calloc_r+0x24>
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	b003      	add	sp, #12
 800d9c6:	bd30      	pop	{r4, r5, pc}
 800d9c8:	220c      	movs	r2, #12
 800d9ca:	6002      	str	r2, [r0, #0]
 800d9cc:	2500      	movs	r5, #0
 800d9ce:	e7f8      	b.n	800d9c2 <_calloc_r+0x16>
 800d9d0:	4621      	mov	r1, r4
 800d9d2:	f7fd ffc5 	bl	800b960 <memset>
 800d9d6:	e7f4      	b.n	800d9c2 <_calloc_r+0x16>

0800d9d8 <__ssputs_r>:
 800d9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9dc:	688e      	ldr	r6, [r1, #8]
 800d9de:	429e      	cmp	r6, r3
 800d9e0:	4682      	mov	sl, r0
 800d9e2:	460c      	mov	r4, r1
 800d9e4:	4690      	mov	r8, r2
 800d9e6:	461f      	mov	r7, r3
 800d9e8:	d838      	bhi.n	800da5c <__ssputs_r+0x84>
 800d9ea:	898a      	ldrh	r2, [r1, #12]
 800d9ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d9f0:	d032      	beq.n	800da58 <__ssputs_r+0x80>
 800d9f2:	6825      	ldr	r5, [r4, #0]
 800d9f4:	6909      	ldr	r1, [r1, #16]
 800d9f6:	eba5 0901 	sub.w	r9, r5, r1
 800d9fa:	6965      	ldr	r5, [r4, #20]
 800d9fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da04:	3301      	adds	r3, #1
 800da06:	444b      	add	r3, r9
 800da08:	106d      	asrs	r5, r5, #1
 800da0a:	429d      	cmp	r5, r3
 800da0c:	bf38      	it	cc
 800da0e:	461d      	movcc	r5, r3
 800da10:	0553      	lsls	r3, r2, #21
 800da12:	d531      	bpl.n	800da78 <__ssputs_r+0xa0>
 800da14:	4629      	mov	r1, r5
 800da16:	f7fe f817 	bl	800ba48 <_malloc_r>
 800da1a:	4606      	mov	r6, r0
 800da1c:	b950      	cbnz	r0, 800da34 <__ssputs_r+0x5c>
 800da1e:	230c      	movs	r3, #12
 800da20:	f8ca 3000 	str.w	r3, [sl]
 800da24:	89a3      	ldrh	r3, [r4, #12]
 800da26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da2a:	81a3      	strh	r3, [r4, #12]
 800da2c:	f04f 30ff 	mov.w	r0, #4294967295
 800da30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da34:	6921      	ldr	r1, [r4, #16]
 800da36:	464a      	mov	r2, r9
 800da38:	f7fd ff84 	bl	800b944 <memcpy>
 800da3c:	89a3      	ldrh	r3, [r4, #12]
 800da3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da46:	81a3      	strh	r3, [r4, #12]
 800da48:	6126      	str	r6, [r4, #16]
 800da4a:	6165      	str	r5, [r4, #20]
 800da4c:	444e      	add	r6, r9
 800da4e:	eba5 0509 	sub.w	r5, r5, r9
 800da52:	6026      	str	r6, [r4, #0]
 800da54:	60a5      	str	r5, [r4, #8]
 800da56:	463e      	mov	r6, r7
 800da58:	42be      	cmp	r6, r7
 800da5a:	d900      	bls.n	800da5e <__ssputs_r+0x86>
 800da5c:	463e      	mov	r6, r7
 800da5e:	6820      	ldr	r0, [r4, #0]
 800da60:	4632      	mov	r2, r6
 800da62:	4641      	mov	r1, r8
 800da64:	f000 f959 	bl	800dd1a <memmove>
 800da68:	68a3      	ldr	r3, [r4, #8]
 800da6a:	1b9b      	subs	r3, r3, r6
 800da6c:	60a3      	str	r3, [r4, #8]
 800da6e:	6823      	ldr	r3, [r4, #0]
 800da70:	4433      	add	r3, r6
 800da72:	6023      	str	r3, [r4, #0]
 800da74:	2000      	movs	r0, #0
 800da76:	e7db      	b.n	800da30 <__ssputs_r+0x58>
 800da78:	462a      	mov	r2, r5
 800da7a:	f000 f968 	bl	800dd4e <_realloc_r>
 800da7e:	4606      	mov	r6, r0
 800da80:	2800      	cmp	r0, #0
 800da82:	d1e1      	bne.n	800da48 <__ssputs_r+0x70>
 800da84:	6921      	ldr	r1, [r4, #16]
 800da86:	4650      	mov	r0, sl
 800da88:	f7fd ff72 	bl	800b970 <_free_r>
 800da8c:	e7c7      	b.n	800da1e <__ssputs_r+0x46>
	...

0800da90 <_svfiprintf_r>:
 800da90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da94:	4698      	mov	r8, r3
 800da96:	898b      	ldrh	r3, [r1, #12]
 800da98:	061b      	lsls	r3, r3, #24
 800da9a:	b09d      	sub	sp, #116	; 0x74
 800da9c:	4607      	mov	r7, r0
 800da9e:	460d      	mov	r5, r1
 800daa0:	4614      	mov	r4, r2
 800daa2:	d50e      	bpl.n	800dac2 <_svfiprintf_r+0x32>
 800daa4:	690b      	ldr	r3, [r1, #16]
 800daa6:	b963      	cbnz	r3, 800dac2 <_svfiprintf_r+0x32>
 800daa8:	2140      	movs	r1, #64	; 0x40
 800daaa:	f7fd ffcd 	bl	800ba48 <_malloc_r>
 800daae:	6028      	str	r0, [r5, #0]
 800dab0:	6128      	str	r0, [r5, #16]
 800dab2:	b920      	cbnz	r0, 800dabe <_svfiprintf_r+0x2e>
 800dab4:	230c      	movs	r3, #12
 800dab6:	603b      	str	r3, [r7, #0]
 800dab8:	f04f 30ff 	mov.w	r0, #4294967295
 800dabc:	e0d1      	b.n	800dc62 <_svfiprintf_r+0x1d2>
 800dabe:	2340      	movs	r3, #64	; 0x40
 800dac0:	616b      	str	r3, [r5, #20]
 800dac2:	2300      	movs	r3, #0
 800dac4:	9309      	str	r3, [sp, #36]	; 0x24
 800dac6:	2320      	movs	r3, #32
 800dac8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dacc:	f8cd 800c 	str.w	r8, [sp, #12]
 800dad0:	2330      	movs	r3, #48	; 0x30
 800dad2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dc7c <_svfiprintf_r+0x1ec>
 800dad6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dada:	f04f 0901 	mov.w	r9, #1
 800dade:	4623      	mov	r3, r4
 800dae0:	469a      	mov	sl, r3
 800dae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dae6:	b10a      	cbz	r2, 800daec <_svfiprintf_r+0x5c>
 800dae8:	2a25      	cmp	r2, #37	; 0x25
 800daea:	d1f9      	bne.n	800dae0 <_svfiprintf_r+0x50>
 800daec:	ebba 0b04 	subs.w	fp, sl, r4
 800daf0:	d00b      	beq.n	800db0a <_svfiprintf_r+0x7a>
 800daf2:	465b      	mov	r3, fp
 800daf4:	4622      	mov	r2, r4
 800daf6:	4629      	mov	r1, r5
 800daf8:	4638      	mov	r0, r7
 800dafa:	f7ff ff6d 	bl	800d9d8 <__ssputs_r>
 800dafe:	3001      	adds	r0, #1
 800db00:	f000 80aa 	beq.w	800dc58 <_svfiprintf_r+0x1c8>
 800db04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db06:	445a      	add	r2, fp
 800db08:	9209      	str	r2, [sp, #36]	; 0x24
 800db0a:	f89a 3000 	ldrb.w	r3, [sl]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	f000 80a2 	beq.w	800dc58 <_svfiprintf_r+0x1c8>
 800db14:	2300      	movs	r3, #0
 800db16:	f04f 32ff 	mov.w	r2, #4294967295
 800db1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db1e:	f10a 0a01 	add.w	sl, sl, #1
 800db22:	9304      	str	r3, [sp, #16]
 800db24:	9307      	str	r3, [sp, #28]
 800db26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db2a:	931a      	str	r3, [sp, #104]	; 0x68
 800db2c:	4654      	mov	r4, sl
 800db2e:	2205      	movs	r2, #5
 800db30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db34:	4851      	ldr	r0, [pc, #324]	; (800dc7c <_svfiprintf_r+0x1ec>)
 800db36:	f7f2 fb5b 	bl	80001f0 <memchr>
 800db3a:	9a04      	ldr	r2, [sp, #16]
 800db3c:	b9d8      	cbnz	r0, 800db76 <_svfiprintf_r+0xe6>
 800db3e:	06d0      	lsls	r0, r2, #27
 800db40:	bf44      	itt	mi
 800db42:	2320      	movmi	r3, #32
 800db44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db48:	0711      	lsls	r1, r2, #28
 800db4a:	bf44      	itt	mi
 800db4c:	232b      	movmi	r3, #43	; 0x2b
 800db4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db52:	f89a 3000 	ldrb.w	r3, [sl]
 800db56:	2b2a      	cmp	r3, #42	; 0x2a
 800db58:	d015      	beq.n	800db86 <_svfiprintf_r+0xf6>
 800db5a:	9a07      	ldr	r2, [sp, #28]
 800db5c:	4654      	mov	r4, sl
 800db5e:	2000      	movs	r0, #0
 800db60:	f04f 0c0a 	mov.w	ip, #10
 800db64:	4621      	mov	r1, r4
 800db66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db6a:	3b30      	subs	r3, #48	; 0x30
 800db6c:	2b09      	cmp	r3, #9
 800db6e:	d94e      	bls.n	800dc0e <_svfiprintf_r+0x17e>
 800db70:	b1b0      	cbz	r0, 800dba0 <_svfiprintf_r+0x110>
 800db72:	9207      	str	r2, [sp, #28]
 800db74:	e014      	b.n	800dba0 <_svfiprintf_r+0x110>
 800db76:	eba0 0308 	sub.w	r3, r0, r8
 800db7a:	fa09 f303 	lsl.w	r3, r9, r3
 800db7e:	4313      	orrs	r3, r2
 800db80:	9304      	str	r3, [sp, #16]
 800db82:	46a2      	mov	sl, r4
 800db84:	e7d2      	b.n	800db2c <_svfiprintf_r+0x9c>
 800db86:	9b03      	ldr	r3, [sp, #12]
 800db88:	1d19      	adds	r1, r3, #4
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	9103      	str	r1, [sp, #12]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	bfbb      	ittet	lt
 800db92:	425b      	neglt	r3, r3
 800db94:	f042 0202 	orrlt.w	r2, r2, #2
 800db98:	9307      	strge	r3, [sp, #28]
 800db9a:	9307      	strlt	r3, [sp, #28]
 800db9c:	bfb8      	it	lt
 800db9e:	9204      	strlt	r2, [sp, #16]
 800dba0:	7823      	ldrb	r3, [r4, #0]
 800dba2:	2b2e      	cmp	r3, #46	; 0x2e
 800dba4:	d10c      	bne.n	800dbc0 <_svfiprintf_r+0x130>
 800dba6:	7863      	ldrb	r3, [r4, #1]
 800dba8:	2b2a      	cmp	r3, #42	; 0x2a
 800dbaa:	d135      	bne.n	800dc18 <_svfiprintf_r+0x188>
 800dbac:	9b03      	ldr	r3, [sp, #12]
 800dbae:	1d1a      	adds	r2, r3, #4
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	9203      	str	r2, [sp, #12]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	bfb8      	it	lt
 800dbb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbbc:	3402      	adds	r4, #2
 800dbbe:	9305      	str	r3, [sp, #20]
 800dbc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dc8c <_svfiprintf_r+0x1fc>
 800dbc4:	7821      	ldrb	r1, [r4, #0]
 800dbc6:	2203      	movs	r2, #3
 800dbc8:	4650      	mov	r0, sl
 800dbca:	f7f2 fb11 	bl	80001f0 <memchr>
 800dbce:	b140      	cbz	r0, 800dbe2 <_svfiprintf_r+0x152>
 800dbd0:	2340      	movs	r3, #64	; 0x40
 800dbd2:	eba0 000a 	sub.w	r0, r0, sl
 800dbd6:	fa03 f000 	lsl.w	r0, r3, r0
 800dbda:	9b04      	ldr	r3, [sp, #16]
 800dbdc:	4303      	orrs	r3, r0
 800dbde:	3401      	adds	r4, #1
 800dbe0:	9304      	str	r3, [sp, #16]
 800dbe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbe6:	4826      	ldr	r0, [pc, #152]	; (800dc80 <_svfiprintf_r+0x1f0>)
 800dbe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbec:	2206      	movs	r2, #6
 800dbee:	f7f2 faff 	bl	80001f0 <memchr>
 800dbf2:	2800      	cmp	r0, #0
 800dbf4:	d038      	beq.n	800dc68 <_svfiprintf_r+0x1d8>
 800dbf6:	4b23      	ldr	r3, [pc, #140]	; (800dc84 <_svfiprintf_r+0x1f4>)
 800dbf8:	bb1b      	cbnz	r3, 800dc42 <_svfiprintf_r+0x1b2>
 800dbfa:	9b03      	ldr	r3, [sp, #12]
 800dbfc:	3307      	adds	r3, #7
 800dbfe:	f023 0307 	bic.w	r3, r3, #7
 800dc02:	3308      	adds	r3, #8
 800dc04:	9303      	str	r3, [sp, #12]
 800dc06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc08:	4433      	add	r3, r6
 800dc0a:	9309      	str	r3, [sp, #36]	; 0x24
 800dc0c:	e767      	b.n	800dade <_svfiprintf_r+0x4e>
 800dc0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc12:	460c      	mov	r4, r1
 800dc14:	2001      	movs	r0, #1
 800dc16:	e7a5      	b.n	800db64 <_svfiprintf_r+0xd4>
 800dc18:	2300      	movs	r3, #0
 800dc1a:	3401      	adds	r4, #1
 800dc1c:	9305      	str	r3, [sp, #20]
 800dc1e:	4619      	mov	r1, r3
 800dc20:	f04f 0c0a 	mov.w	ip, #10
 800dc24:	4620      	mov	r0, r4
 800dc26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc2a:	3a30      	subs	r2, #48	; 0x30
 800dc2c:	2a09      	cmp	r2, #9
 800dc2e:	d903      	bls.n	800dc38 <_svfiprintf_r+0x1a8>
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d0c5      	beq.n	800dbc0 <_svfiprintf_r+0x130>
 800dc34:	9105      	str	r1, [sp, #20]
 800dc36:	e7c3      	b.n	800dbc0 <_svfiprintf_r+0x130>
 800dc38:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc3c:	4604      	mov	r4, r0
 800dc3e:	2301      	movs	r3, #1
 800dc40:	e7f0      	b.n	800dc24 <_svfiprintf_r+0x194>
 800dc42:	ab03      	add	r3, sp, #12
 800dc44:	9300      	str	r3, [sp, #0]
 800dc46:	462a      	mov	r2, r5
 800dc48:	4b0f      	ldr	r3, [pc, #60]	; (800dc88 <_svfiprintf_r+0x1f8>)
 800dc4a:	a904      	add	r1, sp, #16
 800dc4c:	4638      	mov	r0, r7
 800dc4e:	f7fe f80f 	bl	800bc70 <_printf_float>
 800dc52:	1c42      	adds	r2, r0, #1
 800dc54:	4606      	mov	r6, r0
 800dc56:	d1d6      	bne.n	800dc06 <_svfiprintf_r+0x176>
 800dc58:	89ab      	ldrh	r3, [r5, #12]
 800dc5a:	065b      	lsls	r3, r3, #25
 800dc5c:	f53f af2c 	bmi.w	800dab8 <_svfiprintf_r+0x28>
 800dc60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc62:	b01d      	add	sp, #116	; 0x74
 800dc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc68:	ab03      	add	r3, sp, #12
 800dc6a:	9300      	str	r3, [sp, #0]
 800dc6c:	462a      	mov	r2, r5
 800dc6e:	4b06      	ldr	r3, [pc, #24]	; (800dc88 <_svfiprintf_r+0x1f8>)
 800dc70:	a904      	add	r1, sp, #16
 800dc72:	4638      	mov	r0, r7
 800dc74:	f7fe faa0 	bl	800c1b8 <_printf_i>
 800dc78:	e7eb      	b.n	800dc52 <_svfiprintf_r+0x1c2>
 800dc7a:	bf00      	nop
 800dc7c:	0800fb7c 	.word	0x0800fb7c
 800dc80:	0800fb86 	.word	0x0800fb86
 800dc84:	0800bc71 	.word	0x0800bc71
 800dc88:	0800d9d9 	.word	0x0800d9d9
 800dc8c:	0800fb82 	.word	0x0800fb82

0800dc90 <__assert_func>:
 800dc90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc92:	4614      	mov	r4, r2
 800dc94:	461a      	mov	r2, r3
 800dc96:	4b09      	ldr	r3, [pc, #36]	; (800dcbc <__assert_func+0x2c>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4605      	mov	r5, r0
 800dc9c:	68d8      	ldr	r0, [r3, #12]
 800dc9e:	b14c      	cbz	r4, 800dcb4 <__assert_func+0x24>
 800dca0:	4b07      	ldr	r3, [pc, #28]	; (800dcc0 <__assert_func+0x30>)
 800dca2:	9100      	str	r1, [sp, #0]
 800dca4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dca8:	4906      	ldr	r1, [pc, #24]	; (800dcc4 <__assert_func+0x34>)
 800dcaa:	462b      	mov	r3, r5
 800dcac:	f000 f80e 	bl	800dccc <fiprintf>
 800dcb0:	f000 faa4 	bl	800e1fc <abort>
 800dcb4:	4b04      	ldr	r3, [pc, #16]	; (800dcc8 <__assert_func+0x38>)
 800dcb6:	461c      	mov	r4, r3
 800dcb8:	e7f3      	b.n	800dca2 <__assert_func+0x12>
 800dcba:	bf00      	nop
 800dcbc:	200000c0 	.word	0x200000c0
 800dcc0:	0800fb8d 	.word	0x0800fb8d
 800dcc4:	0800fb9a 	.word	0x0800fb9a
 800dcc8:	0800fbc8 	.word	0x0800fbc8

0800dccc <fiprintf>:
 800dccc:	b40e      	push	{r1, r2, r3}
 800dcce:	b503      	push	{r0, r1, lr}
 800dcd0:	4601      	mov	r1, r0
 800dcd2:	ab03      	add	r3, sp, #12
 800dcd4:	4805      	ldr	r0, [pc, #20]	; (800dcec <fiprintf+0x20>)
 800dcd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcda:	6800      	ldr	r0, [r0, #0]
 800dcdc:	9301      	str	r3, [sp, #4]
 800dcde:	f000 f88f 	bl	800de00 <_vfiprintf_r>
 800dce2:	b002      	add	sp, #8
 800dce4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dce8:	b003      	add	sp, #12
 800dcea:	4770      	bx	lr
 800dcec:	200000c0 	.word	0x200000c0

0800dcf0 <__retarget_lock_init_recursive>:
 800dcf0:	4770      	bx	lr

0800dcf2 <__retarget_lock_acquire_recursive>:
 800dcf2:	4770      	bx	lr

0800dcf4 <__retarget_lock_release_recursive>:
 800dcf4:	4770      	bx	lr

0800dcf6 <__ascii_mbtowc>:
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	b901      	cbnz	r1, 800dcfc <__ascii_mbtowc+0x6>
 800dcfa:	a901      	add	r1, sp, #4
 800dcfc:	b142      	cbz	r2, 800dd10 <__ascii_mbtowc+0x1a>
 800dcfe:	b14b      	cbz	r3, 800dd14 <__ascii_mbtowc+0x1e>
 800dd00:	7813      	ldrb	r3, [r2, #0]
 800dd02:	600b      	str	r3, [r1, #0]
 800dd04:	7812      	ldrb	r2, [r2, #0]
 800dd06:	1e10      	subs	r0, r2, #0
 800dd08:	bf18      	it	ne
 800dd0a:	2001      	movne	r0, #1
 800dd0c:	b002      	add	sp, #8
 800dd0e:	4770      	bx	lr
 800dd10:	4610      	mov	r0, r2
 800dd12:	e7fb      	b.n	800dd0c <__ascii_mbtowc+0x16>
 800dd14:	f06f 0001 	mvn.w	r0, #1
 800dd18:	e7f8      	b.n	800dd0c <__ascii_mbtowc+0x16>

0800dd1a <memmove>:
 800dd1a:	4288      	cmp	r0, r1
 800dd1c:	b510      	push	{r4, lr}
 800dd1e:	eb01 0402 	add.w	r4, r1, r2
 800dd22:	d902      	bls.n	800dd2a <memmove+0x10>
 800dd24:	4284      	cmp	r4, r0
 800dd26:	4623      	mov	r3, r4
 800dd28:	d807      	bhi.n	800dd3a <memmove+0x20>
 800dd2a:	1e43      	subs	r3, r0, #1
 800dd2c:	42a1      	cmp	r1, r4
 800dd2e:	d008      	beq.n	800dd42 <memmove+0x28>
 800dd30:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd34:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd38:	e7f8      	b.n	800dd2c <memmove+0x12>
 800dd3a:	4402      	add	r2, r0
 800dd3c:	4601      	mov	r1, r0
 800dd3e:	428a      	cmp	r2, r1
 800dd40:	d100      	bne.n	800dd44 <memmove+0x2a>
 800dd42:	bd10      	pop	{r4, pc}
 800dd44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd48:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd4c:	e7f7      	b.n	800dd3e <memmove+0x24>

0800dd4e <_realloc_r>:
 800dd4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd52:	4680      	mov	r8, r0
 800dd54:	4614      	mov	r4, r2
 800dd56:	460e      	mov	r6, r1
 800dd58:	b921      	cbnz	r1, 800dd64 <_realloc_r+0x16>
 800dd5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd5e:	4611      	mov	r1, r2
 800dd60:	f7fd be72 	b.w	800ba48 <_malloc_r>
 800dd64:	b92a      	cbnz	r2, 800dd72 <_realloc_r+0x24>
 800dd66:	f7fd fe03 	bl	800b970 <_free_r>
 800dd6a:	4625      	mov	r5, r4
 800dd6c:	4628      	mov	r0, r5
 800dd6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd72:	f000 fc67 	bl	800e644 <_malloc_usable_size_r>
 800dd76:	4284      	cmp	r4, r0
 800dd78:	4607      	mov	r7, r0
 800dd7a:	d802      	bhi.n	800dd82 <_realloc_r+0x34>
 800dd7c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dd80:	d812      	bhi.n	800dda8 <_realloc_r+0x5a>
 800dd82:	4621      	mov	r1, r4
 800dd84:	4640      	mov	r0, r8
 800dd86:	f7fd fe5f 	bl	800ba48 <_malloc_r>
 800dd8a:	4605      	mov	r5, r0
 800dd8c:	2800      	cmp	r0, #0
 800dd8e:	d0ed      	beq.n	800dd6c <_realloc_r+0x1e>
 800dd90:	42bc      	cmp	r4, r7
 800dd92:	4622      	mov	r2, r4
 800dd94:	4631      	mov	r1, r6
 800dd96:	bf28      	it	cs
 800dd98:	463a      	movcs	r2, r7
 800dd9a:	f7fd fdd3 	bl	800b944 <memcpy>
 800dd9e:	4631      	mov	r1, r6
 800dda0:	4640      	mov	r0, r8
 800dda2:	f7fd fde5 	bl	800b970 <_free_r>
 800dda6:	e7e1      	b.n	800dd6c <_realloc_r+0x1e>
 800dda8:	4635      	mov	r5, r6
 800ddaa:	e7df      	b.n	800dd6c <_realloc_r+0x1e>

0800ddac <__sfputc_r>:
 800ddac:	6893      	ldr	r3, [r2, #8]
 800ddae:	3b01      	subs	r3, #1
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	b410      	push	{r4}
 800ddb4:	6093      	str	r3, [r2, #8]
 800ddb6:	da08      	bge.n	800ddca <__sfputc_r+0x1e>
 800ddb8:	6994      	ldr	r4, [r2, #24]
 800ddba:	42a3      	cmp	r3, r4
 800ddbc:	db01      	blt.n	800ddc2 <__sfputc_r+0x16>
 800ddbe:	290a      	cmp	r1, #10
 800ddc0:	d103      	bne.n	800ddca <__sfputc_r+0x1e>
 800ddc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddc6:	f000 b94b 	b.w	800e060 <__swbuf_r>
 800ddca:	6813      	ldr	r3, [r2, #0]
 800ddcc:	1c58      	adds	r0, r3, #1
 800ddce:	6010      	str	r0, [r2, #0]
 800ddd0:	7019      	strb	r1, [r3, #0]
 800ddd2:	4608      	mov	r0, r1
 800ddd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddd8:	4770      	bx	lr

0800ddda <__sfputs_r>:
 800ddda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dddc:	4606      	mov	r6, r0
 800ddde:	460f      	mov	r7, r1
 800dde0:	4614      	mov	r4, r2
 800dde2:	18d5      	adds	r5, r2, r3
 800dde4:	42ac      	cmp	r4, r5
 800dde6:	d101      	bne.n	800ddec <__sfputs_r+0x12>
 800dde8:	2000      	movs	r0, #0
 800ddea:	e007      	b.n	800ddfc <__sfputs_r+0x22>
 800ddec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddf0:	463a      	mov	r2, r7
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	f7ff ffda 	bl	800ddac <__sfputc_r>
 800ddf8:	1c43      	adds	r3, r0, #1
 800ddfa:	d1f3      	bne.n	800dde4 <__sfputs_r+0xa>
 800ddfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de00 <_vfiprintf_r>:
 800de00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de04:	460d      	mov	r5, r1
 800de06:	b09d      	sub	sp, #116	; 0x74
 800de08:	4614      	mov	r4, r2
 800de0a:	4698      	mov	r8, r3
 800de0c:	4606      	mov	r6, r0
 800de0e:	b118      	cbz	r0, 800de18 <_vfiprintf_r+0x18>
 800de10:	6983      	ldr	r3, [r0, #24]
 800de12:	b90b      	cbnz	r3, 800de18 <_vfiprintf_r+0x18>
 800de14:	f000 fb14 	bl	800e440 <__sinit>
 800de18:	4b89      	ldr	r3, [pc, #548]	; (800e040 <_vfiprintf_r+0x240>)
 800de1a:	429d      	cmp	r5, r3
 800de1c:	d11b      	bne.n	800de56 <_vfiprintf_r+0x56>
 800de1e:	6875      	ldr	r5, [r6, #4]
 800de20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de22:	07d9      	lsls	r1, r3, #31
 800de24:	d405      	bmi.n	800de32 <_vfiprintf_r+0x32>
 800de26:	89ab      	ldrh	r3, [r5, #12]
 800de28:	059a      	lsls	r2, r3, #22
 800de2a:	d402      	bmi.n	800de32 <_vfiprintf_r+0x32>
 800de2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de2e:	f7ff ff60 	bl	800dcf2 <__retarget_lock_acquire_recursive>
 800de32:	89ab      	ldrh	r3, [r5, #12]
 800de34:	071b      	lsls	r3, r3, #28
 800de36:	d501      	bpl.n	800de3c <_vfiprintf_r+0x3c>
 800de38:	692b      	ldr	r3, [r5, #16]
 800de3a:	b9eb      	cbnz	r3, 800de78 <_vfiprintf_r+0x78>
 800de3c:	4629      	mov	r1, r5
 800de3e:	4630      	mov	r0, r6
 800de40:	f000 f96e 	bl	800e120 <__swsetup_r>
 800de44:	b1c0      	cbz	r0, 800de78 <_vfiprintf_r+0x78>
 800de46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de48:	07dc      	lsls	r4, r3, #31
 800de4a:	d50e      	bpl.n	800de6a <_vfiprintf_r+0x6a>
 800de4c:	f04f 30ff 	mov.w	r0, #4294967295
 800de50:	b01d      	add	sp, #116	; 0x74
 800de52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de56:	4b7b      	ldr	r3, [pc, #492]	; (800e044 <_vfiprintf_r+0x244>)
 800de58:	429d      	cmp	r5, r3
 800de5a:	d101      	bne.n	800de60 <_vfiprintf_r+0x60>
 800de5c:	68b5      	ldr	r5, [r6, #8]
 800de5e:	e7df      	b.n	800de20 <_vfiprintf_r+0x20>
 800de60:	4b79      	ldr	r3, [pc, #484]	; (800e048 <_vfiprintf_r+0x248>)
 800de62:	429d      	cmp	r5, r3
 800de64:	bf08      	it	eq
 800de66:	68f5      	ldreq	r5, [r6, #12]
 800de68:	e7da      	b.n	800de20 <_vfiprintf_r+0x20>
 800de6a:	89ab      	ldrh	r3, [r5, #12]
 800de6c:	0598      	lsls	r0, r3, #22
 800de6e:	d4ed      	bmi.n	800de4c <_vfiprintf_r+0x4c>
 800de70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de72:	f7ff ff3f 	bl	800dcf4 <__retarget_lock_release_recursive>
 800de76:	e7e9      	b.n	800de4c <_vfiprintf_r+0x4c>
 800de78:	2300      	movs	r3, #0
 800de7a:	9309      	str	r3, [sp, #36]	; 0x24
 800de7c:	2320      	movs	r3, #32
 800de7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de82:	f8cd 800c 	str.w	r8, [sp, #12]
 800de86:	2330      	movs	r3, #48	; 0x30
 800de88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e04c <_vfiprintf_r+0x24c>
 800de8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de90:	f04f 0901 	mov.w	r9, #1
 800de94:	4623      	mov	r3, r4
 800de96:	469a      	mov	sl, r3
 800de98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de9c:	b10a      	cbz	r2, 800dea2 <_vfiprintf_r+0xa2>
 800de9e:	2a25      	cmp	r2, #37	; 0x25
 800dea0:	d1f9      	bne.n	800de96 <_vfiprintf_r+0x96>
 800dea2:	ebba 0b04 	subs.w	fp, sl, r4
 800dea6:	d00b      	beq.n	800dec0 <_vfiprintf_r+0xc0>
 800dea8:	465b      	mov	r3, fp
 800deaa:	4622      	mov	r2, r4
 800deac:	4629      	mov	r1, r5
 800deae:	4630      	mov	r0, r6
 800deb0:	f7ff ff93 	bl	800ddda <__sfputs_r>
 800deb4:	3001      	adds	r0, #1
 800deb6:	f000 80aa 	beq.w	800e00e <_vfiprintf_r+0x20e>
 800deba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800debc:	445a      	add	r2, fp
 800debe:	9209      	str	r2, [sp, #36]	; 0x24
 800dec0:	f89a 3000 	ldrb.w	r3, [sl]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	f000 80a2 	beq.w	800e00e <_vfiprintf_r+0x20e>
 800deca:	2300      	movs	r3, #0
 800decc:	f04f 32ff 	mov.w	r2, #4294967295
 800ded0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ded4:	f10a 0a01 	add.w	sl, sl, #1
 800ded8:	9304      	str	r3, [sp, #16]
 800deda:	9307      	str	r3, [sp, #28]
 800dedc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dee0:	931a      	str	r3, [sp, #104]	; 0x68
 800dee2:	4654      	mov	r4, sl
 800dee4:	2205      	movs	r2, #5
 800dee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deea:	4858      	ldr	r0, [pc, #352]	; (800e04c <_vfiprintf_r+0x24c>)
 800deec:	f7f2 f980 	bl	80001f0 <memchr>
 800def0:	9a04      	ldr	r2, [sp, #16]
 800def2:	b9d8      	cbnz	r0, 800df2c <_vfiprintf_r+0x12c>
 800def4:	06d1      	lsls	r1, r2, #27
 800def6:	bf44      	itt	mi
 800def8:	2320      	movmi	r3, #32
 800defa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800defe:	0713      	lsls	r3, r2, #28
 800df00:	bf44      	itt	mi
 800df02:	232b      	movmi	r3, #43	; 0x2b
 800df04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df08:	f89a 3000 	ldrb.w	r3, [sl]
 800df0c:	2b2a      	cmp	r3, #42	; 0x2a
 800df0e:	d015      	beq.n	800df3c <_vfiprintf_r+0x13c>
 800df10:	9a07      	ldr	r2, [sp, #28]
 800df12:	4654      	mov	r4, sl
 800df14:	2000      	movs	r0, #0
 800df16:	f04f 0c0a 	mov.w	ip, #10
 800df1a:	4621      	mov	r1, r4
 800df1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df20:	3b30      	subs	r3, #48	; 0x30
 800df22:	2b09      	cmp	r3, #9
 800df24:	d94e      	bls.n	800dfc4 <_vfiprintf_r+0x1c4>
 800df26:	b1b0      	cbz	r0, 800df56 <_vfiprintf_r+0x156>
 800df28:	9207      	str	r2, [sp, #28]
 800df2a:	e014      	b.n	800df56 <_vfiprintf_r+0x156>
 800df2c:	eba0 0308 	sub.w	r3, r0, r8
 800df30:	fa09 f303 	lsl.w	r3, r9, r3
 800df34:	4313      	orrs	r3, r2
 800df36:	9304      	str	r3, [sp, #16]
 800df38:	46a2      	mov	sl, r4
 800df3a:	e7d2      	b.n	800dee2 <_vfiprintf_r+0xe2>
 800df3c:	9b03      	ldr	r3, [sp, #12]
 800df3e:	1d19      	adds	r1, r3, #4
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	9103      	str	r1, [sp, #12]
 800df44:	2b00      	cmp	r3, #0
 800df46:	bfbb      	ittet	lt
 800df48:	425b      	neglt	r3, r3
 800df4a:	f042 0202 	orrlt.w	r2, r2, #2
 800df4e:	9307      	strge	r3, [sp, #28]
 800df50:	9307      	strlt	r3, [sp, #28]
 800df52:	bfb8      	it	lt
 800df54:	9204      	strlt	r2, [sp, #16]
 800df56:	7823      	ldrb	r3, [r4, #0]
 800df58:	2b2e      	cmp	r3, #46	; 0x2e
 800df5a:	d10c      	bne.n	800df76 <_vfiprintf_r+0x176>
 800df5c:	7863      	ldrb	r3, [r4, #1]
 800df5e:	2b2a      	cmp	r3, #42	; 0x2a
 800df60:	d135      	bne.n	800dfce <_vfiprintf_r+0x1ce>
 800df62:	9b03      	ldr	r3, [sp, #12]
 800df64:	1d1a      	adds	r2, r3, #4
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	9203      	str	r2, [sp, #12]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	bfb8      	it	lt
 800df6e:	f04f 33ff 	movlt.w	r3, #4294967295
 800df72:	3402      	adds	r4, #2
 800df74:	9305      	str	r3, [sp, #20]
 800df76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e05c <_vfiprintf_r+0x25c>
 800df7a:	7821      	ldrb	r1, [r4, #0]
 800df7c:	2203      	movs	r2, #3
 800df7e:	4650      	mov	r0, sl
 800df80:	f7f2 f936 	bl	80001f0 <memchr>
 800df84:	b140      	cbz	r0, 800df98 <_vfiprintf_r+0x198>
 800df86:	2340      	movs	r3, #64	; 0x40
 800df88:	eba0 000a 	sub.w	r0, r0, sl
 800df8c:	fa03 f000 	lsl.w	r0, r3, r0
 800df90:	9b04      	ldr	r3, [sp, #16]
 800df92:	4303      	orrs	r3, r0
 800df94:	3401      	adds	r4, #1
 800df96:	9304      	str	r3, [sp, #16]
 800df98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df9c:	482c      	ldr	r0, [pc, #176]	; (800e050 <_vfiprintf_r+0x250>)
 800df9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dfa2:	2206      	movs	r2, #6
 800dfa4:	f7f2 f924 	bl	80001f0 <memchr>
 800dfa8:	2800      	cmp	r0, #0
 800dfaa:	d03f      	beq.n	800e02c <_vfiprintf_r+0x22c>
 800dfac:	4b29      	ldr	r3, [pc, #164]	; (800e054 <_vfiprintf_r+0x254>)
 800dfae:	bb1b      	cbnz	r3, 800dff8 <_vfiprintf_r+0x1f8>
 800dfb0:	9b03      	ldr	r3, [sp, #12]
 800dfb2:	3307      	adds	r3, #7
 800dfb4:	f023 0307 	bic.w	r3, r3, #7
 800dfb8:	3308      	adds	r3, #8
 800dfba:	9303      	str	r3, [sp, #12]
 800dfbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfbe:	443b      	add	r3, r7
 800dfc0:	9309      	str	r3, [sp, #36]	; 0x24
 800dfc2:	e767      	b.n	800de94 <_vfiprintf_r+0x94>
 800dfc4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfc8:	460c      	mov	r4, r1
 800dfca:	2001      	movs	r0, #1
 800dfcc:	e7a5      	b.n	800df1a <_vfiprintf_r+0x11a>
 800dfce:	2300      	movs	r3, #0
 800dfd0:	3401      	adds	r4, #1
 800dfd2:	9305      	str	r3, [sp, #20]
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	f04f 0c0a 	mov.w	ip, #10
 800dfda:	4620      	mov	r0, r4
 800dfdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfe0:	3a30      	subs	r2, #48	; 0x30
 800dfe2:	2a09      	cmp	r2, #9
 800dfe4:	d903      	bls.n	800dfee <_vfiprintf_r+0x1ee>
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d0c5      	beq.n	800df76 <_vfiprintf_r+0x176>
 800dfea:	9105      	str	r1, [sp, #20]
 800dfec:	e7c3      	b.n	800df76 <_vfiprintf_r+0x176>
 800dfee:	fb0c 2101 	mla	r1, ip, r1, r2
 800dff2:	4604      	mov	r4, r0
 800dff4:	2301      	movs	r3, #1
 800dff6:	e7f0      	b.n	800dfda <_vfiprintf_r+0x1da>
 800dff8:	ab03      	add	r3, sp, #12
 800dffa:	9300      	str	r3, [sp, #0]
 800dffc:	462a      	mov	r2, r5
 800dffe:	4b16      	ldr	r3, [pc, #88]	; (800e058 <_vfiprintf_r+0x258>)
 800e000:	a904      	add	r1, sp, #16
 800e002:	4630      	mov	r0, r6
 800e004:	f7fd fe34 	bl	800bc70 <_printf_float>
 800e008:	4607      	mov	r7, r0
 800e00a:	1c78      	adds	r0, r7, #1
 800e00c:	d1d6      	bne.n	800dfbc <_vfiprintf_r+0x1bc>
 800e00e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e010:	07d9      	lsls	r1, r3, #31
 800e012:	d405      	bmi.n	800e020 <_vfiprintf_r+0x220>
 800e014:	89ab      	ldrh	r3, [r5, #12]
 800e016:	059a      	lsls	r2, r3, #22
 800e018:	d402      	bmi.n	800e020 <_vfiprintf_r+0x220>
 800e01a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e01c:	f7ff fe6a 	bl	800dcf4 <__retarget_lock_release_recursive>
 800e020:	89ab      	ldrh	r3, [r5, #12]
 800e022:	065b      	lsls	r3, r3, #25
 800e024:	f53f af12 	bmi.w	800de4c <_vfiprintf_r+0x4c>
 800e028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e02a:	e711      	b.n	800de50 <_vfiprintf_r+0x50>
 800e02c:	ab03      	add	r3, sp, #12
 800e02e:	9300      	str	r3, [sp, #0]
 800e030:	462a      	mov	r2, r5
 800e032:	4b09      	ldr	r3, [pc, #36]	; (800e058 <_vfiprintf_r+0x258>)
 800e034:	a904      	add	r1, sp, #16
 800e036:	4630      	mov	r0, r6
 800e038:	f7fe f8be 	bl	800c1b8 <_printf_i>
 800e03c:	e7e4      	b.n	800e008 <_vfiprintf_r+0x208>
 800e03e:	bf00      	nop
 800e040:	0800fbf4 	.word	0x0800fbf4
 800e044:	0800fc14 	.word	0x0800fc14
 800e048:	0800fbd4 	.word	0x0800fbd4
 800e04c:	0800fb7c 	.word	0x0800fb7c
 800e050:	0800fb86 	.word	0x0800fb86
 800e054:	0800bc71 	.word	0x0800bc71
 800e058:	0800dddb 	.word	0x0800dddb
 800e05c:	0800fb82 	.word	0x0800fb82

0800e060 <__swbuf_r>:
 800e060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e062:	460e      	mov	r6, r1
 800e064:	4614      	mov	r4, r2
 800e066:	4605      	mov	r5, r0
 800e068:	b118      	cbz	r0, 800e072 <__swbuf_r+0x12>
 800e06a:	6983      	ldr	r3, [r0, #24]
 800e06c:	b90b      	cbnz	r3, 800e072 <__swbuf_r+0x12>
 800e06e:	f000 f9e7 	bl	800e440 <__sinit>
 800e072:	4b21      	ldr	r3, [pc, #132]	; (800e0f8 <__swbuf_r+0x98>)
 800e074:	429c      	cmp	r4, r3
 800e076:	d12b      	bne.n	800e0d0 <__swbuf_r+0x70>
 800e078:	686c      	ldr	r4, [r5, #4]
 800e07a:	69a3      	ldr	r3, [r4, #24]
 800e07c:	60a3      	str	r3, [r4, #8]
 800e07e:	89a3      	ldrh	r3, [r4, #12]
 800e080:	071a      	lsls	r2, r3, #28
 800e082:	d52f      	bpl.n	800e0e4 <__swbuf_r+0x84>
 800e084:	6923      	ldr	r3, [r4, #16]
 800e086:	b36b      	cbz	r3, 800e0e4 <__swbuf_r+0x84>
 800e088:	6923      	ldr	r3, [r4, #16]
 800e08a:	6820      	ldr	r0, [r4, #0]
 800e08c:	1ac0      	subs	r0, r0, r3
 800e08e:	6963      	ldr	r3, [r4, #20]
 800e090:	b2f6      	uxtb	r6, r6
 800e092:	4283      	cmp	r3, r0
 800e094:	4637      	mov	r7, r6
 800e096:	dc04      	bgt.n	800e0a2 <__swbuf_r+0x42>
 800e098:	4621      	mov	r1, r4
 800e09a:	4628      	mov	r0, r5
 800e09c:	f000 f93c 	bl	800e318 <_fflush_r>
 800e0a0:	bb30      	cbnz	r0, 800e0f0 <__swbuf_r+0x90>
 800e0a2:	68a3      	ldr	r3, [r4, #8]
 800e0a4:	3b01      	subs	r3, #1
 800e0a6:	60a3      	str	r3, [r4, #8]
 800e0a8:	6823      	ldr	r3, [r4, #0]
 800e0aa:	1c5a      	adds	r2, r3, #1
 800e0ac:	6022      	str	r2, [r4, #0]
 800e0ae:	701e      	strb	r6, [r3, #0]
 800e0b0:	6963      	ldr	r3, [r4, #20]
 800e0b2:	3001      	adds	r0, #1
 800e0b4:	4283      	cmp	r3, r0
 800e0b6:	d004      	beq.n	800e0c2 <__swbuf_r+0x62>
 800e0b8:	89a3      	ldrh	r3, [r4, #12]
 800e0ba:	07db      	lsls	r3, r3, #31
 800e0bc:	d506      	bpl.n	800e0cc <__swbuf_r+0x6c>
 800e0be:	2e0a      	cmp	r6, #10
 800e0c0:	d104      	bne.n	800e0cc <__swbuf_r+0x6c>
 800e0c2:	4621      	mov	r1, r4
 800e0c4:	4628      	mov	r0, r5
 800e0c6:	f000 f927 	bl	800e318 <_fflush_r>
 800e0ca:	b988      	cbnz	r0, 800e0f0 <__swbuf_r+0x90>
 800e0cc:	4638      	mov	r0, r7
 800e0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0d0:	4b0a      	ldr	r3, [pc, #40]	; (800e0fc <__swbuf_r+0x9c>)
 800e0d2:	429c      	cmp	r4, r3
 800e0d4:	d101      	bne.n	800e0da <__swbuf_r+0x7a>
 800e0d6:	68ac      	ldr	r4, [r5, #8]
 800e0d8:	e7cf      	b.n	800e07a <__swbuf_r+0x1a>
 800e0da:	4b09      	ldr	r3, [pc, #36]	; (800e100 <__swbuf_r+0xa0>)
 800e0dc:	429c      	cmp	r4, r3
 800e0de:	bf08      	it	eq
 800e0e0:	68ec      	ldreq	r4, [r5, #12]
 800e0e2:	e7ca      	b.n	800e07a <__swbuf_r+0x1a>
 800e0e4:	4621      	mov	r1, r4
 800e0e6:	4628      	mov	r0, r5
 800e0e8:	f000 f81a 	bl	800e120 <__swsetup_r>
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	d0cb      	beq.n	800e088 <__swbuf_r+0x28>
 800e0f0:	f04f 37ff 	mov.w	r7, #4294967295
 800e0f4:	e7ea      	b.n	800e0cc <__swbuf_r+0x6c>
 800e0f6:	bf00      	nop
 800e0f8:	0800fbf4 	.word	0x0800fbf4
 800e0fc:	0800fc14 	.word	0x0800fc14
 800e100:	0800fbd4 	.word	0x0800fbd4

0800e104 <__ascii_wctomb>:
 800e104:	b149      	cbz	r1, 800e11a <__ascii_wctomb+0x16>
 800e106:	2aff      	cmp	r2, #255	; 0xff
 800e108:	bf85      	ittet	hi
 800e10a:	238a      	movhi	r3, #138	; 0x8a
 800e10c:	6003      	strhi	r3, [r0, #0]
 800e10e:	700a      	strbls	r2, [r1, #0]
 800e110:	f04f 30ff 	movhi.w	r0, #4294967295
 800e114:	bf98      	it	ls
 800e116:	2001      	movls	r0, #1
 800e118:	4770      	bx	lr
 800e11a:	4608      	mov	r0, r1
 800e11c:	4770      	bx	lr
	...

0800e120 <__swsetup_r>:
 800e120:	4b32      	ldr	r3, [pc, #200]	; (800e1ec <__swsetup_r+0xcc>)
 800e122:	b570      	push	{r4, r5, r6, lr}
 800e124:	681d      	ldr	r5, [r3, #0]
 800e126:	4606      	mov	r6, r0
 800e128:	460c      	mov	r4, r1
 800e12a:	b125      	cbz	r5, 800e136 <__swsetup_r+0x16>
 800e12c:	69ab      	ldr	r3, [r5, #24]
 800e12e:	b913      	cbnz	r3, 800e136 <__swsetup_r+0x16>
 800e130:	4628      	mov	r0, r5
 800e132:	f000 f985 	bl	800e440 <__sinit>
 800e136:	4b2e      	ldr	r3, [pc, #184]	; (800e1f0 <__swsetup_r+0xd0>)
 800e138:	429c      	cmp	r4, r3
 800e13a:	d10f      	bne.n	800e15c <__swsetup_r+0x3c>
 800e13c:	686c      	ldr	r4, [r5, #4]
 800e13e:	89a3      	ldrh	r3, [r4, #12]
 800e140:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e144:	0719      	lsls	r1, r3, #28
 800e146:	d42c      	bmi.n	800e1a2 <__swsetup_r+0x82>
 800e148:	06dd      	lsls	r5, r3, #27
 800e14a:	d411      	bmi.n	800e170 <__swsetup_r+0x50>
 800e14c:	2309      	movs	r3, #9
 800e14e:	6033      	str	r3, [r6, #0]
 800e150:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e154:	81a3      	strh	r3, [r4, #12]
 800e156:	f04f 30ff 	mov.w	r0, #4294967295
 800e15a:	e03e      	b.n	800e1da <__swsetup_r+0xba>
 800e15c:	4b25      	ldr	r3, [pc, #148]	; (800e1f4 <__swsetup_r+0xd4>)
 800e15e:	429c      	cmp	r4, r3
 800e160:	d101      	bne.n	800e166 <__swsetup_r+0x46>
 800e162:	68ac      	ldr	r4, [r5, #8]
 800e164:	e7eb      	b.n	800e13e <__swsetup_r+0x1e>
 800e166:	4b24      	ldr	r3, [pc, #144]	; (800e1f8 <__swsetup_r+0xd8>)
 800e168:	429c      	cmp	r4, r3
 800e16a:	bf08      	it	eq
 800e16c:	68ec      	ldreq	r4, [r5, #12]
 800e16e:	e7e6      	b.n	800e13e <__swsetup_r+0x1e>
 800e170:	0758      	lsls	r0, r3, #29
 800e172:	d512      	bpl.n	800e19a <__swsetup_r+0x7a>
 800e174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e176:	b141      	cbz	r1, 800e18a <__swsetup_r+0x6a>
 800e178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e17c:	4299      	cmp	r1, r3
 800e17e:	d002      	beq.n	800e186 <__swsetup_r+0x66>
 800e180:	4630      	mov	r0, r6
 800e182:	f7fd fbf5 	bl	800b970 <_free_r>
 800e186:	2300      	movs	r3, #0
 800e188:	6363      	str	r3, [r4, #52]	; 0x34
 800e18a:	89a3      	ldrh	r3, [r4, #12]
 800e18c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e190:	81a3      	strh	r3, [r4, #12]
 800e192:	2300      	movs	r3, #0
 800e194:	6063      	str	r3, [r4, #4]
 800e196:	6923      	ldr	r3, [r4, #16]
 800e198:	6023      	str	r3, [r4, #0]
 800e19a:	89a3      	ldrh	r3, [r4, #12]
 800e19c:	f043 0308 	orr.w	r3, r3, #8
 800e1a0:	81a3      	strh	r3, [r4, #12]
 800e1a2:	6923      	ldr	r3, [r4, #16]
 800e1a4:	b94b      	cbnz	r3, 800e1ba <__swsetup_r+0x9a>
 800e1a6:	89a3      	ldrh	r3, [r4, #12]
 800e1a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e1ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1b0:	d003      	beq.n	800e1ba <__swsetup_r+0x9a>
 800e1b2:	4621      	mov	r1, r4
 800e1b4:	4630      	mov	r0, r6
 800e1b6:	f000 fa05 	bl	800e5c4 <__smakebuf_r>
 800e1ba:	89a0      	ldrh	r0, [r4, #12]
 800e1bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e1c0:	f010 0301 	ands.w	r3, r0, #1
 800e1c4:	d00a      	beq.n	800e1dc <__swsetup_r+0xbc>
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	60a3      	str	r3, [r4, #8]
 800e1ca:	6963      	ldr	r3, [r4, #20]
 800e1cc:	425b      	negs	r3, r3
 800e1ce:	61a3      	str	r3, [r4, #24]
 800e1d0:	6923      	ldr	r3, [r4, #16]
 800e1d2:	b943      	cbnz	r3, 800e1e6 <__swsetup_r+0xc6>
 800e1d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e1d8:	d1ba      	bne.n	800e150 <__swsetup_r+0x30>
 800e1da:	bd70      	pop	{r4, r5, r6, pc}
 800e1dc:	0781      	lsls	r1, r0, #30
 800e1de:	bf58      	it	pl
 800e1e0:	6963      	ldrpl	r3, [r4, #20]
 800e1e2:	60a3      	str	r3, [r4, #8]
 800e1e4:	e7f4      	b.n	800e1d0 <__swsetup_r+0xb0>
 800e1e6:	2000      	movs	r0, #0
 800e1e8:	e7f7      	b.n	800e1da <__swsetup_r+0xba>
 800e1ea:	bf00      	nop
 800e1ec:	200000c0 	.word	0x200000c0
 800e1f0:	0800fbf4 	.word	0x0800fbf4
 800e1f4:	0800fc14 	.word	0x0800fc14
 800e1f8:	0800fbd4 	.word	0x0800fbd4

0800e1fc <abort>:
 800e1fc:	b508      	push	{r3, lr}
 800e1fe:	2006      	movs	r0, #6
 800e200:	f000 fa50 	bl	800e6a4 <raise>
 800e204:	2001      	movs	r0, #1
 800e206:	f7f5 ff8b 	bl	8004120 <_exit>
	...

0800e20c <__sflush_r>:
 800e20c:	898a      	ldrh	r2, [r1, #12]
 800e20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e212:	4605      	mov	r5, r0
 800e214:	0710      	lsls	r0, r2, #28
 800e216:	460c      	mov	r4, r1
 800e218:	d458      	bmi.n	800e2cc <__sflush_r+0xc0>
 800e21a:	684b      	ldr	r3, [r1, #4]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	dc05      	bgt.n	800e22c <__sflush_r+0x20>
 800e220:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e222:	2b00      	cmp	r3, #0
 800e224:	dc02      	bgt.n	800e22c <__sflush_r+0x20>
 800e226:	2000      	movs	r0, #0
 800e228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e22c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e22e:	2e00      	cmp	r6, #0
 800e230:	d0f9      	beq.n	800e226 <__sflush_r+0x1a>
 800e232:	2300      	movs	r3, #0
 800e234:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e238:	682f      	ldr	r7, [r5, #0]
 800e23a:	602b      	str	r3, [r5, #0]
 800e23c:	d032      	beq.n	800e2a4 <__sflush_r+0x98>
 800e23e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e240:	89a3      	ldrh	r3, [r4, #12]
 800e242:	075a      	lsls	r2, r3, #29
 800e244:	d505      	bpl.n	800e252 <__sflush_r+0x46>
 800e246:	6863      	ldr	r3, [r4, #4]
 800e248:	1ac0      	subs	r0, r0, r3
 800e24a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e24c:	b10b      	cbz	r3, 800e252 <__sflush_r+0x46>
 800e24e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e250:	1ac0      	subs	r0, r0, r3
 800e252:	2300      	movs	r3, #0
 800e254:	4602      	mov	r2, r0
 800e256:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e258:	6a21      	ldr	r1, [r4, #32]
 800e25a:	4628      	mov	r0, r5
 800e25c:	47b0      	blx	r6
 800e25e:	1c43      	adds	r3, r0, #1
 800e260:	89a3      	ldrh	r3, [r4, #12]
 800e262:	d106      	bne.n	800e272 <__sflush_r+0x66>
 800e264:	6829      	ldr	r1, [r5, #0]
 800e266:	291d      	cmp	r1, #29
 800e268:	d82c      	bhi.n	800e2c4 <__sflush_r+0xb8>
 800e26a:	4a2a      	ldr	r2, [pc, #168]	; (800e314 <__sflush_r+0x108>)
 800e26c:	40ca      	lsrs	r2, r1
 800e26e:	07d6      	lsls	r6, r2, #31
 800e270:	d528      	bpl.n	800e2c4 <__sflush_r+0xb8>
 800e272:	2200      	movs	r2, #0
 800e274:	6062      	str	r2, [r4, #4]
 800e276:	04d9      	lsls	r1, r3, #19
 800e278:	6922      	ldr	r2, [r4, #16]
 800e27a:	6022      	str	r2, [r4, #0]
 800e27c:	d504      	bpl.n	800e288 <__sflush_r+0x7c>
 800e27e:	1c42      	adds	r2, r0, #1
 800e280:	d101      	bne.n	800e286 <__sflush_r+0x7a>
 800e282:	682b      	ldr	r3, [r5, #0]
 800e284:	b903      	cbnz	r3, 800e288 <__sflush_r+0x7c>
 800e286:	6560      	str	r0, [r4, #84]	; 0x54
 800e288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e28a:	602f      	str	r7, [r5, #0]
 800e28c:	2900      	cmp	r1, #0
 800e28e:	d0ca      	beq.n	800e226 <__sflush_r+0x1a>
 800e290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e294:	4299      	cmp	r1, r3
 800e296:	d002      	beq.n	800e29e <__sflush_r+0x92>
 800e298:	4628      	mov	r0, r5
 800e29a:	f7fd fb69 	bl	800b970 <_free_r>
 800e29e:	2000      	movs	r0, #0
 800e2a0:	6360      	str	r0, [r4, #52]	; 0x34
 800e2a2:	e7c1      	b.n	800e228 <__sflush_r+0x1c>
 800e2a4:	6a21      	ldr	r1, [r4, #32]
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	4628      	mov	r0, r5
 800e2aa:	47b0      	blx	r6
 800e2ac:	1c41      	adds	r1, r0, #1
 800e2ae:	d1c7      	bne.n	800e240 <__sflush_r+0x34>
 800e2b0:	682b      	ldr	r3, [r5, #0]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d0c4      	beq.n	800e240 <__sflush_r+0x34>
 800e2b6:	2b1d      	cmp	r3, #29
 800e2b8:	d001      	beq.n	800e2be <__sflush_r+0xb2>
 800e2ba:	2b16      	cmp	r3, #22
 800e2bc:	d101      	bne.n	800e2c2 <__sflush_r+0xb6>
 800e2be:	602f      	str	r7, [r5, #0]
 800e2c0:	e7b1      	b.n	800e226 <__sflush_r+0x1a>
 800e2c2:	89a3      	ldrh	r3, [r4, #12]
 800e2c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2c8:	81a3      	strh	r3, [r4, #12]
 800e2ca:	e7ad      	b.n	800e228 <__sflush_r+0x1c>
 800e2cc:	690f      	ldr	r7, [r1, #16]
 800e2ce:	2f00      	cmp	r7, #0
 800e2d0:	d0a9      	beq.n	800e226 <__sflush_r+0x1a>
 800e2d2:	0793      	lsls	r3, r2, #30
 800e2d4:	680e      	ldr	r6, [r1, #0]
 800e2d6:	bf08      	it	eq
 800e2d8:	694b      	ldreq	r3, [r1, #20]
 800e2da:	600f      	str	r7, [r1, #0]
 800e2dc:	bf18      	it	ne
 800e2de:	2300      	movne	r3, #0
 800e2e0:	eba6 0807 	sub.w	r8, r6, r7
 800e2e4:	608b      	str	r3, [r1, #8]
 800e2e6:	f1b8 0f00 	cmp.w	r8, #0
 800e2ea:	dd9c      	ble.n	800e226 <__sflush_r+0x1a>
 800e2ec:	6a21      	ldr	r1, [r4, #32]
 800e2ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e2f0:	4643      	mov	r3, r8
 800e2f2:	463a      	mov	r2, r7
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	47b0      	blx	r6
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	dc06      	bgt.n	800e30a <__sflush_r+0xfe>
 800e2fc:	89a3      	ldrh	r3, [r4, #12]
 800e2fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e302:	81a3      	strh	r3, [r4, #12]
 800e304:	f04f 30ff 	mov.w	r0, #4294967295
 800e308:	e78e      	b.n	800e228 <__sflush_r+0x1c>
 800e30a:	4407      	add	r7, r0
 800e30c:	eba8 0800 	sub.w	r8, r8, r0
 800e310:	e7e9      	b.n	800e2e6 <__sflush_r+0xda>
 800e312:	bf00      	nop
 800e314:	20400001 	.word	0x20400001

0800e318 <_fflush_r>:
 800e318:	b538      	push	{r3, r4, r5, lr}
 800e31a:	690b      	ldr	r3, [r1, #16]
 800e31c:	4605      	mov	r5, r0
 800e31e:	460c      	mov	r4, r1
 800e320:	b913      	cbnz	r3, 800e328 <_fflush_r+0x10>
 800e322:	2500      	movs	r5, #0
 800e324:	4628      	mov	r0, r5
 800e326:	bd38      	pop	{r3, r4, r5, pc}
 800e328:	b118      	cbz	r0, 800e332 <_fflush_r+0x1a>
 800e32a:	6983      	ldr	r3, [r0, #24]
 800e32c:	b90b      	cbnz	r3, 800e332 <_fflush_r+0x1a>
 800e32e:	f000 f887 	bl	800e440 <__sinit>
 800e332:	4b14      	ldr	r3, [pc, #80]	; (800e384 <_fflush_r+0x6c>)
 800e334:	429c      	cmp	r4, r3
 800e336:	d11b      	bne.n	800e370 <_fflush_r+0x58>
 800e338:	686c      	ldr	r4, [r5, #4]
 800e33a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d0ef      	beq.n	800e322 <_fflush_r+0xa>
 800e342:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e344:	07d0      	lsls	r0, r2, #31
 800e346:	d404      	bmi.n	800e352 <_fflush_r+0x3a>
 800e348:	0599      	lsls	r1, r3, #22
 800e34a:	d402      	bmi.n	800e352 <_fflush_r+0x3a>
 800e34c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e34e:	f7ff fcd0 	bl	800dcf2 <__retarget_lock_acquire_recursive>
 800e352:	4628      	mov	r0, r5
 800e354:	4621      	mov	r1, r4
 800e356:	f7ff ff59 	bl	800e20c <__sflush_r>
 800e35a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e35c:	07da      	lsls	r2, r3, #31
 800e35e:	4605      	mov	r5, r0
 800e360:	d4e0      	bmi.n	800e324 <_fflush_r+0xc>
 800e362:	89a3      	ldrh	r3, [r4, #12]
 800e364:	059b      	lsls	r3, r3, #22
 800e366:	d4dd      	bmi.n	800e324 <_fflush_r+0xc>
 800e368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e36a:	f7ff fcc3 	bl	800dcf4 <__retarget_lock_release_recursive>
 800e36e:	e7d9      	b.n	800e324 <_fflush_r+0xc>
 800e370:	4b05      	ldr	r3, [pc, #20]	; (800e388 <_fflush_r+0x70>)
 800e372:	429c      	cmp	r4, r3
 800e374:	d101      	bne.n	800e37a <_fflush_r+0x62>
 800e376:	68ac      	ldr	r4, [r5, #8]
 800e378:	e7df      	b.n	800e33a <_fflush_r+0x22>
 800e37a:	4b04      	ldr	r3, [pc, #16]	; (800e38c <_fflush_r+0x74>)
 800e37c:	429c      	cmp	r4, r3
 800e37e:	bf08      	it	eq
 800e380:	68ec      	ldreq	r4, [r5, #12]
 800e382:	e7da      	b.n	800e33a <_fflush_r+0x22>
 800e384:	0800fbf4 	.word	0x0800fbf4
 800e388:	0800fc14 	.word	0x0800fc14
 800e38c:	0800fbd4 	.word	0x0800fbd4

0800e390 <std>:
 800e390:	2300      	movs	r3, #0
 800e392:	b510      	push	{r4, lr}
 800e394:	4604      	mov	r4, r0
 800e396:	e9c0 3300 	strd	r3, r3, [r0]
 800e39a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e39e:	6083      	str	r3, [r0, #8]
 800e3a0:	8181      	strh	r1, [r0, #12]
 800e3a2:	6643      	str	r3, [r0, #100]	; 0x64
 800e3a4:	81c2      	strh	r2, [r0, #14]
 800e3a6:	6183      	str	r3, [r0, #24]
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	2208      	movs	r2, #8
 800e3ac:	305c      	adds	r0, #92	; 0x5c
 800e3ae:	f7fd fad7 	bl	800b960 <memset>
 800e3b2:	4b05      	ldr	r3, [pc, #20]	; (800e3c8 <std+0x38>)
 800e3b4:	6263      	str	r3, [r4, #36]	; 0x24
 800e3b6:	4b05      	ldr	r3, [pc, #20]	; (800e3cc <std+0x3c>)
 800e3b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e3ba:	4b05      	ldr	r3, [pc, #20]	; (800e3d0 <std+0x40>)
 800e3bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e3be:	4b05      	ldr	r3, [pc, #20]	; (800e3d4 <std+0x44>)
 800e3c0:	6224      	str	r4, [r4, #32]
 800e3c2:	6323      	str	r3, [r4, #48]	; 0x30
 800e3c4:	bd10      	pop	{r4, pc}
 800e3c6:	bf00      	nop
 800e3c8:	0800e6dd 	.word	0x0800e6dd
 800e3cc:	0800e6ff 	.word	0x0800e6ff
 800e3d0:	0800e737 	.word	0x0800e737
 800e3d4:	0800e75b 	.word	0x0800e75b

0800e3d8 <_cleanup_r>:
 800e3d8:	4901      	ldr	r1, [pc, #4]	; (800e3e0 <_cleanup_r+0x8>)
 800e3da:	f000 b8af 	b.w	800e53c <_fwalk_reent>
 800e3de:	bf00      	nop
 800e3e0:	0800e319 	.word	0x0800e319

0800e3e4 <__sfmoreglue>:
 800e3e4:	b570      	push	{r4, r5, r6, lr}
 800e3e6:	2268      	movs	r2, #104	; 0x68
 800e3e8:	1e4d      	subs	r5, r1, #1
 800e3ea:	4355      	muls	r5, r2
 800e3ec:	460e      	mov	r6, r1
 800e3ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e3f2:	f7fd fb29 	bl	800ba48 <_malloc_r>
 800e3f6:	4604      	mov	r4, r0
 800e3f8:	b140      	cbz	r0, 800e40c <__sfmoreglue+0x28>
 800e3fa:	2100      	movs	r1, #0
 800e3fc:	e9c0 1600 	strd	r1, r6, [r0]
 800e400:	300c      	adds	r0, #12
 800e402:	60a0      	str	r0, [r4, #8]
 800e404:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e408:	f7fd faaa 	bl	800b960 <memset>
 800e40c:	4620      	mov	r0, r4
 800e40e:	bd70      	pop	{r4, r5, r6, pc}

0800e410 <__sfp_lock_acquire>:
 800e410:	4801      	ldr	r0, [pc, #4]	; (800e418 <__sfp_lock_acquire+0x8>)
 800e412:	f7ff bc6e 	b.w	800dcf2 <__retarget_lock_acquire_recursive>
 800e416:	bf00      	nop
 800e418:	2000074d 	.word	0x2000074d

0800e41c <__sfp_lock_release>:
 800e41c:	4801      	ldr	r0, [pc, #4]	; (800e424 <__sfp_lock_release+0x8>)
 800e41e:	f7ff bc69 	b.w	800dcf4 <__retarget_lock_release_recursive>
 800e422:	bf00      	nop
 800e424:	2000074d 	.word	0x2000074d

0800e428 <__sinit_lock_acquire>:
 800e428:	4801      	ldr	r0, [pc, #4]	; (800e430 <__sinit_lock_acquire+0x8>)
 800e42a:	f7ff bc62 	b.w	800dcf2 <__retarget_lock_acquire_recursive>
 800e42e:	bf00      	nop
 800e430:	2000074e 	.word	0x2000074e

0800e434 <__sinit_lock_release>:
 800e434:	4801      	ldr	r0, [pc, #4]	; (800e43c <__sinit_lock_release+0x8>)
 800e436:	f7ff bc5d 	b.w	800dcf4 <__retarget_lock_release_recursive>
 800e43a:	bf00      	nop
 800e43c:	2000074e 	.word	0x2000074e

0800e440 <__sinit>:
 800e440:	b510      	push	{r4, lr}
 800e442:	4604      	mov	r4, r0
 800e444:	f7ff fff0 	bl	800e428 <__sinit_lock_acquire>
 800e448:	69a3      	ldr	r3, [r4, #24]
 800e44a:	b11b      	cbz	r3, 800e454 <__sinit+0x14>
 800e44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e450:	f7ff bff0 	b.w	800e434 <__sinit_lock_release>
 800e454:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e458:	6523      	str	r3, [r4, #80]	; 0x50
 800e45a:	4b13      	ldr	r3, [pc, #76]	; (800e4a8 <__sinit+0x68>)
 800e45c:	4a13      	ldr	r2, [pc, #76]	; (800e4ac <__sinit+0x6c>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	62a2      	str	r2, [r4, #40]	; 0x28
 800e462:	42a3      	cmp	r3, r4
 800e464:	bf04      	itt	eq
 800e466:	2301      	moveq	r3, #1
 800e468:	61a3      	streq	r3, [r4, #24]
 800e46a:	4620      	mov	r0, r4
 800e46c:	f000 f820 	bl	800e4b0 <__sfp>
 800e470:	6060      	str	r0, [r4, #4]
 800e472:	4620      	mov	r0, r4
 800e474:	f000 f81c 	bl	800e4b0 <__sfp>
 800e478:	60a0      	str	r0, [r4, #8]
 800e47a:	4620      	mov	r0, r4
 800e47c:	f000 f818 	bl	800e4b0 <__sfp>
 800e480:	2200      	movs	r2, #0
 800e482:	60e0      	str	r0, [r4, #12]
 800e484:	2104      	movs	r1, #4
 800e486:	6860      	ldr	r0, [r4, #4]
 800e488:	f7ff ff82 	bl	800e390 <std>
 800e48c:	68a0      	ldr	r0, [r4, #8]
 800e48e:	2201      	movs	r2, #1
 800e490:	2109      	movs	r1, #9
 800e492:	f7ff ff7d 	bl	800e390 <std>
 800e496:	68e0      	ldr	r0, [r4, #12]
 800e498:	2202      	movs	r2, #2
 800e49a:	2112      	movs	r1, #18
 800e49c:	f7ff ff78 	bl	800e390 <std>
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	61a3      	str	r3, [r4, #24]
 800e4a4:	e7d2      	b.n	800e44c <__sinit+0xc>
 800e4a6:	bf00      	nop
 800e4a8:	0800f854 	.word	0x0800f854
 800e4ac:	0800e3d9 	.word	0x0800e3d9

0800e4b0 <__sfp>:
 800e4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4b2:	4607      	mov	r7, r0
 800e4b4:	f7ff ffac 	bl	800e410 <__sfp_lock_acquire>
 800e4b8:	4b1e      	ldr	r3, [pc, #120]	; (800e534 <__sfp+0x84>)
 800e4ba:	681e      	ldr	r6, [r3, #0]
 800e4bc:	69b3      	ldr	r3, [r6, #24]
 800e4be:	b913      	cbnz	r3, 800e4c6 <__sfp+0x16>
 800e4c0:	4630      	mov	r0, r6
 800e4c2:	f7ff ffbd 	bl	800e440 <__sinit>
 800e4c6:	3648      	adds	r6, #72	; 0x48
 800e4c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e4cc:	3b01      	subs	r3, #1
 800e4ce:	d503      	bpl.n	800e4d8 <__sfp+0x28>
 800e4d0:	6833      	ldr	r3, [r6, #0]
 800e4d2:	b30b      	cbz	r3, 800e518 <__sfp+0x68>
 800e4d4:	6836      	ldr	r6, [r6, #0]
 800e4d6:	e7f7      	b.n	800e4c8 <__sfp+0x18>
 800e4d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e4dc:	b9d5      	cbnz	r5, 800e514 <__sfp+0x64>
 800e4de:	4b16      	ldr	r3, [pc, #88]	; (800e538 <__sfp+0x88>)
 800e4e0:	60e3      	str	r3, [r4, #12]
 800e4e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e4e6:	6665      	str	r5, [r4, #100]	; 0x64
 800e4e8:	f7ff fc02 	bl	800dcf0 <__retarget_lock_init_recursive>
 800e4ec:	f7ff ff96 	bl	800e41c <__sfp_lock_release>
 800e4f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e4f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e4f8:	6025      	str	r5, [r4, #0]
 800e4fa:	61a5      	str	r5, [r4, #24]
 800e4fc:	2208      	movs	r2, #8
 800e4fe:	4629      	mov	r1, r5
 800e500:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e504:	f7fd fa2c 	bl	800b960 <memset>
 800e508:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e50c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e510:	4620      	mov	r0, r4
 800e512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e514:	3468      	adds	r4, #104	; 0x68
 800e516:	e7d9      	b.n	800e4cc <__sfp+0x1c>
 800e518:	2104      	movs	r1, #4
 800e51a:	4638      	mov	r0, r7
 800e51c:	f7ff ff62 	bl	800e3e4 <__sfmoreglue>
 800e520:	4604      	mov	r4, r0
 800e522:	6030      	str	r0, [r6, #0]
 800e524:	2800      	cmp	r0, #0
 800e526:	d1d5      	bne.n	800e4d4 <__sfp+0x24>
 800e528:	f7ff ff78 	bl	800e41c <__sfp_lock_release>
 800e52c:	230c      	movs	r3, #12
 800e52e:	603b      	str	r3, [r7, #0]
 800e530:	e7ee      	b.n	800e510 <__sfp+0x60>
 800e532:	bf00      	nop
 800e534:	0800f854 	.word	0x0800f854
 800e538:	ffff0001 	.word	0xffff0001

0800e53c <_fwalk_reent>:
 800e53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e540:	4606      	mov	r6, r0
 800e542:	4688      	mov	r8, r1
 800e544:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e548:	2700      	movs	r7, #0
 800e54a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e54e:	f1b9 0901 	subs.w	r9, r9, #1
 800e552:	d505      	bpl.n	800e560 <_fwalk_reent+0x24>
 800e554:	6824      	ldr	r4, [r4, #0]
 800e556:	2c00      	cmp	r4, #0
 800e558:	d1f7      	bne.n	800e54a <_fwalk_reent+0xe>
 800e55a:	4638      	mov	r0, r7
 800e55c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e560:	89ab      	ldrh	r3, [r5, #12]
 800e562:	2b01      	cmp	r3, #1
 800e564:	d907      	bls.n	800e576 <_fwalk_reent+0x3a>
 800e566:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e56a:	3301      	adds	r3, #1
 800e56c:	d003      	beq.n	800e576 <_fwalk_reent+0x3a>
 800e56e:	4629      	mov	r1, r5
 800e570:	4630      	mov	r0, r6
 800e572:	47c0      	blx	r8
 800e574:	4307      	orrs	r7, r0
 800e576:	3568      	adds	r5, #104	; 0x68
 800e578:	e7e9      	b.n	800e54e <_fwalk_reent+0x12>

0800e57a <__swhatbuf_r>:
 800e57a:	b570      	push	{r4, r5, r6, lr}
 800e57c:	460e      	mov	r6, r1
 800e57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e582:	2900      	cmp	r1, #0
 800e584:	b096      	sub	sp, #88	; 0x58
 800e586:	4614      	mov	r4, r2
 800e588:	461d      	mov	r5, r3
 800e58a:	da08      	bge.n	800e59e <__swhatbuf_r+0x24>
 800e58c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e590:	2200      	movs	r2, #0
 800e592:	602a      	str	r2, [r5, #0]
 800e594:	061a      	lsls	r2, r3, #24
 800e596:	d410      	bmi.n	800e5ba <__swhatbuf_r+0x40>
 800e598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e59c:	e00e      	b.n	800e5bc <__swhatbuf_r+0x42>
 800e59e:	466a      	mov	r2, sp
 800e5a0:	f000 f902 	bl	800e7a8 <_fstat_r>
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	dbf1      	blt.n	800e58c <__swhatbuf_r+0x12>
 800e5a8:	9a01      	ldr	r2, [sp, #4]
 800e5aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e5ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e5b2:	425a      	negs	r2, r3
 800e5b4:	415a      	adcs	r2, r3
 800e5b6:	602a      	str	r2, [r5, #0]
 800e5b8:	e7ee      	b.n	800e598 <__swhatbuf_r+0x1e>
 800e5ba:	2340      	movs	r3, #64	; 0x40
 800e5bc:	2000      	movs	r0, #0
 800e5be:	6023      	str	r3, [r4, #0]
 800e5c0:	b016      	add	sp, #88	; 0x58
 800e5c2:	bd70      	pop	{r4, r5, r6, pc}

0800e5c4 <__smakebuf_r>:
 800e5c4:	898b      	ldrh	r3, [r1, #12]
 800e5c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e5c8:	079d      	lsls	r5, r3, #30
 800e5ca:	4606      	mov	r6, r0
 800e5cc:	460c      	mov	r4, r1
 800e5ce:	d507      	bpl.n	800e5e0 <__smakebuf_r+0x1c>
 800e5d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e5d4:	6023      	str	r3, [r4, #0]
 800e5d6:	6123      	str	r3, [r4, #16]
 800e5d8:	2301      	movs	r3, #1
 800e5da:	6163      	str	r3, [r4, #20]
 800e5dc:	b002      	add	sp, #8
 800e5de:	bd70      	pop	{r4, r5, r6, pc}
 800e5e0:	ab01      	add	r3, sp, #4
 800e5e2:	466a      	mov	r2, sp
 800e5e4:	f7ff ffc9 	bl	800e57a <__swhatbuf_r>
 800e5e8:	9900      	ldr	r1, [sp, #0]
 800e5ea:	4605      	mov	r5, r0
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	f7fd fa2b 	bl	800ba48 <_malloc_r>
 800e5f2:	b948      	cbnz	r0, 800e608 <__smakebuf_r+0x44>
 800e5f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5f8:	059a      	lsls	r2, r3, #22
 800e5fa:	d4ef      	bmi.n	800e5dc <__smakebuf_r+0x18>
 800e5fc:	f023 0303 	bic.w	r3, r3, #3
 800e600:	f043 0302 	orr.w	r3, r3, #2
 800e604:	81a3      	strh	r3, [r4, #12]
 800e606:	e7e3      	b.n	800e5d0 <__smakebuf_r+0xc>
 800e608:	4b0d      	ldr	r3, [pc, #52]	; (800e640 <__smakebuf_r+0x7c>)
 800e60a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e60c:	89a3      	ldrh	r3, [r4, #12]
 800e60e:	6020      	str	r0, [r4, #0]
 800e610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e614:	81a3      	strh	r3, [r4, #12]
 800e616:	9b00      	ldr	r3, [sp, #0]
 800e618:	6163      	str	r3, [r4, #20]
 800e61a:	9b01      	ldr	r3, [sp, #4]
 800e61c:	6120      	str	r0, [r4, #16]
 800e61e:	b15b      	cbz	r3, 800e638 <__smakebuf_r+0x74>
 800e620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e624:	4630      	mov	r0, r6
 800e626:	f000 f8d1 	bl	800e7cc <_isatty_r>
 800e62a:	b128      	cbz	r0, 800e638 <__smakebuf_r+0x74>
 800e62c:	89a3      	ldrh	r3, [r4, #12]
 800e62e:	f023 0303 	bic.w	r3, r3, #3
 800e632:	f043 0301 	orr.w	r3, r3, #1
 800e636:	81a3      	strh	r3, [r4, #12]
 800e638:	89a0      	ldrh	r0, [r4, #12]
 800e63a:	4305      	orrs	r5, r0
 800e63c:	81a5      	strh	r5, [r4, #12]
 800e63e:	e7cd      	b.n	800e5dc <__smakebuf_r+0x18>
 800e640:	0800e3d9 	.word	0x0800e3d9

0800e644 <_malloc_usable_size_r>:
 800e644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e648:	1f18      	subs	r0, r3, #4
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	bfbc      	itt	lt
 800e64e:	580b      	ldrlt	r3, [r1, r0]
 800e650:	18c0      	addlt	r0, r0, r3
 800e652:	4770      	bx	lr

0800e654 <_raise_r>:
 800e654:	291f      	cmp	r1, #31
 800e656:	b538      	push	{r3, r4, r5, lr}
 800e658:	4604      	mov	r4, r0
 800e65a:	460d      	mov	r5, r1
 800e65c:	d904      	bls.n	800e668 <_raise_r+0x14>
 800e65e:	2316      	movs	r3, #22
 800e660:	6003      	str	r3, [r0, #0]
 800e662:	f04f 30ff 	mov.w	r0, #4294967295
 800e666:	bd38      	pop	{r3, r4, r5, pc}
 800e668:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e66a:	b112      	cbz	r2, 800e672 <_raise_r+0x1e>
 800e66c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e670:	b94b      	cbnz	r3, 800e686 <_raise_r+0x32>
 800e672:	4620      	mov	r0, r4
 800e674:	f000 f830 	bl	800e6d8 <_getpid_r>
 800e678:	462a      	mov	r2, r5
 800e67a:	4601      	mov	r1, r0
 800e67c:	4620      	mov	r0, r4
 800e67e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e682:	f000 b817 	b.w	800e6b4 <_kill_r>
 800e686:	2b01      	cmp	r3, #1
 800e688:	d00a      	beq.n	800e6a0 <_raise_r+0x4c>
 800e68a:	1c59      	adds	r1, r3, #1
 800e68c:	d103      	bne.n	800e696 <_raise_r+0x42>
 800e68e:	2316      	movs	r3, #22
 800e690:	6003      	str	r3, [r0, #0]
 800e692:	2001      	movs	r0, #1
 800e694:	e7e7      	b.n	800e666 <_raise_r+0x12>
 800e696:	2400      	movs	r4, #0
 800e698:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e69c:	4628      	mov	r0, r5
 800e69e:	4798      	blx	r3
 800e6a0:	2000      	movs	r0, #0
 800e6a2:	e7e0      	b.n	800e666 <_raise_r+0x12>

0800e6a4 <raise>:
 800e6a4:	4b02      	ldr	r3, [pc, #8]	; (800e6b0 <raise+0xc>)
 800e6a6:	4601      	mov	r1, r0
 800e6a8:	6818      	ldr	r0, [r3, #0]
 800e6aa:	f7ff bfd3 	b.w	800e654 <_raise_r>
 800e6ae:	bf00      	nop
 800e6b0:	200000c0 	.word	0x200000c0

0800e6b4 <_kill_r>:
 800e6b4:	b538      	push	{r3, r4, r5, lr}
 800e6b6:	4d07      	ldr	r5, [pc, #28]	; (800e6d4 <_kill_r+0x20>)
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	4608      	mov	r0, r1
 800e6be:	4611      	mov	r1, r2
 800e6c0:	602b      	str	r3, [r5, #0]
 800e6c2:	f7f5 fd1d 	bl	8004100 <_kill>
 800e6c6:	1c43      	adds	r3, r0, #1
 800e6c8:	d102      	bne.n	800e6d0 <_kill_r+0x1c>
 800e6ca:	682b      	ldr	r3, [r5, #0]
 800e6cc:	b103      	cbz	r3, 800e6d0 <_kill_r+0x1c>
 800e6ce:	6023      	str	r3, [r4, #0]
 800e6d0:	bd38      	pop	{r3, r4, r5, pc}
 800e6d2:	bf00      	nop
 800e6d4:	20000748 	.word	0x20000748

0800e6d8 <_getpid_r>:
 800e6d8:	f7f5 bd0a 	b.w	80040f0 <_getpid>

0800e6dc <__sread>:
 800e6dc:	b510      	push	{r4, lr}
 800e6de:	460c      	mov	r4, r1
 800e6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6e4:	f000 f894 	bl	800e810 <_read_r>
 800e6e8:	2800      	cmp	r0, #0
 800e6ea:	bfab      	itete	ge
 800e6ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e6ee:	89a3      	ldrhlt	r3, [r4, #12]
 800e6f0:	181b      	addge	r3, r3, r0
 800e6f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e6f6:	bfac      	ite	ge
 800e6f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e6fa:	81a3      	strhlt	r3, [r4, #12]
 800e6fc:	bd10      	pop	{r4, pc}

0800e6fe <__swrite>:
 800e6fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e702:	461f      	mov	r7, r3
 800e704:	898b      	ldrh	r3, [r1, #12]
 800e706:	05db      	lsls	r3, r3, #23
 800e708:	4605      	mov	r5, r0
 800e70a:	460c      	mov	r4, r1
 800e70c:	4616      	mov	r6, r2
 800e70e:	d505      	bpl.n	800e71c <__swrite+0x1e>
 800e710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e714:	2302      	movs	r3, #2
 800e716:	2200      	movs	r2, #0
 800e718:	f000 f868 	bl	800e7ec <_lseek_r>
 800e71c:	89a3      	ldrh	r3, [r4, #12]
 800e71e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e726:	81a3      	strh	r3, [r4, #12]
 800e728:	4632      	mov	r2, r6
 800e72a:	463b      	mov	r3, r7
 800e72c:	4628      	mov	r0, r5
 800e72e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e732:	f000 b817 	b.w	800e764 <_write_r>

0800e736 <__sseek>:
 800e736:	b510      	push	{r4, lr}
 800e738:	460c      	mov	r4, r1
 800e73a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e73e:	f000 f855 	bl	800e7ec <_lseek_r>
 800e742:	1c43      	adds	r3, r0, #1
 800e744:	89a3      	ldrh	r3, [r4, #12]
 800e746:	bf15      	itete	ne
 800e748:	6560      	strne	r0, [r4, #84]	; 0x54
 800e74a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e74e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e752:	81a3      	strheq	r3, [r4, #12]
 800e754:	bf18      	it	ne
 800e756:	81a3      	strhne	r3, [r4, #12]
 800e758:	bd10      	pop	{r4, pc}

0800e75a <__sclose>:
 800e75a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e75e:	f000 b813 	b.w	800e788 <_close_r>
	...

0800e764 <_write_r>:
 800e764:	b538      	push	{r3, r4, r5, lr}
 800e766:	4d07      	ldr	r5, [pc, #28]	; (800e784 <_write_r+0x20>)
 800e768:	4604      	mov	r4, r0
 800e76a:	4608      	mov	r0, r1
 800e76c:	4611      	mov	r1, r2
 800e76e:	2200      	movs	r2, #0
 800e770:	602a      	str	r2, [r5, #0]
 800e772:	461a      	mov	r2, r3
 800e774:	f7f5 fcfb 	bl	800416e <_write>
 800e778:	1c43      	adds	r3, r0, #1
 800e77a:	d102      	bne.n	800e782 <_write_r+0x1e>
 800e77c:	682b      	ldr	r3, [r5, #0]
 800e77e:	b103      	cbz	r3, 800e782 <_write_r+0x1e>
 800e780:	6023      	str	r3, [r4, #0]
 800e782:	bd38      	pop	{r3, r4, r5, pc}
 800e784:	20000748 	.word	0x20000748

0800e788 <_close_r>:
 800e788:	b538      	push	{r3, r4, r5, lr}
 800e78a:	4d06      	ldr	r5, [pc, #24]	; (800e7a4 <_close_r+0x1c>)
 800e78c:	2300      	movs	r3, #0
 800e78e:	4604      	mov	r4, r0
 800e790:	4608      	mov	r0, r1
 800e792:	602b      	str	r3, [r5, #0]
 800e794:	f7f5 fd07 	bl	80041a6 <_close>
 800e798:	1c43      	adds	r3, r0, #1
 800e79a:	d102      	bne.n	800e7a2 <_close_r+0x1a>
 800e79c:	682b      	ldr	r3, [r5, #0]
 800e79e:	b103      	cbz	r3, 800e7a2 <_close_r+0x1a>
 800e7a0:	6023      	str	r3, [r4, #0]
 800e7a2:	bd38      	pop	{r3, r4, r5, pc}
 800e7a4:	20000748 	.word	0x20000748

0800e7a8 <_fstat_r>:
 800e7a8:	b538      	push	{r3, r4, r5, lr}
 800e7aa:	4d07      	ldr	r5, [pc, #28]	; (800e7c8 <_fstat_r+0x20>)
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	4608      	mov	r0, r1
 800e7b2:	4611      	mov	r1, r2
 800e7b4:	602b      	str	r3, [r5, #0]
 800e7b6:	f7f5 fd02 	bl	80041be <_fstat>
 800e7ba:	1c43      	adds	r3, r0, #1
 800e7bc:	d102      	bne.n	800e7c4 <_fstat_r+0x1c>
 800e7be:	682b      	ldr	r3, [r5, #0]
 800e7c0:	b103      	cbz	r3, 800e7c4 <_fstat_r+0x1c>
 800e7c2:	6023      	str	r3, [r4, #0]
 800e7c4:	bd38      	pop	{r3, r4, r5, pc}
 800e7c6:	bf00      	nop
 800e7c8:	20000748 	.word	0x20000748

0800e7cc <_isatty_r>:
 800e7cc:	b538      	push	{r3, r4, r5, lr}
 800e7ce:	4d06      	ldr	r5, [pc, #24]	; (800e7e8 <_isatty_r+0x1c>)
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	4608      	mov	r0, r1
 800e7d6:	602b      	str	r3, [r5, #0]
 800e7d8:	f7f5 fd01 	bl	80041de <_isatty>
 800e7dc:	1c43      	adds	r3, r0, #1
 800e7de:	d102      	bne.n	800e7e6 <_isatty_r+0x1a>
 800e7e0:	682b      	ldr	r3, [r5, #0]
 800e7e2:	b103      	cbz	r3, 800e7e6 <_isatty_r+0x1a>
 800e7e4:	6023      	str	r3, [r4, #0]
 800e7e6:	bd38      	pop	{r3, r4, r5, pc}
 800e7e8:	20000748 	.word	0x20000748

0800e7ec <_lseek_r>:
 800e7ec:	b538      	push	{r3, r4, r5, lr}
 800e7ee:	4d07      	ldr	r5, [pc, #28]	; (800e80c <_lseek_r+0x20>)
 800e7f0:	4604      	mov	r4, r0
 800e7f2:	4608      	mov	r0, r1
 800e7f4:	4611      	mov	r1, r2
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	602a      	str	r2, [r5, #0]
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	f7f5 fcfa 	bl	80041f4 <_lseek>
 800e800:	1c43      	adds	r3, r0, #1
 800e802:	d102      	bne.n	800e80a <_lseek_r+0x1e>
 800e804:	682b      	ldr	r3, [r5, #0]
 800e806:	b103      	cbz	r3, 800e80a <_lseek_r+0x1e>
 800e808:	6023      	str	r3, [r4, #0]
 800e80a:	bd38      	pop	{r3, r4, r5, pc}
 800e80c:	20000748 	.word	0x20000748

0800e810 <_read_r>:
 800e810:	b538      	push	{r3, r4, r5, lr}
 800e812:	4d07      	ldr	r5, [pc, #28]	; (800e830 <_read_r+0x20>)
 800e814:	4604      	mov	r4, r0
 800e816:	4608      	mov	r0, r1
 800e818:	4611      	mov	r1, r2
 800e81a:	2200      	movs	r2, #0
 800e81c:	602a      	str	r2, [r5, #0]
 800e81e:	461a      	mov	r2, r3
 800e820:	f7f5 fc88 	bl	8004134 <_read>
 800e824:	1c43      	adds	r3, r0, #1
 800e826:	d102      	bne.n	800e82e <_read_r+0x1e>
 800e828:	682b      	ldr	r3, [r5, #0]
 800e82a:	b103      	cbz	r3, 800e82e <_read_r+0x1e>
 800e82c:	6023      	str	r3, [r4, #0]
 800e82e:	bd38      	pop	{r3, r4, r5, pc}
 800e830:	20000748 	.word	0x20000748

0800e834 <pow>:
 800e834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e836:	ed2d 8b02 	vpush	{d8}
 800e83a:	eeb0 8a40 	vmov.f32	s16, s0
 800e83e:	eef0 8a60 	vmov.f32	s17, s1
 800e842:	ec55 4b11 	vmov	r4, r5, d1
 800e846:	f000 f893 	bl	800e970 <__ieee754_pow>
 800e84a:	4622      	mov	r2, r4
 800e84c:	462b      	mov	r3, r5
 800e84e:	4620      	mov	r0, r4
 800e850:	4629      	mov	r1, r5
 800e852:	ec57 6b10 	vmov	r6, r7, d0
 800e856:	f7f2 f971 	bl	8000b3c <__aeabi_dcmpun>
 800e85a:	2800      	cmp	r0, #0
 800e85c:	d13b      	bne.n	800e8d6 <pow+0xa2>
 800e85e:	ec51 0b18 	vmov	r0, r1, d8
 800e862:	2200      	movs	r2, #0
 800e864:	2300      	movs	r3, #0
 800e866:	f7f2 f937 	bl	8000ad8 <__aeabi_dcmpeq>
 800e86a:	b1b8      	cbz	r0, 800e89c <pow+0x68>
 800e86c:	2200      	movs	r2, #0
 800e86e:	2300      	movs	r3, #0
 800e870:	4620      	mov	r0, r4
 800e872:	4629      	mov	r1, r5
 800e874:	f7f2 f930 	bl	8000ad8 <__aeabi_dcmpeq>
 800e878:	2800      	cmp	r0, #0
 800e87a:	d146      	bne.n	800e90a <pow+0xd6>
 800e87c:	ec45 4b10 	vmov	d0, r4, r5
 800e880:	f000 fe8f 	bl	800f5a2 <finite>
 800e884:	b338      	cbz	r0, 800e8d6 <pow+0xa2>
 800e886:	2200      	movs	r2, #0
 800e888:	2300      	movs	r3, #0
 800e88a:	4620      	mov	r0, r4
 800e88c:	4629      	mov	r1, r5
 800e88e:	f7f2 f92d 	bl	8000aec <__aeabi_dcmplt>
 800e892:	b300      	cbz	r0, 800e8d6 <pow+0xa2>
 800e894:	f7fd f81c 	bl	800b8d0 <__errno>
 800e898:	2322      	movs	r3, #34	; 0x22
 800e89a:	e01b      	b.n	800e8d4 <pow+0xa0>
 800e89c:	ec47 6b10 	vmov	d0, r6, r7
 800e8a0:	f000 fe7f 	bl	800f5a2 <finite>
 800e8a4:	b9e0      	cbnz	r0, 800e8e0 <pow+0xac>
 800e8a6:	eeb0 0a48 	vmov.f32	s0, s16
 800e8aa:	eef0 0a68 	vmov.f32	s1, s17
 800e8ae:	f000 fe78 	bl	800f5a2 <finite>
 800e8b2:	b1a8      	cbz	r0, 800e8e0 <pow+0xac>
 800e8b4:	ec45 4b10 	vmov	d0, r4, r5
 800e8b8:	f000 fe73 	bl	800f5a2 <finite>
 800e8bc:	b180      	cbz	r0, 800e8e0 <pow+0xac>
 800e8be:	4632      	mov	r2, r6
 800e8c0:	463b      	mov	r3, r7
 800e8c2:	4630      	mov	r0, r6
 800e8c4:	4639      	mov	r1, r7
 800e8c6:	f7f2 f939 	bl	8000b3c <__aeabi_dcmpun>
 800e8ca:	2800      	cmp	r0, #0
 800e8cc:	d0e2      	beq.n	800e894 <pow+0x60>
 800e8ce:	f7fc ffff 	bl	800b8d0 <__errno>
 800e8d2:	2321      	movs	r3, #33	; 0x21
 800e8d4:	6003      	str	r3, [r0, #0]
 800e8d6:	ecbd 8b02 	vpop	{d8}
 800e8da:	ec47 6b10 	vmov	d0, r6, r7
 800e8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	4630      	mov	r0, r6
 800e8e6:	4639      	mov	r1, r7
 800e8e8:	f7f2 f8f6 	bl	8000ad8 <__aeabi_dcmpeq>
 800e8ec:	2800      	cmp	r0, #0
 800e8ee:	d0f2      	beq.n	800e8d6 <pow+0xa2>
 800e8f0:	eeb0 0a48 	vmov.f32	s0, s16
 800e8f4:	eef0 0a68 	vmov.f32	s1, s17
 800e8f8:	f000 fe53 	bl	800f5a2 <finite>
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	d0ea      	beq.n	800e8d6 <pow+0xa2>
 800e900:	ec45 4b10 	vmov	d0, r4, r5
 800e904:	f000 fe4d 	bl	800f5a2 <finite>
 800e908:	e7c3      	b.n	800e892 <pow+0x5e>
 800e90a:	4f01      	ldr	r7, [pc, #4]	; (800e910 <pow+0xdc>)
 800e90c:	2600      	movs	r6, #0
 800e90e:	e7e2      	b.n	800e8d6 <pow+0xa2>
 800e910:	3ff00000 	.word	0x3ff00000

0800e914 <sqrt>:
 800e914:	b538      	push	{r3, r4, r5, lr}
 800e916:	ed2d 8b02 	vpush	{d8}
 800e91a:	ec55 4b10 	vmov	r4, r5, d0
 800e91e:	f000 fd55 	bl	800f3cc <__ieee754_sqrt>
 800e922:	4622      	mov	r2, r4
 800e924:	462b      	mov	r3, r5
 800e926:	4620      	mov	r0, r4
 800e928:	4629      	mov	r1, r5
 800e92a:	eeb0 8a40 	vmov.f32	s16, s0
 800e92e:	eef0 8a60 	vmov.f32	s17, s1
 800e932:	f7f2 f903 	bl	8000b3c <__aeabi_dcmpun>
 800e936:	b990      	cbnz	r0, 800e95e <sqrt+0x4a>
 800e938:	2200      	movs	r2, #0
 800e93a:	2300      	movs	r3, #0
 800e93c:	4620      	mov	r0, r4
 800e93e:	4629      	mov	r1, r5
 800e940:	f7f2 f8d4 	bl	8000aec <__aeabi_dcmplt>
 800e944:	b158      	cbz	r0, 800e95e <sqrt+0x4a>
 800e946:	f7fc ffc3 	bl	800b8d0 <__errno>
 800e94a:	2321      	movs	r3, #33	; 0x21
 800e94c:	6003      	str	r3, [r0, #0]
 800e94e:	2200      	movs	r2, #0
 800e950:	2300      	movs	r3, #0
 800e952:	4610      	mov	r0, r2
 800e954:	4619      	mov	r1, r3
 800e956:	f7f1 ff81 	bl	800085c <__aeabi_ddiv>
 800e95a:	ec41 0b18 	vmov	d8, r0, r1
 800e95e:	eeb0 0a48 	vmov.f32	s0, s16
 800e962:	eef0 0a68 	vmov.f32	s1, s17
 800e966:	ecbd 8b02 	vpop	{d8}
 800e96a:	bd38      	pop	{r3, r4, r5, pc}
 800e96c:	0000      	movs	r0, r0
	...

0800e970 <__ieee754_pow>:
 800e970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e974:	ed2d 8b06 	vpush	{d8-d10}
 800e978:	b089      	sub	sp, #36	; 0x24
 800e97a:	ed8d 1b00 	vstr	d1, [sp]
 800e97e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e982:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e986:	ea58 0102 	orrs.w	r1, r8, r2
 800e98a:	ec57 6b10 	vmov	r6, r7, d0
 800e98e:	d115      	bne.n	800e9bc <__ieee754_pow+0x4c>
 800e990:	19b3      	adds	r3, r6, r6
 800e992:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e996:	4152      	adcs	r2, r2
 800e998:	4299      	cmp	r1, r3
 800e99a:	4b89      	ldr	r3, [pc, #548]	; (800ebc0 <__ieee754_pow+0x250>)
 800e99c:	4193      	sbcs	r3, r2
 800e99e:	f080 84d2 	bcs.w	800f346 <__ieee754_pow+0x9d6>
 800e9a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e9a6:	4630      	mov	r0, r6
 800e9a8:	4639      	mov	r1, r7
 800e9aa:	f7f1 fc77 	bl	800029c <__adddf3>
 800e9ae:	ec41 0b10 	vmov	d0, r0, r1
 800e9b2:	b009      	add	sp, #36	; 0x24
 800e9b4:	ecbd 8b06 	vpop	{d8-d10}
 800e9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9bc:	4b81      	ldr	r3, [pc, #516]	; (800ebc4 <__ieee754_pow+0x254>)
 800e9be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e9c2:	429c      	cmp	r4, r3
 800e9c4:	ee10 aa10 	vmov	sl, s0
 800e9c8:	463d      	mov	r5, r7
 800e9ca:	dc06      	bgt.n	800e9da <__ieee754_pow+0x6a>
 800e9cc:	d101      	bne.n	800e9d2 <__ieee754_pow+0x62>
 800e9ce:	2e00      	cmp	r6, #0
 800e9d0:	d1e7      	bne.n	800e9a2 <__ieee754_pow+0x32>
 800e9d2:	4598      	cmp	r8, r3
 800e9d4:	dc01      	bgt.n	800e9da <__ieee754_pow+0x6a>
 800e9d6:	d10f      	bne.n	800e9f8 <__ieee754_pow+0x88>
 800e9d8:	b172      	cbz	r2, 800e9f8 <__ieee754_pow+0x88>
 800e9da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e9de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e9e2:	ea55 050a 	orrs.w	r5, r5, sl
 800e9e6:	d1dc      	bne.n	800e9a2 <__ieee754_pow+0x32>
 800e9e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e9ec:	18db      	adds	r3, r3, r3
 800e9ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e9f2:	4152      	adcs	r2, r2
 800e9f4:	429d      	cmp	r5, r3
 800e9f6:	e7d0      	b.n	800e99a <__ieee754_pow+0x2a>
 800e9f8:	2d00      	cmp	r5, #0
 800e9fa:	da3b      	bge.n	800ea74 <__ieee754_pow+0x104>
 800e9fc:	4b72      	ldr	r3, [pc, #456]	; (800ebc8 <__ieee754_pow+0x258>)
 800e9fe:	4598      	cmp	r8, r3
 800ea00:	dc51      	bgt.n	800eaa6 <__ieee754_pow+0x136>
 800ea02:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ea06:	4598      	cmp	r8, r3
 800ea08:	f340 84ac 	ble.w	800f364 <__ieee754_pow+0x9f4>
 800ea0c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ea10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ea14:	2b14      	cmp	r3, #20
 800ea16:	dd0f      	ble.n	800ea38 <__ieee754_pow+0xc8>
 800ea18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ea1c:	fa22 f103 	lsr.w	r1, r2, r3
 800ea20:	fa01 f303 	lsl.w	r3, r1, r3
 800ea24:	4293      	cmp	r3, r2
 800ea26:	f040 849d 	bne.w	800f364 <__ieee754_pow+0x9f4>
 800ea2a:	f001 0101 	and.w	r1, r1, #1
 800ea2e:	f1c1 0302 	rsb	r3, r1, #2
 800ea32:	9304      	str	r3, [sp, #16]
 800ea34:	b182      	cbz	r2, 800ea58 <__ieee754_pow+0xe8>
 800ea36:	e05f      	b.n	800eaf8 <__ieee754_pow+0x188>
 800ea38:	2a00      	cmp	r2, #0
 800ea3a:	d15b      	bne.n	800eaf4 <__ieee754_pow+0x184>
 800ea3c:	f1c3 0314 	rsb	r3, r3, #20
 800ea40:	fa48 f103 	asr.w	r1, r8, r3
 800ea44:	fa01 f303 	lsl.w	r3, r1, r3
 800ea48:	4543      	cmp	r3, r8
 800ea4a:	f040 8488 	bne.w	800f35e <__ieee754_pow+0x9ee>
 800ea4e:	f001 0101 	and.w	r1, r1, #1
 800ea52:	f1c1 0302 	rsb	r3, r1, #2
 800ea56:	9304      	str	r3, [sp, #16]
 800ea58:	4b5c      	ldr	r3, [pc, #368]	; (800ebcc <__ieee754_pow+0x25c>)
 800ea5a:	4598      	cmp	r8, r3
 800ea5c:	d132      	bne.n	800eac4 <__ieee754_pow+0x154>
 800ea5e:	f1b9 0f00 	cmp.w	r9, #0
 800ea62:	f280 8478 	bge.w	800f356 <__ieee754_pow+0x9e6>
 800ea66:	4959      	ldr	r1, [pc, #356]	; (800ebcc <__ieee754_pow+0x25c>)
 800ea68:	4632      	mov	r2, r6
 800ea6a:	463b      	mov	r3, r7
 800ea6c:	2000      	movs	r0, #0
 800ea6e:	f7f1 fef5 	bl	800085c <__aeabi_ddiv>
 800ea72:	e79c      	b.n	800e9ae <__ieee754_pow+0x3e>
 800ea74:	2300      	movs	r3, #0
 800ea76:	9304      	str	r3, [sp, #16]
 800ea78:	2a00      	cmp	r2, #0
 800ea7a:	d13d      	bne.n	800eaf8 <__ieee754_pow+0x188>
 800ea7c:	4b51      	ldr	r3, [pc, #324]	; (800ebc4 <__ieee754_pow+0x254>)
 800ea7e:	4598      	cmp	r8, r3
 800ea80:	d1ea      	bne.n	800ea58 <__ieee754_pow+0xe8>
 800ea82:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ea86:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ea8a:	ea53 030a 	orrs.w	r3, r3, sl
 800ea8e:	f000 845a 	beq.w	800f346 <__ieee754_pow+0x9d6>
 800ea92:	4b4f      	ldr	r3, [pc, #316]	; (800ebd0 <__ieee754_pow+0x260>)
 800ea94:	429c      	cmp	r4, r3
 800ea96:	dd08      	ble.n	800eaaa <__ieee754_pow+0x13a>
 800ea98:	f1b9 0f00 	cmp.w	r9, #0
 800ea9c:	f2c0 8457 	blt.w	800f34e <__ieee754_pow+0x9de>
 800eaa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eaa4:	e783      	b.n	800e9ae <__ieee754_pow+0x3e>
 800eaa6:	2302      	movs	r3, #2
 800eaa8:	e7e5      	b.n	800ea76 <__ieee754_pow+0x106>
 800eaaa:	f1b9 0f00 	cmp.w	r9, #0
 800eaae:	f04f 0000 	mov.w	r0, #0
 800eab2:	f04f 0100 	mov.w	r1, #0
 800eab6:	f6bf af7a 	bge.w	800e9ae <__ieee754_pow+0x3e>
 800eaba:	e9dd 0300 	ldrd	r0, r3, [sp]
 800eabe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800eac2:	e774      	b.n	800e9ae <__ieee754_pow+0x3e>
 800eac4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800eac8:	d106      	bne.n	800ead8 <__ieee754_pow+0x168>
 800eaca:	4632      	mov	r2, r6
 800eacc:	463b      	mov	r3, r7
 800eace:	4630      	mov	r0, r6
 800ead0:	4639      	mov	r1, r7
 800ead2:	f7f1 fd99 	bl	8000608 <__aeabi_dmul>
 800ead6:	e76a      	b.n	800e9ae <__ieee754_pow+0x3e>
 800ead8:	4b3e      	ldr	r3, [pc, #248]	; (800ebd4 <__ieee754_pow+0x264>)
 800eada:	4599      	cmp	r9, r3
 800eadc:	d10c      	bne.n	800eaf8 <__ieee754_pow+0x188>
 800eade:	2d00      	cmp	r5, #0
 800eae0:	db0a      	blt.n	800eaf8 <__ieee754_pow+0x188>
 800eae2:	ec47 6b10 	vmov	d0, r6, r7
 800eae6:	b009      	add	sp, #36	; 0x24
 800eae8:	ecbd 8b06 	vpop	{d8-d10}
 800eaec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaf0:	f000 bc6c 	b.w	800f3cc <__ieee754_sqrt>
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	9304      	str	r3, [sp, #16]
 800eaf8:	ec47 6b10 	vmov	d0, r6, r7
 800eafc:	f000 fd48 	bl	800f590 <fabs>
 800eb00:	ec51 0b10 	vmov	r0, r1, d0
 800eb04:	f1ba 0f00 	cmp.w	sl, #0
 800eb08:	d129      	bne.n	800eb5e <__ieee754_pow+0x1ee>
 800eb0a:	b124      	cbz	r4, 800eb16 <__ieee754_pow+0x1a6>
 800eb0c:	4b2f      	ldr	r3, [pc, #188]	; (800ebcc <__ieee754_pow+0x25c>)
 800eb0e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d123      	bne.n	800eb5e <__ieee754_pow+0x1ee>
 800eb16:	f1b9 0f00 	cmp.w	r9, #0
 800eb1a:	da05      	bge.n	800eb28 <__ieee754_pow+0x1b8>
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	460b      	mov	r3, r1
 800eb20:	2000      	movs	r0, #0
 800eb22:	492a      	ldr	r1, [pc, #168]	; (800ebcc <__ieee754_pow+0x25c>)
 800eb24:	f7f1 fe9a 	bl	800085c <__aeabi_ddiv>
 800eb28:	2d00      	cmp	r5, #0
 800eb2a:	f6bf af40 	bge.w	800e9ae <__ieee754_pow+0x3e>
 800eb2e:	9b04      	ldr	r3, [sp, #16]
 800eb30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800eb34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800eb38:	4323      	orrs	r3, r4
 800eb3a:	d108      	bne.n	800eb4e <__ieee754_pow+0x1de>
 800eb3c:	4602      	mov	r2, r0
 800eb3e:	460b      	mov	r3, r1
 800eb40:	4610      	mov	r0, r2
 800eb42:	4619      	mov	r1, r3
 800eb44:	f7f1 fba8 	bl	8000298 <__aeabi_dsub>
 800eb48:	4602      	mov	r2, r0
 800eb4a:	460b      	mov	r3, r1
 800eb4c:	e78f      	b.n	800ea6e <__ieee754_pow+0xfe>
 800eb4e:	9b04      	ldr	r3, [sp, #16]
 800eb50:	2b01      	cmp	r3, #1
 800eb52:	f47f af2c 	bne.w	800e9ae <__ieee754_pow+0x3e>
 800eb56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	e727      	b.n	800e9ae <__ieee754_pow+0x3e>
 800eb5e:	0feb      	lsrs	r3, r5, #31
 800eb60:	3b01      	subs	r3, #1
 800eb62:	9306      	str	r3, [sp, #24]
 800eb64:	9a06      	ldr	r2, [sp, #24]
 800eb66:	9b04      	ldr	r3, [sp, #16]
 800eb68:	4313      	orrs	r3, r2
 800eb6a:	d102      	bne.n	800eb72 <__ieee754_pow+0x202>
 800eb6c:	4632      	mov	r2, r6
 800eb6e:	463b      	mov	r3, r7
 800eb70:	e7e6      	b.n	800eb40 <__ieee754_pow+0x1d0>
 800eb72:	4b19      	ldr	r3, [pc, #100]	; (800ebd8 <__ieee754_pow+0x268>)
 800eb74:	4598      	cmp	r8, r3
 800eb76:	f340 80fb 	ble.w	800ed70 <__ieee754_pow+0x400>
 800eb7a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800eb7e:	4598      	cmp	r8, r3
 800eb80:	4b13      	ldr	r3, [pc, #76]	; (800ebd0 <__ieee754_pow+0x260>)
 800eb82:	dd0c      	ble.n	800eb9e <__ieee754_pow+0x22e>
 800eb84:	429c      	cmp	r4, r3
 800eb86:	dc0f      	bgt.n	800eba8 <__ieee754_pow+0x238>
 800eb88:	f1b9 0f00 	cmp.w	r9, #0
 800eb8c:	da0f      	bge.n	800ebae <__ieee754_pow+0x23e>
 800eb8e:	2000      	movs	r0, #0
 800eb90:	b009      	add	sp, #36	; 0x24
 800eb92:	ecbd 8b06 	vpop	{d8-d10}
 800eb96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb9a:	f000 bcf0 	b.w	800f57e <__math_oflow>
 800eb9e:	429c      	cmp	r4, r3
 800eba0:	dbf2      	blt.n	800eb88 <__ieee754_pow+0x218>
 800eba2:	4b0a      	ldr	r3, [pc, #40]	; (800ebcc <__ieee754_pow+0x25c>)
 800eba4:	429c      	cmp	r4, r3
 800eba6:	dd19      	ble.n	800ebdc <__ieee754_pow+0x26c>
 800eba8:	f1b9 0f00 	cmp.w	r9, #0
 800ebac:	dcef      	bgt.n	800eb8e <__ieee754_pow+0x21e>
 800ebae:	2000      	movs	r0, #0
 800ebb0:	b009      	add	sp, #36	; 0x24
 800ebb2:	ecbd 8b06 	vpop	{d8-d10}
 800ebb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebba:	f000 bcd7 	b.w	800f56c <__math_uflow>
 800ebbe:	bf00      	nop
 800ebc0:	fff00000 	.word	0xfff00000
 800ebc4:	7ff00000 	.word	0x7ff00000
 800ebc8:	433fffff 	.word	0x433fffff
 800ebcc:	3ff00000 	.word	0x3ff00000
 800ebd0:	3fefffff 	.word	0x3fefffff
 800ebd4:	3fe00000 	.word	0x3fe00000
 800ebd8:	41e00000 	.word	0x41e00000
 800ebdc:	4b60      	ldr	r3, [pc, #384]	; (800ed60 <__ieee754_pow+0x3f0>)
 800ebde:	2200      	movs	r2, #0
 800ebe0:	f7f1 fb5a 	bl	8000298 <__aeabi_dsub>
 800ebe4:	a354      	add	r3, pc, #336	; (adr r3, 800ed38 <__ieee754_pow+0x3c8>)
 800ebe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebea:	4604      	mov	r4, r0
 800ebec:	460d      	mov	r5, r1
 800ebee:	f7f1 fd0b 	bl	8000608 <__aeabi_dmul>
 800ebf2:	a353      	add	r3, pc, #332	; (adr r3, 800ed40 <__ieee754_pow+0x3d0>)
 800ebf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf8:	4606      	mov	r6, r0
 800ebfa:	460f      	mov	r7, r1
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	4629      	mov	r1, r5
 800ec00:	f7f1 fd02 	bl	8000608 <__aeabi_dmul>
 800ec04:	4b57      	ldr	r3, [pc, #348]	; (800ed64 <__ieee754_pow+0x3f4>)
 800ec06:	4682      	mov	sl, r0
 800ec08:	468b      	mov	fp, r1
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	4629      	mov	r1, r5
 800ec10:	f7f1 fcfa 	bl	8000608 <__aeabi_dmul>
 800ec14:	4602      	mov	r2, r0
 800ec16:	460b      	mov	r3, r1
 800ec18:	a14b      	add	r1, pc, #300	; (adr r1, 800ed48 <__ieee754_pow+0x3d8>)
 800ec1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec1e:	f7f1 fb3b 	bl	8000298 <__aeabi_dsub>
 800ec22:	4622      	mov	r2, r4
 800ec24:	462b      	mov	r3, r5
 800ec26:	f7f1 fcef 	bl	8000608 <__aeabi_dmul>
 800ec2a:	4602      	mov	r2, r0
 800ec2c:	460b      	mov	r3, r1
 800ec2e:	2000      	movs	r0, #0
 800ec30:	494d      	ldr	r1, [pc, #308]	; (800ed68 <__ieee754_pow+0x3f8>)
 800ec32:	f7f1 fb31 	bl	8000298 <__aeabi_dsub>
 800ec36:	4622      	mov	r2, r4
 800ec38:	4680      	mov	r8, r0
 800ec3a:	4689      	mov	r9, r1
 800ec3c:	462b      	mov	r3, r5
 800ec3e:	4620      	mov	r0, r4
 800ec40:	4629      	mov	r1, r5
 800ec42:	f7f1 fce1 	bl	8000608 <__aeabi_dmul>
 800ec46:	4602      	mov	r2, r0
 800ec48:	460b      	mov	r3, r1
 800ec4a:	4640      	mov	r0, r8
 800ec4c:	4649      	mov	r1, r9
 800ec4e:	f7f1 fcdb 	bl	8000608 <__aeabi_dmul>
 800ec52:	a33f      	add	r3, pc, #252	; (adr r3, 800ed50 <__ieee754_pow+0x3e0>)
 800ec54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec58:	f7f1 fcd6 	bl	8000608 <__aeabi_dmul>
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	460b      	mov	r3, r1
 800ec60:	4650      	mov	r0, sl
 800ec62:	4659      	mov	r1, fp
 800ec64:	f7f1 fb18 	bl	8000298 <__aeabi_dsub>
 800ec68:	4602      	mov	r2, r0
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	4680      	mov	r8, r0
 800ec6e:	4689      	mov	r9, r1
 800ec70:	4630      	mov	r0, r6
 800ec72:	4639      	mov	r1, r7
 800ec74:	f7f1 fb12 	bl	800029c <__adddf3>
 800ec78:	2000      	movs	r0, #0
 800ec7a:	4632      	mov	r2, r6
 800ec7c:	463b      	mov	r3, r7
 800ec7e:	4604      	mov	r4, r0
 800ec80:	460d      	mov	r5, r1
 800ec82:	f7f1 fb09 	bl	8000298 <__aeabi_dsub>
 800ec86:	4602      	mov	r2, r0
 800ec88:	460b      	mov	r3, r1
 800ec8a:	4640      	mov	r0, r8
 800ec8c:	4649      	mov	r1, r9
 800ec8e:	f7f1 fb03 	bl	8000298 <__aeabi_dsub>
 800ec92:	9b04      	ldr	r3, [sp, #16]
 800ec94:	9a06      	ldr	r2, [sp, #24]
 800ec96:	3b01      	subs	r3, #1
 800ec98:	4313      	orrs	r3, r2
 800ec9a:	4682      	mov	sl, r0
 800ec9c:	468b      	mov	fp, r1
 800ec9e:	f040 81e7 	bne.w	800f070 <__ieee754_pow+0x700>
 800eca2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ed58 <__ieee754_pow+0x3e8>
 800eca6:	eeb0 8a47 	vmov.f32	s16, s14
 800ecaa:	eef0 8a67 	vmov.f32	s17, s15
 800ecae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ecb2:	2600      	movs	r6, #0
 800ecb4:	4632      	mov	r2, r6
 800ecb6:	463b      	mov	r3, r7
 800ecb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecbc:	f7f1 faec 	bl	8000298 <__aeabi_dsub>
 800ecc0:	4622      	mov	r2, r4
 800ecc2:	462b      	mov	r3, r5
 800ecc4:	f7f1 fca0 	bl	8000608 <__aeabi_dmul>
 800ecc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eccc:	4680      	mov	r8, r0
 800ecce:	4689      	mov	r9, r1
 800ecd0:	4650      	mov	r0, sl
 800ecd2:	4659      	mov	r1, fp
 800ecd4:	f7f1 fc98 	bl	8000608 <__aeabi_dmul>
 800ecd8:	4602      	mov	r2, r0
 800ecda:	460b      	mov	r3, r1
 800ecdc:	4640      	mov	r0, r8
 800ecde:	4649      	mov	r1, r9
 800ece0:	f7f1 fadc 	bl	800029c <__adddf3>
 800ece4:	4632      	mov	r2, r6
 800ece6:	463b      	mov	r3, r7
 800ece8:	4680      	mov	r8, r0
 800ecea:	4689      	mov	r9, r1
 800ecec:	4620      	mov	r0, r4
 800ecee:	4629      	mov	r1, r5
 800ecf0:	f7f1 fc8a 	bl	8000608 <__aeabi_dmul>
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	4604      	mov	r4, r0
 800ecf8:	460d      	mov	r5, r1
 800ecfa:	4602      	mov	r2, r0
 800ecfc:	4649      	mov	r1, r9
 800ecfe:	4640      	mov	r0, r8
 800ed00:	f7f1 facc 	bl	800029c <__adddf3>
 800ed04:	4b19      	ldr	r3, [pc, #100]	; (800ed6c <__ieee754_pow+0x3fc>)
 800ed06:	4299      	cmp	r1, r3
 800ed08:	ec45 4b19 	vmov	d9, r4, r5
 800ed0c:	4606      	mov	r6, r0
 800ed0e:	460f      	mov	r7, r1
 800ed10:	468b      	mov	fp, r1
 800ed12:	f340 82f1 	ble.w	800f2f8 <__ieee754_pow+0x988>
 800ed16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ed1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ed1e:	4303      	orrs	r3, r0
 800ed20:	f000 81e4 	beq.w	800f0ec <__ieee754_pow+0x77c>
 800ed24:	ec51 0b18 	vmov	r0, r1, d8
 800ed28:	2200      	movs	r2, #0
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	f7f1 fede 	bl	8000aec <__aeabi_dcmplt>
 800ed30:	3800      	subs	r0, #0
 800ed32:	bf18      	it	ne
 800ed34:	2001      	movne	r0, #1
 800ed36:	e72b      	b.n	800eb90 <__ieee754_pow+0x220>
 800ed38:	60000000 	.word	0x60000000
 800ed3c:	3ff71547 	.word	0x3ff71547
 800ed40:	f85ddf44 	.word	0xf85ddf44
 800ed44:	3e54ae0b 	.word	0x3e54ae0b
 800ed48:	55555555 	.word	0x55555555
 800ed4c:	3fd55555 	.word	0x3fd55555
 800ed50:	652b82fe 	.word	0x652b82fe
 800ed54:	3ff71547 	.word	0x3ff71547
 800ed58:	00000000 	.word	0x00000000
 800ed5c:	bff00000 	.word	0xbff00000
 800ed60:	3ff00000 	.word	0x3ff00000
 800ed64:	3fd00000 	.word	0x3fd00000
 800ed68:	3fe00000 	.word	0x3fe00000
 800ed6c:	408fffff 	.word	0x408fffff
 800ed70:	4bd5      	ldr	r3, [pc, #852]	; (800f0c8 <__ieee754_pow+0x758>)
 800ed72:	402b      	ands	r3, r5
 800ed74:	2200      	movs	r2, #0
 800ed76:	b92b      	cbnz	r3, 800ed84 <__ieee754_pow+0x414>
 800ed78:	4bd4      	ldr	r3, [pc, #848]	; (800f0cc <__ieee754_pow+0x75c>)
 800ed7a:	f7f1 fc45 	bl	8000608 <__aeabi_dmul>
 800ed7e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ed82:	460c      	mov	r4, r1
 800ed84:	1523      	asrs	r3, r4, #20
 800ed86:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ed8a:	4413      	add	r3, r2
 800ed8c:	9305      	str	r3, [sp, #20]
 800ed8e:	4bd0      	ldr	r3, [pc, #832]	; (800f0d0 <__ieee754_pow+0x760>)
 800ed90:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ed94:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ed98:	429c      	cmp	r4, r3
 800ed9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ed9e:	dd08      	ble.n	800edb2 <__ieee754_pow+0x442>
 800eda0:	4bcc      	ldr	r3, [pc, #816]	; (800f0d4 <__ieee754_pow+0x764>)
 800eda2:	429c      	cmp	r4, r3
 800eda4:	f340 8162 	ble.w	800f06c <__ieee754_pow+0x6fc>
 800eda8:	9b05      	ldr	r3, [sp, #20]
 800edaa:	3301      	adds	r3, #1
 800edac:	9305      	str	r3, [sp, #20]
 800edae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800edb2:	2400      	movs	r4, #0
 800edb4:	00e3      	lsls	r3, r4, #3
 800edb6:	9307      	str	r3, [sp, #28]
 800edb8:	4bc7      	ldr	r3, [pc, #796]	; (800f0d8 <__ieee754_pow+0x768>)
 800edba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800edbe:	ed93 7b00 	vldr	d7, [r3]
 800edc2:	4629      	mov	r1, r5
 800edc4:	ec53 2b17 	vmov	r2, r3, d7
 800edc8:	eeb0 9a47 	vmov.f32	s18, s14
 800edcc:	eef0 9a67 	vmov.f32	s19, s15
 800edd0:	4682      	mov	sl, r0
 800edd2:	f7f1 fa61 	bl	8000298 <__aeabi_dsub>
 800edd6:	4652      	mov	r2, sl
 800edd8:	4606      	mov	r6, r0
 800edda:	460f      	mov	r7, r1
 800eddc:	462b      	mov	r3, r5
 800edde:	ec51 0b19 	vmov	r0, r1, d9
 800ede2:	f7f1 fa5b 	bl	800029c <__adddf3>
 800ede6:	4602      	mov	r2, r0
 800ede8:	460b      	mov	r3, r1
 800edea:	2000      	movs	r0, #0
 800edec:	49bb      	ldr	r1, [pc, #748]	; (800f0dc <__ieee754_pow+0x76c>)
 800edee:	f7f1 fd35 	bl	800085c <__aeabi_ddiv>
 800edf2:	ec41 0b1a 	vmov	d10, r0, r1
 800edf6:	4602      	mov	r2, r0
 800edf8:	460b      	mov	r3, r1
 800edfa:	4630      	mov	r0, r6
 800edfc:	4639      	mov	r1, r7
 800edfe:	f7f1 fc03 	bl	8000608 <__aeabi_dmul>
 800ee02:	2300      	movs	r3, #0
 800ee04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee08:	9302      	str	r3, [sp, #8]
 800ee0a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ee0e:	46ab      	mov	fp, r5
 800ee10:	106d      	asrs	r5, r5, #1
 800ee12:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ee16:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ee1a:	ec41 0b18 	vmov	d8, r0, r1
 800ee1e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ee22:	2200      	movs	r2, #0
 800ee24:	4640      	mov	r0, r8
 800ee26:	4649      	mov	r1, r9
 800ee28:	4614      	mov	r4, r2
 800ee2a:	461d      	mov	r5, r3
 800ee2c:	f7f1 fbec 	bl	8000608 <__aeabi_dmul>
 800ee30:	4602      	mov	r2, r0
 800ee32:	460b      	mov	r3, r1
 800ee34:	4630      	mov	r0, r6
 800ee36:	4639      	mov	r1, r7
 800ee38:	f7f1 fa2e 	bl	8000298 <__aeabi_dsub>
 800ee3c:	ec53 2b19 	vmov	r2, r3, d9
 800ee40:	4606      	mov	r6, r0
 800ee42:	460f      	mov	r7, r1
 800ee44:	4620      	mov	r0, r4
 800ee46:	4629      	mov	r1, r5
 800ee48:	f7f1 fa26 	bl	8000298 <__aeabi_dsub>
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	460b      	mov	r3, r1
 800ee50:	4650      	mov	r0, sl
 800ee52:	4659      	mov	r1, fp
 800ee54:	f7f1 fa20 	bl	8000298 <__aeabi_dsub>
 800ee58:	4642      	mov	r2, r8
 800ee5a:	464b      	mov	r3, r9
 800ee5c:	f7f1 fbd4 	bl	8000608 <__aeabi_dmul>
 800ee60:	4602      	mov	r2, r0
 800ee62:	460b      	mov	r3, r1
 800ee64:	4630      	mov	r0, r6
 800ee66:	4639      	mov	r1, r7
 800ee68:	f7f1 fa16 	bl	8000298 <__aeabi_dsub>
 800ee6c:	ec53 2b1a 	vmov	r2, r3, d10
 800ee70:	f7f1 fbca 	bl	8000608 <__aeabi_dmul>
 800ee74:	ec53 2b18 	vmov	r2, r3, d8
 800ee78:	ec41 0b19 	vmov	d9, r0, r1
 800ee7c:	ec51 0b18 	vmov	r0, r1, d8
 800ee80:	f7f1 fbc2 	bl	8000608 <__aeabi_dmul>
 800ee84:	a37c      	add	r3, pc, #496	; (adr r3, 800f078 <__ieee754_pow+0x708>)
 800ee86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8a:	4604      	mov	r4, r0
 800ee8c:	460d      	mov	r5, r1
 800ee8e:	f7f1 fbbb 	bl	8000608 <__aeabi_dmul>
 800ee92:	a37b      	add	r3, pc, #492	; (adr r3, 800f080 <__ieee754_pow+0x710>)
 800ee94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee98:	f7f1 fa00 	bl	800029c <__adddf3>
 800ee9c:	4622      	mov	r2, r4
 800ee9e:	462b      	mov	r3, r5
 800eea0:	f7f1 fbb2 	bl	8000608 <__aeabi_dmul>
 800eea4:	a378      	add	r3, pc, #480	; (adr r3, 800f088 <__ieee754_pow+0x718>)
 800eea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeaa:	f7f1 f9f7 	bl	800029c <__adddf3>
 800eeae:	4622      	mov	r2, r4
 800eeb0:	462b      	mov	r3, r5
 800eeb2:	f7f1 fba9 	bl	8000608 <__aeabi_dmul>
 800eeb6:	a376      	add	r3, pc, #472	; (adr r3, 800f090 <__ieee754_pow+0x720>)
 800eeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eebc:	f7f1 f9ee 	bl	800029c <__adddf3>
 800eec0:	4622      	mov	r2, r4
 800eec2:	462b      	mov	r3, r5
 800eec4:	f7f1 fba0 	bl	8000608 <__aeabi_dmul>
 800eec8:	a373      	add	r3, pc, #460	; (adr r3, 800f098 <__ieee754_pow+0x728>)
 800eeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eece:	f7f1 f9e5 	bl	800029c <__adddf3>
 800eed2:	4622      	mov	r2, r4
 800eed4:	462b      	mov	r3, r5
 800eed6:	f7f1 fb97 	bl	8000608 <__aeabi_dmul>
 800eeda:	a371      	add	r3, pc, #452	; (adr r3, 800f0a0 <__ieee754_pow+0x730>)
 800eedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee0:	f7f1 f9dc 	bl	800029c <__adddf3>
 800eee4:	4622      	mov	r2, r4
 800eee6:	4606      	mov	r6, r0
 800eee8:	460f      	mov	r7, r1
 800eeea:	462b      	mov	r3, r5
 800eeec:	4620      	mov	r0, r4
 800eeee:	4629      	mov	r1, r5
 800eef0:	f7f1 fb8a 	bl	8000608 <__aeabi_dmul>
 800eef4:	4602      	mov	r2, r0
 800eef6:	460b      	mov	r3, r1
 800eef8:	4630      	mov	r0, r6
 800eefa:	4639      	mov	r1, r7
 800eefc:	f7f1 fb84 	bl	8000608 <__aeabi_dmul>
 800ef00:	4642      	mov	r2, r8
 800ef02:	4604      	mov	r4, r0
 800ef04:	460d      	mov	r5, r1
 800ef06:	464b      	mov	r3, r9
 800ef08:	ec51 0b18 	vmov	r0, r1, d8
 800ef0c:	f7f1 f9c6 	bl	800029c <__adddf3>
 800ef10:	ec53 2b19 	vmov	r2, r3, d9
 800ef14:	f7f1 fb78 	bl	8000608 <__aeabi_dmul>
 800ef18:	4622      	mov	r2, r4
 800ef1a:	462b      	mov	r3, r5
 800ef1c:	f7f1 f9be 	bl	800029c <__adddf3>
 800ef20:	4642      	mov	r2, r8
 800ef22:	4682      	mov	sl, r0
 800ef24:	468b      	mov	fp, r1
 800ef26:	464b      	mov	r3, r9
 800ef28:	4640      	mov	r0, r8
 800ef2a:	4649      	mov	r1, r9
 800ef2c:	f7f1 fb6c 	bl	8000608 <__aeabi_dmul>
 800ef30:	4b6b      	ldr	r3, [pc, #428]	; (800f0e0 <__ieee754_pow+0x770>)
 800ef32:	2200      	movs	r2, #0
 800ef34:	4606      	mov	r6, r0
 800ef36:	460f      	mov	r7, r1
 800ef38:	f7f1 f9b0 	bl	800029c <__adddf3>
 800ef3c:	4652      	mov	r2, sl
 800ef3e:	465b      	mov	r3, fp
 800ef40:	f7f1 f9ac 	bl	800029c <__adddf3>
 800ef44:	2000      	movs	r0, #0
 800ef46:	4604      	mov	r4, r0
 800ef48:	460d      	mov	r5, r1
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	4640      	mov	r0, r8
 800ef50:	4649      	mov	r1, r9
 800ef52:	f7f1 fb59 	bl	8000608 <__aeabi_dmul>
 800ef56:	4b62      	ldr	r3, [pc, #392]	; (800f0e0 <__ieee754_pow+0x770>)
 800ef58:	4680      	mov	r8, r0
 800ef5a:	4689      	mov	r9, r1
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	4620      	mov	r0, r4
 800ef60:	4629      	mov	r1, r5
 800ef62:	f7f1 f999 	bl	8000298 <__aeabi_dsub>
 800ef66:	4632      	mov	r2, r6
 800ef68:	463b      	mov	r3, r7
 800ef6a:	f7f1 f995 	bl	8000298 <__aeabi_dsub>
 800ef6e:	4602      	mov	r2, r0
 800ef70:	460b      	mov	r3, r1
 800ef72:	4650      	mov	r0, sl
 800ef74:	4659      	mov	r1, fp
 800ef76:	f7f1 f98f 	bl	8000298 <__aeabi_dsub>
 800ef7a:	ec53 2b18 	vmov	r2, r3, d8
 800ef7e:	f7f1 fb43 	bl	8000608 <__aeabi_dmul>
 800ef82:	4622      	mov	r2, r4
 800ef84:	4606      	mov	r6, r0
 800ef86:	460f      	mov	r7, r1
 800ef88:	462b      	mov	r3, r5
 800ef8a:	ec51 0b19 	vmov	r0, r1, d9
 800ef8e:	f7f1 fb3b 	bl	8000608 <__aeabi_dmul>
 800ef92:	4602      	mov	r2, r0
 800ef94:	460b      	mov	r3, r1
 800ef96:	4630      	mov	r0, r6
 800ef98:	4639      	mov	r1, r7
 800ef9a:	f7f1 f97f 	bl	800029c <__adddf3>
 800ef9e:	4606      	mov	r6, r0
 800efa0:	460f      	mov	r7, r1
 800efa2:	4602      	mov	r2, r0
 800efa4:	460b      	mov	r3, r1
 800efa6:	4640      	mov	r0, r8
 800efa8:	4649      	mov	r1, r9
 800efaa:	f7f1 f977 	bl	800029c <__adddf3>
 800efae:	a33e      	add	r3, pc, #248	; (adr r3, 800f0a8 <__ieee754_pow+0x738>)
 800efb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb4:	2000      	movs	r0, #0
 800efb6:	4604      	mov	r4, r0
 800efb8:	460d      	mov	r5, r1
 800efba:	f7f1 fb25 	bl	8000608 <__aeabi_dmul>
 800efbe:	4642      	mov	r2, r8
 800efc0:	ec41 0b18 	vmov	d8, r0, r1
 800efc4:	464b      	mov	r3, r9
 800efc6:	4620      	mov	r0, r4
 800efc8:	4629      	mov	r1, r5
 800efca:	f7f1 f965 	bl	8000298 <__aeabi_dsub>
 800efce:	4602      	mov	r2, r0
 800efd0:	460b      	mov	r3, r1
 800efd2:	4630      	mov	r0, r6
 800efd4:	4639      	mov	r1, r7
 800efd6:	f7f1 f95f 	bl	8000298 <__aeabi_dsub>
 800efda:	a335      	add	r3, pc, #212	; (adr r3, 800f0b0 <__ieee754_pow+0x740>)
 800efdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe0:	f7f1 fb12 	bl	8000608 <__aeabi_dmul>
 800efe4:	a334      	add	r3, pc, #208	; (adr r3, 800f0b8 <__ieee754_pow+0x748>)
 800efe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efea:	4606      	mov	r6, r0
 800efec:	460f      	mov	r7, r1
 800efee:	4620      	mov	r0, r4
 800eff0:	4629      	mov	r1, r5
 800eff2:	f7f1 fb09 	bl	8000608 <__aeabi_dmul>
 800eff6:	4602      	mov	r2, r0
 800eff8:	460b      	mov	r3, r1
 800effa:	4630      	mov	r0, r6
 800effc:	4639      	mov	r1, r7
 800effe:	f7f1 f94d 	bl	800029c <__adddf3>
 800f002:	9a07      	ldr	r2, [sp, #28]
 800f004:	4b37      	ldr	r3, [pc, #220]	; (800f0e4 <__ieee754_pow+0x774>)
 800f006:	4413      	add	r3, r2
 800f008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f00c:	f7f1 f946 	bl	800029c <__adddf3>
 800f010:	4682      	mov	sl, r0
 800f012:	9805      	ldr	r0, [sp, #20]
 800f014:	468b      	mov	fp, r1
 800f016:	f7f1 fa8d 	bl	8000534 <__aeabi_i2d>
 800f01a:	9a07      	ldr	r2, [sp, #28]
 800f01c:	4b32      	ldr	r3, [pc, #200]	; (800f0e8 <__ieee754_pow+0x778>)
 800f01e:	4413      	add	r3, r2
 800f020:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f024:	4606      	mov	r6, r0
 800f026:	460f      	mov	r7, r1
 800f028:	4652      	mov	r2, sl
 800f02a:	465b      	mov	r3, fp
 800f02c:	ec51 0b18 	vmov	r0, r1, d8
 800f030:	f7f1 f934 	bl	800029c <__adddf3>
 800f034:	4642      	mov	r2, r8
 800f036:	464b      	mov	r3, r9
 800f038:	f7f1 f930 	bl	800029c <__adddf3>
 800f03c:	4632      	mov	r2, r6
 800f03e:	463b      	mov	r3, r7
 800f040:	f7f1 f92c 	bl	800029c <__adddf3>
 800f044:	2000      	movs	r0, #0
 800f046:	4632      	mov	r2, r6
 800f048:	463b      	mov	r3, r7
 800f04a:	4604      	mov	r4, r0
 800f04c:	460d      	mov	r5, r1
 800f04e:	f7f1 f923 	bl	8000298 <__aeabi_dsub>
 800f052:	4642      	mov	r2, r8
 800f054:	464b      	mov	r3, r9
 800f056:	f7f1 f91f 	bl	8000298 <__aeabi_dsub>
 800f05a:	ec53 2b18 	vmov	r2, r3, d8
 800f05e:	f7f1 f91b 	bl	8000298 <__aeabi_dsub>
 800f062:	4602      	mov	r2, r0
 800f064:	460b      	mov	r3, r1
 800f066:	4650      	mov	r0, sl
 800f068:	4659      	mov	r1, fp
 800f06a:	e610      	b.n	800ec8e <__ieee754_pow+0x31e>
 800f06c:	2401      	movs	r4, #1
 800f06e:	e6a1      	b.n	800edb4 <__ieee754_pow+0x444>
 800f070:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f0c0 <__ieee754_pow+0x750>
 800f074:	e617      	b.n	800eca6 <__ieee754_pow+0x336>
 800f076:	bf00      	nop
 800f078:	4a454eef 	.word	0x4a454eef
 800f07c:	3fca7e28 	.word	0x3fca7e28
 800f080:	93c9db65 	.word	0x93c9db65
 800f084:	3fcd864a 	.word	0x3fcd864a
 800f088:	a91d4101 	.word	0xa91d4101
 800f08c:	3fd17460 	.word	0x3fd17460
 800f090:	518f264d 	.word	0x518f264d
 800f094:	3fd55555 	.word	0x3fd55555
 800f098:	db6fabff 	.word	0xdb6fabff
 800f09c:	3fdb6db6 	.word	0x3fdb6db6
 800f0a0:	33333303 	.word	0x33333303
 800f0a4:	3fe33333 	.word	0x3fe33333
 800f0a8:	e0000000 	.word	0xe0000000
 800f0ac:	3feec709 	.word	0x3feec709
 800f0b0:	dc3a03fd 	.word	0xdc3a03fd
 800f0b4:	3feec709 	.word	0x3feec709
 800f0b8:	145b01f5 	.word	0x145b01f5
 800f0bc:	be3e2fe0 	.word	0xbe3e2fe0
 800f0c0:	00000000 	.word	0x00000000
 800f0c4:	3ff00000 	.word	0x3ff00000
 800f0c8:	7ff00000 	.word	0x7ff00000
 800f0cc:	43400000 	.word	0x43400000
 800f0d0:	0003988e 	.word	0x0003988e
 800f0d4:	000bb679 	.word	0x000bb679
 800f0d8:	0800fc38 	.word	0x0800fc38
 800f0dc:	3ff00000 	.word	0x3ff00000
 800f0e0:	40080000 	.word	0x40080000
 800f0e4:	0800fc58 	.word	0x0800fc58
 800f0e8:	0800fc48 	.word	0x0800fc48
 800f0ec:	a3b5      	add	r3, pc, #724	; (adr r3, 800f3c4 <__ieee754_pow+0xa54>)
 800f0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f2:	4640      	mov	r0, r8
 800f0f4:	4649      	mov	r1, r9
 800f0f6:	f7f1 f8d1 	bl	800029c <__adddf3>
 800f0fa:	4622      	mov	r2, r4
 800f0fc:	ec41 0b1a 	vmov	d10, r0, r1
 800f100:	462b      	mov	r3, r5
 800f102:	4630      	mov	r0, r6
 800f104:	4639      	mov	r1, r7
 800f106:	f7f1 f8c7 	bl	8000298 <__aeabi_dsub>
 800f10a:	4602      	mov	r2, r0
 800f10c:	460b      	mov	r3, r1
 800f10e:	ec51 0b1a 	vmov	r0, r1, d10
 800f112:	f7f1 fd09 	bl	8000b28 <__aeabi_dcmpgt>
 800f116:	2800      	cmp	r0, #0
 800f118:	f47f ae04 	bne.w	800ed24 <__ieee754_pow+0x3b4>
 800f11c:	4aa4      	ldr	r2, [pc, #656]	; (800f3b0 <__ieee754_pow+0xa40>)
 800f11e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f122:	4293      	cmp	r3, r2
 800f124:	f340 8108 	ble.w	800f338 <__ieee754_pow+0x9c8>
 800f128:	151b      	asrs	r3, r3, #20
 800f12a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f12e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f132:	fa4a f303 	asr.w	r3, sl, r3
 800f136:	445b      	add	r3, fp
 800f138:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f13c:	4e9d      	ldr	r6, [pc, #628]	; (800f3b4 <__ieee754_pow+0xa44>)
 800f13e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f142:	4116      	asrs	r6, r2
 800f144:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f148:	2000      	movs	r0, #0
 800f14a:	ea23 0106 	bic.w	r1, r3, r6
 800f14e:	f1c2 0214 	rsb	r2, r2, #20
 800f152:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f156:	fa4a fa02 	asr.w	sl, sl, r2
 800f15a:	f1bb 0f00 	cmp.w	fp, #0
 800f15e:	4602      	mov	r2, r0
 800f160:	460b      	mov	r3, r1
 800f162:	4620      	mov	r0, r4
 800f164:	4629      	mov	r1, r5
 800f166:	bfb8      	it	lt
 800f168:	f1ca 0a00 	rsblt	sl, sl, #0
 800f16c:	f7f1 f894 	bl	8000298 <__aeabi_dsub>
 800f170:	ec41 0b19 	vmov	d9, r0, r1
 800f174:	4642      	mov	r2, r8
 800f176:	464b      	mov	r3, r9
 800f178:	ec51 0b19 	vmov	r0, r1, d9
 800f17c:	f7f1 f88e 	bl	800029c <__adddf3>
 800f180:	a37b      	add	r3, pc, #492	; (adr r3, 800f370 <__ieee754_pow+0xa00>)
 800f182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f186:	2000      	movs	r0, #0
 800f188:	4604      	mov	r4, r0
 800f18a:	460d      	mov	r5, r1
 800f18c:	f7f1 fa3c 	bl	8000608 <__aeabi_dmul>
 800f190:	ec53 2b19 	vmov	r2, r3, d9
 800f194:	4606      	mov	r6, r0
 800f196:	460f      	mov	r7, r1
 800f198:	4620      	mov	r0, r4
 800f19a:	4629      	mov	r1, r5
 800f19c:	f7f1 f87c 	bl	8000298 <__aeabi_dsub>
 800f1a0:	4602      	mov	r2, r0
 800f1a2:	460b      	mov	r3, r1
 800f1a4:	4640      	mov	r0, r8
 800f1a6:	4649      	mov	r1, r9
 800f1a8:	f7f1 f876 	bl	8000298 <__aeabi_dsub>
 800f1ac:	a372      	add	r3, pc, #456	; (adr r3, 800f378 <__ieee754_pow+0xa08>)
 800f1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b2:	f7f1 fa29 	bl	8000608 <__aeabi_dmul>
 800f1b6:	a372      	add	r3, pc, #456	; (adr r3, 800f380 <__ieee754_pow+0xa10>)
 800f1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1bc:	4680      	mov	r8, r0
 800f1be:	4689      	mov	r9, r1
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	4629      	mov	r1, r5
 800f1c4:	f7f1 fa20 	bl	8000608 <__aeabi_dmul>
 800f1c8:	4602      	mov	r2, r0
 800f1ca:	460b      	mov	r3, r1
 800f1cc:	4640      	mov	r0, r8
 800f1ce:	4649      	mov	r1, r9
 800f1d0:	f7f1 f864 	bl	800029c <__adddf3>
 800f1d4:	4604      	mov	r4, r0
 800f1d6:	460d      	mov	r5, r1
 800f1d8:	4602      	mov	r2, r0
 800f1da:	460b      	mov	r3, r1
 800f1dc:	4630      	mov	r0, r6
 800f1de:	4639      	mov	r1, r7
 800f1e0:	f7f1 f85c 	bl	800029c <__adddf3>
 800f1e4:	4632      	mov	r2, r6
 800f1e6:	463b      	mov	r3, r7
 800f1e8:	4680      	mov	r8, r0
 800f1ea:	4689      	mov	r9, r1
 800f1ec:	f7f1 f854 	bl	8000298 <__aeabi_dsub>
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	460b      	mov	r3, r1
 800f1f4:	4620      	mov	r0, r4
 800f1f6:	4629      	mov	r1, r5
 800f1f8:	f7f1 f84e 	bl	8000298 <__aeabi_dsub>
 800f1fc:	4642      	mov	r2, r8
 800f1fe:	4606      	mov	r6, r0
 800f200:	460f      	mov	r7, r1
 800f202:	464b      	mov	r3, r9
 800f204:	4640      	mov	r0, r8
 800f206:	4649      	mov	r1, r9
 800f208:	f7f1 f9fe 	bl	8000608 <__aeabi_dmul>
 800f20c:	a35e      	add	r3, pc, #376	; (adr r3, 800f388 <__ieee754_pow+0xa18>)
 800f20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f212:	4604      	mov	r4, r0
 800f214:	460d      	mov	r5, r1
 800f216:	f7f1 f9f7 	bl	8000608 <__aeabi_dmul>
 800f21a:	a35d      	add	r3, pc, #372	; (adr r3, 800f390 <__ieee754_pow+0xa20>)
 800f21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f220:	f7f1 f83a 	bl	8000298 <__aeabi_dsub>
 800f224:	4622      	mov	r2, r4
 800f226:	462b      	mov	r3, r5
 800f228:	f7f1 f9ee 	bl	8000608 <__aeabi_dmul>
 800f22c:	a35a      	add	r3, pc, #360	; (adr r3, 800f398 <__ieee754_pow+0xa28>)
 800f22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f232:	f7f1 f833 	bl	800029c <__adddf3>
 800f236:	4622      	mov	r2, r4
 800f238:	462b      	mov	r3, r5
 800f23a:	f7f1 f9e5 	bl	8000608 <__aeabi_dmul>
 800f23e:	a358      	add	r3, pc, #352	; (adr r3, 800f3a0 <__ieee754_pow+0xa30>)
 800f240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f244:	f7f1 f828 	bl	8000298 <__aeabi_dsub>
 800f248:	4622      	mov	r2, r4
 800f24a:	462b      	mov	r3, r5
 800f24c:	f7f1 f9dc 	bl	8000608 <__aeabi_dmul>
 800f250:	a355      	add	r3, pc, #340	; (adr r3, 800f3a8 <__ieee754_pow+0xa38>)
 800f252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f256:	f7f1 f821 	bl	800029c <__adddf3>
 800f25a:	4622      	mov	r2, r4
 800f25c:	462b      	mov	r3, r5
 800f25e:	f7f1 f9d3 	bl	8000608 <__aeabi_dmul>
 800f262:	4602      	mov	r2, r0
 800f264:	460b      	mov	r3, r1
 800f266:	4640      	mov	r0, r8
 800f268:	4649      	mov	r1, r9
 800f26a:	f7f1 f815 	bl	8000298 <__aeabi_dsub>
 800f26e:	4604      	mov	r4, r0
 800f270:	460d      	mov	r5, r1
 800f272:	4602      	mov	r2, r0
 800f274:	460b      	mov	r3, r1
 800f276:	4640      	mov	r0, r8
 800f278:	4649      	mov	r1, r9
 800f27a:	f7f1 f9c5 	bl	8000608 <__aeabi_dmul>
 800f27e:	2200      	movs	r2, #0
 800f280:	ec41 0b19 	vmov	d9, r0, r1
 800f284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f288:	4620      	mov	r0, r4
 800f28a:	4629      	mov	r1, r5
 800f28c:	f7f1 f804 	bl	8000298 <__aeabi_dsub>
 800f290:	4602      	mov	r2, r0
 800f292:	460b      	mov	r3, r1
 800f294:	ec51 0b19 	vmov	r0, r1, d9
 800f298:	f7f1 fae0 	bl	800085c <__aeabi_ddiv>
 800f29c:	4632      	mov	r2, r6
 800f29e:	4604      	mov	r4, r0
 800f2a0:	460d      	mov	r5, r1
 800f2a2:	463b      	mov	r3, r7
 800f2a4:	4640      	mov	r0, r8
 800f2a6:	4649      	mov	r1, r9
 800f2a8:	f7f1 f9ae 	bl	8000608 <__aeabi_dmul>
 800f2ac:	4632      	mov	r2, r6
 800f2ae:	463b      	mov	r3, r7
 800f2b0:	f7f0 fff4 	bl	800029c <__adddf3>
 800f2b4:	4602      	mov	r2, r0
 800f2b6:	460b      	mov	r3, r1
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	4629      	mov	r1, r5
 800f2bc:	f7f0 ffec 	bl	8000298 <__aeabi_dsub>
 800f2c0:	4642      	mov	r2, r8
 800f2c2:	464b      	mov	r3, r9
 800f2c4:	f7f0 ffe8 	bl	8000298 <__aeabi_dsub>
 800f2c8:	460b      	mov	r3, r1
 800f2ca:	4602      	mov	r2, r0
 800f2cc:	493a      	ldr	r1, [pc, #232]	; (800f3b8 <__ieee754_pow+0xa48>)
 800f2ce:	2000      	movs	r0, #0
 800f2d0:	f7f0 ffe2 	bl	8000298 <__aeabi_dsub>
 800f2d4:	ec41 0b10 	vmov	d0, r0, r1
 800f2d8:	ee10 3a90 	vmov	r3, s1
 800f2dc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f2e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2e4:	da2b      	bge.n	800f33e <__ieee754_pow+0x9ce>
 800f2e6:	4650      	mov	r0, sl
 800f2e8:	f000 f966 	bl	800f5b8 <scalbn>
 800f2ec:	ec51 0b10 	vmov	r0, r1, d0
 800f2f0:	ec53 2b18 	vmov	r2, r3, d8
 800f2f4:	f7ff bbed 	b.w	800ead2 <__ieee754_pow+0x162>
 800f2f8:	4b30      	ldr	r3, [pc, #192]	; (800f3bc <__ieee754_pow+0xa4c>)
 800f2fa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f2fe:	429e      	cmp	r6, r3
 800f300:	f77f af0c 	ble.w	800f11c <__ieee754_pow+0x7ac>
 800f304:	4b2e      	ldr	r3, [pc, #184]	; (800f3c0 <__ieee754_pow+0xa50>)
 800f306:	440b      	add	r3, r1
 800f308:	4303      	orrs	r3, r0
 800f30a:	d009      	beq.n	800f320 <__ieee754_pow+0x9b0>
 800f30c:	ec51 0b18 	vmov	r0, r1, d8
 800f310:	2200      	movs	r2, #0
 800f312:	2300      	movs	r3, #0
 800f314:	f7f1 fbea 	bl	8000aec <__aeabi_dcmplt>
 800f318:	3800      	subs	r0, #0
 800f31a:	bf18      	it	ne
 800f31c:	2001      	movne	r0, #1
 800f31e:	e447      	b.n	800ebb0 <__ieee754_pow+0x240>
 800f320:	4622      	mov	r2, r4
 800f322:	462b      	mov	r3, r5
 800f324:	f7f0 ffb8 	bl	8000298 <__aeabi_dsub>
 800f328:	4642      	mov	r2, r8
 800f32a:	464b      	mov	r3, r9
 800f32c:	f7f1 fbf2 	bl	8000b14 <__aeabi_dcmpge>
 800f330:	2800      	cmp	r0, #0
 800f332:	f43f aef3 	beq.w	800f11c <__ieee754_pow+0x7ac>
 800f336:	e7e9      	b.n	800f30c <__ieee754_pow+0x99c>
 800f338:	f04f 0a00 	mov.w	sl, #0
 800f33c:	e71a      	b.n	800f174 <__ieee754_pow+0x804>
 800f33e:	ec51 0b10 	vmov	r0, r1, d0
 800f342:	4619      	mov	r1, r3
 800f344:	e7d4      	b.n	800f2f0 <__ieee754_pow+0x980>
 800f346:	491c      	ldr	r1, [pc, #112]	; (800f3b8 <__ieee754_pow+0xa48>)
 800f348:	2000      	movs	r0, #0
 800f34a:	f7ff bb30 	b.w	800e9ae <__ieee754_pow+0x3e>
 800f34e:	2000      	movs	r0, #0
 800f350:	2100      	movs	r1, #0
 800f352:	f7ff bb2c 	b.w	800e9ae <__ieee754_pow+0x3e>
 800f356:	4630      	mov	r0, r6
 800f358:	4639      	mov	r1, r7
 800f35a:	f7ff bb28 	b.w	800e9ae <__ieee754_pow+0x3e>
 800f35e:	9204      	str	r2, [sp, #16]
 800f360:	f7ff bb7a 	b.w	800ea58 <__ieee754_pow+0xe8>
 800f364:	2300      	movs	r3, #0
 800f366:	f7ff bb64 	b.w	800ea32 <__ieee754_pow+0xc2>
 800f36a:	bf00      	nop
 800f36c:	f3af 8000 	nop.w
 800f370:	00000000 	.word	0x00000000
 800f374:	3fe62e43 	.word	0x3fe62e43
 800f378:	fefa39ef 	.word	0xfefa39ef
 800f37c:	3fe62e42 	.word	0x3fe62e42
 800f380:	0ca86c39 	.word	0x0ca86c39
 800f384:	be205c61 	.word	0xbe205c61
 800f388:	72bea4d0 	.word	0x72bea4d0
 800f38c:	3e663769 	.word	0x3e663769
 800f390:	c5d26bf1 	.word	0xc5d26bf1
 800f394:	3ebbbd41 	.word	0x3ebbbd41
 800f398:	af25de2c 	.word	0xaf25de2c
 800f39c:	3f11566a 	.word	0x3f11566a
 800f3a0:	16bebd93 	.word	0x16bebd93
 800f3a4:	3f66c16c 	.word	0x3f66c16c
 800f3a8:	5555553e 	.word	0x5555553e
 800f3ac:	3fc55555 	.word	0x3fc55555
 800f3b0:	3fe00000 	.word	0x3fe00000
 800f3b4:	000fffff 	.word	0x000fffff
 800f3b8:	3ff00000 	.word	0x3ff00000
 800f3bc:	4090cbff 	.word	0x4090cbff
 800f3c0:	3f6f3400 	.word	0x3f6f3400
 800f3c4:	652b82fe 	.word	0x652b82fe
 800f3c8:	3c971547 	.word	0x3c971547

0800f3cc <__ieee754_sqrt>:
 800f3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3d0:	ec55 4b10 	vmov	r4, r5, d0
 800f3d4:	4e55      	ldr	r6, [pc, #340]	; (800f52c <__ieee754_sqrt+0x160>)
 800f3d6:	43ae      	bics	r6, r5
 800f3d8:	ee10 0a10 	vmov	r0, s0
 800f3dc:	ee10 3a10 	vmov	r3, s0
 800f3e0:	462a      	mov	r2, r5
 800f3e2:	4629      	mov	r1, r5
 800f3e4:	d110      	bne.n	800f408 <__ieee754_sqrt+0x3c>
 800f3e6:	ee10 2a10 	vmov	r2, s0
 800f3ea:	462b      	mov	r3, r5
 800f3ec:	f7f1 f90c 	bl	8000608 <__aeabi_dmul>
 800f3f0:	4602      	mov	r2, r0
 800f3f2:	460b      	mov	r3, r1
 800f3f4:	4620      	mov	r0, r4
 800f3f6:	4629      	mov	r1, r5
 800f3f8:	f7f0 ff50 	bl	800029c <__adddf3>
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	460d      	mov	r5, r1
 800f400:	ec45 4b10 	vmov	d0, r4, r5
 800f404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f408:	2d00      	cmp	r5, #0
 800f40a:	dc10      	bgt.n	800f42e <__ieee754_sqrt+0x62>
 800f40c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f410:	4330      	orrs	r0, r6
 800f412:	d0f5      	beq.n	800f400 <__ieee754_sqrt+0x34>
 800f414:	b15d      	cbz	r5, 800f42e <__ieee754_sqrt+0x62>
 800f416:	ee10 2a10 	vmov	r2, s0
 800f41a:	462b      	mov	r3, r5
 800f41c:	ee10 0a10 	vmov	r0, s0
 800f420:	f7f0 ff3a 	bl	8000298 <__aeabi_dsub>
 800f424:	4602      	mov	r2, r0
 800f426:	460b      	mov	r3, r1
 800f428:	f7f1 fa18 	bl	800085c <__aeabi_ddiv>
 800f42c:	e7e6      	b.n	800f3fc <__ieee754_sqrt+0x30>
 800f42e:	1512      	asrs	r2, r2, #20
 800f430:	d074      	beq.n	800f51c <__ieee754_sqrt+0x150>
 800f432:	07d4      	lsls	r4, r2, #31
 800f434:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f438:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f43c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f440:	bf5e      	ittt	pl
 800f442:	0fda      	lsrpl	r2, r3, #31
 800f444:	005b      	lslpl	r3, r3, #1
 800f446:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f44a:	2400      	movs	r4, #0
 800f44c:	0fda      	lsrs	r2, r3, #31
 800f44e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f452:	107f      	asrs	r7, r7, #1
 800f454:	005b      	lsls	r3, r3, #1
 800f456:	2516      	movs	r5, #22
 800f458:	4620      	mov	r0, r4
 800f45a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f45e:	1886      	adds	r6, r0, r2
 800f460:	428e      	cmp	r6, r1
 800f462:	bfde      	ittt	le
 800f464:	1b89      	suble	r1, r1, r6
 800f466:	18b0      	addle	r0, r6, r2
 800f468:	18a4      	addle	r4, r4, r2
 800f46a:	0049      	lsls	r1, r1, #1
 800f46c:	3d01      	subs	r5, #1
 800f46e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f472:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f476:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f47a:	d1f0      	bne.n	800f45e <__ieee754_sqrt+0x92>
 800f47c:	462a      	mov	r2, r5
 800f47e:	f04f 0e20 	mov.w	lr, #32
 800f482:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f486:	4281      	cmp	r1, r0
 800f488:	eb06 0c05 	add.w	ip, r6, r5
 800f48c:	dc02      	bgt.n	800f494 <__ieee754_sqrt+0xc8>
 800f48e:	d113      	bne.n	800f4b8 <__ieee754_sqrt+0xec>
 800f490:	459c      	cmp	ip, r3
 800f492:	d811      	bhi.n	800f4b8 <__ieee754_sqrt+0xec>
 800f494:	f1bc 0f00 	cmp.w	ip, #0
 800f498:	eb0c 0506 	add.w	r5, ip, r6
 800f49c:	da43      	bge.n	800f526 <__ieee754_sqrt+0x15a>
 800f49e:	2d00      	cmp	r5, #0
 800f4a0:	db41      	blt.n	800f526 <__ieee754_sqrt+0x15a>
 800f4a2:	f100 0801 	add.w	r8, r0, #1
 800f4a6:	1a09      	subs	r1, r1, r0
 800f4a8:	459c      	cmp	ip, r3
 800f4aa:	bf88      	it	hi
 800f4ac:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f4b0:	eba3 030c 	sub.w	r3, r3, ip
 800f4b4:	4432      	add	r2, r6
 800f4b6:	4640      	mov	r0, r8
 800f4b8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f4bc:	f1be 0e01 	subs.w	lr, lr, #1
 800f4c0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f4c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f4c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f4cc:	d1db      	bne.n	800f486 <__ieee754_sqrt+0xba>
 800f4ce:	430b      	orrs	r3, r1
 800f4d0:	d006      	beq.n	800f4e0 <__ieee754_sqrt+0x114>
 800f4d2:	1c50      	adds	r0, r2, #1
 800f4d4:	bf13      	iteet	ne
 800f4d6:	3201      	addne	r2, #1
 800f4d8:	3401      	addeq	r4, #1
 800f4da:	4672      	moveq	r2, lr
 800f4dc:	f022 0201 	bicne.w	r2, r2, #1
 800f4e0:	1063      	asrs	r3, r4, #1
 800f4e2:	0852      	lsrs	r2, r2, #1
 800f4e4:	07e1      	lsls	r1, r4, #31
 800f4e6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f4ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f4ee:	bf48      	it	mi
 800f4f0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f4f4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f4f8:	4614      	mov	r4, r2
 800f4fa:	e781      	b.n	800f400 <__ieee754_sqrt+0x34>
 800f4fc:	0ad9      	lsrs	r1, r3, #11
 800f4fe:	3815      	subs	r0, #21
 800f500:	055b      	lsls	r3, r3, #21
 800f502:	2900      	cmp	r1, #0
 800f504:	d0fa      	beq.n	800f4fc <__ieee754_sqrt+0x130>
 800f506:	02cd      	lsls	r5, r1, #11
 800f508:	d50a      	bpl.n	800f520 <__ieee754_sqrt+0x154>
 800f50a:	f1c2 0420 	rsb	r4, r2, #32
 800f50e:	fa23 f404 	lsr.w	r4, r3, r4
 800f512:	1e55      	subs	r5, r2, #1
 800f514:	4093      	lsls	r3, r2
 800f516:	4321      	orrs	r1, r4
 800f518:	1b42      	subs	r2, r0, r5
 800f51a:	e78a      	b.n	800f432 <__ieee754_sqrt+0x66>
 800f51c:	4610      	mov	r0, r2
 800f51e:	e7f0      	b.n	800f502 <__ieee754_sqrt+0x136>
 800f520:	0049      	lsls	r1, r1, #1
 800f522:	3201      	adds	r2, #1
 800f524:	e7ef      	b.n	800f506 <__ieee754_sqrt+0x13a>
 800f526:	4680      	mov	r8, r0
 800f528:	e7bd      	b.n	800f4a6 <__ieee754_sqrt+0xda>
 800f52a:	bf00      	nop
 800f52c:	7ff00000 	.word	0x7ff00000

0800f530 <with_errno>:
 800f530:	b570      	push	{r4, r5, r6, lr}
 800f532:	4604      	mov	r4, r0
 800f534:	460d      	mov	r5, r1
 800f536:	4616      	mov	r6, r2
 800f538:	f7fc f9ca 	bl	800b8d0 <__errno>
 800f53c:	4629      	mov	r1, r5
 800f53e:	6006      	str	r6, [r0, #0]
 800f540:	4620      	mov	r0, r4
 800f542:	bd70      	pop	{r4, r5, r6, pc}

0800f544 <xflow>:
 800f544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f546:	4614      	mov	r4, r2
 800f548:	461d      	mov	r5, r3
 800f54a:	b108      	cbz	r0, 800f550 <xflow+0xc>
 800f54c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f550:	e9cd 2300 	strd	r2, r3, [sp]
 800f554:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f558:	4620      	mov	r0, r4
 800f55a:	4629      	mov	r1, r5
 800f55c:	f7f1 f854 	bl	8000608 <__aeabi_dmul>
 800f560:	2222      	movs	r2, #34	; 0x22
 800f562:	b003      	add	sp, #12
 800f564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f568:	f7ff bfe2 	b.w	800f530 <with_errno>

0800f56c <__math_uflow>:
 800f56c:	b508      	push	{r3, lr}
 800f56e:	2200      	movs	r2, #0
 800f570:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f574:	f7ff ffe6 	bl	800f544 <xflow>
 800f578:	ec41 0b10 	vmov	d0, r0, r1
 800f57c:	bd08      	pop	{r3, pc}

0800f57e <__math_oflow>:
 800f57e:	b508      	push	{r3, lr}
 800f580:	2200      	movs	r2, #0
 800f582:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f586:	f7ff ffdd 	bl	800f544 <xflow>
 800f58a:	ec41 0b10 	vmov	d0, r0, r1
 800f58e:	bd08      	pop	{r3, pc}

0800f590 <fabs>:
 800f590:	ec51 0b10 	vmov	r0, r1, d0
 800f594:	ee10 2a10 	vmov	r2, s0
 800f598:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f59c:	ec43 2b10 	vmov	d0, r2, r3
 800f5a0:	4770      	bx	lr

0800f5a2 <finite>:
 800f5a2:	b082      	sub	sp, #8
 800f5a4:	ed8d 0b00 	vstr	d0, [sp]
 800f5a8:	9801      	ldr	r0, [sp, #4]
 800f5aa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f5ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f5b2:	0fc0      	lsrs	r0, r0, #31
 800f5b4:	b002      	add	sp, #8
 800f5b6:	4770      	bx	lr

0800f5b8 <scalbn>:
 800f5b8:	b570      	push	{r4, r5, r6, lr}
 800f5ba:	ec55 4b10 	vmov	r4, r5, d0
 800f5be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f5c2:	4606      	mov	r6, r0
 800f5c4:	462b      	mov	r3, r5
 800f5c6:	b99a      	cbnz	r2, 800f5f0 <scalbn+0x38>
 800f5c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f5cc:	4323      	orrs	r3, r4
 800f5ce:	d036      	beq.n	800f63e <scalbn+0x86>
 800f5d0:	4b39      	ldr	r3, [pc, #228]	; (800f6b8 <scalbn+0x100>)
 800f5d2:	4629      	mov	r1, r5
 800f5d4:	ee10 0a10 	vmov	r0, s0
 800f5d8:	2200      	movs	r2, #0
 800f5da:	f7f1 f815 	bl	8000608 <__aeabi_dmul>
 800f5de:	4b37      	ldr	r3, [pc, #220]	; (800f6bc <scalbn+0x104>)
 800f5e0:	429e      	cmp	r6, r3
 800f5e2:	4604      	mov	r4, r0
 800f5e4:	460d      	mov	r5, r1
 800f5e6:	da10      	bge.n	800f60a <scalbn+0x52>
 800f5e8:	a32b      	add	r3, pc, #172	; (adr r3, 800f698 <scalbn+0xe0>)
 800f5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ee:	e03a      	b.n	800f666 <scalbn+0xae>
 800f5f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f5f4:	428a      	cmp	r2, r1
 800f5f6:	d10c      	bne.n	800f612 <scalbn+0x5a>
 800f5f8:	ee10 2a10 	vmov	r2, s0
 800f5fc:	4620      	mov	r0, r4
 800f5fe:	4629      	mov	r1, r5
 800f600:	f7f0 fe4c 	bl	800029c <__adddf3>
 800f604:	4604      	mov	r4, r0
 800f606:	460d      	mov	r5, r1
 800f608:	e019      	b.n	800f63e <scalbn+0x86>
 800f60a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f60e:	460b      	mov	r3, r1
 800f610:	3a36      	subs	r2, #54	; 0x36
 800f612:	4432      	add	r2, r6
 800f614:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f618:	428a      	cmp	r2, r1
 800f61a:	dd08      	ble.n	800f62e <scalbn+0x76>
 800f61c:	2d00      	cmp	r5, #0
 800f61e:	a120      	add	r1, pc, #128	; (adr r1, 800f6a0 <scalbn+0xe8>)
 800f620:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f624:	da1c      	bge.n	800f660 <scalbn+0xa8>
 800f626:	a120      	add	r1, pc, #128	; (adr r1, 800f6a8 <scalbn+0xf0>)
 800f628:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f62c:	e018      	b.n	800f660 <scalbn+0xa8>
 800f62e:	2a00      	cmp	r2, #0
 800f630:	dd08      	ble.n	800f644 <scalbn+0x8c>
 800f632:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f636:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f63a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f63e:	ec45 4b10 	vmov	d0, r4, r5
 800f642:	bd70      	pop	{r4, r5, r6, pc}
 800f644:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f648:	da19      	bge.n	800f67e <scalbn+0xc6>
 800f64a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f64e:	429e      	cmp	r6, r3
 800f650:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f654:	dd0a      	ble.n	800f66c <scalbn+0xb4>
 800f656:	a112      	add	r1, pc, #72	; (adr r1, 800f6a0 <scalbn+0xe8>)
 800f658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d1e2      	bne.n	800f626 <scalbn+0x6e>
 800f660:	a30f      	add	r3, pc, #60	; (adr r3, 800f6a0 <scalbn+0xe8>)
 800f662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f666:	f7f0 ffcf 	bl	8000608 <__aeabi_dmul>
 800f66a:	e7cb      	b.n	800f604 <scalbn+0x4c>
 800f66c:	a10a      	add	r1, pc, #40	; (adr r1, 800f698 <scalbn+0xe0>)
 800f66e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d0b8      	beq.n	800f5e8 <scalbn+0x30>
 800f676:	a10e      	add	r1, pc, #56	; (adr r1, 800f6b0 <scalbn+0xf8>)
 800f678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f67c:	e7b4      	b.n	800f5e8 <scalbn+0x30>
 800f67e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f682:	3236      	adds	r2, #54	; 0x36
 800f684:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f688:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f68c:	4620      	mov	r0, r4
 800f68e:	4b0c      	ldr	r3, [pc, #48]	; (800f6c0 <scalbn+0x108>)
 800f690:	2200      	movs	r2, #0
 800f692:	e7e8      	b.n	800f666 <scalbn+0xae>
 800f694:	f3af 8000 	nop.w
 800f698:	c2f8f359 	.word	0xc2f8f359
 800f69c:	01a56e1f 	.word	0x01a56e1f
 800f6a0:	8800759c 	.word	0x8800759c
 800f6a4:	7e37e43c 	.word	0x7e37e43c
 800f6a8:	8800759c 	.word	0x8800759c
 800f6ac:	fe37e43c 	.word	0xfe37e43c
 800f6b0:	c2f8f359 	.word	0xc2f8f359
 800f6b4:	81a56e1f 	.word	0x81a56e1f
 800f6b8:	43500000 	.word	0x43500000
 800f6bc:	ffff3cb0 	.word	0xffff3cb0
 800f6c0:	3c900000 	.word	0x3c900000

0800f6c4 <_init>:
 800f6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6c6:	bf00      	nop
 800f6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6ca:	bc08      	pop	{r3}
 800f6cc:	469e      	mov	lr, r3
 800f6ce:	4770      	bx	lr

0800f6d0 <_fini>:
 800f6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6d2:	bf00      	nop
 800f6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6d6:	bc08      	pop	{r3}
 800f6d8:	469e      	mov	lr, r3
 800f6da:	4770      	bx	lr
